<?php
/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */

require_once('class.ilDBPdo.php');

/**
 * Class ilDBPdoPostgreSQL
 *
 * @author Fabian Schmid <fs@studer-raimann.ch>
 */
class ilDBPdoPostgreSQL extends ilDBPdo implements ilDBInterface {

	/**
	 * @var int
	 */
	protected $port = 5432;
	protected $additional_attributes = array(
		PDO::ATTR_EMULATE_PREPARES => true,
		PDO::ATTR_ERRMODE          => PDO::ERRMODE_EXCEPTION,
	);


	public function connect() {
		return parent::connect(); // TODO: Change the autogenerated stub
	}


	public function generateDSN() {
		if (!$this->getPort()) {
			$this->setPort(5432);
		}
		$this->dsn = 'pgsql:host=' . $this->getHost() . ';port=' . $this->getPort() . ';dbname=' . $this->getDbname() . ';user=ilias;password=ilias';
	}


	/**
	 * @return bool
	 */
	public function supportsFulltext() {
		return false;
	}


	/**
	 * @param $table_name string
	 *
	 * @return bool
	 */
	public function tableExists($table_name) {
		$tables = $this->listTables();

		return in_array($table_name, $tables);
	}


	public function listTables() {
		$q = "SELECT tablename FROM pg_catalog.pg_tables WHERE tableowner='ilias'";
		$r = $this->pdo->query($q);
		$tables = array();
		while ($data = $r->fetchColumn()) {
			if (strpos($data, '_seq') === false) {
				$tables[] = $data;
			}
		}

		return $tables;
	}


	public function quote($value, $type = null) {
		switch ($type) {
			case ilDBConstants::T_INTEGER:
				return (int)$value;
				break;

			default:
				$value = trim($value);
				return parent::quote($value, $type); // TODO: Change the autogenerated stub

		}
	}


	/**
	 * @param string $table_name
	 * @return mixed
	 * @throws \ilDatabaseException
	 */
	public function nextId($table_name) {
		$sequence_name = $table_name . '_seq';
		$query = "SELECT NEXTVAL('$sequence_name')";
		$result = $this->query($query, 'integer');
		$data = $result->fetchObject();

		return $data->nextval;
	}
}

