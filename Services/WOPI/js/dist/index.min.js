/**
 * This file is part of ILIAS, a powerful learning management system
 * published by ILIAS open source e-Learning e.V.
 *
 * ILIAS is licensed with the GPL-3.0,
 * see https://www.gnu.org/licenses/gpl-3.0.en.html
 * You should have received a copy of said license along with the
 * source code, too.
 *
 * If this is not the case or you just want to try ILIAS, you'll find
 * us at:
 * https://www.ilias.de
 * https://github.com/ILIAS-eLearning
 */
!function(e,t,i){"use strict";function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=s(e),a=s(t),o=s(i);a.default.WOPI={modified:!1,listeners:{}},a.default.WOPI.bindCloseSignal=function(e,t){o.default(`#${e}`).on(t,((e,t)=>{// we need to use jQuery here since signals are working with jQuery
const i=t.options.target_url||null;return null===i||(this.waitForSave().then((()=>{window.location=i})).catch((()=>{
// currently no special handling for errors
window.location=i})),e.stopPropagation(),e.preventDefault(),!1)}))},a.default.WOPI.waitForSave=function(){return new Promise(((e,t)=>{const i=n.default.createElement("div");i.id="c-embedded-wopi-overlay",i.style.position="fixed",i.style.top="0",i.style.left="0",i.style.width="100%",i.style.height="100%",i.style.backgroundColor="rgba(255,255,255,0.7)",this.frameholder.appendChild(i),this.save().then((i=>{i?e(!0):t(new Error("not saved"))})).catch((e=>{t(e)}))}))},a.default.WOPI.save=function(){return new Promise(((e,t)=>{const i=setTimeout((()=>{t(new Error("timeout"))}),2e3);this.registerListener("Action_Save_Resp",(()=>{clearTimeout(i),e(!0)})),this.postMessage({MessageId:"Action_Save",SendTime:Date.now(),Values:{DontTerminateEdit:!0,DontSaveIfUnmodified:!0,Notify:!0}})}))},a.default.WOPI.windowResize=function(){const e=this.editorFrame.parentElement.offsetWidth-0,t=n.default.getElementsByClassName("il-layout-page-content")[0].clientHeight-n.default.getElementsByClassName("il_HeaderInner")[0].clientHeight-n.default.getElementsByTagName("footer")[0].clientHeight-100;this.editorFrame.setAttribute("width",e),this.editorFrame.setAttribute("height",t)},a.default.WOPI.init=function(){
// BUILD IFRAME
const e=n.default.getElementById("c-embedded-wopi"),t=e.getAttribute("data-token"),i=e.getAttribute("data-editor-url"),s=e.getAttribute("data-ttl"),o=n.default.createElement("iframe");
// read ttl, token and editor URL from data attributes
o.name="editor_frame",o.id="editor_frame",o.title="Office Frame",o.setAttribute("allowfullscreen","true"),o.setAttribute("allowtransparency","true"),o.setAttribute("frameBorder","0"),e.appendChild(o),this.frameholder=e,this.editorFrame=o,
// eslint-disable-next-line max-len
this.editorFrameWindow=o.contentWindow||o.contentDocument.document||o.contentDocument,this.windowResize();
// BUILD FORM
const r=n.default.createElement("form"),d=n.default.createElement("input"),l=n.default.createElement("input");r.method="POST",r.action=i,r.target="editor_frame",d.name="access_token",d.value=t,r.appendChild(d),l.name="access_token_ttl",l.value=s,r.appendChild(l),n.default.body.appendChild(r),
// SEND FORM
r.submit(),
// Listen to postMessages from the editor
window.addEventListener("message",(e=>{this.handleMessage(e)}),!1),this.registerListener("*",(e=>{})),
// Add event listener to receive messages from the editor
this.registerListener("App_LoadingStatus",(()=>{this.postMessage({MessageId:"Host_PostmessageReady",SendTime:Date.now(),Values:{}})})),
// Collabora
this.registerListener("Doc_ModifiedStatus",(e=>{this.modified=e.Modified??!1})),
// OnlyOffice
this.registerListener("Edit_Notification",(()=>{this.modified=!0})),
// Add event listener to resize the editor iframe
n.default.defaultView.addEventListener("resize",(()=>{a.default.WOPI.windowResize(o)})),
// resize after some time to make sure the editor is loaded and mainmenu has been collapsed
setTimeout((()=>{a.default.WOPI.windowResize(o)}),200)},a.default.WOPI.handleMessage=function(e){const t=JSON.parse(e.data),i=t.MessageId??null;this.listeners[i]&&this.listeners[i].forEach((e=>{e(t.Values)})),this.listeners["*"]&&this.listeners["*"].forEach((e=>{e(t)}))},a.default.WOPI.postMessage=function(e){this.editorFrameWindow.postMessage(JSON.stringify(e),"*")},a.default.WOPI.registerListener=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)}}(document,il,$);
