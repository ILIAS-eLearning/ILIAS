package de.ilias.services.transformation;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Adapter class around a given {@link DefaultHandler}, that fixes an issue in the
 * XML:FO String generated by ILIAS.
 * 
 * @author Per Pascal Seeland<pascal.seeland@tik.uni-stuttgart.de>
 */
public class ILIASFopDhAdapter extends DefaultHandler {

  private static Logger logger = LogManager.getLogger(ILIASFopDhAdapter.class);
  private DefaultHandler adaptie;

  public ILIASFopDhAdapter(DefaultHandler adaptie) {
    this.adaptie = adaptie;
  }

  @Override
  public InputSource resolveEntity(String publicId, String systemId) throws IOException, SAXException {
    return adaptie.resolveEntity(publicId, systemId);
  }

  @Override
  public void notationDecl(String name, String publicId, String systemId) throws SAXException {
    adaptie.notationDecl(name, publicId, systemId);
  }

  @Override
  public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName)
          throws SAXException {
    adaptie.unparsedEntityDecl(name, publicId, systemId, notationName);
  }

  @Override
  public void setDocumentLocator(Locator locator) {
    adaptie.setDocumentLocator(locator);
  }

  @Override
  public void startDocument() throws SAXException {
    adaptie.startDocument();
  }

  @Override
  public void endDocument() throws SAXException {
    adaptie.endDocument();
  }

  @Override
  public void startPrefixMapping(String prefix, String uri) throws SAXException {
    adaptie.startPrefixMapping(prefix, uri);
  }

  @Override
  public void endPrefixMapping(String prefix) throws SAXException {
    adaptie.endPrefixMapping(prefix);
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    logger.debug(uri + ':' + localName + ':' + qName);
    logger.debug(attributes);
    if ("fo:external-graphic".equals(qName)) {
      Attributes2Impl fixedAttributes = new Attributes2Impl(attributes);
      for (int i = 0; i < fixedAttributes.getLength(); i++) {
        logger.debug(fixedAttributes.getQName(i));
        if("src".equals(fixedAttributes.getQName(i))) {
          String oldValue = fixedAttributes.getValue(i);
          if(oldValue.startsWith("url(") && !oldValue.startsWith("url(file://") ) {
            fixedAttributes.setValue(i, oldValue.replace("url(", "url(file://")); 
          }
        }
      }
      adaptie.startElement(uri, localName, qName, fixedAttributes);
    } else {
      adaptie.startElement(uri, localName, qName, attributes);
    }
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    adaptie.endElement(uri, localName, qName);
  }

  @Override
  public void characters(char[] ch, int start, int length) throws SAXException {
    adaptie.characters(ch, start, length);
  }

  @Override
  public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
    adaptie.ignorableWhitespace(ch, start, length);
  }

  @Override
  public void processingInstruction(String target, String data) throws SAXException {
    adaptie.processingInstruction(target, data);
  }

  @Override
  public void skippedEntity(String name) throws SAXException {
    adaptie.skippedEntity(name);
  }

  @Override
  public void warning(SAXParseException e) throws SAXException {
    adaptie.warning(e);
  }

  @Override
  public void error(SAXParseException e) throws SAXException {
    adaptie.error(e);
  }

  @Override
  public void fatalError(SAXParseException e) throws SAXException {
    adaptie.fatalError(e);
  }

}
