{"version":3,"sources":["decoder.worker.js","../node_modules/parcel-bundler/src/builtins/loaders/node/js-loader.js"],"names":["decode","fileDirectory","buffer","decoder","decoded","fs","require","module","exports","bundle","Promise","resolve","reject","readFile","__dirname","err","data","setImmediate","then","code","Function"],"mappings":";;;;;;;AASA,aATA,IAAA,EAAA,QAAA,kBACA,EAAA,QAAA,iBAEA,eAAeA,EAAOC,EAAeC,GAC7BC,MAAAA,QAAgB,EAAWF,EAAAA,YAAAA,GAC3BG,QAAgBD,EAAQH,OAAOC,EAAeC,GAC7C,OAAA,EAASE,EAAAA,UAAAA,IAGlB,EAAOJ,EAAAA,QAAAA;;ACTP,IAAIK,EAAKC,QAAQ,MAEjBC,OAAOC,QAAU,SAAsBC,GAC9B,OAAA,IAAIC,QAAQ,SAASC,EAASC,GACnCP,EAAGQ,SAASC,UAAYL,EAAQ,OAAQ,SAASM,EAAKC,GAChDD,EACFH,EAAOG,GAIPE,aAAa,WACXN,EAAQK,SAKfE,KAAK,SAASC,GACTC,IAAAA,SAAS,GAAID,EAAbC","file":"decoder.worker.3778dc6e.js","sourceRoot":"../src","sourcesContent":["import { expose, Transfer } from 'threads/worker';\nimport { getDecoder } from './compression';\n\nasync function decode(fileDirectory, buffer) {\n  const decoder = await getDecoder(fileDirectory);\n  const decoded = await decoder.decode(fileDirectory, buffer);\n  return Transfer(decoded);\n}\n\nexpose(decode);\n","var fs = require('fs');\n\nmodule.exports = function loadJSBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(__dirname + bundle, 'utf8', function(err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        // wait for the next event loop iteration, so we are sure\n        // the current module is fully loaded\n        setImmediate(function() {\n          resolve(data);\n        });\n      }\n    });\n  })\n  .then(function(code) {\n    new Function('', code)();\n  });\n};\n"]}