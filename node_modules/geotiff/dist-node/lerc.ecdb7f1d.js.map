{"version":3,"sources":["compression/lerc.js"],"names":["LercDecoder","BaseDecoder","constructor","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","LercParameters","AddCompression","decodeBlock","buffer","LercAddCompression","None","Deflate","Uint8Array","Error","lercData","Lerc","decode","returnPixelInterleavedDims","pixels"],"mappings":";AAKqD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EALrD,IAAA,EAAA,QAAA,QACA,EAAA,EAAA,QAAA,SACA,EAAA,EAAA,QAAA,kBACA,EAAA,QAAA,cAEqD,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAtC,MAAMA,UAAoBC,EAA1B,QACbC,YAAYC,GACV,QAEKC,KAAAA,yBAAmE,IAAtCD,EAAcE,oBAAsCF,EAAcE,oBAAsB,EACrHC,KAAAA,qBAA2D,IAAlCH,EAAcI,gBAAkCJ,EAAcI,gBAAkB,EAEzGC,KAAAA,eAAiBL,EAAcM,eAAeA,EAAeC,eAAAA,gBAGpEC,YAAYC,GACF,OAAA,KAAKJ,gBACNK,KAAAA,EAAmBC,mBAAAA,KACtB,MACGD,KAAAA,EAAmBE,mBAAAA,QACtBH,GAAS,EAAQ,EAAA,SAAA,IAAII,WAAWJ,IAASA,OACzC,MACF,QACQ,MAAA,IAAIK,oEAAoE,KAAKT,kBAKhFU,OAFYC,EAAKC,QAAAA,OAAOR,EAAQ,CAAES,2BAAyD,IAA7B,KAAKjB,sBAC9CkB,OAAO,GACnBV,QAvBiC,QAAA,QAAA","file":"lerc.ecdb7f1d.js","sourceRoot":"../src","sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder';\nimport { LercParameters, LercAddCompression } from '../globals';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"]}