(function () {
    'use strict';

    /**
     * Replace a component or parts of a component using ajax call
     *
     * @param id component id
     * @param url replacement url
     * @param marker replacement marker ("component", "content", "header", ...)
     */
    var replaceContent = function($) {
        return function (id, url, marker) {
            // get new stuff via ajax
            $.ajax({
                url: url,
                dataType: 'html'
            }).done(function(html) {
                var $new_content = $("<div>" + html + "</div>");
                var $marked_new_content = $new_content.find("[data-replace-marker='" + marker + "']").first();

                if ($marked_new_content.length == 0) {

                    // if marker does not come with the new content, we put the new content into the existing marker
                    // (this includes all script tags already)
                    $("#" + id + " [data-replace-marker='" + marker + "']").html(html);

                } else {

                    // if marker is in new content, we replace the complete old node with the marker
                    // with the new marked node
                    $("#" + id + " [data-replace-marker='" + marker + "']").first()
                        .replaceWith($marked_new_content);

                    // append included script (which will not be part of the marked node
                    $("#" + id + " [data-replace-marker='" + marker + "']").first()
                        .after($new_content.find("[data-replace-marker='script']"));
                }
            });
        }
    };

    class Tooltip {
        constructor(element) {
            this.container = element.parentElement;
            this.element = element;
            this.document = element.ownerDocument;
            this.window = this.document.defaultView || this.document.parentWindow;

            var tooltip_id = this.element.getAttribute("aria-describedby");
            if (tooltip_id === null) {
                throw new Error("Could not find expected attribute aria-describedby for element with tooltip.");
            }

            this.tooltip = this.document.getElementById(tooltip_id);
            if (this.tooltip === null) {
                throw new Error("Tooltip " + foo + " not found.", {cause: this.element});
            }

            var main = this.document.getElementsByTagName("main");
            if (main.length !== 1) {
                console.log("Tooltip could not find single main-element in page. Assuming that it does not matter...");
                this.main = null;
            }

            if (main[0].contains(this.tooltip)) {
                this.main = main[0];
            }
            else {
                this.main = null;
            }


            this.showTooltip = this.showTooltip.bind(this);
            this.hideTooltip = this.hideTooltip.bind(this);
            this.onKeyDown = this.onKeyDown.bind(this);
            this.onPointerDown = this.onPointerDown.bind(this);

            this.bindElementEvents();
            this.bindContainerEvents();
        }

        showTooltip() {
            this.container.classList.add("c-tooltip--visible");
            this.bindDocumentEvents();

            this.checkVerticalBounds();
            this.checkHorizontalBounds();
        }

        hideTooltip() {
            this.container.classList.remove("c-tooltip--visible");
            this.unbindDocumentEvents();

            this.container.classList.remove("c-tooltip--top");
            this.tooltip.style.transform = null;
        }

        bindElementEvents() {
            this.element.addEventListener("focus", this.showTooltip);
            this.element.addEventListener("blur", this.hideTooltip);
        }

        bindContainerEvents() {
            this.container.addEventListener("mouseenter", this.showTooltip);
            this.container.addEventListener("touchstart", this.showTooltip);
            this.container.addEventListener("mouseleave", this.hideTooltip);
        }

        bindDocumentEvents() {
            this.document.addEventListener("keydown", this.onKeyDown);
            this.document.addEventListener("pointerdown", this.onPointerDown);
        }

        unbindDocumentEvents() {
            this.document.removeEventListener("keydown", this.onKeyDown);
            this.document.removeEventListener("pointerdown", this.onPointerDown);
        }

        onKeyDown(event) {
            if (event.key === "Esc" || event.key === "Escape") {
                this.hideTooltip();
            }
        }

        onPointerDown(event) {
            if(event.target === this.element || event.target === this.tooltip) {
                event.preventDefault();
            }
            else {
                this.hideTooltip();
                this.element.blur();
            }
        }

        checkVerticalBounds() {
            var ttRect = this.tooltip.getBoundingClientRect();
            var dpRect = this.getDisplayRect();

            if (ttRect.bottom > (dpRect.top + dpRect.height)) {
                this.container.classList.add("c-tooltip--top");
            }
        }

        checkHorizontalBounds() {
            var ttRect = this.tooltip.getBoundingClientRect();
            var dpRect = this.getDisplayRect();

            if ((dpRect.width - dpRect.left) < ttRect.right) {
                this.tooltip.style.transform = "translateX(" + ((dpRect.width - dpRect.left) - ttRect.right) + "px)";
            }
            if (ttRect.left < dpRect.left) {
                this.tooltip.style.transform = "translateX(" + ((dpRect.left - ttRect.left) - ttRect.width/2) + "px)";
            }
        }

        getDisplayRect() {
            if (this.main !== null) {
                return this.main.getBoundingClientRect();
            }

            return {
                left: 0,
                top: 0,
                width: this.window.innerWidth,
                height: this.window.innerHeight
            }
        }
    }

    if (typeof il === 'undefined') {
        il = {};
    }
    il.UI = il.UI || {};
    il.UI.core = il.UI.core || {};

    il.UI.core.replaceContent = replaceContent($);
    il.UI.core.Tooltip = Tooltip;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
