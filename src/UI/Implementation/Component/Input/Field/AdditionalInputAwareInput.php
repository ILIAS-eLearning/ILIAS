<?php

namespace ILIAS\UI\Implementation\Component\Input\Field;

use ILIAS\UI\Component\Input\Field\AdditionalInputsAware;
use ILIAS\UI\Component\Input\Field\Input as InputInterface;
use ILIAS\UI\Implementation\Component\Input\NameSource;
use ILIAS\UI\Component\Signal;

/**
 * Class AdditionalInputAwareInput
 * @author Thibeau Fuhrer <thf@studer-raimann.ch>
 */
abstract class AdditionalInputAwareInput extends Input implements AdditionalInputsAware
{
    private $input_template = null;

    private $prepared_inputs = [];

    /**
     * @inheritDoc
     */
    public function withTemplateForAdditionalInputs(InputInterface $input) : AdditionalInputsAware
    {
        // TODO: Implement withTemplateForAdditionalInputs() method.
    }

    /**
     * @inheritDoc
     */
    public function getTemplateForAdditionalInputs() : ?InputInterface
    {
        // TODO: Implement getTemplateForAdditionalInputs() method.
    }

    /**
     * @inheritDoc
     */
    public function getPreparedTemplatesForAdditionalInputs() : ?array
    {
        // TODO: Implement getPreparedTemplatesForAdditionalInputs() method.
    }

    /**
     * @inheritDoc
     */
    public function withRequired($is_required)
    {
        return parent::withRequired($is_required); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function withDisabled($is_disabled)
    {
        return parent::withDisabled($is_disabled); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function withValue($value)
    {
        return parent::withValue($value); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function withNameFrom(NameSource $source)
    {
        return parent::withNameFrom($source); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function withOnUpdate(Signal $signal)
    {
        return parent::withOnUpdate($signal); // TODO: Change the autogenerated stub
    }
}