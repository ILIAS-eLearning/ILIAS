{"majorversion": 2, "filemap": {"Module.js": {"classlist": ["YAHOO.widget.Module"], "name": "Module.js", "module": "container"}, "TextNode.js": {"classlist": ["YAHOO.widget.TextNode"], "name": "TextNode.js", "module": "treeview"}, "button.js": {"classlist": ["YAHOO.widget.Button"], "name": "button.js", "module": "button"}, "OverlayManager.js": {"classlist": ["YAHOO.widget.OverlayManager"], "name": "OverlayManager.js", "module": "container"}, "StorageEngineGears.js": {"classlist": ["YAHOO.util.StorageEngineGears"], "name": "StorageEngineGears.js", "module": "Storage"}, "Dom.js": {"classlist": ["YAHOO.util.Dom"], "name": "Dom.js", "module": "dom"}, "StorageEvent.js": {"classlist": ["YAHOO.util.StorageEvent"], "name": "StorageEvent.js", "module": "Storage"}, "JSON.js": {"classlist": ["YAHOO.lang.JSON"], "name": "JSON.js", "module": "json"}, "Motion.js": {"classlist": ["YAHOO.util.Motion"], "name": "Motion.js", "module": "animation"}, "StorageEngineHTML5.js": {"classlist": ["YAHOO.util.StorageEngineHTML5"], "name": "StorageEngineHTML5.js", "module": "Storage"}, "DateNode.js": {"classlist": ["YAHOO.widget.DateNode"], "name": "DateNode.js", "module": "treeview"}, "Dialog.js": {"classlist": ["YAHOO.widget.Dialog"], "name": "Dialog.js", "module": "container"}, "DDTarget.js": {"classlist": ["YAHOO.util.DDTarget"], "name": "DDTarget.js", "module": "dragdrop"}, "Scroll.js": {"classlist": ["YAHOO.util.Scroll"], "name": "Scroll.js", "module": "animation"}, "swfdetect.js": {"classlist": ["YAHOO.util.SWFDetect"], "name": "swfdetect.js", "module": "swfdetect"}, "UIComponentTemplate.js": {"classlist": ["YAHOO.widget.Paginator.ui.YourComponent"], "name": "UIComponentTemplate.js", "module": "paginator"}, "MouseEnter.js": {"classlist": [], "name": "MouseEnter.js", "module": "event-mouseenter"}, "connection_xdr.js": {"classlist": [], "name": "connection_xdr.js", "module": "connection"}, "Carousel.js": {"classlist": ["YAHOO.widget.Carousel"], "name": "Carousel.js", "module": "carousel"}, "DragDrop.js": {"classlist": ["YAHOO.util.DragDrop"], "name": "DragDrop.js", "module": "dragdrop"}, "SimpleDialog.js": {"classlist": ["YAHOO.widget.SimpleDialog"], "name": "SimpleDialog.js", "module": "container"}, "Region.js": {"classlist": ["YAHOO.util.Region", "YAHOO.util.Point"], "name": "Region.js", "module": "dom"}, "Profiler.js": {"classlist": ["YAHOO.tool.Profiler"], "name": "Profiler.js", "module": "profiler"}, "Storage.js": {"classlist": ["YAHOO.util.Storage"], "name": "Storage.js", "module": "Storage"}, "TestManager.js": {"classlist": ["YAHOO.tool.TestManager"], "name": "TestManager.js", "module": "yuitest"}, "FirstPageLink.js": {"classlist": ["YAHOO.widget.Paginator.ui.FirstPageLink"], "name": "FirstPageLink.js", "module": "paginator"}, "Series.js": {"classlist": ["YAHOO.widget.Series", "YAHOO.widget.CartesianSeries", "YAHOO.widget.ColumnSeries", "YAHOO.widget.LineSeries", "YAHOO.widget.BarSeries", "YAHOO.widget.PieSeries", "YAHOO.widget.StackedBarSeries", "YAHOO.widget.StackedColumnSeries"], "name": "Series.js", "module": "charts"}, "StorageEngineSWF.js": {"classlist": ["YAHOO.util.StorageEngineSWF"], "name": "StorageEngineSWF.js", "module": "Storage"}, "ContainerEffect.js": {"classlist": ["YAHOO.widget.ContainerEffect"], "name": "ContainerEffect.js", "module": "container"}, "Type.js": {"classlist": ["YAHOO.util.Number", "YAHOO.util.Date", "YAHOO.util.DateLocale"], "name": "Type.js", "module": "datasource"}, "TestRunner.js": {"classlist": ["YAHOO.tool.TestNode", "YAHOO.tool.TestRunner"], "name": "TestRunner.js", "module": "yuitest"}, "contextmenu.js": {"classlist": ["YAHOO.widget.ContextMenu"], "name": "contextmenu.js", "module": "menu"}, "StorageEngineKeyed.js": {"classlist": ["YAHOO.util.StorageEngineKeyed"], "name": "StorageEngineKeyed.js", "module": "Storage"}, "DataSource.js": {"classlist": ["YAHOO.util.DataSourceBase", "YAHOO.util.LocalDataSource", "YAHOO.util.FunctionDataSource", "YAHOO.util.ScriptNodeDataSource", "YAHOO.util.XHRDataSource", "YAHOO.util.DataSource"], "name": "DataSource.js", "module": "datasource"}, "ScrollingDataTable.js": {"classlist": ["YAHOO.widget.ScrollingDataTable"], "name": "ScrollingDataTable.js", "module": "datatable"}, "StorageManager.js": {"classlist": ["YAHOO.util.StorageManager"], "name": "StorageManager.js", "module": "Storage"}, "TimeAxis.js": {"classlist": ["YAHOO.widget.TimeAxis"], "name": "TimeAxis.js", "module": "charts"}, "ObjectAssert.js": {"classlist": ["YAHOO.util.ObjectAssert"], "name": "ObjectAssert.js", "module": "yuitest"}, "ColorPicker.js": {"classlist": ["YAHOO.widget.ColorPicker"], "name": "ColorPicker.js", "module": "colorpicker"}, "Tab.js": {"classlist": ["YAHOO.widget.Tab"], "name": "Tab.js", "module": "tabview"}, "DataTable.js": {"classlist": ["YAHOO.widget.DataTable"], "name": "DataTable.js", "module": "datatable"}, "contextmenuitem.js": {"classlist": ["YAHOO.widget.ContextMenuItem"], "name": "contextmenuitem.js", "module": "menu"}, "gears_init.js": {"classlist": [], "name": "gears_init.js", "module": "Storage"}, "resize.js": {"classlist": ["YAHOO.util.Resize"], "name": "resize.js", "module": "resize"}, "RecordSet.js": {"classlist": ["YAHOO.widget.RecordSet", "YAHOO.widget.Record"], "name": "RecordSet.js", "module": "datatable"}, "Cookie.js": {"classlist": ["YAHOO.util.Cookie"], "name": "Cookie.js", "module": "cookie"}, "Env.js": {"classlist": ["YAHOO.env", "YAHOO.env.ua"], "name": "Env.js", "module": "yahoo"}, "CategoryAxis.js": {"classlist": ["YAHOO.widget.CategoryAxis"], "name": "CategoryAxis.js", "module": "charts"}, "DragDropMgr.js": {"classlist": ["YAHOO.util.DragDropMgr", "YAHOO.util.DragDropMgr.ElementWrapper"], "name": "DragDropMgr.js", "module": "dragdrop"}, "RowsPerPageDropDown.js": {"classlist": ["YAHOO.widget.Paginator.ui.RowsPerPageDropdown"], "name": "RowsPerPageDropDown.js", "module": "paginator"}, "menuitem.js": {"classlist": ["YAHOO.widget.MenuItem"], "name": "menuitem.js", "module": "menu"}, "Selector.js": {"classlist": ["YAHOO.util.Selector"], "name": "Selector.js", "module": "selector"}, "ArrayAssert.js": {"classlist": ["YAHOO.util.ArrayAssert"], "name": "ArrayAssert.js", "module": "yuitest"}, "Axis.js": {"classlist": ["YAHOO.widget.Axis"], "name": "Axis.js", "module": "charts"}, "TreeView.js": {"classlist": ["YAHOO.widget.TreeView"], "name": "TreeView.js", "module": "treeview"}, "KeyListener.js": {"classlist": ["YAHOO.util.KeyListener"], "name": "KeyListener.js", "module": "event"}, "Slider.js": {"classlist": ["YAHOO.widget.Slider"], "name": "Slider.js", "module": "slider"}, "CalendarNavigator.js": {"classlist": ["YAHOO.widget.CalendarNavigator"], "name": "CalendarNavigator.js", "module": "calendar"}, "Uploader.js": {"classlist": ["YAHOO.widget.Uploader"], "name": "Uploader.js", "module": "uploader"}, "Element.js": {"classlist": ["YAHOO.util.Element"], "name": "Element.js", "module": "element"}, "Tooltip.js": {"classlist": ["YAHOO.widget.Tooltip"], "name": "Tooltip.js", "module": "container"}, "history.js": {"classlist": ["YAHOO.util.History"], "name": "history.js", "module": "history"}, "Bezier.js": {"classlist": ["YAHOO.util.Bezier"], "name": "Bezier.js", "module": "animation"}, "UserAction.js": {"classlist": ["YAHOO.util.UserAction"], "name": "UserAction.js", "module": "event-simulate"}, "connectionx.js": {"classlist": [], "name": "connectionx.js", "module": "connection"}, "Node.js": {"classlist": ["YAHOO.widget.Node"], "name": "Node.js", "module": "treeview"}, "Get.js": {"classlist": ["YAHOO.util.Get"], "name": "Get.js", "module": "get"}, "menumanager.js": {"classlist": ["YAHOO.widget.MenuManager"], "name": "menumanager.js", "module": "menu"}, "CartesianChart.js": {"classlist": ["YAHOO.widget.CartesianChart"], "name": "CartesianChart.js", "module": "charts"}, "yuiloader.js": {"classlist": ["YAHOO.util.YUILoader"], "name": "yuiloader.js", "module": "yuiloader"}, "buttongroup.js": {"classlist": ["YAHOO.widget.ButtonGroup"], "name": "buttongroup.js", "module": "button"}, "DualSlider.js": {"classlist": ["YAHOO.widget.DualSlider"], "name": "DualSlider.js", "module": "slider"}, "EventProvider.js": {"classlist": ["YAHOO.util.EventProvider"], "name": "EventProvider.js", "module": "event"}, "YAHOO.js": {"classlist": ["YAHOO_config", "YAHOO"], "name": "YAHOO.js", "module": "yahoo"}, "PieChart.js": {"classlist": ["YAHOO.widget.PieChart"], "name": "PieChart.js", "module": "charts"}, "TabView.js": {"classlist": ["YAHOO.widget.TabView"], "name": "TabView.js", "module": "tabview"}, "MenuNode.js": {"classlist": ["YAHOO.widget.MenuNode"], "name": "MenuNode.js", "module": "treeview"}, "layoutunit.js": {"classlist": ["YAHOO.widget.LayoutUnit"], "name": "layoutunit.js", "module": "layout"}, "AutoComplete.js": {"classlist": ["YAHOO.widget.AutoComplete"], "name": "AutoComplete.js", "module": "autocomplete"}, "IEStyle.js": {"classlist": ["YAHOO.util.Dom.IEStyle"], "name": "IEStyle.js", "module": "dom"}, "stylesheet.js": {"classlist": ["YAHOO.util.StyleSheet"], "name": "stylesheet.js", "module": "stylesheet"}, "Element-Delegate.js": {"classlist": [], "name": "Element-Delegate.js", "module": "element-delegate"}, "crop.js": {"classlist": ["YAHOO.widget.ImageCropper"], "name": "crop.js", "module": "imagecropper"}, "AnimMgr.js": {"classlist": ["YAHOO.util.AnimMgr"], "name": "AnimMgr.js", "module": "animation"}, "menu.js": {"classlist": ["YAHOO.widget.Menu"], "name": "menu.js", "module": "menu"}, "DD.js": {"classlist": ["YAHOO.util.DD"], "name": "DD.js", "module": "dragdrop"}, "HTMLNode.js": {"classlist": ["YAHOO.widget.HTMLNode"], "name": "HTMLNode.js", "module": "treeview"}, "PreviousPageLink.js": {"classlist": ["YAHOO.widget.Paginator.ui.PreviousPageLink"], "name": "PreviousPageLink.js", "module": "paginator"}, "ProgressBar.js": {"classlist": ["YAHOO.widget.ProgressBar"], "name": "ProgressBar.js", "module": "progressbar"}, "TVFadeIn.js": {"classlist": ["YAHOO.widget.TVFadeIn"], "name": "TVFadeIn.js", "module": "treeview"}, "Attribute.js": {"classlist": ["YAHOO.util.Attribute"], "name": "Attribute.js", "module": "element"}, "ColorAnim.js": {"classlist": ["YAHOO.util.ColorAnim"], "name": "ColorAnim.js", "module": "animation"}, "Chart.js": {"classlist": ["YAHOO.widget.Chart"], "name": "Chart.js", "module": "charts"}, "Panel.js": {"classlist": ["YAHOO.widget.Panel"], "name": "Panel.js", "module": "container"}, "LogWriter.js": {"classlist": ["LogWriter"], "name": "LogWriter.js", "module": "logger"}, "TestSuite.js": {"classlist": ["YAHOO.tool.TestSuite"], "name": "TestSuite.js", "module": "yuitest"}, "LogMsg.js": {"classlist": ["LogMsg"], "name": "LogMsg.js", "module": "logger"}, "CalendarGroup.js": {"classlist": ["YAHOO.widget.CalendarGroup", "YAHOO.widget.Calendar2up"], "name": "CalendarGroup.js", "module": "calendar"}, "Paginator.js": {"classlist": ["YAHOO.widget.Paginator"], "name": "Paginator.js", "module": "paginator"}, "Lang.js": {"classlist": ["YAHOO.lang"], "name": "Lang.js", "module": "yahoo"}, "LogReader.js": {"classlist": ["LogReader"], "name": "LogReader.js", "module": "logger"}, "profilerviewer.js": {"classlist": ["YAHOO.widget.ProfilerViewer"], "name": "profilerviewer.js", "module": "profilerviewer"}, "CurrentPageReport.js": {"classlist": ["YAHOO.widget.Paginator.ui.CurrentPageReport"], "name": "CurrentPageReport.js", "module": "paginator"}, "layout.js": {"classlist": ["YAHOO.widget.Layout"], "name": "layout.js", "module": "layout"}, "DateMath.js": {"classlist": ["YAHOO.widget.DateMath"], "name": "DateMath.js", "module": "datemath"}, "RootNode.js": {"classlist": ["YAHOO.widget.RootNode"], "name": "RootNode.js", "module": "treeview"}, "Logger.js": {"classlist": ["YAHOO.widget.Logger"], "name": "Logger.js", "module": "logger"}, "TVAnim.js": {"classlist": ["YAHOO.widget.TVAnim"], "name": "TVAnim.js", "module": "treeview"}, "SliderThumb.js": {"classlist": ["YAHOO.widget.SliderThumb"], "name": "SliderThumb.js", "module": "slider"}, "Delegate.js": {"classlist": [], "name": "Delegate.js", "module": "event-delegate"}, "NextPageLink.js": {"classlist": ["YAHOO.widget.Paginator.ui.NextPageLink"], "name": "NextPageLink.js", "module": "paginator"}, "ChartTypes.js": {"classlist": ["YAHOO.widget.LineChart", "YAHOO.widget.ColumnChart", "YAHOO.widget.BarChart", "YAHOO.widget.StackedColumnChart", "YAHOO.widget.StackedBarChart"], "name": "ChartTypes.js", "module": "charts"}, "TestReporter.js": {"classlist": ["YAHOO.tool.TestReporter"], "name": "TestReporter.js", "module": "yuitest"}, "TestLogger.js": {"classlist": ["YAHOO.tool.TestLogger"], "name": "TestLogger.js", "module": "yuitest"}, "CellEditor.js": {"classlist": ["YAHOO.widget.BaseCellEditor", "YAHOO.widget.CheckboxCellEditor", "YAHOO.widget.DateCellEditor", "YAHOO.widget.DropdownCellEditor", "YAHOO.widget.RadioCellEditor", "YAHOO.widget.TextareaCellEditor", "YAHOO.widget.TextboxCellEditor", "YAHOO.widget.CellEditor"], "name": "CellEditor.js", "module": "datatable"}, "Assert.js": {"classlist": ["YAHOO.util.Assert", "YAHOO.util.AssertionError", "YAHOO.util.ComparisonFailure", "YAHOO.util.UnexpectedValue", "YAHOO.util.ShouldFail", "YAHOO.util.ShouldError", "YAHOO.util.UnexpectedError"], "name": "Assert.js", "module": "yuitest"}, "ColumnSet.js": {"classlist": ["YAHOO.widget.ColumnSet", "YAHOO.widget.Column", "YAHOO.util.Sort", "YAHOO.util.ColumnDD", "YAHOO.util.ColumnResizer"], "name": "ColumnSet.js", "module": "datatable"}, "menuariaplugin.js": {"classlist": [], "name": "menuariaplugin.js", "module": "menu"}, "Config.js": {"classlist": ["YAHOO.util.Config"], "name": "Config.js", "module": "container"}, "menubar.js": {"classlist": ["YAHOO.widget.MenuBar"], "name": "menubar.js", "module": "menu"}, "TVFadeOut.js": {"classlist": ["YAHOO.widget.TVFadeOut"], "name": "TVFadeOut.js", "module": "treeview"}, "TreeViewEd.js": {"classlist": [], "name": "TreeViewEd.js", "module": "treeview"}, "CustomEvent.js": {"classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber"], "name": "CustomEvent.js", "module": "event"}, "FlashAdapter.js": {"classlist": ["YAHOO.widget.FlashAdapter"], "name": "FlashAdapter.js", "module": "uploader"}, "PageLinks.js": {"classlist": ["YAHOO.widget.Paginator.ui.PageLinks"], "name": "PageLinks.js", "module": "paginator"}, "toolbar.js": {"classlist": ["YAHOO.widget.Toolbar"], "name": "toolbar.js", "module": "editor"}, "swf.js": {"classlist": ["YAHOO.widget.SWF"], "name": "swf.js", "module": "swf"}, "TestCase.js": {"classlist": ["YAHOO.tool.TestCase", "YAHOO.tool.TestCase.Wait"], "name": "TestCase.js", "module": "yuitest"}, "Anim.js": {"classlist": ["YAHOO.util.Anim"], "name": "Anim.js", "module": "animation"}, "Chain.js": {"classlist": ["YAHOO.util.Chain"], "name": "Chain.js", "module": "datatable"}, "LastPageLink.js": {"classlist": ["YAHOO.widget.Paginator.ui.LastPageLink"], "name": "LastPageLink.js", "module": "paginator"}, "Color.js": {"classlist": ["YAHOO.util.Dom.Color"], "name": "Color.js", "module": "dom"}, "simple-editor.js": {"classlist": ["YAHOO.widget.SimpleEditor", "YAHOO.widget.EditorInfo"], "name": "simple-editor.js", "module": "editor"}, "TestFormat.js": {"classlist": [], "name": "TestFormat.js", "module": "yuitest"}, "toolbar-button.js": {"classlist": ["YAHOO.widget.ToolbarButtonAdvanced", "YAHOO.widget.ToolbarButton"], "name": "toolbar-button.js", "module": "editor"}, "swfobject.js": {"classlist": [], "name": "swfobject.js", "module": "uploader"}, "Event.js": {"classlist": ["YAHOO.util.Event"], "name": "Event.js", "module": "event"}, "editor.js": {"classlist": ["YAHOO.widget.Editor", "YAHOO.widget.EditorWindow"], "name": "editor.js", "module": "editor"}, "Overlay.js": {"classlist": ["YAHOO.widget.Overlay"], "name": "Overlay.js", "module": "container"}, "AttributeProvider.js": {"classlist": ["YAHOO.util.AttributeProvider"], "name": "AttributeProvider.js", "module": "element"}, "Easing.js": {"classlist": ["YAHOO.util.Easing"], "name": "Easing.js", "module": "animation"}, "DateAssert.js": {"classlist": ["YAHOO.util.DateAssert"], "name": "DateAssert.js", "module": "yuitest"}, "menubaritem.js": {"classlist": ["YAHOO.widget.MenuBarItem"], "name": "menubaritem.js", "module": "menu"}, "connection_core.js": {"classlist": ["YAHOO.util.Connect"], "name": "connection_core.js", "module": "connection"}, "DDProxy.js": {"classlist": ["YAHOO.util.DDProxy"], "name": "DDProxy.js", "module": "dragdrop"}, "Calendar.js": {"classlist": ["YAHOO.widget.Calendar", "YAHOO.widget.Calendar_Core"], "name": "Calendar.js", "module": "calendar"}, "swfstore.js": {"classlist": ["YAHOO.util.SWFStore"], "name": "swfstore.js", "module": "swfstore"}, "NumericAxis.js": {"classlist": ["YAHOO.widget.NumericAxis"], "name": "NumericAxis.js", "module": "charts"}, "ImageLoader.js": {"classlist": ["YAHOO.util.ImageLoader.group", "YAHOO.util.ImageLoader.imgObj", "YAHOO.util.ImageLoader.bgImgObj", "YAHOO.util.ImageLoader.srcImgObj", "YAHOO.util.ImageLoader.pngBgImgObj"], "name": "ImageLoader.js", "module": "imageloader"}}, "modules": {"Storage": {"description": "The Storage module manages client-side data storage.", "submodules": [], "classlist": ["YAHOO.util.Storage", "YAHOO.util.StorageEngineGears", "YAHOO.util.StorageEngineHTML5", "YAHOO.util.StorageEngineKeyed", "YAHOO.util.StorageEngineSWF", "YAHOO.util.StorageEvent", "YAHOO.util.StorageManager"], "filelist": ["Storage.js", "StorageEngineGears.js", "StorageEngineHTML5.js", "StorageEngineKeyed.js", "StorageEngineSWF.js", "StorageEvent.js", "StorageManager.js", "gears_init.js"], "subdata": {}, "name": "Storage"}, "progressbar": {"name": "progressbar", "submodules": [], "classlist": ["YAHOO.widget.ProgressBar"], "title": "ProgressBar Widget", "requires": "yahoo, dom, event, element", "filelist": ["ProgressBar.js"], "subdata": {}, "optional": "animation"}, "imageloader": {"description": "The ImageLoader Utility is a framework to dynamically load images according to certain triggers,\nenabling faster load times and a more responsive UI.", "submodules": [], "classlist": ["YAHOO.util.ImageLoader.group", "YAHOO.util.ImageLoader.imgObj", "YAHOO.util.ImageLoader.bgImgObj", "YAHOO.util.ImageLoader.srcImgObj", "YAHOO.util.ImageLoader.pngBgImgObj"], "filelist": ["ImageLoader.js"], "subdata": {}, "requires": "yahoo, dom, event", "name": "imageloader"}, "event-delegate": {"description": "Augments the Event Utility with a <code>delegate</code> method that \nfacilitates easy creation of delegated event listeners.  (Note: Using CSS \nselectors as the filtering criteria for delegated event listeners requires \ninclusion of the Selector Utility.)", "submodules": [], "classlist": [], "title": "Event Utility Event Delegation Module", "filelist": ["Delegate.js"], "subdata": {}, "requires": "event", "name": "event-delegate"}, "calendar": {"description": "The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month or\nmulti-month interface. Calendars are generated entirely via script and can be navigated without any page refreshes.", "submodules": [], "classlist": ["YAHOO.widget.Calendar", "YAHOO.widget.Calendar_Core", "YAHOO.widget.CalendarGroup", "YAHOO.widget.Calendar2up", "YAHOO.widget.CalendarNavigator"], "title": "Calendar", "filelist": ["Calendar.js", "CalendarGroup.js", "CalendarNavigator.js"], "subdata": {}, "requires": "yahoo,dom,event", "name": "calendar"}, "profiler": {"description": "The YUI JavaScript profiler.", "submodules": [], "classlist": ["YAHOO.tool.Profiler"], "filelist": ["Profiler.js"], "subdata": {}, "requires": "yahoo", "name": "profiler"}, "event": {"description": "The Event Utility provides utilities for managing DOM Events and tools\nfor building event systems", "submodules": [], "classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber", "YAHOO.util.Event", "YAHOO.util.EventProvider", "YAHOO.util.KeyListener"], "title": "Event Utility", "filelist": ["CustomEvent.js", "Event.js", "EventProvider.js", "KeyListener.js"], "subdata": {}, "requires": "yahoo", "name": "event"}, "datemath": {"description": "The datemath module provides utility methods for basic JavaScript Date object manipulation and \ncomparison.", "submodules": [], "classlist": ["YAHOO.widget.DateMath"], "filelist": ["DateMath.js"], "subdata": {}, "name": "datemath"}, "paginator": {"description": "The Paginator widget provides a set of controls to navigate through paged\ndata.", "submodules": [], "classlist": ["YAHOO.widget.Paginator.ui.CurrentPageReport", "YAHOO.widget.Paginator.ui.FirstPageLink", "YAHOO.widget.Paginator.ui.LastPageLink", "YAHOO.widget.Paginator.ui.NextPageLink", "YAHOO.widget.Paginator.ui.PageLinks", "YAHOO.widget.Paginator", "YAHOO.widget.Paginator.ui.PreviousPageLink", "YAHOO.widget.Paginator.ui.RowsPerPageDropdown", "YAHOO.widget.Paginator.ui.YourComponent"], "filelist": ["CurrentPageReport.js", "FirstPageLink.js", "LastPageLink.js", "NextPageLink.js", "PageLinks.js", "Paginator.js", "PreviousPageLink.js", "RowsPerPageDropDown.js", "UIComponentTemplate.js"], "subdata": {}, "uses": "YAHOO.util.EventProvider", "guessedname": "Dom", "guessedtype": "property", "name": "paginator"}, "container": {"description": "The Container family of components is designed to enable developers to \ncreate different kinds of content-containing modules on the web. Module \nand Overlay are the most basic containers, and they can be used directly \nor extended to build custom containers. Also part of the Container family \nare four UI controls that extend Module and Overlay: Tooltip, Panel, \nDialog, and SimpleDialog.", "submodules": [], "classlist": ["YAHOO.util.Config", "YAHOO.widget.ContainerEffect", "YAHOO.widget.Dialog", "YAHOO.widget.Module", "YAHOO.widget.Overlay", "YAHOO.widget.OverlayManager", "YAHOO.widget.Panel", "YAHOO.widget.SimpleDialog", "YAHOO.widget.Tooltip"], "title": "Container", "requires": "yahoo, dom, event", "filelist": ["Config.js", "ContainerEffect.js", "Dialog.js", "Module.js", "Overlay.js", "OverlayManager.js", "Panel.js", "SimpleDialog.js", "Tooltip.js"], "subdata": {}, "optional": "dragdrop, animation, button", "name": "container"}, "event-simulate": {"description": "DOM event simulation utility", "submodules": [], "classlist": ["YAHOO.util.UserAction"], "filelist": ["UserAction.js"], "subdata": {}, "requires": "yahoo,dom,event", "name": "event-simulate"}, "stylesheet": {"description": "The StyleSheet component is a utility for managing css rules at the\nstylesheet level", "submodules": [], "classlist": ["YAHOO.util.StyleSheet"], "filelist": ["stylesheet.js"], "subdata": {}, "beta": "", "requires": "yahoo", "name": "stylesheet"}, "charts": {"description": "The Charts widget provides a Flash control for displaying data\ngraphically by series across A-grade browsers with Flash Player installed.", "submodules": [], "classlist": ["YAHOO.widget.Axis", "YAHOO.widget.CartesianChart", "YAHOO.widget.CategoryAxis", "YAHOO.widget.Chart", "YAHOO.widget.LineChart", "YAHOO.widget.ColumnChart", "YAHOO.widget.BarChart", "YAHOO.widget.StackedColumnChart", "YAHOO.widget.StackedBarChart", "YAHOO.widget.NumericAxis", "YAHOO.widget.PieChart", "YAHOO.widget.Series", "YAHOO.widget.CartesianSeries", "YAHOO.widget.ColumnSeries", "YAHOO.widget.LineSeries", "YAHOO.widget.BarSeries", "YAHOO.widget.PieSeries", "YAHOO.widget.StackedBarSeries", "YAHOO.widget.StackedColumnSeries", "YAHOO.widget.TimeAxis"], "title": "Charts Widget", "filelist": ["Axis.js", "CartesianChart.js", "CategoryAxis.js", "Chart.js", "ChartTypes.js", "NumericAxis.js", "PieChart.js", "Series.js", "TimeAxis.js"], "subdata": {}, "requires": "yahoo, dom, event, datasource", "experimental": "", "name": "charts"}, "swf": {"description": "The SWF utility is a tool for embedding Flash applications in HTMl pages.", "submodules": [], "classlist": ["YAHOO.widget.SWF"], "title": "SWF Utility", "filelist": ["swf.js"], "subdata": {}, "requires": "yahoo, dom, event", "name": "swf"}, "json": {"description": "Provides methods to parse JSON strings and convert objects to JSON strings.", "submodules": [], "classlist": ["YAHOO.lang.JSON"], "filelist": ["JSON.js"], "subdata": {}, "name": "json"}, "animation": {"description": "The animation module provides allows effects to be added to HTMLElements.", "submodules": [], "classlist": ["YAHOO.util.Anim", "YAHOO.util.AnimMgr", "YAHOO.util.Bezier", "YAHOO.util.ColorAnim", "YAHOO.util.Easing", "YAHOO.util.Motion", "YAHOO.util.Scroll"], "filelist": ["Anim.js", "AnimMgr.js", "Bezier.js", "ColorAnim.js", "Easing.js", "Motion.js", "Scroll.js"], "subdata": {}, "requires": "yahoo, event, dom", "name": "animation"}, "event-mouseenter": {"description": "Augments the Event Utility with support for the mouseenter and mouseleave \nevents:  A mouseenter event fires the first time the mouse enters an \nelement; a mouseleave event first the first time the mouse leaves an \nelement.", "submodules": [], "classlist": [], "title": "Event Utility mouseenter and mouseout Module", "filelist": ["MouseEnter.js"], "subdata": {}, "requires": "event", "name": "event-mouseenter"}, "dragdrop": {"description": "The drag and drop utility provides a framework for building drag and drop\napplications.  In addition to enabling drag and drop for specific elements,\nthe drag and drop elements are tracked by the manager class, and the\ninteractions between the various elements are tracked during the drag and\nthe implementing code is notified about these important moments.", "submodules": [], "classlist": ["YAHOO.util.DD", "YAHOO.util.DDProxy", "YAHOO.util.DDTarget", "YAHOO.util.DragDrop", "YAHOO.util.DragDropMgr", "YAHOO.util.DragDropMgr.ElementWrapper"], "title": "Drag and Drop", "filelist": ["DD.js", "DDProxy.js", "DDTarget.js", "DragDrop.js", "DragDropMgr.js"], "subdata": {}, "requires": "yahoo,dom,event", "name": "dragdrop"}, "carousel": {"description": "The Carousel module provides a widget for browsing among a set of like\nobjects represented pictorially.", "submodules": [], "classlist": ["YAHOO.widget.Carousel"], "title": "Carousel Widget", "filelist": ["Carousel.js"], "subdata": {}, "beta": "", "optional": "animation", "requires": "yahoo, dom, event, element", "name": "carousel"}, "element-delegate": {"description": "Augments the Element Utility with a <code>delegate</code> method that \nfacilitates easy creation of delegated event listeners.  (Note: Using CSS \nselectors as the filtering criteria for delegated event listeners requires \ninclusion of the Selector Utility.)", "submodules": [], "classlist": [], "title": "Element Event Delegation Module", "filelist": ["Element-Delegate.js"], "subdata": {}, "requires": "element, event-delegate", "name": "element-delegate"}, "logger": {"description": "The Logger widget provides a simple way to read or write log messages in\nJavaScript code. Integration with the YUI Library's debug builds allow\nimplementers to access under-the-hood events, errors, and debugging messages.\nOutput may be read through a LogReader console and/or output to a browser\nconsole.", "submodules": [], "classlist": ["LogMsg", "LogReader", "LogWriter", "YAHOO.widget.Logger"], "title": "Logger Widget", "filelist": ["LogMsg.js", "LogReader.js", "LogWriter.js", "Logger.js"], "subdata": {}, "optional": "dragdrop", "requires": "yahoo, event, dom", "name": "logger"}, "editor": {"description": "<p>Creates a rich Toolbar widget based on Button. Primarily used with the Rich Text Editor</p>", "submodules": [], "classlist": ["YAHOO.widget.Editor", "YAHOO.widget.EditorWindow", "YAHOO.widget.SimpleEditor", "YAHOO.widget.EditorInfo", "YAHOO.widget.ToolbarButtonAdvanced", "YAHOO.widget.ToolbarButton", "YAHOO.widget.Toolbar"], "filelist": ["editor.js", "simple-editor.js", "toolbar-button.js", "toolbar.js"], "subdata": {}, "optional": "dragdrop, animation, menu, button, resize", "requires": "yahoo, dom, element, event, container_core, simpleeditor", "name": "editor"}, "colorpicker": {"description": "The colorpicker module provides a widget for selecting colors", "submodules": [], "classlist": ["YAHOO.util.Color", "YAHOO.widget.ColorPicker"], "filelist": ["Color.js", "ColorPicker.js"], "subdata": {}, "requires": "yahoo, dom, event, element, slider", "name": "colorpicker"}, "imagecropper": {"description": "<p>Creates a Image Cropper control.</p>", "submodules": [], "classlist": ["YAHOO.widget.ImageCropper"], "filelist": ["crop.js"], "subdata": {}, "beta": "", "requires": "yahoo, dom, dragdrop, element, event, resize", "name": "imagecropper"}, "get": {"description": "Provides a mechanism to fetch remote resources and\ninsert them into a document", "submodules": [], "classlist": ["YAHOO.util.Get"], "filelist": ["Get.js"], "subdata": {}, "requires": "yahoo", "name": "get"}, "yuitest": {"description": "The YUI test tool", "submodules": [], "classlist": ["YAHOO.util.ArrayAssert", "YAHOO.util.Assert", "YAHOO.util.AssertionError", "YAHOO.util.ComparisonFailure", "YAHOO.util.UnexpectedValue", "YAHOO.util.ShouldFail", "YAHOO.util.ShouldError", "YAHOO.util.UnexpectedError", "YAHOO.util.DateAssert", "YAHOO.util.ObjectAssert", "YAHOO.tool.TestCase", "YAHOO.tool.TestCase.Wait", "YAHOO.tool.TestLogger", "YAHOO.tool.TestManager", "YAHOO.tool.TestReporter", "YAHOO.tool.TestNode", "YAHOO.tool.TestRunner", "YAHOO.tool.TestSuite"], "filelist": ["ArrayAssert.js", "Assert.js", "DateAssert.js", "ObjectAssert.js", "TestCase.js", "TestFormat.js", "TestLogger.js", "TestManager.js", "TestReporter.js", "TestRunner.js", "TestSuite.js"], "subdata": {}, "optional": "event-simulte", "requires": "yahoo,dom,event,logger", "name": "yuitest"}, "yahoo": {"description": "The YAHOO object is the single global object used by YUI Library.  It\ncontains utility function for setting up namespaces, inheritance, and\nlogging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces\ncreated automatically for and used by the library.", "submodules": [], "classlist": ["YAHOO.env", "YAHOO.env.ua", "YAHOO.lang", "YAHOO_config", "YAHOO"], "title": "YAHOO Global", "filelist": ["Env.js", "Lang.js", "YAHOO.js"], "subdata": {}, "name": "yahoo"}, "selector": {"description": "The selector module provides helper methods allowing CSS3 Selectors to be used with DOM elements.", "submodules": [], "classlist": ["YAHOO.util.Selector"], "title": "Selector Utility", "filelist": ["Selector.js"], "subdata": {}, "requires": "yahoo, dom", "name": "selector"}, "slider": {"description": "The Slider component is a UI control that enables the user to adjust \nvalues in a finite range along one or two axes. Typically, the Slider \ncontrol is used in a web application as a rich, visual replacement \nfor an input box that takes a number as input. The Slider control can \nalso easily accommodate a second dimension, providing x,y output for \na selection point chosen from a rectangular region.", "submodules": [], "classlist": ["YAHOO.widget.DualSlider", "YAHOO.widget.Slider", "YAHOO.widget.SliderThumb"], "title": "Slider Widget", "requires": "yahoo,dom,dragdrop,event", "filelist": ["DualSlider.js", "Slider.js", "SliderThumb.js"], "subdata": {}, "optional": "animation", "name": "slider"}, "cookie": {"description": "Utilities for cookie management", "submodules": [], "classlist": ["YAHOO.util.Cookie"], "filelist": ["Cookie.js"], "subdata": {}, "name": "cookie"}, "uploader": {"description": "The YUI Uploader Control", "submodules": [], "classlist": ["YAHOO.widget.FlashAdapter", "YAHOO.widget.Uploader"], "title": "Uploader", "filelist": ["FlashAdapter.js", "Uploader.js", "swfobject.js"], "subdata": {}, "requires": "yahoo, dom, element, event", "name": "uploader"}, "layout": {"description": "<p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>", "submodules": [], "classlist": ["YAHOO.widget.Layout", "YAHOO.widget.LayoutUnit"], "filelist": ["layout.js", "layoutunit.js"], "subdata": {}, "requires": "yahoo, dom, element, event", "name": "layout"}, "profilerviewer": {"description": "The ProfilerViewer module provides a graphical display for viewing\nthe output of the YUI Profiler <http://developer.yahoo.com/yui/profiler>.", "submodules": [], "classlist": ["YAHOO.widget.ProfilerViewer"], "filelist": ["profilerviewer.js"], "subdata": {}, "requires": "yahoo, dom, event, element, profiler, yuiloader", "name": "profilerviewer"}, "datatable": {"description": "The DataTable widget provides a progressively enhanced DHTML control for\ndisplaying tabular data across A-grade browsers.", "submodules": [], "classlist": ["YAHOO.widget.BaseCellEditor", "YAHOO.widget.CheckboxCellEditor", "YAHOO.widget.DateCellEditor", "YAHOO.widget.DropdownCellEditor", "YAHOO.widget.RadioCellEditor", "YAHOO.widget.TextareaCellEditor", "YAHOO.widget.TextboxCellEditor", "YAHOO.widget.CellEditor", "YAHOO.util.Chain", "YAHOO.widget.ColumnSet", "YAHOO.widget.Column", "YAHOO.util.Sort", "YAHOO.util.ColumnDD", "YAHOO.util.ColumnResizer", "YAHOO.widget.DataTable", "YAHOO.widget.RecordSet", "YAHOO.widget.Record", "YAHOO.widget.ScrollingDataTable"], "title": "DataTable Widget", "requires": "yahoo, dom, event, element, datasource", "filelist": ["CellEditor.js", "Chain.js", "ColumnSet.js", "DataTable.js", "RecordSet.js", "ScrollingDataTable.js"], "subdata": {}, "optional": "dragdrop, dragdrop", "name": "datatable"}, "resize": {"description": "<p>Makes an element resizable</p>", "submodules": [], "classlist": ["YAHOO.util.Resize"], "filelist": ["resize.js"], "subdata": {}, "optional": "animation", "requires": "yahoo, dom, dragdrop, element, event", "name": "resize"}, "swfstore": {"description": "Provides a swf based storage implementation", "submodules": [], "classlist": ["YAHOO.util.SWFStore"], "filelist": ["swfstore.js"], "subdata": {}, "name": "swfstore"}, "swfdetect": {"description": "Utility for Flash version detection", "submodules": [], "classlist": ["YAHOO.util.SWFDetect"], "filelist": ["swfdetect.js"], "subdata": {}, "name": "swfdetect"}, "yuiloader": {"description": "Provides dynamic loading for the YUI library.  It includes the dependency\ninfo for the library, and will automatically pull in dependencies for\nthe modules requested.  It supports rollup files (such as utilities.js\nand yahoo-dom-event.js), and will automatically use these when\nappropriate in order to minimize the number of http connections\nrequired to load all of the dependencies.", "submodules": [], "classlist": ["YAHOO.util.YUILoader"], "filelist": ["yuiloader.js"], "subdata": {}, "name": "yuiloader"}, "dom": {"description": "Internal methods used to add style management functionality to DOM.", "submodules": [], "classlist": ["YAHOO.util.Dom.Color", "YAHOO.util.Dom", "YAHOO.util.Dom.IEStyle", "YAHOO.util.Region", "YAHOO.util.Point"], "filelist": ["Color.js", "Dom.js", "IEStyle.js", "Region.js"], "subdata": {}, "name": "dom"}, "tabview": {"description": "The tabview module provides a widget for managing content bound to tabs.", "submodules": [], "classlist": ["YAHOO.widget.Tab", "YAHOO.widget.TabView"], "filelist": ["Tab.js", "TabView.js"], "subdata": {}, "guessedname": "Y", "guessedtype": "property", "requires": "yahoo, dom, event, element", "name": "tabview"}, "button": {"description": "<p>The Button Control enables the creation of rich, graphical \nbuttons that function like traditional HTML form buttons.  <em>Unlike</em> \ntraditional HTML form buttons, buttons created with the Button Control can have \na label that is different from its value.  With the inclusion of the optional \n<a href=\"module_menu.html\">Menu Control</a>, the Button Control can also be\nused to create menu buttons and split buttons, controls that are not \navailable natively in HTML.  The Button Control can also be thought of as a \nway to create more visually engaging implementations of the browser's \ndefault radio-button and check-box controls.</p>\n<p>The Button Control supports the following types:</p>\n<dl>\n<dt>push</dt>\n<dd>Basic push button that can execute a user-specified command when \npressed.</dd>\n<dt>link</dt>\n<dd>Navigates to a specified url when pressed.</dd>\n<dt>submit</dt>\n<dd>Submits the parent form when pressed.</dd>\n<dt>reset</dt>\n<dd>Resets the parent form when pressed.</dd>\n<dt>checkbox</dt>\n<dd>Maintains a \"checked\" state that can be toggled on and off.</dd>\n<dt>radio</dt>\n<dd>Maintains a \"checked\" state that can be toggled on and off.  Use with \nthe ButtonGroup class to create a set of controls that are mutually \nexclusive; checking one button in the set will uncheck all others in \nthe group.</dd>\n<dt>menu</dt>\n<dd>When pressed will show/hide a menu.</dd>\n<dt>split</dt>\n<dd>Can execute a user-specified command or display a menu when pressed.</dd>\n</dl>", "submodules": [], "classlist": ["YAHOO.widget.Button", "YAHOO.widget.ButtonGroup"], "title": "Button", "requires": "yahoo, dom, element, event", "filelist": ["button.js", "buttongroup.js"], "subdata": {}, "optional": "container, menu", "name": "button"}, "element": {"description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes.", "submodules": [], "classlist": ["YAHOO.util.Attribute", "YAHOO.util.AttributeProvider", "YAHOO.util.Element"], "filelist": ["Attribute.js", "AttributeProvider.js", "Element.js"], "subdata": {}, "requires": "yahoo, dom, event", "name": "element"}, "autocomplete": {"description": "The AutoComplete control provides the front-end logic for text-entry suggestion and\ncompletion functionality.", "submodules": [], "classlist": ["YAHOO.widget.AutoComplete"], "title": "AutoComplete Widget", "filelist": ["AutoComplete.js"], "subdata": {}, "optional": "animation", "requires": "yahoo, dom, event, datasource", "name": "autocomplete"}, "connection": {"description": "The Connection Manager provides a simplified interface to the XMLHttpRequest\nobject.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the\ninteractive states and server response, returning the results to a pre-defined\ncallback you create.", "submodules": [], "classlist": ["YAHOO.util.Connect"], "filelist": ["connection_core.js", "connection_xdr.js", "connectionx.js"], "subdata": {}, "requires": "yahoo", "name": "connection"}, "datasource": {"description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.", "submodules": [], "classlist": ["YAHOO.util.DataSourceBase", "YAHOO.util.LocalDataSource", "YAHOO.util.FunctionDataSource", "YAHOO.util.ScriptNodeDataSource", "YAHOO.util.XHRDataSource", "YAHOO.util.DataSource", "YAHOO.util.Number", "YAHOO.util.Date", "YAHOO.util.DateLocale"], "title": "DataSource Utility", "requires": "yahoo, event", "filelist": ["DataSource.js", "Type.js"], "subdata": {}, "optional": "json, get, connection", "name": "datasource"}, "menu": {"description": "<p>The Menu family of components features a collection of \ncontrols that make it easy to add menus to your website or web application.  \nWith the Menu Controls you can create website fly-out menus, customized \ncontext menus, or application-style menu bars with just a small amount of \nscripting.</p><p>The Menu family of controls features:</p>\n<ul>\n<li>Keyboard and mouse navigation.</li>\n<li>A rich event model that provides access to all of a menu's \ninteresting moments.</li>\n<li>Support for \n<a href=\"http://en.wikipedia.org/wiki/Progressive_Enhancement\">Progressive\nEnhancement</a>; Menus can be created from simple, \nsemantic markup on the page or purely through JavaScript.</li>\n</ul>", "submodules": [], "classlist": ["YAHOO.widget.ContextMenu", "YAHOO.widget.ContextMenuItem", "YAHOO.widget.Menu", "YAHOO.widget.MenuBar", "YAHOO.widget.MenuBarItem", "YAHOO.widget.MenuItem", "YAHOO.widget.MenuManager"], "title": "Menu", "filelist": ["contextmenu.js", "contextmenuitem.js", "menu.js", "menuariaplugin.js", "menubar.js", "menubaritem.js", "menuitem.js", "menumanager.js"], "subdata": {}, "requires": "Event, Dom, Container", "name": "menu"}, "treeview": {"description": "The treeview widget is a generic tree building tool.", "submodules": [], "classlist": ["YAHOO.widget.DateNode", "YAHOO.widget.HTMLNode", "YAHOO.widget.MenuNode", "YAHOO.widget.Node", "YAHOO.widget.RootNode", "YAHOO.widget.TextNode", "YAHOO.widget.TreeView", "YAHOO.widget.TVAnim", "YAHOO.widget.TVFadeIn", "YAHOO.widget.TVFadeOut"], "title": "TreeView Widget", "filelist": ["DateNode.js", "HTMLNode.js", "MenuNode.js", "Node.js", "RootNode.js", "TextNode.js", "TreeView.js", "TreeViewEd.js", "TVAnim.js", "TVFadeIn.js", "TVFadeOut.js"], "subdata": {}, "optional": "animation, json, calendar", "requires": "yahoo, dom, event", "name": "treeview"}, "history": {"description": "The Browser History Manager provides the ability to use the back/forward\nnavigation buttons in a DHTML application. It also allows a DHTML\napplication to be bookmarked in a specific state.\nThis library requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;", "submodules": [], "classlist": ["YAHOO.util.History"], "title": "Browser History Manager", "filelist": ["history.js"], "subdata": {}, "requires": "yahoo,event", "name": "history"}}, "classmap": {"YAHOO.util.Storage": {"name": "YAHOO.util.Storage", "parm": "name {String} Required. The engine name.", "constructors": [{"params": [{"type": "String", "name": "location", "description": "  Required. The storage location."}, {"type": "Object", "name": "conf", "description": "  Required. A configuration object."}], "description": "The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API."}], "namespace": "YAHOO.util", "module": "Storage", "guessedname": "Storage", "methods": {"getItem": {"return": {"type": "String|NULL", "description": "The value stored at the provided key (DOMString in HTML 5 spec)."}, "description": "Fetches the data stored and the provided key.", "params": [{"type": "String", "name": "key", "description": "  Required. The key used to reference this value (DOMString in HTML 5 spec)."}], "guessedname": "getItem", "guessedtype": "function", "public": ""}, "_clear": {"protected": "", "description": "Implementation of the clear login; should be overwritten by storage engine.", "guessedname": "_clear", "guessedtype": "function"}, "clear": {"description": "Clears any existing key/value pairs.", "public": "", "guessedname": "clear", "guessedtype": "function"}, "_createValue": {"protected": "", "params": [{"type": "Object", "name": "s", "description": "  Required. An object to store."}], "description": "Converts the object into a string, with meta data (type), so it can be restored later.", "guessedname": "_createValue", "guessedtype": "function"}, "_getItem": {"return": {"type": "String|NULL", "description": "The value stored at the provided key."}, "description": "Implementation of the getItem login; should be overwritten by storage engine.", "protected": "", "params": [{"type": "String", "name": "key", "description": "  Required. The key used to reference this value."}], "guessedname": "_getItem", "guessedtype": "function"}, "_key": {"return": {"type": "String|NULL", "description": "Required. The key at the provided index (DOMString in HTML 5 spec)."}, "description": "Implementation of the key logic; should be overwritten by storage engine.", "protected": "", "params": [{"type": "Number", "name": "index", "description": "  Required. The index to retrieve (unsigned long in HTML 5 spec)."}], "guessedname": "_key", "guessedtype": "function"}, "setItem": {"description": "Remove an item from the data storage.", "param": "key {String} Required. The key used to reference this value (DOMString in HTML 5 spec).", "throws": "QUOTA_EXCEEDED_ERROR", "params": [{"type": "String", "name": "key", "description": "  Required. The key to remove (DOMString in HTML 5 spec)."}], "guessedname": "removeItem", "guessedtype": "function", "public": ""}, "_getValue": {"protected": "", "params": [{"type": "String", "name": "s", "description": "  Required. The stored value."}], "description": "Converts the stored value into its appropriate type.", "guessedname": "_getValue", "guessedtype": "function"}, "key": {"return": {"type": "String", "description": "Required. The key at the provided index (DOMString in HTML 5 spec)."}, "description": "Retrieve the key stored at the provided index; should be overwritten by storage engine.", "params": [{"type": "Number", "name": "index", "description": "  Required. The index to retrieve (unsigned long in HTML 5 spec)."}], "guessedname": "key", "guessedtype": "function", "public": ""}, "_removeItem": {"protected": "", "params": [{"type": "String", "name": "key", "description": "  Required. The key to remove."}], "description": "Implementation of the removeItem login; should be overwritten by storage engine.", "guessedname": "_removeItem", "guessedtype": "function"}, "hasKey": {"return": {"type": "Boolean", "description": "True when key has been set."}, "description": "Tests if the key has been set (not in HTML 5 spec); should be overwritten by storage engine.", "params": [{"type": "String", "name": "key", "description": "  Required. The key to search for."}], "guessedname": "hasKey", "guessedtype": "function", "public": ""}, "_setItem": {"return": {"type": "Boolean", "description": "True when successful, false when size QUOTA exceeded."}, "description": "Implementation of the setItem login; should be overwritten by storage engine.", "protected": "", "params": [{"type": "String", "name": "key", "description": "  Required. The key used to reference this value."}, {"type": "Object", "name": "data", "description": "  Required. The data to storage at key."}], "guessedname": "_setItem", "guessedtype": "function"}, "getName": {"public": "", "return": {"type": "String", "description": "The name of the data storage object."}, "description": "Fetches the storage object's name; should be overwritten by storage engine.", "guessedname": "getName", "guessedtype": "function"}}, "file": "Storage.js", "guessedtype": "function", "shortname": "Storage", "properties": {"CE_CHANGE": {"public": "", "type": "{String}", "description": "The event name for when the storage item has changed.", "guessedname": "CE_CHANGE", "guessedtype": "property"}, "_location": {"protected": "", "type": "{String}", "description": "The location for this instance.", "guessedname": "_location", "guessedtype": "property"}, "length": {"public": "", "type": "{Number}", "description": "The current length of the keys.", "guessedname": "length", "guessedtype": "property"}, "_name": {"protected": "", "type": "{String}", "description": "The name of this engine.", "guessedname": "_name", "guessedtype": "property"}, "CE_READY": {"public": "", "type": "{String}", "description": "The event name for when the storage item is ready.", "guessedname": "CE_READY", "guessedtype": "property"}, "DELIMITER": {"public": "", "type": "{String}", "description": "The delimiter uesed between the data type and the data.", "guessedname": "DELIMITER", "guessedtype": "property"}, "_cfg": {"protected": "", "type": "{Object}", "description": "The configuration of the engine.", "guessedname": "_cfg", "guessedtype": "property"}, "isReady": {"protected": "", "type": "{String}", "description": "This engine singleton has been initialized already.", "guessedname": "isReady", "guessedtype": "property"}}, "description": "The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API."}, "YAHOO.widget.Panel": {"name": "YAHOO.widget.Panel", "configs": {"keylisteners": {"default": "null", "type": "YAHOO.util.KeyListener[]", "description": "A KeyListener (or array of KeyListeners) that will be enabled \nwhen the Panel is shown, and disabled when the Panel is hidden."}, "draggable": {"default": "true", "type": "Boolean", "description": "Boolean specifying if the Panel should be draggable.  The default \nvalue is \"true\" if the Drag and Drop utility is included, \notherwise it is \"false.\" <strong>PLEASE NOTE:</strong> There is a \nknown issue in IE 6 (Strict Mode and Quirks Mode) and IE 7 \n(Quirks Mode) where Panels that either don't have a value set for \ntheir \"width\" configuration property, or their \"width\" \nconfiguration property is set to \"auto\" will only be draggable by\nplacing the mouse on the text of the Panel's header element.\nTo fix this bug, draggable Panels missing a value for their \n\"width\" configuration property, or whose \"width\" configuration \nproperty is set to \"auto\" will have it set to the value of \ntheir root HTML element's offsetWidth before they are made \nvisible.  The calculated width is then removed when the Panel is   \nhidden. <em>This fix is only applied to draggable Panels in IE 6 \n(Strict Mode and Quirks Mode) and IE 7 (Quirks Mode)</em>. For \nmore information on this issue see:\nYUILibrary bugs #1726972 and #1589210."}, "dragOnly": {"default": "false", "type": "Boolean", "description": "Boolean specifying if the draggable Panel should be drag only, not interacting with drop \ntargets on the page.\n<p>\nWhen set to true, draggable Panels will not check to see if they are over drop targets,\nor fire the DragDrop events required to support drop target interaction (onDragEnter, \nonDragOver, onDragOut, onDragDrop etc.).\nIf the Panel is not designed to be dropped on any target elements on the page, then this \nflag can be set to true to improve performance.\n</p>\n<p>\nWhen set to false, all drop target related events will be fired.\n</p>\n<p>\nThe property is set to false by default to maintain backwards compatibility but should be \nset to true if drop target interaction is not required for the Panel, to improve performance.</p>"}, "modal": {"default": "false", "type": "Boolean", "description": "True if the Panel should be displayed in a modal fashion, \nautomatically creating a transparent mask over the document that\nwill not be removed until the Panel is dismissed."}, "close": {"default": "true", "type": "Boolean", "description": "True if the Panel should display a \"close\" button"}, "underlay": {"default": "shadow", "type": "String", "description": "Sets the type of underlay to display for the Panel. Valid values \nare \"shadow,\" \"matte,\" and \"none\".  <strong>PLEASE NOTE:</strong> \nThe creation of the underlay element is deferred until the Panel \nis initially made visible.  For Gecko-based browsers on Mac\nOS X the underlay elment is always created as it is used as a \nshim to prevent Aqua scrollbars below a Panel instance from poking \nthrough it (See YUILibrary bug #1723530)."}, "strings": {"default": "An object literal with the properties shown below:\n<dl>\n<dt>close</dt><dd><em>String</em> : The string to use for the close icon. Defaults to \"Close\".</dd>\n</dl>", "type": "Object", "description": "UI Strings used by the Panel"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Panel <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Panel"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Panel. See configuration \ndocumentation for more details."}], "description": "Panel is an implementation of Overlay that behaves like an OS window, \nwith a draggable header and an optional close icon at the top right."}], "namespace": "YAHOO.widget", "module": "container", "events": {"showMaskEvent": {"description": "CustomEvent fired after the modality mask is shown", "guessedname": "showMaskEvent", "guessedtype": "property"}, "dragEvent": {"description": "CustomEvent when the Panel is dragged", "guessedname": "dragEvent", "guessedtype": "property"}, "hideMaskEvent": {"description": "CustomEvent fired after the modality mask is hidden", "guessedname": "hideMaskEvent", "guessedtype": "property"}}, "guessedname": "Panel", "methods": {"_removeFocusHandlers": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": "  Event type"}, {"type": "Array", "name": "p_aArgs", "description": "  Event Arguments"}], "description": "\"hideMask\" event handler that removes all \"focus\" event handlers added \nby the \"addFocusEventHandlers\" method.", "guessedname": "_removeFocusHandlers", "guessedtype": "function"}, "configClose": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"close\" property is changed.\nThe method controls the appending or hiding of the close icon at the \ntop right of the Panel.", "guessedname": "configClose", "guessedtype": "function"}, "render": {"return": {"type": "boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": " The element id to which the Module \nshould be appended to prior to rendering <em>OR</em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": " The element to which the Module \nshould be appended to prior to rendering"}], "description": "Renders the Panel by inserting the elements that are not already in \nthe main Panel into their correct places. Optionally appends the \nPanel to the specified node prior to the render's execution. NOTE: \nFor Panels without existing markup, the appendToNode argument is \nREQUIRED. If this argument is ommitted and the current element is \nnot present in the document, the function will return false, \nindicating that the render was a failure.", "guessedname": "render", "guessedtype": "function"}, "_doClose": {"protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": ""}], "description": "Event handler for the close icon", "guessedname": "_doClose", "guessedtype": "function"}, "stackMask": {"description": "Sets the zindex of the mask, if it exists, based on the zindex of \nthe Panel element. The zindex of the mask is set to be one less \nthan the Panel element's zindex.\n<p>NOTE: This method will not bump up the zindex of the Panel\nto ensure that the mask has a non-negative zindex. If you require the\nmask zindex to be 0 or higher, the zindex of the Panel \nshould be set to a value higher than 0, before this method is called.\n</p>", "guessedname": "stackMask", "guessedtype": "function"}, "_renderBody": {"protected": "", "params": [{"type": "HTMLElement", "name": "moduleElement", "description": " Optional. A reference to the module element."}], "description": "Renders the currently set body into it's proper position under the \nmodule element. If the module element is not provided, \"this.innerElement\" \nis used.", "guessedname": "_renderBody", "guessedtype": "function"}, "_createHiddenFocusElement": {"private": "", "description": "Creates a hidden focusable element, used to focus on,\nto enforce modality for browsers in which focus cannot\nbe applied to the container box.", "guessedname": "_createHiddenFocusElement", "guessedtype": "function"}, "sizeMask": {"description": "Sets the size of the modality mask to cover the entire scrollable \narea of the document", "guessedname": "sizeMask", "guessedtype": "function"}, "_renderHeader": {"protected": "", "params": [{"type": "HTMLElement", "name": "moduleElement", "description": " Optional. A reference to the module element"}], "description": "Renders the currently set header into it's proper position under the \nmodule element. If the module element is not provided, \"this.innerElement\" \nis used.", "guessedname": "_renderHeader", "guessedtype": "function"}, "hideMask": {"description": "Hides the modality mask.", "guessedname": "hideMask", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "focusFirst": {"description": "Sets focus to the first element in the Panel.", "guessedname": "focusFirst", "guessedtype": "function"}, "configModal": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"modal\" property is \nchanged. This handler subscribes or unsubscribes to the show and hide\nevents to handle the display or hide of the modality mask.", "guessedname": "configModal", "guessedtype": "function"}, "configKeyListeners": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration\nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"keylisteners\" property \nis changed.", "guessedname": "configKeyListeners", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Overlay <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Overlay. \nSee configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Panel."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "buildWrapper": {"description": "Builds the wrapping container around the Panel that is used for \npositioning the shadow and matte underlays. The container element is \nassigned to a  local instance variable called container, and the \nelement is reinserted inside of it.", "guessedname": "buildWrapper", "guessedtype": "function"}, "destroy": {"description": "Removes the Panel element from the DOM and sets all child elements\nto null.", "guessedname": "destroy", "guessedtype": "function"}, "removeMask": {"description": "Removes the modality mask.", "guessedname": "removeMask", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "registerDragDrop": {"description": "Registers the Panel's header for drag & drop capability.", "guessedname": "registerDragDrop", "guessedtype": "function"}, "showMask": {"description": "Shows the modality mask.", "guessedname": "showMask", "guessedtype": "function"}, "configStrings": {"description": "The default handler for the \"strings\" property", "guessedname": "configStrings", "guessedtype": "function"}, "_onElementFocus": {"guessedname": "_onElementFocus", "params": [{"type": "Event", "name": "e", "description": " The DOM event object"}], "description": "\"focus\" event handler for a focuable element. Used to automatically\nblur the element when it receives focus to ensure that a Panel\ninstance's modality is not compromised.", "private": "", "guessedtype": "function"}, "_addFocusHandlers": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": "  Custom event type"}, {"type": "Array", "name": "p_aArgs", "description": "  Custom event arguments"}], "description": "\"showMask\" event handler that adds a \"focus\" event handler to all\nfocusable elements in the document to enforce a Panel instance's \nmodality from being compromised.", "guessedname": "_addFocusHandlers", "guessedtype": "function"}, "forceUnderlayRedraw": {"description": "Forces the underlay element to be repainted through the application/removal \nof a yui-force-redraw class to the underlay element.", "guessedname": "forceUnderlayRedraw", "guessedtype": "function"}, "configUnderlay": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"underlay\" property \nis changed.", "guessedname": "configUnderlay", "guessedtype": "function"}, "focusLast": {"description": "Sets focus to the last element in the Panel.", "guessedname": "focusLast", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "configDraggable": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"draggable\" property \nis changed.", "guessedname": "configDraggable", "guessedtype": "function"}, "_renderFooter": {"protected": "", "params": [{"type": "HTMLElement", "name": "moduleElement", "description": " Optional. A reference to the module element"}], "description": "Renders the currently set footer into it's proper position under the \nmodule element. If the module element is not provided, \"this.innerElement\" \nis used.", "guessedname": "_renderFooter", "guessedtype": "function"}, "buildMask": {"description": "Builds the mask that is laid over the document when the Panel is \nconfigured to be modal.", "guessedname": "buildMask", "guessedtype": "function"}, "_autoFillOnHeightChange": {"protected": "", "params": [{"type": "String", "name": "type", "description": " The event type"}, {"type": "Array", "name": "args", "description": " The array of arguments passed to event subscribers"}, {"type": "HTMLElement", "name": "el", "description": " The header, body or footer element which is to be resized to fill\nout the containers height"}], "description": "The default custom event handler executed when the Panel's height is changed, \nif the autofillheight property has been set.", "guessedname": "_autoFillOnHeightChange", "guessedtype": "function"}, "setFirstLastFocusable": {"description": "Sets the firstElement and lastElement instance properties\nto the first and last focusable elements in the Panel.", "guessedname": "setFirstLastFocusable", "guessedtype": "function"}, "getFocusableElements": {"params": [{"type": "HTMLElement", "name": "root", "description": " element to start from."}], "description": "Returns an array of the currently focusable items which reside within\nPanel. The set of focusable elements the method looks for are defined\nin the Panel.FOCUSABLE static property", "guessedname": "getFocusableElements", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "sizeUnderlay": {"description": "Adjusts the size of the shadow based on the size of the element.", "guessedname": "sizeUnderlay", "guessedtype": "function"}, "setTabLoop": {"params": [{"type": "HTMLElement", "name": "firstElement", "description": ""}, {"type": "HTMLElement", "name": "lastElement", "description": ""}], "description": "Sets up a tab, shift-tab loop between the first and last elements\nprovided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener\ninstance properties, which are reset everytime this method is invoked.", "guessedname": "setTabLoop", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the Panel's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Panel.js", "guessedtype": "function", "shortname": "Panel", "properties": {"YAHOO.widget.Panel.CSS_PANEL_CONTAINER": {"description": "Constant representing the default CSS class used for a Panel's \nwrapping container", "static": "", "guessedname": "CSS_PANEL_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "dd": {"type": "YAHOO.util.DD", "description": "The YAHOO.util.DD instance, used to implement the draggable header for the panel if draggable is enabled", "guessedname": "dd", "guessedtype": "property"}, "YAHOO.widget.Panel.CSS_PANEL": {"description": "Constant representing the default CSS class used for a Panel", "static": "", "guessedname": "CSS_PANEL", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Panel's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Panel.FOCUSABLE": {"type": "Array", "static": "", "description": "Constant representing the default set of focusable elements \non the pagewhich Modal Panels will prevent access to, when\nthe modal mask is displayed", "guessedname": "FOCUSABLE", "guessedtype": "property"}, "DEFAULT_CONFIG": {"description": "Constant representing the Panel's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "Panel is an implementation of Overlay that behaves like an OS window, \nwith a draggable header and an optional close icon at the top right."}, "YAHOO.util.KeyListener": {"name": "YAHOO.util.KeyListener", "knownissue": "the \"keypress\" event is completely broken in Safari 2.x and below.\nthe workaround is use \"keydown\" for key listening.  However, if\nit is desired to prevent the default behavior of the keystroke,\nthat can only be done on the keypress event.  This makes key\nhandling quite ugly.", "constructors": [{"params": [{"type": "HTMLElement", "name": "attachTo", "description": " The element or element ID to which the key \nevent should be attached"}, {"type": "String", "name": "attachTo", "description": " The element or element ID to which the key\nevent should be attached"}, {"type": "Object", "name": "keyData", "description": "  The object literal representing the key(s) \nto detect. Possible attributes are \nshift(boolean), alt(boolean), ctrl(boolean) \nand keys(either an int or an array of ints \nrepresenting keycodes)."}, {"type": "Function", "name": "handler", "description": "  The CustomEvent handler to fire when the \nkey event is detected"}, {"type": "Object", "name": "handler", "description": "  An object literal representing the handler."}, {"type": "String", "name": "event", "description": "    Optional. The event (keydown or keyup) to \nlisten for. Defaults automatically to keydown."}], "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown/keyup events fired against DOM elements."}], "namespace": "YAHOO.util", "module": "event", "properties": {"YAHOO.util.KeyListener.KEYDOWN": {"description": "Constant representing the DOM \"keydown\" event.", "static": "", "guessedname": "KEYDOWN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.util.KeyListener.KEYUP": {"description": "Constant representing the DOM \"keyup\" event.", "static": "", "guessedname": "KEYUP", "guessedtype": "property", "type": "String", "final": ""}, "enabled": {"type": "Boolean", "description": "Boolean indicating the enabled/disabled state of the Tooltip", "guessedname": "enabled", "guessedtype": "property"}, "KEY": {"final": "", "static": "", "description": "keycode constants for a subset of the special keys", "guessedname": "KEY", "guessedtype": "property"}}, "guessedname": "KeyListener", "methods": {"handleKeyPress": {"params": [{"type": "DOMEvent", "name": "e", "description": "   The keypress DOM event"}, {"type": "Object", "name": "obj", "description": " The DOM event scope object"}], "description": "Handles the key event when a key is pressed.", "private": ""}, "enable": {"description": "Enables the KeyListener by attaching the DOM event listeners to the \ntarget DOM element", "guessedname": "enable", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the KeyListener"}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "disable": {"description": "Disables the KeyListener by removing the DOM event listeners from the \ntarget DOM element", "guessedname": "disable", "guessedtype": "function"}}, "file": "KeyListener.js", "guessedtype": "function", "shortname": "KeyListener", "events": {"enabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is enabled via the enable() \nfunction", "guessedname": "enabledEvent", "guessedtype": "property"}, "disabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is disabled via the \ndisable() function", "guessedname": "disabledEvent", "guessedtype": "property"}, "keyEvent": {"guessedname": "keyEvent", "params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired internally when a key is pressed", "private": "", "guessedtype": "property"}}, "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown/keyup events fired against DOM elements."}, "YAHOO.widget.Toolbar": {"name": "YAHOO.widget.Toolbar", "configs": {"disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the toolbar should be disabled. It will also disable the draggable attribute if it is on."}, "grouplabels": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the toolbar should show the group label's text string."}, "cont": {"type": "HTMLElement", "description": "The container for the toolbar."}, "collapse": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the the titlebar should have a collapse button.\nThe collapse button will not remove the toolbar, it will minimize it to the titlebar"}, "buttonType": {"type": "String", "description": "The buttonType to use (advanced or basic)"}, "buttons": {"type": "Array", "description": "Object specifying the buttons to include in the toolbar\nExample:\n<code><pre>\n{\n{ id: 'b3', type: 'button', label: 'Underline', value: 'underline' },\n{ type: 'separator' },\n{ id: 'b4', type: 'menu', label: 'Align', value: 'align',\nmenu: [\n{ text: \"Left\", value: 'alignleft' },\n{ text: \"Center\", value: 'aligncenter' },\n{ text: \"Right\", value: 'alignright' }\n]\n}\n}\n</pre></code>"}, "draggable": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the toolbar should be draggable."}, "titlebar": {"default": "false", "type": "Boolean or String", "description": "Boolean indicating if the toolbar should have a titlebar. If\npassed a string, it will use that as the titlebar text"}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The element to turn into a toolbar."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "Provides a rich toolbar widget based on the button and menu widgets"}], "namespace": "YAHOO.widget", "module": "editor", "events": {"buttonsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "buttonsChange", "description": "Fires when the value for the configuration attribute 'buttons' changes."}, "beforeDraggableChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDraggableChange", "description": "Fires before the value for the configuration attribute 'draggable' changes. Return false to cancel the attribute change."}, "toolbarCollapsed": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the toolbar is collapsed via the collapse button. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "grouplabelsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "grouplabelsChange", "description": "Fires when the value for the configuration attribute 'grouplabels' changes."}, "beforeTitlebarChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTitlebarChange", "description": "Fires before the value for the configuration attribute 'titlebar' changes. Return false to cancel the attribute change."}, "beforeCollapseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCollapseChange", "description": "Fires before the value for the configuration attribute 'collapse' changes. Return false to cancel the attribute change."}, "valueClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Object", "name": "o", "description": " The object passed to this handler is the button config used to create the button."}], "description": "This is a special dynamic event that is created and dispatched based on the value property\nof the button config. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.\nExample:\n<code><pre>\nbuttons : [\n{ type: 'button', value: 'test', value: 'testButton' }\n]</pre>\n</code>\nWith the valueClick event you could subscribe to this buttons click event with this:\ntbar.in('testButtonClick', function() { alert('test button clicked'); })"}, "buttonClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Object", "name": "o", "description": " The object passed to this handler is the button config used to create the button."}], "description": "Fires when any botton receives a click event. Passes back a single object representing the buttons config object. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeDisabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDisabledChange", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "beforeButtonTypeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeButtonTypeChange", "description": "Fires before the value for the configuration attribute 'buttonType' changes. Return false to cancel the attribute change."}, "buttonTypeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "buttonTypeChange", "description": "Fires when the value for the configuration attribute 'buttonType' changes."}, "titlebarChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "titlebarChange", "description": "Fires when the value for the configuration attribute 'titlebar' changes."}, "toolbarExpanded": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the toolbar is expanded via the collapse button. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "draggableChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' changes."}, "beforeButtonsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeButtonsChange", "description": "Fires before the value for the configuration attribute 'buttons' changes. Return false to cancel the attribute change."}, "beforeGrouplabelsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeGrouplabelsChange", "description": "Fires before the value for the configuration attribute 'grouplabels' changes. Return false to cancel the attribute change."}, "disabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "collapseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "collapseChange", "description": "Fires when the value for the configuration attribute 'collapse' changes."}}, "guessedname": "Toolbar", "methods": {"getButtons": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of buttons in the current toolbar", "guessedname": "getButtons", "guessedtype": "function"}, "enableButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String/Number", "name": "id", "description": " Enable a button by it's id, index or value."}], "description": "Enables a button in the toolbar.", "guessedname": "enableButton", "guessedtype": "function"}, "destroyButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String/Number", "name": "id", "description": " Destroy a button by it's id or index."}], "description": "Destroy a button in the toolbar.", "guessedname": "destroyButton", "guessedtype": "function"}, "_navigateButtons": {"guessedname": "_navigateButtons", "params": [{"type": "Event", "name": "ev", "description": " The Key Event"}], "description": "Handles the navigation/focus of toolbar buttons with the Arrow Keys", "private": "", "guessedtype": "function"}, "addButton": {"params": [{"type": "Object", "name": "oButton", "description": " Object literal reference to the Button's Config"}, {"type": "HTMLElement", "name": "after", "description": " Optional HTML element to insert this button after in the DOM."}], "description": "Add a new button to the toolbar. Buttons supported:\npush, split, menu, select, color, spin", "guessedname": "addButton", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the toolbar."}], "description": "Initializes all of the configuration attributes used to create \nthe toolbar.", "guessedname": "initAttributes", "guessedtype": "function"}, "enableAllButtons": {"return": {"type": "Boolean", "description": ""}, "description": "Enables all buttons in the toolbar.", "guessedname": "enableAllButtons", "guessedtype": "function"}, "selectButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String/Number", "name": "id", "description": " Select a button by it's id, index or value."}, {"type": "String", "name": "value", "description": " If this is a Menu Button, check this item in the menu"}], "description": "Selects a button in the toolbar.", "guessedname": "selectButton", "guessedtype": "function"}, "_buttonClick": {"protected": "", "params": [{"type": "String", "name": "ev", "description": " The event that was passed in."}, {"type": "Object", "name": "info", "description": " Object literal of information about the button that was clicked."}], "description": "Click handler for all buttons in the toolbar.", "guessedname": "_buttonClick", "guessedtype": "function"}, "isSelected": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String/Number", "name": "id", "description": " A button by it's id, index or value."}], "description": "Tells if a button is selected or not.", "guessedname": "isSelected", "guessedtype": "function"}, "init": {"description": "The Toolbar class's initialization method", "guessedname": "init", "guessedtype": "function"}, "addButtonToGroup": {"params": [{"type": "Object", "name": "oButton", "description": " Object literal reference to the Button's Config"}, {"type": "String", "name": "group", "description": " The Group identifier passed into the initial config"}, {"type": "HTMLElement", "name": "after", "description": " Optional HTML element to insert this button after in the DOM."}], "description": "Add a new button to a toolbar group. Buttons supported:\npush, split, menu, select, color, spin", "guessedname": "addButtonToGroup", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the toolbar.", "guessedname": "toString", "guessedtype": "function"}, "_resetColorPicker": {"description": "Clears the currently selected color or mouseover color in the color picker.", "private": "", "guessedname": "_resetColorPicker", "guessedtype": "function"}, "destroy": {"return": {"type": "Boolean", "description": ""}, "description": "Destroys the toolbar, all of it's elements and objects.", "guessedname": "destroy", "guessedtype": "function"}, "_handleFocus": {"description": "Sets up the listeners for the arrow key navigation", "private": "", "guessedname": "_handleFocus", "guessedtype": "function"}, "collapse": {"params": [{"type": "Boolean", "name": "collapse", "description": " True to collapse, false to expand."}], "description": "Programatically collapse the toolbar.", "guessedname": "collapse", "guessedtype": "function"}, "addSeparator": {"params": [{"type": "HTMLElement", "name": "cont", "description": " Optional HTML element to insert this button into."}, {"type": "HTMLElement", "name": "after", "description": " Optional HTML element to insert this button after in the DOM."}], "description": "Add a new button separator to the toolbar.", "guessedname": "addSeparator", "guessedtype": "function"}, "getButtonByIndex": {"return": {"type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a>", "description": ""}, "params": [{"type": "Number", "name": "index", "description": " The index of the button in _buttonList."}], "description": "Gets a button instance from the toolbar by is index in _buttonList.", "guessedname": "getButtonByIndex", "guessedtype": "function"}, "getButtonById": {"return": {"type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a>", "description": ""}, "params": [{"type": "String", "name": "id", "description": " The Dom id to query for."}], "description": "Gets a button instance from the toolbar by is Dom id.", "guessedname": "getButtonById", "guessedtype": "function"}, "resetAllButtons": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "_ex", "description": " Except these buttons"}], "description": "Resets all buttons to their initial state.", "guessedname": "resetAllButtons", "guessedtype": "function"}, "deselectAllButtons": {"return": {"type": "Boolean", "description": ""}, "description": "Deselects all buttons in the toolbar.", "guessedname": "deselectAllButtons", "guessedtype": "function"}, "disableButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String/Number", "name": "id", "description": " Disable a button by it's id, index or value."}], "description": "Disables a button in the toolbar.", "guessedname": "disableButton", "guessedtype": "function"}, "_addMenuClasses": {"guessedname": "_addMenuClasses", "params": [{"type": "String", "name": "ev", "description": " The event that fired."}, {"type": "Array", "name": "na", "description": " Array of event information."}, {"type": "Object", "name": "o", "description": " Button config object."}], "description": "This method is called from Menu's renderEvent to add a few more classes to the menu items", "private": "", "guessedtype": "function"}, "_makeSpinButton": {"guessedname": "_makeSpinButton", "params": [{"type": "Object", "name": "_button", "description": " <a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a> reference"}, {"type": "Object", "name": "oButton", "description": " Object literal containing the buttons initial config"}], "description": "Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values.", "private": "", "guessedtype": "function"}, "deselectButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String/Number", "name": "id", "description": " Deselect a button by it's id, index or value."}], "description": "Deselects a button in the toolbar.", "guessedname": "deselectButton", "guessedtype": "function"}, "addButtonGroup": {"params": [{"type": "Object", "name": "oGroup", "description": " Object literal reference to the Groups Config (contains an array of button configs as well as the group label)"}], "description": "Add a new button group to the toolbar. (uses addButton)", "guessedname": "addButtonGroup", "guessedtype": "function"}, "_createColorPicker": {"guessedname": "_createColorPicker", "params": [{"type": "String", "name": "id", "description": " the id of the toolbar to prefix this DOM container with."}], "description": "Creates the core DOM reference to the color picker menu item.", "private": "", "guessedtype": "function"}, "_makeColorButton": {"guessedname": "_makeColorButton", "params": [{"type": "Object", "name": "_oButton", "description": " <a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a> reference"}], "description": "Called to turn a \"color\" button into a menu button with an Overlay for the menu.", "private": "", "guessedtype": "function"}, "disableAllButtons": {"return": {"type": "Boolean", "description": ""}, "description": "Disables all buttons in the toolbar.", "guessedname": "disableAllButtons", "guessedtype": "function"}, "getButtonByValue": {"return": {"type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a> or <a href=\"YAHOO.widget.MenuItem.html\">YAHOO.widget.MenuItem</a>", "description": ""}, "params": [{"type": "String", "name": "value", "description": " The button value to query for."}], "description": "Gets a button instance or a menuitem instance from the toolbar by it's value.", "guessedname": "getButtonByValue", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "toolbar.js", "guessedtype": "function", "shortname": "Toolbar", "properties": {"_configuredButtons": {"protected": "", "type": "Array", "guessedname": "_configuredButtons", "guessedtype": "property"}, "STR_SPIN_LABEL": {"type": "String", "description": "String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute", "guessedname": "STR_SPIN_LABEL", "guessedtype": "property"}, "_toolbarConfigs": {"protected": "", "type": "Object", "guessedname": "_toolbarConfigs", "guessedtype": "property"}, "STR_SPIN_UP": {"type": "String", "description": "String for spinbutton up", "guessedname": "STR_SPIN_UP", "guessedtype": "property"}, "_buttonList": {"protected": "", "type": "Array", "description": "Internal property list of current buttons in the toolbar", "guessedname": "_buttonList", "guessedtype": "property"}, "_colorPicker": {"type": "HTMLElement", "description": "The HTML Element containing the colorPicker", "guessedname": "_colorPicker", "guessedtype": "property"}, "STR_COLLAPSE": {"type": "String", "description": "String for Toolbar Collapse Button", "guessedname": "STR_COLLAPSE", "guessedtype": "property"}, "_navCounter": {"guessedname": "_navCounter", "type": "Number", "description": "Internal counter for walking the buttons in the toolbar with the arrow keys", "private": "", "guessedtype": "property"}, "CLASS_PREFIX": {"protected": "", "type": "String", "description": "Default prefix for dynamically created class names", "guessedname": "CLASS_PREFIX", "guessedtype": "property"}, "CLASS_DRAGHANDLE": {"protected": "", "type": "String", "description": "Default CSS class to apply to the toolbar's drag handle element", "guessedname": "CLASS_DRAGHANDLE", "guessedtype": "property"}, "_colorData": {"type": "Object", "description": "Object reference containing colors hex and text values.", "guessedname": "_colorData", "guessedtype": "property"}, "_sepCount": {"protected": "", "type": "Number", "description": "Internal refernce for counting separators, so we can give them a useful class name for styling", "guessedname": "_sepCount", "guessedtype": "property"}, "dd": {"type": "Object", "description": "The DragDrop instance associated with the Toolbar", "guessedname": "dd", "guessedtype": "property"}, "_keyNav": {"guessedname": "_keyNav", "type": "Boolean", "description": "Flag to determine if the arrow nav listeners have been attached", "private": "", "guessedtype": "property"}, "_titlebar": {"type": "HTMLElement", "description": "Object reference to the titlebar", "guessedname": "_titlebar", "guessedtype": "property"}, "CLASS_CONTAINER": {"protected": "", "type": "String", "description": "Default CSS class to apply to the toolbar container element", "guessedname": "CLASS_CONTAINER", "guessedtype": "property"}, "_buttonGroupList": {"protected": "", "type": "Array", "description": "Internal property list of current button groups in the toolbar", "guessedname": "_buttonGroupList", "guessedtype": "property"}, "CLASS_DISABLED": {"protected": "", "type": "String", "description": "Default CSS class to apply when the toolbar is disabled", "guessedname": "CLASS_DISABLED", "guessedtype": "property"}, "buttonType": {"type": "Object", "description": "The default button to use", "guessedname": "buttonType", "guessedtype": "property"}, "STR_EXPAND": {"type": "String", "description": "String for Toolbar Collapse Button - Expand", "guessedname": "STR_EXPAND", "guessedtype": "property"}, "_sep": {"protected": "", "type": "HTMLElement", "description": "Internal reference to the separator HTML Element for cloning", "guessedname": "_sep", "guessedtype": "property"}, "STR_SPIN_DOWN": {"type": "String", "description": "String for spinbutton down", "guessedname": "STR_SPIN_DOWN", "guessedtype": "property"}, "CLASS_SEPARATOR": {"protected": "", "type": "String", "description": "Default CSS class to apply to all separators in the toolbar", "guessedname": "CLASS_SEPARATOR", "guessedtype": "property"}, "draghandle": {"protected": "", "type": "HTMLElement", "guessedname": "_dragHandle", "guessedtype": "property"}, "browser": {"type": "Object", "description": "Standard browser detection", "guessedname": "browser", "guessedtype": "property"}}, "description": "Provides a rich toolbar widget based on the button and menu widgets"}, "YAHOO.widget.PieChart": {"name": "YAHOO.widget.PieChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "PieChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "events": {"beforeDataFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataFieldChange", "description": "Fires before the value for the configuration attribute 'dataField' changes. Return false to cancel the attribute change."}, "dataFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataFieldChange", "description": "Fires when the value for the configuration attribute 'dataField' changes."}, "beforeCategoryFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCategoryFieldChange", "description": "Fires before the value for the configuration attribute 'categoryField' changes. Return false to cancel the attribute change."}, "categoryFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "categoryFieldChange", "description": "Fires when the value for the configuration attribute 'categoryField' changes."}}, "guessedname": "PieChart", "methods": {"_setDataField": {"private": "", "description": "Setter for the dataField attribute.", "guessedname": "_setDataField", "guessedtype": "function"}, "_setCategoryField": {"private": "", "description": "Setter for the categoryField attribute.", "guessedname": "_setCategoryField", "guessedtype": "function"}, "_getCategoryField": {"private": "", "description": "Getter for the categoryField attribute.", "guessedname": "_getCategoryField", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_getDataField": {"private": "", "description": "Getter for the dataField attribute.", "guessedname": "_getDataField", "guessedtype": "function"}}, "uses": ["YAHOO.widget.Chart"], "file": "PieChart.js", "guessedtype": "function", "shortname": "PieChart", "configs": {"categoryField": {"type": "String", "description": "The field in each item that corresponds to the category value."}, "dataField": {"type": "String", "description": "The field in each item that corresponds to the data value."}}, "description": "PieChart class for the YUI Charts widget."}, "YAHOO.widget.CellEditor": {"name": "YAHOO.widget.CellEditor", "constructors": [{"params": [{"type": "String", "name": "sType", "description": "  Type indicator, to map to YAHOO.widget.DataTable.Editors."}, {"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "Factory class for instantiating a BaseCellEditor subclass."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "CellEditor", "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "CellEditor", "description": "Factory class for instantiating a BaseCellEditor subclass."}, "YAHOO.util.Resize": {"name": "YAHOO.util.Resize", "configs": {"maxX": {"type": "Number", "description": "The max x coord of the element"}, "maxY": {"type": "Number", "description": "The max y coord of the element"}, "maxWidth": {"type": "Number", "description": "The maximum width of the element"}, "animateEasing": {"type": "Object", "description": "The Easing to apply to the animation."}, "height": {"type": "Number", "description": "The height of the element"}, "yTicks": {"type": "Number or False", "description": "The number of y ticks to span the resize to."}, "wrap": {"type": "Boolean", "description": "Should we wrap the element"}, "animate": {"type": "Boolean", "description": "Should be use animation to resize the element (can only be used if we use proxy)."}, "knobHandles": {"type": "Boolean", "description": "Use the smaller handles, instead if the full size handles."}, "minWidth": {"type": "Number", "description": "The minimum width of the element"}, "ratio": {"type": "Boolean", "description": "Maintain the element's ratio when resizing."}, "width": {"type": "Number", "description": "The width of the element"}, "minX": {"type": "Number", "description": "The minimum x coord of the element"}, "minY": {"type": "Number", "description": "The minimum y coord of the element"}, "handles": {"type": "Array", "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl', 'br', 'tl', 'tr'. Defaults to: ['r', 'b', 'br'].\nCan use a shortcut of All. Note: 8 way resizing should be done on an element that is absolutely positioned."}, "status": {"type": "Boolean", "description": "Show the status (new size) of the resize."}, "hover": {"type": "Boolean", "description": "Only show the handles when they are being moused over."}, "minHeight": {"type": "Number", "description": "The minimum height of the element"}, "xTicks": {"type": "Number or False", "description": "The number of x ticks to span the resize to."}, "proxy": {"type": "Boolean", "description": "Resize a proxy element instead of the real element."}, "hiddenHandles": {"type": "Boolean", "description": "Don't show the handles, just use the cursor to the user."}, "animateDuration": {"type": "Number", "description": "The Duration to apply to the animation."}, "ghost": {"type": "Boolean", "description": "Apply an opacity filter to the element being resized (only works with proxy)."}, "useShim": {"type": "Boolean", "description": "This setting will be passed to the DragDrop instances on the resize handles and for the draggable property.\nThis property should be used if you want the resize handles to work over iframe and other elements."}, "maxHeight": {"type": "Number", "description": "The maximum height of the element"}, "autoRatio": {"type": "Boolean", "description": "Using the shift key during a resize will toggle the ratio config."}, "draggable": {"type": "Boolean", "description": "A convienence method to make the element draggable"}, "setSize": {"type": "Boolean", "description": "Set the size of the resized element, if set to false the element will not be auto resized,\nthe resize event will contain the dimensions so the end user can resize it on their own.\nThis setting will only work with proxy set to true and animate set to false."}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The element to make resizable."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Makes an element resizable</p>"}], "namespace": "YAHOO.util", "module": "resize", "events": {"beforeXTicksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeXTicksChange", "description": "Fires before the value for the configuration attribute 'xTicks' changes. Return false to cancel the attribute change."}, "proxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' changes."}, "beforeAutoRatioChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAutoRatioChange", "description": "Fires before the value for the configuration attribute 'autoRatio' changes. Return false to cancel the attribute change."}, "beforeGhostChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeGhostChange", "description": "Fires before the value for the configuration attribute 'ghost' changes. Return false to cancel the attribute change."}, "heightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' changes."}, "beforeProxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeProxyChange", "description": "Fires before the value for the configuration attribute 'proxy' changes. Return false to cancel the attribute change."}, "beforeAnimateEasingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimateEasingChange", "description": "Fires before the value for the configuration attribute 'animateEasing' changes. Return false to cancel the attribute change."}, "beforeMaxHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxHeightChange", "description": "Fires before the value for the configuration attribute 'maxHeight' changes. Return false to cancel the attribute change."}, "minYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minYChange", "description": "Fires when the value for the configuration attribute 'minY' changes."}, "maxWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' changes."}, "maxYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxYChange", "description": "Fires when the value for the configuration attribute 'maxY' changes."}, "ratioChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "ratioChange", "description": "Fires when the value for the configuration attribute 'ratio' changes."}, "animateDurationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animateDurationChange", "description": "Fires when the value for the configuration attribute 'animateDuration' changes."}, "beforeRatioChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRatioChange", "description": "Fires before the value for the configuration attribute 'ratio' changes. Return false to cancel the attribute change."}, "autoRatioChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "autoRatioChange", "description": "Fires when the value for the configuration attribute 'autoRatio' changes."}, "beforeHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeightChange", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "proxyResize": {"type": "YAHOO.util.CustomEvent", "description": "Fires on every proxy resize (only fires when used with proxy config setting)."}, "beforeHiddenHandlesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHiddenHandlesChange", "description": "Fires before the value for the configuration attribute 'hiddenHandles' changes. Return false to cancel the attribute change."}, "beforeMinWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinWidthChange", "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change."}, "setSizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "setSizeChange", "description": "Fires when the value for the configuration attribute 'setSize' changes."}, "statusChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "statusChange", "description": "Fires when the value for the configuration attribute 'status' changes."}, "beforeMinHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinHeightChange", "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change."}, "maxHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' changes."}, "beforeStatusChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeStatusChange", "description": "Fires before the value for the configuration attribute 'status' changes. Return false to cancel the attribute change."}, "beforeWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWidthChange", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "useShimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' changes."}, "hoverChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hoverChange", "description": "Fires when the value for the configuration attribute 'hover' changes."}, "draggableChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' changes."}, "beforeMaxXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxXChange", "description": "Fires before the value for the configuration attribute 'maxX' changes. Return false to cancel the attribute change."}, "minWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' changes."}, "beforeKnobHandlesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeKnobHandlesChange", "description": "Fires before the value for the configuration attribute 'knobHandles' changes. Return false to cancel the attribute change."}, "ghostChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "ghostChange", "description": "Fires when the value for the configuration attribute 'ghost' changes."}, "hiddenHandlesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hiddenHandlesChange", "description": "Fires when the value for the configuration attribute 'hiddenHandles' changes."}, "xTicksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "xTicksChange", "description": "Fires when the value for the configuration attribute 'xTicks' changes."}, "startResize": {"type": "YAHOO.util.CustomEvent", "description": "Fires when a resize action is started."}, "beforeHandlesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHandlesChange", "description": "Fires before the value for the configuration attribute 'handles' changes. Return false to cancel the attribute change."}, "animateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animateChange", "description": "Fires when the value for the configuration attribute 'animate' changes."}, "beforeAnimateDurationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimateDurationChange", "description": "Fires before the value for the configuration attribute 'animateDuration' changes. Return false to cancel the attribute change."}, "dragEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> dragEvent is fired for the config option draggable."}, "beforeMinYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinYChange", "description": "Fires before the value for the configuration attribute 'minY' changes. Return false to cancel the attribute change."}, "beforeWrapChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWrapChange", "description": "Fires before the value for the configuration attribute 'wrap' changes. Return false to cancel the attribute change."}, "beforeMinXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinXChange", "description": "Fires before the value for the configuration attribute 'minX' changes. Return false to cancel the attribute change."}, "beforeDraggableChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDraggableChange", "description": "Fires before the value for the configuration attribute 'draggable' changes. Return false to cancel the attribute change."}, "knobHandlesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "knobHandlesChange", "description": "Fires when the value for the configuration attribute 'knobHandles' changes."}, "beforeResize": {"type": "YAHOO.util.CustomEvent", "description": "Fires before every element resize after the size calculations, returning false will stop the resize."}, "resize": {"type": "YAHOO.util.CustomEvent", "description": "Fires on every element resize (only fires once when used with proxy config setting)."}, "endResize": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouseUp event from the Drag Instance fires."}, "beforeSetSizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSetSizeChange", "description": "Fires before the value for the configuration attribute 'setSize' changes. Return false to cancel the attribute change."}, "beforeAnimateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimateChange", "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change."}, "minHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' changes."}, "beforeHoverChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHoverChange", "description": "Fires before the value for the configuration attribute 'hover' changes. Return false to cancel the attribute change."}, "beforeMaxWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxWidthChange", "description": "Fires before the value for the configuration attribute 'maxWidth' changes. Return false to cancel the attribute change."}, "animateEasingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animateEasingChange", "description": "Fires when the value for the configuration attribute 'animateEasing' changes."}, "beforeUseShimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUseShimChange", "description": "Fires before the value for the configuration attribute 'useShim' changes. Return false to cancel the attribute change."}, "beforeMaxYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxYChange", "description": "Fires before the value for the configuration attribute 'maxY' changes. Return false to cancel the attribute change."}, "wrapChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' changes."}, "maxXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxXChange", "description": "Fires when the value for the configuration attribute 'maxX' changes."}, "handlesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' changes."}, "beforeYTicksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeYTicksChange", "description": "Fires before the value for the configuration attribute 'yTicks' changes. Return false to cancel the attribute change."}, "yTicksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "yTicksChange", "description": "Fires when the value for the configuration attribute 'yTicks' changes."}, "minXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minXChange", "description": "Fires when the value for the configuration attribute 'minX' changes."}, "widthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' changes."}}, "guessedname": "Resize", "methods": {"_handle_for_bl": {"guessedname": "_handle_for_bl", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Bottom Left handle.", "private": "", "guessedtype": "function"}, "_setHeight": {"return": {"type": "Number", "description": "The new value"}, "description": "Calculated the height based on the mouse event.", "private": "", "params": [{"type": "Event", "name": "ev", "description": " The mouse event."}, {"type": "Boolean", "name": "flip", "description": " Argument to determine the direction of the movement."}], "guessedname": "_setHeight", "guessedtype": "function"}, "lock": {"return": {"type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>", "description": "The Resize instance"}, "params": [{"type": "Boolean", "name": "dd", "description": " If the draggable config is set, lock it too"}], "description": "Lock the resize so it can't be resized", "guessedname": "lock", "guessedtype": "function"}, "_handleStartDrag": {"guessedname": "_handleStartDrag", "params": [{"type": "Object", "name": "args", "description": " The args passed from the CustomEvent."}, {"type": "Object", "name": "dd", "description": " The <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> object we are working with."}], "description": "Resizes the proxy, sets up the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> handlers, updates the status div and preps the cache", "private": "", "guessedtype": "function"}, "getProxyEl": {"return": {"type": "HTMLElement", "description": "The proxy element"}, "description": "Get the HTML reference for the proxy, returns null if no proxy.", "guessedname": "getProxyEl", "guessedtype": "function"}, "_handle_for_tl": {"guessedname": "_handle_for_tl", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Top Left handle.", "private": "", "guessedtype": "function"}, "_snapTick": {"return": {"type": "Number", "description": "the new snapped position"}, "description": "Adjusts the number based on the ticks used.", "private": "", "params": [{"type": "Number", "name": "size", "description": " The size to tick against."}, {"type": "Number", "name": "pix", "description": " The tick pixels."}], "guessedname": "_snapTick", "guessedtype": "function"}, "unlock": {"return": {"type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>", "description": "The Resize instance"}, "params": [{"type": "Boolean", "name": "dd", "description": " If the draggable config is set, unlock it too"}], "description": "Unlock the resize so it can be resized", "guessedname": "unlock", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the utility."}], "description": "Initializes all of the configuration attributes used to create a resizable element.", "private": "", "guessedtype": "function"}, "_handle_for_tr": {"guessedname": "_handle_for_tr", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Top Right handle.", "private": "", "guessedtype": "function"}, "_handle_for_br": {"guessedname": "_handle_for_br", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Bottom Right handle.", "private": "", "guessedtype": "function"}, "getResizeById": {"static": "", "return": {"type": "Object", "description": "The Resize Object"}, "description": "Get's a resize object by the HTML id of the element associated with the Resize object.", "guessedname": "getResizeById", "guessedtype": "function"}, "_createProxy": {"description": "Creates the proxy element if the proxy config is true", "private": "", "guessedname": "_createProxy", "guessedtype": "function"}, "_setCache": {"description": "Sets up the this._cache hash table.", "private": "", "guessedname": "_setCache", "guessedtype": "function"}, "init": {"description": "The Resize class's initialization method", "private": "", "guessedname": "init", "guessedtype": "function"}, "isLocked": {"return": {"type": "Boolean", "description": ""}, "description": "Check the locked status of the resize instance", "guessedname": "isLocked", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the Resize Object.", "guessedname": "toString", "guessedtype": "function"}, "_createHandles": {"description": "Creates the handles as specified in the config", "private": "", "guessedname": "_createHandles", "guessedtype": "function"}, "destroy": {"description": "Destroys the resize object and all of it's elements & listeners.", "guessedname": "destroy", "guessedtype": "function"}, "_setAutoRatio": {"guessedname": "_setAutoRatio", "params": [{"type": "Event", "name": "ev", "description": " A mouse event."}], "description": "This method checks to see if the \"autoRatio\" config is set. If it is, we will check to see if the \"Shift Key\" is pressed. If so, we will set the config ratio to true.", "private": "", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_checkWidth": {"return": {"type": "Number", "description": "the new value"}, "description": "Checks the value passed against the maxWidth and minWidth.", "private": "", "params": [{"type": "Number", "name": "w", "description": " The width to check."}], "guessedname": "_checkWidth", "guessedtype": "function"}, "_handleMouseDown": {"guessedname": "_handleMouseDown", "params": [{"type": "Event", "name": "ev", "description": " A mouse event."}], "description": "This method preps the autoRatio on MouseDown.", "private": "", "guessedtype": "function"}, "_createWrap": {"description": "Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select", "private": "", "guessedname": "_createWrap", "guessedtype": "function"}, "getStatusEl": {"return": {"type": "HTMLElement", "description": "The status element"}, "description": "Get the HTML reference for the status element.", "guessedname": "getStatusEl", "guessedtype": "function"}, "getWrapEl": {"return": {"type": "HTMLElement", "description": "The wrap element"}, "description": "Get the HTML reference for the wrap element, returns the current element if not wrapped.", "guessedname": "getWrapEl", "guessedtype": "function"}, "_setupDragDrop": {"description": "Setup the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> instance on the element", "private": "", "guessedname": "_setupDragDrop", "guessedtype": "function"}, "_handleMouseOver": {"guessedname": "_handleMouseOver", "params": [{"type": "Event", "name": "ev", "description": " A mouse event."}], "description": "Adds CSS class names to the handles", "private": "", "guessedtype": "function"}, "resize": {"return": {"type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>", "description": "The Resize instance"}, "description": "Resizes the element, wrapper or proxy based on the data from the handlers.", "private": "", "params": [{"type": "Event", "name": "ev", "description": " The mouse event."}, {"type": "Number", "name": "h", "description": " The new height setting."}, {"type": "Number", "name": "w", "description": " The new width setting."}, {"type": "Number", "name": "t", "description": " The new top setting."}, {"type": "Number", "name": "l", "description": " The new left setting."}, {"type": "Boolean", "name": "force", "description": " Resize the element (used for proxy resize)."}, {"type": "Boolean", "name": "silent", "description": " Don't fire the beforeResize Event."}], "guessedname": "resize", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [{"type": "Event", "name": "ev", "description": " A mouse event."}], "description": "Cleans up listeners, hides proxy element and removes class names.", "private": "", "guessedtype": "function"}, "reset": {"return": {"type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>", "description": "The Resize instance"}, "description": "Resets the element to is start state.", "guessedname": "reset", "guessedtype": "function"}, "_setRatio": {"return": {"type": "Array", "description": "The new Height, Width, Top & Left settings"}, "description": "Using the Height, Width, Top & Left, it recalcuates them based on the original element size.", "private": "", "params": [{"type": "Number", "name": "h", "description": " The height offset."}, {"type": "Number", "name": "w", "description": " The with offset."}, {"type": "Number", "name": "t", "description": " The top offset."}, {"type": "Number", "name": "l", "description": " The left offset."}], "guessedname": "_setRatio", "guessedtype": "function"}, "_setWidth": {"return": {"type": "Number", "description": "The new value"}, "description": "Calculates the width based on the mouse event.", "private": "", "params": [{"type": "Event", "name": "ev", "description": " The mouse event."}, {"type": "Boolean", "name": "flip", "description": " Argument to determine the direction of the movement."}], "guessedname": "_setWidth", "guessedtype": "function"}, "_checkHeight": {"return": {"type": "Number", "description": "The new value"}, "description": "Checks the value passed against the maxHeight and minHeight.", "private": "", "params": [{"type": "Number", "name": "h", "description": " The height to check."}], "guessedname": "_checkHeight", "guessedtype": "function"}, "getActiveHandleEl": {"return": {"type": "HTMLElement", "description": "The handle element that is active"}, "description": "Get the HTML reference for the currently active resize handle.", "guessedname": "getActiveHandleEl", "guessedtype": "function"}, "_handle_for_r": {"guessedname": "_handle_for_r", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Right handle.", "private": "", "guessedtype": "function"}, "_handle_for_t": {"guessedname": "_handle_for_t", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Top handle.", "private": "", "guessedtype": "function"}, "_updateStatus": {"guessedname": "_updateStatus", "params": [{"type": "Number", "name": "h", "description": " The new height setting."}, {"type": "Number", "name": "w", "description": " The new width setting."}, {"type": "Number", "name": "t", "description": " The new top setting."}, {"type": "Number", "name": "l", "description": " The new left setting."}], "description": "Using the Height, Width, Top & Left, it updates the status element with the elements sizes.", "private": "", "guessedtype": "function"}, "isActive": {"return": {"type": "Boolean", "description": ""}, "description": "Returns true or false if a resize operation is currently active on the element.", "guessedname": "isActive", "guessedtype": "function"}, "_handle_for_l": {"guessedname": "_handle_for_l", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Left handle.", "private": "", "guessedtype": "function"}, "_handleMouseOut": {"guessedname": "_handleMouseOut", "params": [{"type": "Event", "name": "ev", "description": " A mouse event."}], "description": "Removes CSS class names to the handles", "private": "", "guessedtype": "function"}, "_handle_for_b": {"guessedname": "_handle_for_b", "params": [{"type": "Object", "name": "args", "description": " The arguments from the CustomEvent."}], "description": "Handles the sizes for the Bottom handle.", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "resize.js", "guessedtype": "function", "shortname": "Resize", "properties": {"CSS_RESIZING": {"guessedname": "CSS_RESIZING", "type": "String", "description": "Class name given to the wrap element when a resize action is taking place.", "private": "", "guessedtype": "property"}, "_cache": {"guessedname": "_cache", "type": "Object", "description": "An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc..", "private": "", "guessedtype": "property"}, "_dds": {"guessedname": "_dds", "type": "Object", "description": "An Object containing references to all of the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> instances used for the resize handles", "private": "", "guessedtype": "property"}, "CSS_HIDDEN": {"guessedname": "CSS_HIDDEN", "type": "String", "description": "Class name given to the wrap element to make all handles hidden", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "Object", "description": "An object containing references to all of the resize handles.", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}, "CSS_STATUS": {"guessedname": "CSS_STATUS", "type": "String", "description": "Class name given to the status element", "private": "", "guessedtype": "property"}, "CSS_RESIZE": {"guessedname": "CSS_RESIZE", "type": "String", "description": "Base CSS class name", "private": "", "guessedtype": "property"}, "CSS_WRAP": {"guessedname": "CSS_WRAP", "type": "String", "description": "Class name given to the wrap element", "private": "", "guessedtype": "property"}, "_instances": {"description": "Internal hash table for all resize instances", "private": "", "static": "", "guessedname": "_instances", "guessedtype": "property", "type": "Object"}, "CSS_DRAG": {"guessedname": "CSS_DRAG", "type": "String", "description": "Class name added when dragging is enabled", "private": "", "guessedtype": "property"}, "_resizeEvent": {"guessedname": "_resizeEvent", "type": "Event", "description": "The mouse event used to resize with", "private": "", "guessedtype": "property"}, "_proxy": {"guessedname": "_proxy", "type": "HTMLElement", "description": "The HTML reference of the element proxy", "private": "", "guessedtype": "property"}, "dd": {"guessedname": "dd", "type": "Object", "description": "The <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> instance used if draggable is true", "private": "", "guessedtype": "property"}, "CSS_HANDLE": {"guessedname": "CSS_HANDLE", "type": "String", "description": "Class name given to all handles, used as a base for single handle names as well.. Handle \"t\" will get this.CSS_HANDLE + '-t' as well as this.CSS_HANDLE", "private": "", "guessedtype": "property"}, "CSS_PROXY": {"guessedname": "CSS_PROXY", "type": "String", "description": "Class name given to the proxy element", "private": "", "guessedtype": "property"}, "CSS_GHOST": {"guessedname": "CSS_GHOST", "type": "String", "description": "Class name given to the wrap element when the ghost property is active", "private": "", "guessedtype": "property"}, "CSS_HOVER": {"guessedname": "CSS_HOVER", "type": "String", "description": "Class name used for hover only handles", "private": "", "guessedtype": "property"}, "_positioned": {"guessedname": "_positioned", "type": "Boolean", "description": "A flag to show if the element is absolutely positioned", "private": "", "guessedtype": "property"}, "_wrap": {"guessedname": "_wrap", "type": "HTMLElement", "description": "The HTML reference of the element wrapper", "private": "", "guessedtype": "property"}, "_active": {"guessedname": "_active", "type": "Boolean", "description": "Flag to show if the resize is active. Used for events.", "private": "", "guessedtype": "property"}, "_locked": {"guessedname": "_locked", "type": "Boolean", "description": "A flag to show if the resize is locked", "private": "", "guessedtype": "property"}, "CSS_KNOB": {"guessedname": "CSS_KNOB", "type": "String", "description": "Class name used to make the knob style handles", "private": "", "guessedtype": "property"}, "_currentHandle": {"guessedname": "_currentHandle", "type": "String", "description": "The string identifier of the currently active handle. e.g. 'r', 'br', 'tl'", "private": "", "guessedtype": "property"}, "_currentDD": {"guessedname": "_currentDD", "type": "Object", "description": "A link to the currently active DD object", "private": "", "guessedtype": "property"}, "browser": {"guessedname": "browser", "type": "Object", "description": "A copy of the YAHOO.env.ua property", "private": "", "guessedtype": "property"}}, "description": "<p>Makes an element resizable</p>"}, "YAHOO.widget.StackedBarChart": {"name": "YAHOO.widget.StackedBarChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "StackedBarChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "StackedBarChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "StackedBarChart", "description": "StackedBarChart class for the YUI Charts widget."}, "YAHOO.util.Config": {"name": "YAHOO.util.Config", "constructors": [{"params": [{"type": "Object", "name": "owner", "description": " The owner Object to which this Config Object belongs"}], "description": "Config is a utility used within an Object to allow the implementer to\nmaintain a list of local configuration properties and listen for changes \nto those properties dynamically using CustomEvent. The initial values are \nalso maintained so that the configuration can be reset at any given point \nto its initial state."}], "namespace": "YAHOO.util", "module": "container", "events": {"configChangedEvent": {"description": "Custom Event, notifying subscribers when Config properties are set \n(setProperty is called without the silent flag", "guessedname": "configChangedEvent", "guessedtype": "property"}}, "guessedname": "Config", "methods": {"fireQueue": {"description": "Fires the normalized list of queued property change events", "guessedname": "fireQueue", "guessedtype": "function"}, "YAHOO.util.Config.alreadySubscribed": {"return": {"type": "Boolean", "description": "true, if the function/Object pair is already subscribed \nto the CustomEvent passed in"}, "description": "Checks to determine if a particular function/Object pair are already \nsubscribed to the specified CustomEvent", "static": "", "guessedname": "alreadySubscribed", "guessedtype": "function", "params": [{"type": "YAHOO.util.CustomEvent", "name": "evt", "description": " The CustomEvent for which to check \nthe subscriptions"}, {"type": "Function", "name": "fn", "description": " The function to look for in the subscribers list"}, {"type": "Object", "name": "obj", "description": " The execution scope Object for the subscription"}]}, "getProperty": {"return": {"type": "Object", "description": "The value of the specified property"}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}], "description": "Returns the value of specified property.", "guessedname": "getProperty", "guessedtype": "function"}, "addProperty": {"params": [{"type": "String", "name": "key", "description": " The configuration property's name"}, {"type": "Object", "name": "propertyObject", "description": " The Object containing all of this \nproperty's arguments"}], "description": "Adds a property to the Config Object's private config hash.", "guessedname": "addProperty", "guessedtype": "function"}, "queueProperty": {"return": {"type": "Boolean", "description": "true, if the set was successful, false if \nit failed."}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}, {"type": "String", "name": "value", "description": " The value to set the property to"}], "description": "Sets the value of a property and queues its event to execute. If the \nevent is already scheduled to execute, it is\nmoved from its current position to the end of the queue.", "guessedname": "queueProperty", "guessedtype": "function"}, "checkNumber": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": " The value to validate"}], "description": "Validates that the value passed in is a number.", "guessedname": "checkNumber", "guessedtype": "function"}, "outputEventQueue": {"return": {"type": "String", "description": "The string list of CustomEvents currently queued \nfor execution"}, "description": "Returns a string representation of the Config object's current \nCustomEvent queue", "guessedname": "outputEventQueue", "guessedtype": "function"}, "resetProperty": {"return": {"type": "Boolean", "description": "True is the property was reset, false if not"}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}], "description": "Resets the specified property's value to its initial value.", "guessedname": "resetProperty", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "Object", "name": "userConfig", "description": " The configuration Object literal"}, {"type": "Boolean", "name": "init", "description": "  When set to true, the initialConfig will \nbe set to the userConfig passed in, so that calling a reset will \nreset the properties to the passed values."}], "description": "Applies a key-value Object literal to the configuration, replacing  \nany existing values, and queueing the property events.\nAlthough the values will be set, fireQueue() must be called for their \nassociated events to execute.", "guessedname": "applyConfig", "guessedtype": "function"}, "refresh": {"description": "Refires the events for all configuration properties using their \ncurrent values.", "guessedname": "refresh", "guessedtype": "function"}, "subscribeToConfigEvent": {"return": {"type": "Boolean", "description": "True, if the subscription was successful, \notherwise false."}, "params": [{"type": "String", "name": "key", "description": " The property name"}, {"type": "Function", "name": "handler", "description": " The handler function to use subscribe to \nthe property's event"}, {"type": "Object", "name": "obj", "description": " The Object to use for scoping the event handler \n(see CustomEvent documentation)"}, {"type": "Boolean", "name": "overrideContext", "description": " Optional. If true, will override\n\"this\" within the handler to map to the scope Object passed into the\nmethod."}], "description": "Subscribes an external handler to the change event for any \ngiven property.", "guessedname": "subscribeToConfigEvent", "guessedtype": "function"}, "checkBoolean": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": " The value to validate"}], "description": "Validates that the value passed in is a Boolean.", "guessedname": "checkBoolean", "guessedtype": "function"}, "init": {"params": [{"type": "Object", "name": "owner", "description": " The owner Object to which this Config \nObject belongs"}], "description": "Initializes the configuration Object and all of its local members.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The Config object in string format."}, "description": "Returns a string representation of the Config object", "guessedname": "toString", "guessedtype": "function"}, "refireEvent": {"params": [{"type": "String", "name": "key", "description": " The name of the property"}], "description": "Fires the event for a property using the property's current value.", "guessedname": "refireEvent", "guessedtype": "function"}, "getConfig": {"return": {"type": "Object", "description": "The current config, represented in a key-value map"}, "description": "Returns a key-value configuration map of the values currently set in  \nthe Config Object.", "guessedname": "getConfig", "guessedtype": "function"}, "setProperty": {"return": {"type": "Boolean", "description": "True, if the set was successful, false if it failed."}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}, {"type": "String", "name": "value", "description": " The value to set the property to"}, {"type": "Boolean", "name": "silent", "description": " Whether the value should be set silently, \nwithout firing the property event."}], "description": "Sets the value of a property. If the silent property is passed as \ntrue, the property's event will not be fired.", "guessedname": "setProperty", "guessedtype": "function"}, "destroy": {"description": "Sets all properties to null, unsubscribes all listeners from each \nproperty's change event and all listeners from the configChangedEvent.", "guessedname": "destroy", "guessedtype": "function"}, "fireEvent": {"guessedname": "fireEvent", "params": [{"type": "String", "name": "key", "description": " The configuration property's name"}, {"type": "value", "name": "Object", "description": " The value of the correct type for the property"}], "description": "Fires a configuration property event using the specified value.", "private": "", "guessedtype": "function"}, "unsubscribeFromConfigEvent": {"return": {"type": "Boolean", "description": "True, if the unsubscription was successful, \notherwise false."}, "params": [{"type": "String", "name": "key", "description": " The property name"}, {"type": "Function", "name": "handler", "description": " The handler function to use subscribe to \nthe property's event"}, {"type": "Object", "name": "obj", "description": " The Object to use for scoping the event \nhandler (see CustomEvent documentation)"}], "description": "Unsubscribes an external handler from the change event for any \ngiven property.", "guessedname": "unsubscribeFromConfigEvent", "guessedtype": "function"}}, "file": "Config.js", "guessedtype": "function", "shortname": "Config", "properties": {"YAHOO.util.Config.CONFIG_CHANGED_EVENT": {"description": "Constant representing the CustomEvent type for the config changed event.", "private": "", "static": "", "guessedname": "CONFIG_CHANGED_EVENT", "guessedtype": "property", "final": ""}, "eventQueue": {"guessedname": "eventQueue", "type": "Object", "description": "Maintains the local, normalized CustomEvent queue", "private": "", "guessedtype": "property"}, "owner": {"type": "Object", "description": "Object reference to the owner of this Config Object", "guessedname": "owner", "guessedtype": "property"}, "queueInProgress": {"type": "Boolean", "description": "Boolean flag that specifies whether a queue is currently \nbeing executed", "guessedname": "queueInProgress", "guessedtype": "property"}, "initialConfig": {"guessedname": "initialConfig", "type": "Object", "description": "Maintains the local collection of configuration property objects as \nthey were initially applied.\nThis object is used when resetting a property.", "private": "", "guessedtype": "property"}, "config": {"guessedname": "config", "type": "Object", "description": "Maintains the local collection of configuration property objects and \ntheir specified values", "private": "", "guessedtype": "property"}, "YAHOO.util.Config.BOOLEAN_TYPE": {"description": "Constant representing the boolean type string", "private": "", "static": "", "guessedname": "BOOLEAN_TYPE", "guessedtype": "property", "final": ""}}, "description": "Config is a utility used within an Object to allow the implementer to\nmaintain a list of local configuration properties and listen for changes \nto those properties dynamically using CustomEvent. The initial values are \nalso maintained so that the configuration can be reset at any given point \nto its initial state."}, "YAHOO.widget.Node": {"name": "YAHOO.widget.Node", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node, and any custom attributes that should be\nstored with the node (which is available in noderef.data).\nAll values in oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions,\nthe rest of the values will be stored in noderef.data"}, {"type": "Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded/collapsed state (deprecated, use oData.expanded)"}], "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses."}], "namespace": "YAHOO.widget", "module": "treeview", "events": {"parentChange": {"type": "CustomEvent", "description": "The parentChange event is fired when a parent element is applied\nto the node.  This is useful if you need to apply tree-level\nproperties to a tree that need to happen if a node is moved from\none tree to another."}}, "guessedname": "Node", "methods": {"setNodesProperty": {"params": [{"type": "string", "name": "name", "description": "  Name of the property to be set"}, {"type": "any", "name": "value", "description": "  value to be set"}, {"type": "boolean", "name": "refresh", "description": "  if present and true, it does a refresh"}], "description": "Sets the value of property for this node and all loaded descendants.  \nOnly public and defined properties can be set, not methods.  \nValues for unknown properties will be assigned to the refNode.data object", "guessedname": "setNodesProperty", "guessedtype": "function"}, "appendChild": {"return": {"type": "Node", "description": "the child node"}, "description": "Appends a node to the child collection.", "private": "", "params": [{"type": "Node", "name": "childNode", "description": "  the new node"}], "guessedname": "appendChild", "guessedtype": "function"}, "setDynamicLoad": {"params": [{"type": "function", "name": "fmDataLoader", "description": "  the function that will be used to get the data."}, {"type": "int", "name": "iconMode", "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."}], "description": "Configures this node for dynamically obtaining the child data\nwhen the node is first expanded.  Calling it without the callback\nwill turn off dynamic load for the node.", "guessedname": "setDynamicLoad", "guessedtype": "function"}, "unhighlight": {"params": [{"type": "boolean", "name": "_silent", "description": "  optional, don't fire the highlightEvent"}], "description": "Turns highlighting off a node.", "guessedname": "unhighlight", "guessedtype": "function"}, "_childrenHighlighted": {"private": "", "description": "Checks whether all or part of the children of a node are highlighted and\nsets the node highlight to full, none or partial highlight.\nIf set to propagate it will further call the parent", "guessedname": "_childrenHighlighted", "guessedtype": "function"}, "getChildrenEl": {"return": {"type": "HTMLElement", "description": "this node's children div"}, "description": "Returns the div that was generated for this node's children", "guessedname": "getChildrenEl", "guessedtype": "function"}, "_removeFocus": {"private": "", "description": "Removes the focus of previously selected Node", "guessedname": "_removeFocus", "guessedtype": "function"}, "toggle": {"description": "Expands if node is collapsed, collapses otherwise.", "guessedname": "toggle", "guessedtype": "function"}, "getEditorValue": {"return": {"type": "any", "description": "value entered"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Returns the value(s) from the input element(s) .\nShould be overridden by each node type.", "guessedname": "getEditorValue", "guessedtype": "function"}, "saveEditorValue": {"return": {"type": "false or none", "description": "a return of exactly false will prevent the editor from closing"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Saves the value entered into the editor.", "guessedname": "saveEditorValue", "guessedtype": "function"}, "getToggleLink": {"return": {"type": "string", "description": "the javascript url for toggling this node"}, "description": "Generates the link that will invoke this node's toggle method", "guessedname": "getToggleLink", "guessedtype": "function"}, "getToggleEl": {"return": {"type": "HTMLElement", "description": "this node's toggle html element"}, "description": "Returns the element that is being used for this node's toggle.", "guessedname": "getToggleEl", "guessedtype": "function"}, "toggleHighlight": {"description": "Toggles the highlighted state of a Node", "guessedname": "toggleHighlight", "guessedtype": "function"}, "getHtml": {"return": {"type": "string", "description": "the markup for this node and its expanded children."}, "description": "Returns the markup for this node and its children.", "guessedname": "getHtml", "guessedtype": "function"}, "insertBefore": {"return": {"type": "Node", "description": "the inserted node"}, "params": [{"type": "Node", "name": "node", "description": "  the node to insert this node before"}], "description": "Inserts this node before this supplied node", "guessedname": "insertBefore", "guessedtype": "function"}, "hasChildren": {"return": {"type": "boolean", "description": "true if this has children or if it might and we are\nchecking for this condition."}, "params": [{"type": "boolean", "name": "checkForLazyLoad", "description": "  should we check for unloaded children?"}], "description": "Checks if this node has children.  If this node is lazy-loading and the\nchildren have not been rendered, we do not know whether or not there\nare actual children.  In most cases, we need to assume that there are\nchildren (for instance, the toggle needs to show the expandable \npresentation state).  In other times we want to know if there are rendered\nchildren.  For the latter, \"checkForLazyLoad\" should be false.", "guessedname": "hasChildren", "guessedtype": "function"}, "isDynamic": {"return": {"type": "boolean", "description": "true if this node's children are to be loaded dynamically"}, "description": "Evaluates if this node's children should be loaded dynamically.  Looks for\nthe property both in this instance and the root node.  If the tree is\ndefined to load all children dynamically, the data callback function is\ndefined in the root node", "guessedname": "isDynamic", "guessedtype": "function"}, "init": {"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded/collapsed state"}], "description": "Initializes this node, gets some of the properties from the parent", "guessedname": "init", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the container html element"}, "description": "Returns this node's container html element", "guessedname": "getEl", "guessedtype": "function"}, "appendTo": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "Node", "name": "parentNode", "description": "  the node to append to."}], "description": "Appends this node to the supplied node's child collection", "guessedname": "appendTo", "guessedtype": "function"}, "getContentEl": {"return": {"type": "HTMLElement", "description": "the element"}, "description": "Returns the outer html element for this node's content", "guessedname": "getContentEl", "guessedtype": "function"}, "showChildren": {"description": "Shows this node's children", "guessedname": "showChildren", "guessedtype": "function"}, "insertAfter": {"return": {"type": "Node", "description": "the inserted node"}, "params": [{"type": "Node", "name": "node", "description": "  the node to insert after"}], "description": "Inserts this node after the supplied node", "guessedname": "insertAfter", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the node"}, "description": "Node toString", "guessedname": "toString", "guessedtype": "function"}, "getChildrenElId": {"return": {"type": "string", "description": "the element id for this node's children div"}, "description": "Returns the id for this node's children div", "guessedname": "getChildrenElId", "guessedtype": "function"}, "getDepthStyle": {"return": {"type": "string", "description": "the css class for the spacer"}, "params": [{"type": "int", "name": "depth", "description": " the depth of the ancestor."}], "description": "Returns the css class for the spacer at the specified depth for\nthis node.  If this node's ancestor at the specified depth\nhas a next sibling the presentation is different than if it\ndoes not have a next sibling", "guessedname": "getDepthStyle", "guessedtype": "function"}, "_canHaveFocus": {"guessedname": "_canHaveFocus", "return": {"type": "boolean", "description": "success"}, "description": "Returns true if there are any elements in the node that can \naccept the real actual browser focus", "private": "", "guessedtype": "function"}, "expandAll": {"description": "Recursively expands all of this node's children.", "guessedname": "expandAll", "guessedtype": "function"}, "getNodeCount": {"return": {"type": "int", "description": "number of nodes in the branch"}, "description": "Count of nodes in a branch", "guessedname": "getNodeCount", "guessedtype": "function"}, "collapse": {"description": "Hides this nodes children (creating them if necessary), changes the toggle style.", "guessedname": "collapse", "guessedtype": "function"}, "getSiblings": {"return": {"type": "", "description": "Node[]"}, "description": "Returns a node array of this node's siblings, null if none.", "guessedname": "getSiblings", "guessedtype": "function"}, "editNode": {"description": "pops up the contents editor, if there is one and the node is declared editable", "guessedname": "editNode", "guessedtype": "function"}, "getContentHtml": {"return": {"type": "string", "description": "The HTML that will render the content of this node."}, "description": "Get the markup for the contents of the node.  This is designed to be overrided so that we can\nsupport different types of nodes.", "guessedname": "getContentHtml", "guessedtype": "function"}, "focus": {"return": {"type": "boolean", "description": "success"}, "description": "Sets the focus on the node element.\nIt will only be able to set the focus on nodes that have anchor elements in it.  \nToggle or branch icons have anchors and can be focused on.  \nIf will fail in nodes that have no anchor", "guessedname": "focus", "guessedtype": "function"}, "displayEditedValue": {"params": [{"type": "any", "name": "value", "description": "  value to be displayed and stored in the node"}, {"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Finally displays the newly edited value(s) in the tree.\nShould be overridden by each node type.", "guessedname": "displayEditedValue", "guessedtype": "function"}, "getStyle": {"return": {"type": "string", "description": "the css class for this node's toggle"}, "description": "Returns the css style name for the toggle", "guessedname": "getStyle", "guessedtype": "function"}, "getNodeHtml": {"return": {"type": "string", "description": "The HTML that will render this node."}, "description": "Get the markup for the node.  This may be overrided so that we can\nsupport different types of nodes.", "guessedname": "getNodeHtml", "guessedtype": "function"}, "getIconMode": {"return": {"type": "int", "description": "0 for collapse style, 1 for leaf node style"}, "description": "Returns the current icon mode.  This refers to the way childless dynamic\nload nodes appear (this comes into play only after the initial dynamic\nload request produced no children).", "guessedname": "getIconMode", "guessedtype": "function"}, "_setHighlightClassName": {"private": "", "description": "Changes the classNames on the toggle and content containers to reflect the current highlighting", "guessedname": "_setHighlightClassName", "guessedtype": "function"}, "hideChildren": {"description": "Hides this node's children", "guessedname": "hideChildren", "guessedtype": "function"}, "destroyEditorContents": {"params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Node-specific destroy function to empty the contents of the inline editor panel.\nThis function is the worst case alternative that will purge all possible events and remove the editor contents.\nMethod Event.purgeElement is somewhat costly so if it can be replaced by specifc Event.removeListeners, it is better to do so.", "guessedname": "destroyEditorContents", "guessedtype": "function"}, "getAncestor": {"return": {"type": "Node", "description": "the ancestor"}, "params": [{"type": "int", "name": "depth", "description": " the depth of the ancestor."}], "description": "Returns this node's ancestor at the specified depth.", "guessedname": "getAncestor", "guessedtype": "function"}, "loadComplete": {"description": "Load complete is the callback function we pass to the data provider\nin dynamic load situations.", "guessedname": "loadComplete", "guessedtype": "function"}, "expand": {"description": "Shows this nodes children (creating them if necessary), changes the\ntoggle style, and collapses its siblings if multiExpand is not set.", "guessedname": "expand", "guessedtype": "function"}, "getElId": {"return": {"type": "string", "description": "the element id"}, "description": "Returns the id for this node's container div", "guessedname": "getElId", "guessedtype": "function"}, "isRoot": {"return": {"type": "boolean", "description": "true if this is the root node"}, "description": "Evaluates if this node is the root node of the tree", "guessedname": "isRoot", "guessedtype": "function"}, "fillEditorContainer": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Placeholder for a function that should provide the inline node label editor.\nLeaving it set to null will indicate that this node type is not editable.\nIt should be overridden by nodes that provide inline editing.\nThe Node-specific editing element (input box, textarea or whatever) should be inserted into editorData.inputContainer.", "guessedname": "fillEditorContainer", "guessedtype": "property"}, "completeRender": {"return": {"type": "string", "description": "children html"}, "description": "Called when we know we have all the child data.", "guessedname": "completeRender", "guessedtype": "function"}, "isChildOf": {"return": {"type": "boolean", "description": "The node index if this Node is a child of \nsupplied Node, else -1."}, "description": "Returns true if the Node is a child of supplied Node", "private": "", "params": [{"type": "Node", "name": "parentNode", "description": "  the Node to check"}], "guessedname": "isChildOf", "guessedtype": "function"}, "getChildrenHtml": {"guessedname": "getChildrenHtml", "return": {"type": "string", "description": "the children container div html and any expanded children"}, "description": "Called when first rendering the tree.  We always build the div that will\ncontain this nodes children, but we don't render the children themselves\nunless this node is expanded.", "private": "", "guessedtype": "function"}, "refresh": {"description": "Regenerates the html for this node and its children.  To be used when the\nnode is expanded and new children have been added.", "guessedname": "refresh", "guessedtype": "function"}, "getToggleElId": {"return": {"type": "string", "description": "the toggel element id"}, "description": "Returns the id for this node's toggle element", "guessedname": "getToggleElId", "guessedtype": "function"}, "getNodeDefinition": {"return": {"type": "Object | false", "description": "definition of the tree or false if the node or any children is defined as dynamic"}, "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if the node or any children loads dynamically, regardless of whether it is loaded or not.", "guessedname": "getNodeDefinition", "guessedtype": "function"}, "highlight": {"params": [{"type": "boolean", "name": "_silent", "description": "  optional, don't fire the highlightEvent"}], "description": "Turns highlighting on node.", "guessedname": "highlight", "guessedtype": "function"}, "renderChildren": {"guessedname": "renderChildren", "return": {"type": "string", "description": "the html for this node's children"}, "description": "Generates the markup for the child nodes.  This is not done until the node\nis expanded.", "private": "", "guessedtype": "function"}, "getHoverStyle": {"return": {"type": "string", "description": "the css class hover state"}, "description": "Returns the hover style for the icon", "guessedname": "getHoverStyle", "guessedtype": "function"}, "collapseAll": {"description": "Recursively collapses all of this node's children.", "guessedname": "collapseAll", "guessedtype": "function"}, "applyParent": {"return": {"type": "boolean", "description": "true if the application was successful"}, "params": [{"type": "Node", "name": "parentNode", "description": " this node's parent node"}], "description": "Certain properties for the node cannot be set until the parent\nis known. This is called after the node is inserted into a tree.\nthe parent is also applied to this node's children in order to\nmake it possible to move a branch from one tree to another.", "guessedname": "applyParent", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "Node.js", "guessedtype": "function", "shortname": "Node", "properties": {"childrenRendered": {"type": "boolean", "description": "This flag is set to true when the html is generated for this node's\nchildren, and set to false when new children are added.", "guessedname": "childrenRendered", "guessedtype": "property"}, "_focusedItem": {"guessedname": "_focusedItem", "type": "DOM element", "description": "DOM element that actually got the browser focus", "private": "", "guessedtype": "property"}, "nextSibling": {"type": "Node", "description": "This node's next sibling", "guessedname": "nextSibling", "guessedtype": "property"}, "renderHidden": {"type": "boolean", "description": "Should we render children for a collapsed node?  It is possible that the\nimplementer will want to render the hidden data...  @todo verify that we \nneed this, and implement it if we do.", "guessedname": "renderHidden", "guessedtype": "property"}, "className": {"default": "null", "type": "string", "description": "User-defined className to be added to the Node", "guessedname": "className", "guessedtype": "property"}, "iconMode": {"type": "int", "description": "Used to configure what happens when a dynamic load node is expanded\nand we discover that it does not have children.  By default, it is\ntreated as if it still could have children (plus/minus icon).  Set\niconMode to have it display like a leaf node instead.", "guessedname": "iconMode", "guessedtype": "property"}, "isLoading": {"type": "boolean", "description": "This is true for dynamically loading nodes while waiting for the\ncallback to return.", "guessedname": "isLoading", "guessedtype": "property"}, "nowrap": {"default": "false", "type": "boolean", "description": "Specifies whether or not the content area of the node should be allowed\nto wrap.", "guessedname": "nowrap", "guessedtype": "property"}, "children": {"type": "Node[]", "description": "This node's child node collection.", "guessedname": "children", "guessedtype": "property"}, "multiExpand": {"type": "boolean", "description": "Can multiple children be expanded at once?", "guessedname": "multiExpand", "guessedtype": "property"}, "index": {"type": "int", "description": "The index for this instance obtained from global counter in YAHOO.widget.TreeView.", "guessedname": "index", "guessedtype": "property"}, "_focusHighlightedItems": {"guessedname": "_focusHighlightedItems", "type": "Array of DOM elements", "description": "array of items that had the focus set on them\nso that they can be cleaned when focus is lost", "private": "", "guessedtype": "property"}, "propagateHighlightDown": {"default": "false", "type": "boolean", "description": "Tells whether highlighting will be propagated down to the children of the clicked node", "guessedname": "propagateHighlightDown", "guessedtype": "property"}, "_dynLoad": {"guessedname": "_dynLoad", "type": "boolean", "description": "We can set the node up to call an external method to get the child\ndata dynamically.", "private": "", "guessedtype": "property"}, "previousSibling": {"type": "Node", "description": "This node's previous sibling", "guessedname": "previousSibling", "guessedtype": "property"}, "contentStyle": {"type": "string", "description": "The CSS class for the html content container.  Defaults to ygtvhtml, but \ncan be overridden to provide a custom presentation for a specific node.", "guessedname": "contentStyle", "guessedtype": "property"}, "_type": {"description": "The node type", "default": "\"Node\"", "private": "", "guessedname": "_type", "guessedtype": "property", "type": "string"}, "propagateHighlightUp": {"default": "false", "type": "boolean", "description": "Tells whether highlighting will be propagated up to the parents of the clicked node", "guessedname": "propagateHighlightUp", "guessedtype": "property"}, "parent": {"type": "Node", "description": "Parent node", "guessedname": "parent", "guessedtype": "property"}, "highlightState": {"default": "0", "type": "integer", "description": "Stores the highlight state.  Can be any of:\n<ul>\n<li>0 - not highlighted</li>\n<li>1 - highlighted</li>\n<li>2 - some children highlighted</li>\n</ul>", "guessedname": "highlightState", "guessedtype": "property"}, "dataLoader": {"type": "function", "description": "Function to execute when we need to get this node's child data.", "guessedname": "dataLoader", "guessedtype": "property"}, "editable": {"type": "boolean", "description": "Signals if the label is editable.  (Ignored on TextNodes with href set.)", "guessedname": "editable", "guessedtype": "property"}, "data": {"type": "object", "description": "The data linked to this node.  This can be any object or primitive\nvalue, and the data can be used in getNodeHtml().", "guessedname": "data", "guessedtype": "property"}, "dynamicLoadComplete": {"type": "boolean", "description": "Dynamically loaded nodes only fetch the data the first time they are\nexpanded.  This flag is set to true once the data has been fetched.", "guessedname": "dynamicLoadComplete", "guessedtype": "property"}, "isLeaf": {"default": "false", "type": "boolean", "description": "If true, the node will alway be rendered as a leaf node.  This can be\nused to override the presentation when dynamically loading the entire\ntree.  Setting this to true also disables the dynamic load call for the\nnode.", "guessedname": "isLeaf", "guessedtype": "property"}, "hasIcon": {"type": "boolean", "description": "The toggle/branch icon will not show if this is set to false.  This\ncould be useful if the implementer wants to have the child contain\nextra info about the parent, rather than an actual node.", "guessedname": "hasIcon", "guessedtype": "property"}, "contentElId": {"type": "string", "description": "The generated id that will contain the data passed in by the implementer.", "guessedname": "contentElId", "guessedtype": "property"}, "expanded": {"type": "boolean", "description": "The node's expanded/collapsed state", "guessedname": "expanded", "guessedtype": "property"}, "tree": {"type": "TreeView", "description": "Tree instance this node is part of", "guessedname": "tree", "guessedtype": "property"}, "enableHighlight": {"default": "true", "type": "boolean", "description": "Enables node highlighting.  If true, the node can be highlighted and/or propagate highlighting", "guessedname": "enableHighlight", "guessedtype": "property"}, "depth": {"type": "int", "description": "The depth of this node.  We start at -1 for the root node.", "guessedname": "depth", "guessedtype": "property"}}, "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses."}, "YAHOO.widget.ColumnSeries": {"name": "YAHOO.widget.ColumnSeries", "constructors": [{"description": "ColumnSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "ColumnSeries", "uses": ["YAHOO.widget.CartesianSeries"], "file": "Series.js", "guessedtype": "function", "shortname": "ColumnSeries", "description": "ColumnSeries class for the YUI Charts widget."}, "YAHOO.widget.ColumnChart": {"name": "YAHOO.widget.ColumnChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "ColumnChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "ColumnChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "ColumnChart", "description": "ColumnChart class for the YUI Charts widget."}, "YAHOO.util.YUILoader": {"name": "YAHOO.util.YUILoader", "namespace": "YAHOO.util", "module": "yuiloader", "methods": {"_pushEvents": {"guessedname": "_pushEvents", "params": [{"type": "Function", "name": "optional", "description": " function reference"}], "description": "In IE, the onAvailable/onDOMReady events need help when Event is\nloaded dynamically", "private": "", "guessedtype": "function"}, "getRequires": {"params": [{"type": "", "name": "mod", "description": " The module definition from moduleInfo"}], "description": "Returns an object containing properties for all modules required\nin order to load the requested module", "guessedname": "getRequires", "guessedtype": "function"}, "onProgress": {"type": "function", "description": "Callback that will be executed each time a new module is loaded", "guessedname": "onProgress", "guessedtype": "property"}, "onTimeout": {"type": "function", "description": "Callback that will be executed if a timeout occurs", "guessedname": "onTimeout", "guessedtype": "property"}, "getProvides": {"return": {"type": "", "description": "what this module provides"}, "params": [{"type": "string", "name": "name", "description": " The name of the module"}, {"type": "string", "name": "notMe", "description": "  don't add this module name, only include superseded modules"}], "description": "Returns an object literal of the modules the supplied module satisfies", "guessedname": "getProvides", "guessedtype": "function"}, "_reduce": {"private": "", "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies", "guessedname": "_reduce", "guessedtype": "function"}, "calculate": {"params": [{"type": "", "name": "o", "description": " optional options object"}], "description": "Calculates the dependency tree, the result is stored in the sorted \nproperty", "guessedname": "calculate", "guessedtype": "function"}, "_filter": {"guessedname": "_filter", "return": {"type": "string", "description": "the filtered string"}, "description": "Applies filter\nmethod _filter", "private": "", "guessedtype": "function"}, "_addSkin": {"return": {"type": "string", "description": "the module name for the skin"}, "description": "Adds the skin def to the module info", "private": "", "params": [{"type": "string", "name": "skin", "description": "  the name of the skin"}, {"type": "string", "name": "mod", "description": "  the name of the module"}], "guessedname": "_addSkin", "guessedtype": "function"}, "_explode": {"private": "", "description": "Inspects the required modules list looking for additional \ndependencies.  Expands the required list to include all \nrequired modules.  Called by calculate()", "guessedname": "_explode", "guessedtype": "function"}, "formatSkin": {"return": {"type": "string", "description": "the full skin module name"}, "params": [{"type": "string", "name": "skin", "description": "  the name of the skin"}, {"type": "string", "name": "mod", "description": "  optional: the name of a module to skin"}], "description": "Returns the skin module name for the specified skin name.  If a\nmodule name is supplied, the returned skin module name is \nspecific to the module passed in.", "guessedname": "formatSkin", "guessedtype": "function"}, "parseSkin": {"return": {"type": "skin: string, module: string", "description": "the parsed skin name \nand module name, or null if the supplied string does not match\nthe skin pattern"}, "params": [{"type": "string", "name": "mod", "description": "  the module name to parse"}], "description": "Reverses <code>formatSkin</code>, providing the skin name and\nmodule name if the string matches the pattern for skins.", "guessedname": "parseSkin", "guessedtype": "function"}, "addModule": {"return": {"type": "boolean", "description": "true if the module was added, false if \nthe object passed in did not provide all required attributes"}, "params": [{"type": "", "name": "o", "description": " An object containing the module data"}], "description": "Add a new module to the component metadata.         \n<dl>\n<dt>name:</dt>       <dd>required, the component name</dd>\n<dt>type:</dt>       <dd>required, the component type (js or css)</dd>\n<dt>path:</dt>       <dd>required, the path to the script from \"base\"</dd>\n<dt>requires:</dt>   <dd>array of modules required by this component</dd>\n<dt>optional:</dt>   <dd>array of optional modules for this component</dd>\n<dt>supersedes:</dt> <dd>array of the modules this component replaces</dd>\n<dt>after:</dt>      <dd>array of modules the components which, if present, should be sorted above this one</dd>\n<dt>rollup:</dt>     <dd>the number of superseded modules required for automatic rollup</dd>\n<dt>fullpath:</dt>   <dd>If fullpath is specified, this is used instead of the configured base + path</dd>\n<dt>skinnable:</dt>  <dd>flag to determine if skin assets should automatically be pulled in</dd>\n</dl>", "guessedname": "addModule", "guessedtype": "function"}, "loadNext": {"params": [{"type": "string", "name": "mname", "description": "  optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)"}], "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nYAHOO.register to determine when scripts are fully loaded", "guessedname": "loadNext", "guessedtype": "function"}, "_rollup": {"private": "", "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate()", "guessedname": "_rollup", "guessedtype": "function"}, "insert": {"params": [{"type": "", "name": "o", "description": " optional options object"}, {"type": "string", "name": "type", "description": "  the type of dependency to insert"}], "description": "inserts the requested modules and their dependencies.  \n<code>type</code> can be \"js\" or \"css\".  Both script and \ncss are inserted if type is not provided.", "guessedname": "insert", "guessedtype": "function"}, "_sort": {"private": "", "description": "Sorts the dependency tree.  The last step of calculate()", "guessedname": "_sort", "guessedtype": "function"}, "onFailure": {"type": "function", "description": "Callback that will be executed if there is a failure", "guessedname": "onFailure", "guessedtype": "property"}, "require": {"params": [{"type": "string[] | string*", "name": "what", "description": "  the modules to load"}], "description": "Add a requirement for one or more module", "guessedname": "require", "guessedtype": "function"}, "_setup": {"private": "", "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()", "guessedname": "_setup", "guessedtype": "function"}, "onSuccess": {"type": "function", "description": "Callback that will be executed when the loader is finished\nwith an insert", "guessedname": "onSuccess", "guessedtype": "property"}, "sandbox": {"params": [{"type": "Function", "name": "callback", "description": "  the callback to exectued when the load is\ncomplete."}], "description": "Interns the script for the requested modules.  The callback is\nprovided a reference to the sandboxed YAHOO object.  This only\napplies to the script: css can not be sandboxed; css will be\nloaded into the page normally if specified.", "guessedname": "sandbox", "guessedtype": "function"}, "_url": {"return": {"type": "string", "description": "the full url"}, "description": "Generates the full url for a module\nmethod _url", "private": "", "params": [{"type": "string", "name": "path", "description": "  the path fragment"}], "guessedname": "_url", "guessedtype": "function"}}, "file": "yuiloader.js", "shortname": "YUILoader", "todo": "version management, automatic sandboxing", "properties": {"force": {"type": "string[]", "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page.", "guessedname": "force", "guessedtype": "property"}, "varName": {"type": "string", "description": "The name of the variable in a sandbox or script node \n(for external script support in Safari 2.x and earlier)\nto reference when the load is complete.  If this variable \nis not available in the specified scripts, the operation will \nfail.", "guessedname": "Name", "guessedtype": "property"}, "rollups": {"description": "List of rollup files found in the library metadata", "guessedname": "rollups", "guessedtype": "property"}, "allowRollup": {"default": "true", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollup", "guessedtype": "property"}, "skin": {"description": "Provides the information used to skin the skinnable components.\nThe following skin definition would result in 'skin1' and 'skin2'\nbeing loaded for calendar (if calendar was requested), and\n'sam' for all other skinnable components:\n<code>\nskin: {\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam', \n// This is combined with the loader base property to get\n// the default root directory for a skin. ex:\n// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/\nbase: 'assets/skins/',\n// The name of the rollup css file for the skin\npath: 'skin.css',\n// The number of skinnable components requested that are\n// required before using the rollup file rather than the\n// individual component css files\nrollup: 3,\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\ncalendar: ['skin1', 'skin2']\n}\n}\n</code>", "guessedname": "self", "guessedtype": "property"}, "loaded": {"type": "{string: boolean}", "propery": "loaded", "description": "Set when beginning to compute the dependency tree. \nComposed of what YAHOO reports to be loaded combined\nwith what has been loaded by the tool", "guessedname": "loaded", "guessedtype": "property"}, "_internalCallback": {"private": "", "description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js", "guessedname": "_internalCallback", "guessedtype": "property"}, "inserted": {"type": "{string: boolean}", "description": "List of modules inserted by the utility", "guessedname": "inserted", "guessedtype": "property"}, "charset": {"default": "utf-8", "type": "string", "description": "The charset attribute for inserted nodes", "guessedname": "charset", "guessedtype": "property"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for \nthe requested modules", "guessedname": "loadOptional", "guessedtype": "property"}, "combine": {"default": "false", "type": "boolean", "description": "If configured, YUI will use the the combo handler on the\nYahoo! CDN to pontentially reduce the number of http requests\nrequired."}, "moduleInfo": {"description": "The library metadata", "guessedname": "moduleInfo", "guessedtype": "property"}, "scope": {"default": "this", "description": "The execution scope for all callbacks", "guessedname": "scope", "guessedtype": "property"}, "filter": {"type": "string|{searchExp: string, replaceStr: string}", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n</dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n</pre>", "guessedname": "filter", "guessedtype": "property"}, "comboBase": {"default": "http://yui.yahooapis.com/combo?", "type": "string", "description": "Base path for the combo service", "guessedname": "comboBase", "guessedtype": "property"}, "insertBefore": {"type": "string|HTMLElement", "description": "Node reference or id where new nodes should be inserted before", "guessedname": "insertBefore", "guessedtype": "property"}, "base": {"default": "http://yui.yahooapis.com/[YUI VERSION]/build/", "type": "string", "description": "The base directory.", "guessedname": "base", "guessedtype": "property"}, "sorted": {"type": "string[]", "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called", "guessedname": "sorted", "guessedtype": "property"}, "data": {"description": "Data that is passed to all callbacks", "guessedname": "data", "guessedtype": "property"}, "_useYahooListener": {"private": "", "description": "Use the YAHOO environment listener to detect script load.  This\nis only switched on for Safari 2.x and below.", "guessedname": "_useYahooListener", "guessedtype": "property"}, "required": {"type": "{string: boolean}", "description": "The list of requested modules", "guessedname": "required", "guessedtype": "property"}, "ignore": {"type": "string[]", "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree", "guessedname": "ignore", "guessedtype": "property"}, "dirty": {"default": "true", "type": "boolean", "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again.", "guessedname": "dirty", "guessedtype": "property"}, "timeout": {"type": "int", "description": "Timeout value in milliseconds.  If set, this value will be used by\nthe get utility.  the timeout event will fire if\na timeout occurs.", "guessedname": "timeout", "guessedtype": "property"}, "root": {"default": "[YUI VERSION]/build/", "type": "string", "description": "Root path to prepend to module path for the combo\nservice", "guessedname": "root", "guessedtype": "property"}}, "description": "YUILoader provides dynamic loading for YUI."}, "YAHOO.util.Region": {"name": "YAHOO.util.Region", "constructors": [{"params": [{"type": "Int", "name": "t", "description": " the top extent"}, {"type": "Int", "name": "r", "description": " the right extent"}, {"type": "Int", "name": "b", "description": " the bottom extent"}, {"type": "Int", "name": "l", "description": " the left extent"}], "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Region", "methods": {"getArea": {"return": {"type": "Int", "description": "the region's area"}, "description": "Returns the area of the region", "guessedname": "getArea", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region", "description": "The region that the element occupies"}, "description": "Returns a region that is occupied by the DOM element", "static": "", "guessedname": "getRegion", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}]}, "contains": {"return": {"type": "Boolean", "description": "True if the region is contained with this region, \nelse false"}, "params": [{"type": "Region", "name": "region", "description": " The region to evaluate"}], "description": "Returns true if this region contains the region passed in", "guessedname": "contains", "guessedtype": "function"}, "union": {"return": {"type": "Region", "description": "The union region"}, "params": [{"type": "Region", "name": "region", "description": " The region that to create the union with"}], "description": "Returns the region representing the smallest region that can contain both\nthe passed in region and this region.", "guessedname": "union", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "string the region properties"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Region", "description": "The overlap region, or null if there is no overlap"}, "params": [{"type": "Region", "name": "region", "description": " The region that intersects"}], "description": "Returns the region where the passed in region overlaps with this one", "guessedname": "intersect", "guessedtype": "function"}}, "file": "Region.js", "guessedtype": "function", "shortname": "Region", "properties": {"right": {"type": "int", "description": "The region's right extent", "guessedname": "right", "guessedtype": "property"}, "bottom": {"type": "Int", "description": "The region's bottom extent", "guessedname": "bottom", "guessedtype": "property"}, "top": {"type": "Int", "description": "The region's top extent", "guessedname": "top", "guessedtype": "property"}, "height": {"type": "Int", "description": "The region's total height", "guessedname": "height", "guessedtype": "property"}, "1": {"type": "Int", "description": "The region's top extent as index, for symmetry with set/getXY"}, "0": {"type": "Int", "description": "The region's left extent as index, for symmetry with set/getXY"}, "y": {"type": "Int", "description": "The region's top extent", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Int", "description": "The region's left extent", "guessedname": "x", "guessedtype": "property"}, "width": {"type": "Int", "description": "The region's total width", "guessedname": "width", "guessedtype": "property"}, "left": {"type": "Int", "description": "The region's left extent", "guessedname": "left", "guessedtype": "property"}}, "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}, "YAHOO.widget.ContainerEffect": {"name": "YAHOO.widget.ContainerEffect", "constructors": [{"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": " The Overlay that the animation \nshould be associated with"}, {"type": "Object", "name": "attrIn", "description": " The object literal representing the animation \narguments to be used for the animate-in transition. The arguments for \nthis literal are: attributes(object, see YAHOO.util.Anim for description), \nduration(Number), and method(i.e. Easing.easeIn)."}, {"type": "Object", "name": "attrOut", "description": " The object literal representing the animation \narguments to be used for the animate-out transition. The arguments for  \nthis literal are: attributes(object, see YAHOO.util.Anim for description), \nduration(Number), and method(i.e. Easing.easeIn)."}, {"type": "HTMLElement", "name": "targetElement", "description": " Optional. The target element that  \nshould be animated during the transition. Defaults to overlay.element."}, {"type": "class", "name": "Optional.", "description": " The animation class to instantiate. Defaults to \nYAHOO.util.Anim. Other options include YAHOO.util.Motion."}], "description": "ContainerEffect encapsulates animation transitions that are executed when \nan Overlay is shown or hidden."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "ContainerEffect", "methods": {"handleTweenAnimateOut": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onTween handler for the out-animation.", "guessedname": "handleTweenAnimateOut", "guessedtype": "function"}, "handleStartAnimateIn": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onStart handler for the in-animation.", "guessedname": "handleStartAnimateIn", "guessedtype": "function"}, "handleStartAnimateOut": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onStart handler for the out-animation.", "guessedname": "handleStartAnimateOut", "guessedtype": "function"}, "animateOut": {"description": "Triggers the out-animation.", "guessedname": "animateOut", "guessedtype": "function"}, "handleCompleteAnimateOut": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onComplete handler for the out-animation.", "guessedname": "handleCompleteAnimateOut", "guessedtype": "function"}, "init": {"description": "Initializes the animation classes and events.", "guessedname": "init", "guessedtype": "function"}, "handleTweenAnimateIn": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onTween handler for the in-animation.", "guessedname": "handleTweenAnimateIn", "guessedtype": "function"}, "SLIDE": {"return": {"type": "YAHOO.widget.ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for sliding an \noverlay in and out.", "static": "", "guessedname": "SLIDE", "guessedtype": "function", "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": " The Overlay object to animate"}, {"type": "Number", "name": "dur", "description": " The duration of the animation"}]}, "toString": {"return": {"type": "String", "description": "The string representation of the ContainerEffect"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "FADE": {"return": {"type": "YAHOO.widget.ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for fading \nan overlay in and out.", "static": "", "guessedname": "FADE", "guessedtype": "function", "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": " The Overlay object to animate"}, {"type": "Number", "name": "dur", "description": " The duration of the animation"}]}, "handleCompleteAnimateIn": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onComplete handler for the in-animation.", "guessedname": "handleCompleteAnimateIn", "guessedtype": "function"}, "animateIn": {"description": "Triggers the in-animation.", "guessedname": "animateIn", "guessedtype": "function"}}, "file": "ContainerEffect.js", "guessedtype": "function", "shortname": "ContainerEffect", "properties": {"attrOut": {"type": "Object", "description": "The animation attributes to use when transitioning out of view", "guessedname": "attrOut", "guessedtype": "property"}, "animClass": {"type": "class", "description": "The animation class to use for animating the overlay", "guessedname": "animClass", "guessedtype": "property"}, "targetElement": {"type": "HTMLElement", "description": "The target element to be animated", "guessedname": "targetElement", "guessedtype": "property"}, "attrIn": {"type": "Object", "description": "The animation attributes to use when transitioning into view", "guessedname": "attrIn", "guessedtype": "property"}, "overlay": {"type": "YAHOO.widget.Overlay", "description": "The overlay to animate", "guessedname": "overlay", "guessedtype": "property"}}, "description": "ContainerEffect encapsulates animation transitions that are executed when \nan Overlay is shown or hidden."}, "YAHOO.util.Motion": {"name": "YAHOO.util.Motion", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "Motion", "extends": "YAHOO.util.ColorAnim", "superclass": "YAHOO.util.ColorAnim", "file": "Motion.js", "guessedtype": "function", "shortname": "Motion", "requires": "YAHOO.util.Anim", "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>"}, "YAHOO.widget.LineSeries": {"name": "YAHOO.widget.LineSeries", "constructors": [{"description": "LineSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "LineSeries", "uses": ["YAHOO.widget.CartesianSeries"], "file": "Series.js", "guessedtype": "function", "shortname": "LineSeries", "description": "LineSeries class for the YUI Charts widget."}, "YAHOO.widget.BarChart": {"name": "YAHOO.widget.BarChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "BarChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "BarChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "BarChart", "description": "BarChart class for the YUI Charts widget."}, "YAHOO.widget.TimeAxis": {"name": "YAHOO.widget.TimeAxis", "constructors": [{"description": "A type of axis whose units are measured in time-based values."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "TimeAxis", "file": "TimeAxis.js", "guessedtype": "function", "shortname": "TimeAxis", "properties": {"stackingEnabled": {"type": "Boolean", "description": "Series that are stackable will only stack when this value is set to true.", "guessedname": "stackingEnabled", "guessedtype": "property"}, "calculateByLabelSize": {"type": "Boolean", "description": "Indicates whether to factor in the size of the labels when calculating a major unit.", "guessedname": "calculateByLabelSize", "guessedtype": "property"}, "minimum": {"type": "Date", "description": "The minimum value drawn by the axis. If not set explicitly, the axis minimum\nwill be calculated automatically.", "guessedname": "minimum", "guessedtype": "property"}, "maximum": {"type": "Number", "description": "The maximum value drawn by the axis. If not set explicitly, the axis maximum\nwill be calculated automatically.", "guessedname": "maximum", "guessedtype": "property"}, "majorTimeUnit": {"type": "String", "description": "The time unit used by the majorUnit.", "guessedname": "majorTimeUnit", "guessedtype": "property"}, "majorUnit": {"type": "Number", "description": "The spacing between major intervals on this axis.", "guessedname": "majorUnit", "guessedtype": "property"}, "snapToUnits": {"type": "Boolean", "description": "If true, the labels, ticks, gridlines, and other objects will snap to\nthe nearest major or minor unit. If false, their position will be based\non the minimum value.", "guessedname": "snapToUnits", "guessedtype": "property"}}, "description": "A type of axis whose units are measured in time-based values."}, "YAHOO.util.CustomEvent": {"name": "YAHOO.util.CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "context", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe debugsystem"}, {"type": "int", "name": "signature", "description": " the signature that the custom event subscriber\nwill receive. YAHOO.util.CustomEvent.LIST or \nYAHOO.util.CustomEvent.FLAT.  The default is\nYAHOO.util.CustomEvent.LIST."}, {"type": "boolean", "name": "fireOnce", "description": "  If configured to fire once, the custom event \nwill only notify subscribers a single time regardless of how many times \nthe event is fired.  In addition, new subscribers will be notified \nimmediately if the event has already been fired."}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "YAHOO.util", "module": "event", "events": {"subscribeEvent": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Function", "name": "fn", "description": "  The function to execute"}, {"type": "", "name": "obj", "description": " <Object> An object to be passed along when the event fires. \nDefaults to the custom event."}, {"type": "", "name": "override", "description": " <boolean|Object> If true, the obj passed in becomes the \nexecution context of the listener. If an object, that object becomes \nthe execution context. Defaults to the custom event."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"_delete": {"private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event</li>\n<li>All of the arguments fire() was executed with as an array</li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod</li>\n</ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event fires.\noverrideContext <boolean|Object> If true, the obj passed in becomes the execution \ncontext of the listener. If an object, that object becomes the execution context."}], "description": "Subscribes the caller to this event", "guessedname": "subscribe", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes subscribers.", "guessedname": "unsubscribe", "guessedtype": "function"}}, "file": "CustomEvent.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"fired": {"default": "false", "type": "boolean", "description": "Indicates whether or not this event has ever been fired.", "guessedname": "fired", "guessedtype": "property"}, "fireOnce": {"default": "false", "type": "boolean", "description": "If configured to fire once, the custom event will only notify subscribers\na single time regardless of how many times the event is fired.  In addition,\nnew subscribers will be notified immediately if the event has already been\nfired.", "guessedname": "fireOnce", "guessedtype": "property"}, "YAHOO.util.CustomEvent.FLAT": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The FLAT type returns two\nparameters: the first argument passed to fire and the optional \ncustom object", "guessedname": "FLAT", "guessedtype": "property"}, "firedWith": {"type": "Array", "description": "For fireOnce events the arguments the event was fired with are stored\nso that new subscribers get the proper payload.", "guessedname": "firedWith", "guessedtype": "property"}, "subscribers": {"type": "Subscriber[]", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "signature": {"type": "int", "description": "Custom events support two styles of arguments provided to the event\nsubscribers.  \n<ul>\n<li>YAHOO.util.CustomEvent.LIST: \n<ul>\n<li>param1: event name</li>\n<li>param2: array of arguments sent to fire</li>\n<li>param3: <optional> a custom object supplied by the subscriber</li>\n</ul>\n</li>\n<li>YAHOO.util.CustomEvent.FLAT\n<ul>\n<li>param1: the first argument passed to fire.  If you need to\npass multiple parameters, use and array or object literal</li>\n<li>param2: <optional> a custom object supplied by the subscriber</li>\n</ul>\n</li>\n</ul>", "guessedname": "signature", "guessedtype": "property"}, "YAHOO.util.CustomEvent.LIST": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The LIST type returns three\nparameters: the event type, the array of args passed to fire, and\nthe optional custom object", "guessedname": "LIST", "guessedtype": "property"}, "scope": {"type": "object", "description": "The context the event will fire from by default. Defaults to the window obj.", "guessedname": "scope", "guessedtype": "property"}, "lastError": {"type": "Error", "description": "In order to make it possible to execute the rest of the subscriber\nstack when one thows an exception, the subscribers exceptions are\ncaught.  The most recent exception is stored in this property", "guessedname": "lastError", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build. Set silent to true \nto disable debug output for this event.", "guessedname": "silent", "guessedtype": "property"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "YAHOO.widget.MenuBarItem": {"name": "YAHOO.widget.MenuBarItem", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu bar item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;</code> element of the menu bar item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu bar item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;</code> element of the menu bar item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."}], "description": "Creates an item for a menu bar."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuBarItem", "methods": {"init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu bar item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;</code> element of the menu bar item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu bar item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;</code> element of the menu bar item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."}], "description": "The MenuBarItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu bar item.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.widget.MenuItem", "superclass": "YAHOO.widget.MenuItem", "file": "menubaritem.js", "guessedtype": "function", "shortname": "MenuBarItem", "properties": {"CSS_LABEL_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu bar item's <code>&#60;a&#62;</code> element.", "default": "\"yuimenubaritemlabel\"", "guessedname": "CSS_LABEL_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;</code> element of the menu bar item.", "default": "\"yuimenubaritem\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Creates an item for a menu bar."}, "YAHOO.widget.Module": {"name": "YAHOO.widget.Module", "configs": {"appendtodocumentbody": {"default": "false", "type": "Boolean", "description": "Specifies if the module should be rendered as the first child \nof document.body or appended as the last child when render is called\nwith document.body as the \"appendToNode\".\n<p>\nAppending to the body while the DOM is still being constructed can \nlead to Operation Aborted errors in IE hence this flag is set to \nfalse by default.\n</p>"}, "visible": {"default": "true", "type": "Boolean", "description": "Specifies whether the Module is visible on the page."}, "monitorresize": {"default": "true", "type": "Boolean", "description": "Specifies whether to create a special proxy iframe to monitor \nfor user font resizing in the document"}, "effect": {"default": "null", "type": "Object", "description": "<p>\nObject or array of objects representing the ContainerEffect \nclasses that are active for animating the container.\n</p>\n<p>\n<strong>NOTE:</strong> Although this configuration \nproperty is introduced at the Module level, an out of the box\nimplementation is not shipped for the Module class so setting\nthe proroperty on the Module class has no effect. The Overlay \nclass is the first class to provide out of the box ContainerEffect \nsupport.\n</p>"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Module <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Module"}, {"type": "Object", "name": "userConfig", "description": " The configuration Object literal containing \nthe configuration that should be set for this module. See configuration \ndocumentation for more details."}], "description": "Module is a JavaScript representation of the Standard Module Format. \nStandard Module Format is a simple standard for markup containers where \nchild nodes representing the header, body, and footer of the content are \ndenoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. \nModule is the base class for all other classes in the YUI \nContainer package."}], "namespace": "YAHOO.widget", "module": "container", "events": {"initEvent": {"params": [{"type": "class", "name": "classRef", "description": " class reference of the initializing \nclass, such as this.beforeInitEvent.fire(Module)"}], "description": "CustomEvent fired after class initalization.", "guessedname": "initEvent", "guessedtype": "property"}, "YAHOO.widget.Module.textResizeEvent": {"description": "Singleton CustomEvent fired when the font size is changed in the browser.\nOpera's \"zoom\" functionality currently does not support text \nsize detection.", "guessedname": "textResizeEvent", "guessedtype": "property"}, "hideEvent": {"description": "CustomEvent fired after the Module is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "CustomEvent fired before the Module is hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "changeBodyEvent": {"params": [{"type": "String/HTMLElement", "name": "content", "description": " String/element representing \nthe new body content"}], "description": "CustomEvent fired when the body content of the Module is modified", "guessedname": "changeBodyEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "CustomEvent fired before the Module is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "changeContentEvent": {"description": "CustomEvent fired when the content of the Module is modified", "guessedname": "changeContentEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "CustomEvent fired before the Module is shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "changeFooterEvent": {"params": [{"type": "String/HTMLElement", "name": "content", "description": " String/element representing \nthe new footer content"}], "description": "CustomEvent fired when the footer content of the Module \nis modified", "guessedname": "changeFooterEvent", "guessedtype": "property"}, "renderEvent": {"description": "CustomEvent fired after the Module is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "showEvent": {"description": "CustomEvent fired after the Module is shown", "guessedname": "showEvent", "guessedtype": "property"}, "beforeInitEvent": {"params": [{"type": "class", "name": "classRef", "description": " class reference of the initializing \nclass, such as this.beforeInitEvent.fire(Module)"}], "description": "CustomEvent fired prior to class initalization.", "guessedname": "beforeInitEvent", "guessedtype": "property"}, "appendEvent": {"description": "CustomEvent fired when the Module is appended to the DOM", "guessedname": "appendEvent", "guessedtype": "property"}, "changeHeaderEvent": {"params": [{"type": "String/HTMLElement", "name": "content", "description": " String/element representing \nthe new header content"}], "description": "CustomEvent fired when the header content of the Module \nis modified", "guessedname": "changeHeaderEvent", "guessedtype": "property"}, "destroyEvent": {"description": "CustomEvent fired when the Module is destroyed", "guessedname": "destroyEvent", "guessedtype": "property"}}, "guessedname": "Module", "methods": {"render": {"return": {"type": "Boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": " The element id to which the Module \nshould be appended to prior to rendering <em>OR</em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": " The element to which the Module \nshould be appended to prior to rendering"}, {"type": "HTMLElement", "name": "moduleElement", "description": " OPTIONAL. The element that \nrepresents the actual Standard Module container."}], "description": "Renders the Module by inserting the elements that are not already \nin the main Module into their correct places. Optionally appends \nthe Module to the specified node prior to the render's execution. \n<p>\nFor Modules without existing markup, the appendToNode argument \nis REQUIRED. If this argument is ommitted and the current element is \nnot present in the document, the function will return false, \nindicating that the render was a failure.\n</p>\n<p>\nNOTE: As of 2.3.1, if the appendToNode is the document's body element\nthen the module is rendered as the first child of the body element, \nand not appended to it, to avoid Operation Aborted errors in IE when \nrendering the module before window's load event is fired. You can \nuse the appendtodocumentbody configuration property to change this \nto append to document.body if required.\n</p>", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Shows the Module element by setting the visible configuration \nproperty to true. Also fires two events: beforeShowEvent prior to \nthe visibility change, and showEvent after.", "guessedname": "show", "guessedtype": "function"}, "_renderBody": {"protected": "", "params": [{"type": "HTMLElement", "name": "moduleElement", "description": " Optional. A reference to the module element."}], "description": "Renders the currently set body into it's proper position under the \nmodule element. If the module element is not provided, \"this.element\" \nis used.", "guessedname": "_renderBody", "guessedtype": "function"}, "_renderHeader": {"protected": "", "params": [{"type": "HTMLElement", "name": "moduleElement", "description": " Optional. A reference to the module element"}], "description": "Renders the currently set header into it's proper position under the \nmodule element. If the module element is not provided, \"this.element\" \nis used.", "guessedname": "_renderHeader", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "bodyContent", "description": " The HTML used to set the body. \nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the body innerHTML\nset to their default toString implementations.\n<em>OR</em>"}, {"type": "HTMLElement", "name": "bodyContent", "description": " The HTMLElement to add as the first and only\nchild of the body element.\n<em>OR</em>"}, {"type": "DocumentFragment", "name": "bodyContent", "description": " The document fragment \ncontaining elements which are to be added to the body"}], "description": "Sets the Module's body content to the HTML specified. \nIf no body is present, one will be automatically created. \nAn empty string can be passed to the method to clear the contents of the body.", "guessedname": "setBody", "guessedtype": "function"}, "hide": {"description": "Hides the Module element by setting the visible configuration \nproperty to false. Also fires two events: beforeHideEvent prior to \nthe visibility change, and hideEvent after.", "guessedname": "hide", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "initResizeMonitor": {"description": "Initialize an empty IFRAME that is placed out of the visible area \nthat can be used to detect text resize.", "guessedname": "initResizeMonitor", "guessedtype": "function"}, "_supportsCWResize": {"private": "", "description": "Text resize monitor helper method.\nDetermines if the browser supports resize events on iframe content windows.", "guessedname": "_supportsCWResize", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Module <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Module"}, {"type": "Object", "name": "userConfig", "description": " The configuration Object literal \ncontaining the configuration that should be set for this module. \nSee configuration documentation for more details."}], "description": "The Module class's initialization method, which is executed for\nModule and all of its subclasses. This method is automatically \ncalled by the constructor, and  sets up all DOM references for \npre-existing markup, and creates required markup if it is not \nalready present.\n<p>\nIf the element passed in does not have an id, one will be generated\nfor it.\n</p>", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Module"}, "description": "Returns a String representation of the Object.", "guessedname": "toString", "guessedtype": "function"}, "destroy": {"description": "Removes the Module element from the DOM and sets all child elements \nto null.", "guessedname": "destroy", "guessedtype": "function"}, "_renderFooter": {"protected": "", "params": [{"type": "HTMLElement", "name": "moduleElement", "description": " Optional. A reference to the module element"}], "description": "Renders the currently set footer into it's proper position under the \nmodule element. If the module element is not provided, \"this.element\" \nis used.", "guessedname": "_renderFooter", "guessedtype": "function"}, "appendToHeader": {"params": [{"type": "HTMLElement | DocumentFragment", "name": "element", "description": " The element to \nappend to the header. In the case of a document fragment, the\nchildren of the fragment will be appended to the header."}], "description": "Appends the passed element to the header. If no header is present, \none will be automatically created.", "guessedname": "appendToHeader", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": " The DOM resize event"}, {"type": "Object", "name": "obj", "description": " The scope object passed to the handler"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "footerContent", "description": " The HTML used to set the footer \nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the footer innerHTML\nset to their default toString implementations.\n<em>OR</em>"}, {"type": "HTMLElement", "name": "footerContent", "description": " The HTMLElement to append to \nthe footer\n<em>OR</em>"}, {"type": "DocumentFragment", "name": "footerContent", "description": " The document fragment containing \nelements which are to be added to the footer"}], "description": "Sets the Module's footer content to the HTML specified, or appends \nthe passed element to the footer. If no footer is present, one will \nbe automatically created. An empty string can be passed to the method\nto clear the contents of the footer.", "guessedname": "setFooter", "guessedtype": "function"}, "YAHOO.widget.Module.forceDocumentRedraw": {"static": "", "description": "Helper utility method, which forces a document level \nredraw for Opera, which can help remove repaint\nirregularities after applying DOM changes.", "guessedname": "forceDocumentRedraw", "guessedtype": "function"}, "configMonitorResize": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Default event handler for the \"monitorresize\" configuration property", "guessedname": "configMonitorResize", "guessedtype": "function"}, "appendToFooter": {"params": [{"type": "HTMLElement | DocumentFragment", "name": "element", "description": " The element to \nappend to the footer. In the case of a document fragment, the\nchildren of the fragment will be appended to the footer"}], "description": "Appends the passed element to the footer. If no footer is present, \none will be automatically created.", "guessedname": "appendToFooter", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Default event handler for changing the visibility property of a \nModule. By default, this is achieved by switching the \"display\" style \nbetween \"block\" and \"none\".\nThis method is responsible for firing showEvent and hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "_addToParent": {"protected": "", "params": [{"type": "parentNode", "name": "The", "description": " HTML element to which the element will be added"}, {"type": "element", "name": "The", "description": " HTML element to be added to parentNode's children"}], "description": "This method is a protected helper, used when constructing the DOM structure for the module \nto account for situations which may cause Operation Aborted errors in IE. It should not \nbe used for general DOM construction.\n<p>\nIf the parentNode is not document.body, the element is appended as the last element.\n</p>\n<p>\nIf the parentNode is document.body the element is added as the first child to help\nprevent Operation Aborted errors in IE.\n</p>", "guessedname": "_addToParent", "guessedtype": "function"}, "appendToBody": {"params": [{"type": "HTMLElement | DocumentFragment", "name": "element", "description": " The element to \nappend to the body. In the case of a document fragment, the\nchildren of the fragment will be appended to the body."}], "description": "Appends the passed element to the body. If no body is present, one \nwill be automatically created.", "guessedname": "appendToBody", "guessedtype": "function"}, "_initResizeMonitor": {"protected": "", "description": "Create and initialize the text resize monitoring iframe.", "guessedname": "_initResizeMonitor", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class.", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "headerContent", "description": " The string used to set the header.\nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the header innerHTML\nset to their default toString implementations.\n<em>OR</em>"}, {"type": "HTMLElement", "name": "headerContent", "description": " The HTMLElement to append to \n<em>OR</em>"}, {"type": "DocumentFragment", "name": "headerContent", "description": " The document fragment \ncontaining elements which are to be added to the header"}], "description": "Sets the Module's header content to the string specified, or appends \nthe passed element to the header. If no header is present, one will \nbe automatically created. An empty string can be passed to the method\nto clear the contents of the header.", "guessedname": "setHeader", "guessedtype": "function"}}, "file": "Module.js", "guessedtype": "function", "shortname": "Module", "properties": {"body": {"type": "HTMLElement", "description": "The body element, denoted with CSS class \"bd\"", "guessedname": "body", "guessedtype": "property"}, "isSecure": {"type": "Boolean", "description": "Boolean representing whether or not the current browsing context is \nsecure (https)", "guessedname": "isSecure", "guessedtype": "function"}, "YAHOO.widget.Module.CSS_MODULE": {"description": "Constant for the default CSS class name that represents a Module", "static": "", "guessedname": "CSS_MODULE", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_HEADER": {"description": "Constant representing the module header", "static": "", "guessedname": "CSS_HEADER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_FOOTER": {"description": "Constant representing the module footer", "static": "", "guessedname": "CSS_FOOTER", "guessedtype": "property", "type": "String", "final": ""}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "platform": {"type": "String", "description": "String representing the current user-agent platform", "guessedname": "platform", "guessedtype": "function"}, "element": {"type": "HTMLElement", "description": "The main module element that contains the header, body, and footer", "guessedname": "element", "guessedtype": "property"}, "YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL": {"description": "Constant representing the url for the \"src\" attribute of the iframe \nused to monitor changes to the browser's base font size", "static": "", "guessedname": "RESIZE_MONITOR_SECURE_URL", "guessedtype": "property", "type": "String", "final": ""}, "header": {"type": "HTMLElement", "description": "The header element, denoted with CSS class \"hd\"", "guessedname": "header", "guessedtype": "property"}, "YAHOO.widget.Module.CSS_BODY": {"description": "Constant representing the module body", "static": "", "guessedname": "CSS_BODY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.IMG_ROOT": {"description": "Constant representing the prefix path to use for non-secure images", "static": "", "guessedname": "IMG_ROOT", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Module's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "imageRoot": {"deprecated": "It is recommend that any images for a Module be applied\nvia CSS using the \"background-image\" property.", "type": "String", "description": "A string representing the root path for all images created by\na Module instance.", "guessedname": "imageRoot", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Module's Config object used for monitoring \nconfiguration properties.", "guessedname": "cfg", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element", "guessedname": "id", "guessedtype": "property"}, "footer": {"type": "HTMLElement", "description": "The footer element, denoted with CSS class \"ft\"", "guessedname": "footer", "guessedtype": "property"}, "YAHOO.widget.Module.RESIZE_MONITOR_BUFFER": {"static": "", "type": "Number", "description": "Constant representing the buffer amount (in pixels) to use when positioning\nthe text resize monitor offscreen. The resize monitor is positioned\noffscreen by an amount eqaul to its offsetHeight + the buffer value."}, "YAHOO.widget.Module.IMG_ROOT_SSL": {"description": "Constant representing the prefix path to use for securely served images", "static": "", "guessedname": "IMG_ROOT_SSL", "guessedtype": "property", "type": "String", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the Module's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "browser": {"deprecated": "Use YAHOO.env.ua", "type": "String", "description": "String representing the user-agent of the browser", "guessedname": "browser", "guessedtype": "function"}}, "description": "Module is a JavaScript representation of the Standard Module Format. \nStandard Module Format is a simple standard for markup containers where \nchild nodes representing the header, body, and footer of the content are \ndenoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. \nModule is the base class for all other classes in the YUI \nContainer package."}, "YAHOO.widget.Paginator.ui.FirstPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "The currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.FirstPageLink", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the first page."}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"beforeFirstPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFirstPageLinkClassChange", "description": "Fires before the value for the configuration attribute 'firstPageLinkClass' changes. Return false to cancel the attribute change."}, "firstPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "firstPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' changes."}, "beforeFirstPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFirstPageLinkLabelChange", "description": "Fires before the value for the configuration attribute 'firstPageLinkLabel' changes. Return false to cancel the attribute change."}, "firstPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "firstPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkClass' changes."}}, "guessedname": "FirstPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Pass new value to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners\nremoval.", "guessedname": "destroy", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "FirstPageLink.js", "guessedtype": "function", "shortname": "FirstPageLink", "configs": {"firstPageLinkLabel": {"default": "'&lt;&lt; first'", "description": "Used as innerHTML for the first page link/span."}, "firstPageLinkClass": {"default": "'yui-pg-first'", "description": "CSS class assigned to the link/span"}}, "description": "ui Component to generate the link to jump to the first page."}, "YAHOO.tool.TestCase.Wait": {"name": "YAHOO.tool.TestCase.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "YAHOO.tool.TestCase", "module": "yuitest", "guessedname": "Wait", "methods": {"XML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as an XML string.", "static": "", "guessedname": "XML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JSON": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as a JSON string. Requires JSON utility.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}}, "file": "TestCase.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code."}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over."}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "YAHOO.lang": {"description": "Provides the language utilites and extensions used by the library", "namespace": "", "module": "yahoo", "guessedname": "lang", "methods": {"isArray": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines wheather or not the provided object is an array.", "guessedname": "isArray", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "since": "2.3.0", "params": [{"type": "string", "name": "s", "description": "  the string to trim"}], "guessedname": "trim", "guessedtype": "function"}, "isString": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a string", "guessedname": "isString", "guessedtype": "function"}, "hasOwnProperty": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}, {"type": "string", "name": "prop", "description": "  the name of the property to test"}], "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.\nThis abstraction is provided to enable hasOwnProperty for Safari 1.3.x.\nThere is a discrepancy between YAHOO.lang.hasOwnProperty and\nObject.prototype.hasOwnProperty when the property is a primitive added to\nboth the instance AND prototype with the same value:\n<pre>\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo = 'foo';\nalert(a.hasOwnProperty('foo')); // true\nalert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback\n</pre>", "guessedname": "hasOwnProperty", "guessedtype": "property"}, "isBoolean": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "Object", "name": "overrides", "description": "  additional properties/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass \nif present."}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "merge": {"return": {"type": "", "description": "the new merged object"}, "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.", "since": "2.3.0", "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "guessedname": "merge", "guessedtype": "function"}, "later": {"return": {"type": "", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "since": "2.4.0", "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed"}, {"type": "", "name": "o", "description": " the context object"}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute"}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]"}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled"}], "guessedname": "later", "guessedtype": "function"}, "substitute": {"return": {"type": "String", "description": "the substituted string"}, "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key/value\npairs.", "since": "2.3.0", "params": [{"type": "String", "name": "s", "description": "  The string that will be modified."}, {"type": "Object", "name": "o", "description": "  An object containing the replacement values"}, {"type": "Function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "guessedname": "substitute", "guessedtype": "function"}, "isNull": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is null", "guessedname": "isNull", "guessedtype": "function"}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null/undefined/NaN || false"}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null/undefined/NaN, true for other values, \nincluding 0/false/''", "since": "2.3.0", "params": [{"type": "any", "name": "o", "description": "  the item to test"}], "guessedname": "isValue", "guessedtype": "function"}, "augmentObject": {"description": "Applies all properties in the supplier to the receiver if the\nreceiver does not have these properties yet.  Optionally, one or \nmore methods/properties can be specified (as additional \nparameters).  This option will overwrite the property if receiver \nhas it already.  If true is passed as the third parameter, all \nproperties will be applied and _will_ overwrite properties in \nthe receiver.", "since": "2.3.0", "static": "", "guessedname": "augmentObject", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver. If true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"}]}, "augment": {"description": "Same as YAHOO.lang.augmentObject, except it only applies prototype \nproperties.  This is an alias for augmentProto.", "see": "YAHOO.lang.augmentObject", "static": "", "guessedname": "augment", "guessedtype": "property", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver.  if true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"}]}, "augmentProto": {"description": "Same as YAHOO.lang.augmentObject, except it only applies prototype properties", "see": "YAHOO.lang.augmentObject", "static": "", "guessedname": "augmentProto", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything \nin the supplier will be used unless it would overwrite an existing \nproperty in the receiver.  if true is specified as the third \nparameter, all properties will be applied and will overwrite an \nexisting property in the receiver"}]}, "isFunction": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a function.\nNote: Internet Explorer thinks certain functions are objects:\nvar obj = document.createElement(\"object\");\nYAHOO.lang.isFunction(obj.getAttribute) // reports false in IE\nvar input = document.createElement(\"input\"); // append to body\nYAHOO.lang.isFunction(input.focus) // reports false in IE\nYou will have to implement additional tests if these functions\nmatter to you.", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a legal number", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is of type object\nor function", "guessedname": "isObject", "guessedtype": "function"}, "dump": {"return": {"type": "String", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "since": "2.3.0", "params": [{"type": "Object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function"}, "isUndefined": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is undefined", "guessedname": "isUndefined", "guessedtype": "function"}}, "file": "Lang.js", "guessedtype": "property", "shortname": "YAHOO.lang", "properties": {"_IEEnumFix": {"description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "param": "{Function} r  the object to receive the augmentation", "static": "", "private": "", "guessedname": "_IEEnumFix", "guessedtype": "function"}}, "name": "YAHOO.lang"}, "YAHOO.widget.DataTable": {"name": "YAHOO.widget.DataTable", "configs": {"paginator": {"default": "null", "type": "{Object|YAHOO.widget.Paginator}", "description": "An instance of YAHOO.widget.Paginator."}, "numberOptions": {"default": "{decimalPlaces:0, thousandsSeparator:\",\"}", "type": "Object", "description": "Default config passed to YAHOO.util.Number.format() by the 'number' Column formatter."}, "initialLoad": {"default": "true", "type": "Boolean | Object", "description": "Determines whether or not to load data at instantiation. By\ndefault, will trigger a sendRequest() to the DataSource and pass in the\nrequest defined by initialRequest. If set to false, data will not load\nat instantiation. Alternatively, implementers who wish to work with a \ncustom payload may pass in an object literal with the following values:\n<dl>\n<dt>request (MIXED)</dt>\n<dd>Request value.</dd>\n<dt>argument (MIXED)</dt>\n<dd>Custom data that will be passed through to the callback function.</dd>\n</dl>"}, "initialRequest": {"default": "null", "type": "MIXED", "description": "Defines the initial request that gets sent to the DataSource\nduring initialization. Value is ignored if initialLoad is set to any value\nother than true."}, "formatRow": {"default": "null", "type": "function", "description": "A function that accepts a TR element and its associated Record\nfor custom formatting. The function must return TRUE in order to automatically\ncontinue formatting of child TD elements, else TD elements will not be\nautomatically formatted."}, "renderLoopSize": {"default": "0", "type": "Number", "description": "A value greater than 0 enables DOM rendering of rows to be\nexecuted from a non-blocking timeout queue and sets how many rows to be\nrendered per timeout. Recommended for very large data sets."}, "sortedBy": {"type": "Object | null", "description": "Object literal provides metadata for initial sort values if\ndata will arrive pre-sorted:\n<dl>\n<dt>sortedBy.key</dt>\n<dd>{String} Key of sorted Column</dd>\n<dt>sortedBy.dir</dt>\n<dd>{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</dd>\n</dl>"}, "currencySymbol": {"deprecated": ""}, "summary": {"default": "\"\"", "type": "String", "description": "Value for the SUMMARY attribute."}, "dynamicData": {"default": "false", "type": "Boolean", "description": "If true, sorting and pagination are relegated to the DataSource\nfor handling, using the request returned by the \"generateRequest\" function.\nEach new DataSource response blows away all previous Records. False by default, so \nsorting and pagination will be handled directly on the client side, without\ncausing any new requests for data from the DataSource."}, "caption": {"type": "String", "description": "Value for the CAPTION element. NB: Not supported in\nScrollingDataTable."}, "draggableColumns": {"default": "false", "type": "Boolean", "description": "True if Columns are draggable to reorder, false otherwise.\nThe Drag & Drop Utility is required to enable this feature. Only top-level\nand non-nested Columns are draggable. Write once."}, "currencyOptions": {"default": "{prefix: $, decimalPlaces:2, decimalSeparator:\".\", thousandsSeparator:\",\"}", "type": "Object", "description": "Default config passed to YAHOO.util.Number.format() by the 'currency' Column formatter."}, "MSG_SORTDESC": {"default": "\"Click to sort descending\"", "type": "String", "description": "Message to display in tooltip to sort Column in descending order."}, "MSG_LOADING": {"default": "\"Loading...\"", "type": "String", "description": "Message to display while DataTable is loading data."}, "dateOptions": {"default": "{format:\"%m/%d/%Y\", locale:\"en\"}", "type": "Object", "description": "Default config passed to YAHOO.util.Date.format() by the 'date' Column formatter."}, "selectionMode": {"default": "\"standard\"", "type": "String", "description": "Specifies row or cell selection mode. Accepts the following strings:\n<dl>\n<dt>\"standard\"</dt>\n<dd>Standard row selection with support for modifier keys to enable\nmultiple selections.</dd>\n<dt>\"single\"</dt>\n<dd>Row selection with modifier keys disabled to not allow\nmultiple selections.</dd>\n<dt>\"singlecell\"</dt>\n<dd>Cell selection with modifier keys disabled to not allow\nmultiple selections.</dd>\n<dt>\"cellblock\"</dt>\n<dd>Cell selection with support for modifier keys to enable multiple\nselections in a block-fashion, like a spreadsheet.</dd>\n<dt>\"cellrange\"</dt>\n<dd>Cell selection with support for modifier keys to enable multiple\nselections in a range-fashion, like a calendar.</dd>\n</dl>"}, "MSG_EMPTY": {"default": "\"No records found.\"", "type": "String", "description": "Message to display if DataTable has no data."}, "MSG_ERROR": {"default": "\"Data error.\"", "type": "String", "description": "Message to display while DataTable has data error."}, "MSG_SORTASC": {"default": "\"Click to sort ascending\"", "type": "String", "description": "Message to display in tooltip to sort Column in ascending order."}, "generateRequest": {"default": "HTMLFunction", "type": "function", "description": "A function that converts an object literal of desired DataTable\nstates into a request value which is then passed to the DataSource's\nsendRequest method in order to retrieve data for those states. This\nfunction is passed an object literal of state data and a reference to the\nDataTable instance:\n<dl>\n<dt>pagination<dt>\n<dd>        \n<dt>offsetRecord</dt>\n<dd>{Number} Index of the first Record of the desired page</dd>\n<dt>rowsPerPage</dt>\n<dd>{Number} Number of rows per page</dd>\n</dd>\n<dt>sortedBy</dt>\n<dd>                \n<dt>key</dt>\n<dd>{String} Key of sorted Column</dd>\n<dt>dir</dt>\n<dd>{String} Sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</dd>\n</dd>\n<dt>self</dt>\n<dd>The DataTable instance</dd>\n</dl>\nand by default returns a String of syntax:\n\"sort={sortColumn}&dir={sortDir}&startIndex={pageStartIndex}&results={rowsPerPage}\""}}, "constructors": [{"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Container element for the TABLE."}, {"type": "Object[]", "name": "aColumnDefs", "description": "  Array of object literal Column definitions."}, {"type": "YAHOO.util.DataSource", "name": "oDataSource", "description": "  DataSource instance."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "DataTable class for the YUI DataTable widget."}], "namespace": "YAHOO.widget", "module": "datatable", "events": {"cellUnselectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The unselected TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the unselected cell."}], "description": "Fired when a cell is unselected."}, "tableFocusEvent": {"description": "Fired when the DataTable has a focus event."}, "tableKeyEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a key event."}, "beforeInitialLoadChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitialLoadChange", "description": "Fires before the value for the configuration attribute 'initialLoad' changes. Return false to cancel the attribute change."}, "rowAddEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The added Record."}], "description": "Fired when a row is added."}, "beforeGenerateRequestChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeGenerateRequestChange", "description": "Fires before the value for the configuration attribute 'generateRequest' changes. Return false to cancel the attribute change."}, "rowDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a dblclick."}, "initialLoadChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initialLoadChange", "description": "Fires when the value for the configuration attribute 'initialLoad' changes."}, "tableBlurEvent": {"description": "Fired when the DataTable has a blur event."}, "MSG_ERRORChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "MSG_ERRORChange", "description": "Fires when the value for the configuration attribute 'MSG_ERROR' changes."}, "beforeMSG_SORTASCChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMSG_SORTASCChange", "description": "Fires before the value for the configuration attribute 'MSG_SORTASC' changes. Return false to cancel the attribute change."}, "currencySymbolChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "currencySymbolChange", "description": "Fires when the value for the configuration attribute 'currencySymbol' changes."}, "initEvent": {"description": "Fired when the DataTable's rows are rendered from an initialized state."}, "headerCellClickEvent": {"deprecated": "Use theadCellClickEvent."}, "disableEvent": {"description": "Fired when the DataTable is disabled."}, "rowClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a click."}, "tableMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mouseout."}, "rowUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The updated Record."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Object literal of the old data."}], "description": "Fired when a row is updated."}, "editorUnblockEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor is unblocked."}, "theadLabelMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a THEAD label has a mousedown."}, "tableMouseupEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mouseup."}, "columnSortEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "String", "name": "oArgs.dir", "description": "  Sort direction: YAHOO.widget.DataTable.CLASS_ASC\nor YAHOO.widget.DataTable.CLASS_DESC."}], "description": "Fired when a column is sorted."}, "beforeCurrencySymbolChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCurrencySymbolChange", "description": "Fires before the value for the configuration attribute 'currencySymbol' changes. Return false to cancel the attribute change."}, "captionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "captionChange", "description": "Fires when the value for the configuration attribute 'caption' changes."}, "tableMsgShowEvent": {"params": [{"type": "String", "name": "oArgs.html", "description": "  The HTML displayed."}, {"type": "String", "name": "oArgs.className", "description": "  The className assigned."}], "description": "Fired when a message is shown in the DataTable's message element."}, "beforeDynamicDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDynamicDataChange", "description": "Fires before the value for the configuration attribute 'dynamicData' changes. Return false to cancel the attribute change."}, "theadLabelClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a THEAD label has a click."}, "cellSelectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The selected TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the selected cell."}], "description": "Fired when a cell is selected."}, "columnUnhighlightEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The unhighlighted Column."}], "description": "Fired when a column is unhighlighted."}, "theadRowMouseupEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a THEAD row has a mouseup."}, "headerRowMousedownEvent": {"deprecated": "Use theadRowMousedownEvent."}, "columnHighlightEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The highlighted Column."}], "description": "Fired when a column is highlighted."}, "beforeRenderEvent": {"description": "Fired before the DataTable's DOM is rendered or modified."}, "theadRowMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a THEAD row has a mousedown."}, "cellMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mouseout."}, "linkClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The A element."}], "description": "Fired when a link is clicked."}, "tableMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mousedown."}, "theadCellMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a THEAD cell has a mousedown."}, "rowMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mouseover."}, "renderLoopSizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "renderLoopSizeChange", "description": "Fires when the value for the configuration attribute 'renderLoopSize' changes."}, "headerLabelClickEvent": {"deprecated": "Use theadLabelClickEvent."}, "theadRowMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a THEAD row has a mouseout."}, "columnSelectEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}], "description": "Fired when a column is selected."}, "headerCellMouseoverEvent": {"deprecated": "Use theadCellMouseoverEvent."}, "numberOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "numberOptionsChange", "description": "Fires when the value for the configuration attribute 'numberOptions' changes."}, "theadKeyEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable THEAD element has a key event."}, "columnResizeEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}, {"type": "Number", "name": "oArgs.width", "description": "  Width in pixels."}], "description": "Fired when a column is drag-resized."}, "theadLabelMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a THEAD label has a mouseover."}, "MSG_SORTDESCChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "MSG_SORTDESCChange", "description": "Fires when the value for the configuration attribute 'MSG_SORTDESC' changes."}, "editorKeydownEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}], "description": "Fired when a CellEditor has a keydown."}, "headerLabelMouseoutEvent": {"deprecated": "Use theadLabelMouseoutEvent."}, "theadFocusEvent": {"description": "Fired when the DataTable THEAD element has a focus event."}, "editorRevertEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value from form input field."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when a CellEditor input is reverted."}, "cellClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a click."}, "editorBlockEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor is blocked."}, "headerCellMousedownEvent": {"deprecated": "Use theadCellMousedownEvent."}, "beforeMSG_ERRORChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMSG_ERRORChange", "description": "Fires before the value for the configuration attribute 'MSG_ERROR' changes. Return false to cancel the attribute change."}, "columnSetWidthEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "Number", "name": "oArgs.width", "description": "  The width in pixels."}], "description": "Fired when a column width is set."}, "dropdownChangeEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SELECT element."}], "description": "Fired when a SELECT element is changed."}, "paginatorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "paginatorChange", "description": "Fires when the value for the configuration attribute 'paginator' changes."}, "undisableEvent": {"description": "Fired when the DataTable is undisabled."}, "beforePaginatorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePaginatorChange", "description": "Fires before the value for the configuration attribute 'paginator' changes. Return false to cancel the attribute change."}, "checkboxClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The CHECKBOX element."}], "description": "Fired when a CHECKBOX element is clicked."}, "columnReorderEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "Number", "name": "oArgs.oldIndex", "description": "  The previous index position."}], "description": "Fired when a Column is moved to a new index."}, "headerLabelMouseoverEvent": {"deprecated": "Use theadLabelMouseoverEvent."}, "currencyOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "currencyOptionsChange", "description": "Fires when the value for the configuration attribute 'currencyOptions' changes."}, "radioClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The RADIO element."}], "description": "Fired when a RADIO element is clicked."}, "headerCellDblclickEvent": {"deprecated": "Use theadCellDblclickEvent."}, "cellUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The updated Record."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The updated Column."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Original data value of the updated cell."}], "description": "Fired when a cell is updated."}, "headerRowMouseoutEvent": {"deprecated": "Use theadRowMouseoutEvent."}, "tbodyKeyEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable TBODY element has a key event."}, "beforeFormatRowChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFormatRowChange", "description": "Fires before the value for the configuration attribute 'formatRow' changes. Return false to cancel the attribute change."}, "rowsDeleteEvent": {"params": [{"type": "Object[]", "name": "oArgs.oldData", "description": "  Array of object literals of the deleted data."}, {"type": "Number", "name": "oArgs.recordIndex", "description": "  Index of the first deleted Record."}, {"type": "Number", "name": "oArgs.count", "description": "  Number of deleted Records."}], "description": "Fired when rows are deleted."}, "cellFormatEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The formatted TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the formatted cell."}], "description": "Fired when a cell is formatted."}, "editorUpdateEvent": {"deprecated": "Use CellEditor class."}, "headerLabelMousedownEvent": {"deprecated": "Use theadLabelMousedownEvent."}, "theadRowClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a THEAD row has a click."}, "theadRowDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a THEAD row has a dblclick."}, "columnRemoveEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}], "description": "Fired when a column is removed."}, "theadCellMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a THEAD cell has a mouseover."}, "editorCancelEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor input is canceled."}, "cellDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a dblclick."}, "cellUnhighlightEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The unhighlighted TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the unhighlighted cell."}], "description": "Fired when a cell is unhighlighted."}, "columnInsertEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "Number", "name": "oArgs.index", "description": "  The index position."}], "description": "Fired when a column is inserted."}, "tableDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a dblclick."}, "summaryChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "summaryChange", "description": "Fires when the value for the configuration attribute 'summary' changes."}, "cellMouseupEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mouseup."}, "theadCellMouseupEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a THEAD cell has a mouseup."}, "rowUnselectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The unselected TR element, if applicable."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The unselected Record."}], "description": "Fired when a row is unselected."}, "buttonClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The BUTTON element."}], "description": "Fired when a BUTTON element or INPUT element of type \"button\", \"image\",\n\"submit\", \"reset\" is clicked."}, "generateRequestChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "generateRequestChange", "description": "Fires when the value for the configuration attribute 'generateRequest' changes."}, "beforeRenderLoopSizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRenderLoopSizeChange", "description": "Fires before the value for the configuration attribute 'renderLoopSize' changes. Return false to cancel the attribute change."}, "MSG_LOADINGChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "MSG_LOADINGChange", "description": "Fires when the value for the configuration attribute 'MSG_LOADING' changes."}, "beforeSortedByChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSortedByChange", "description": "Fires before the value for the configuration attribute 'sortedBy' changes. Return false to cancel the attribute change."}, "columnUnsetWidthEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}], "description": "Fired when a column width is unset."}, "beforeMSG_LOADINGChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMSG_LOADINGChange", "description": "Fires before the value for the configuration attribute 'MSG_LOADING' changes. Return false to cancel the attribute change."}, "rowMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mouseout."}, "tableClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a click."}, "headerRowClickEvent": {"deprecated": "Use theadRowClickEvent."}, "rowsAddEvent": {"params": [{"type": "YAHOO.widget.Record[]", "name": "oArgs.record", "description": "  The added Records."}], "description": "Fired when rows are added."}, "dateOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dateOptionsChange", "description": "Fires when the value for the configuration attribute 'dateOptions' changes."}, "theadRowMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a THEAD row has a mouseover."}, "theadCellClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a THEAD cell has a click."}, "theadLabelMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a THEAD label has a mouseout."}, "tbodyFocusEvent": {"description": "Fired when the DataTable TBODY element has a focus event."}, "columnUnselectEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}], "description": "Fired when a column is unselected."}, "editorShowEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor is shown."}, "columnHideEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}], "description": "Fired when a column is hidden."}, "beforeDateOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDateOptionsChange", "description": "Fires before the value for the configuration attribute 'dateOptions' changes. Return false to cancel the attribute change."}, "editorBlurEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor has a blur event."}, "rowMouseupEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mouseup."}, "headerLabelDbllickEvent": {"deprecated": "Use theadLabelDblclickEvent."}, "draggableColumnsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "draggableColumnsChange", "description": "Fires when the value for the configuration attribute 'draggableColumns' changes."}, "theadCellMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a THEAD cell has a mouseout."}, "initialRequestChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initialRequestChange", "description": "Fires when the value for the configuration attribute 'initialRequest' changes."}, "theadCellDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a THEAD cell has a dblclick."}, "cellHighlightEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The highlighted TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the highlighted cell."}], "description": "Fired when a cell is highlighted."}, "headerCellMouseoutEvent": {"deprecated": "Use theadCellMouseoutEvent."}, "headerRowDblclickEvent": {"deprecated": "Use theadRowDblclickEvent."}, "beforeNumberOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNumberOptionsChange", "description": "Fires before the value for the configuration attribute 'numberOptions' changes. Return false to cancel the attribute change."}, "MSG_EMPTYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "MSG_EMPTYChange", "description": "Fires when the value for the configuration attribute 'MSG_EMPTY' changes."}, "cellMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mouseover."}, "rowMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mousedown."}, "theadLabelMouseupEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a THEAD label has a mouseup."}, "beforeCurrencyOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCurrencyOptionsChange", "description": "Fires before the value for the configuration attribute 'currencyOptions' changes. Return false to cancel the attribute change."}, "tableMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mouseover."}, "dataReturnEvent": {"params": [{"type": "String", "name": "oArgs.request", "description": "  Original request."}, {"type": "Object", "name": "oArgs.response", "description": "  Response object."}], "description": "Fired when data is returned from DataSource but before it is consumed by\nDataTable."}, "headerRowMouseoverEvent": {"deprecated": "Use theadRowMouseoverEvent."}, "sortedByChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "sortedByChange", "description": "Fires when the value for the configuration attribute 'sortedBy' changes."}, "columnShowEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}], "description": "Fired when a column is shown."}, "renderEvent": {"description": "Fired when the DataTable's DOM is rendered or modified."}, "formatRowChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "formatRowChange", "description": "Fires when the value for the configuration attribute 'formatRow' changes."}, "rowHighlightEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The highlighted TR element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The highlighted Record."}], "description": "Fired when a row is highlighted."}, "cellMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mousedown."}, "tableMsgHideEvent": {"description": "Fired when the DataTable's message element is hidden."}, "beforeCaptionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCaptionChange", "description": "Fires before the value for the configuration attribute 'caption' changes. Return false to cancel the attribute change."}, "beforeSummaryChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSummaryChange", "description": "Fires before the value for the configuration attribute 'summary' changes. Return false to cancel the attribute change."}, "rowDeleteEvent": {"params": [{"type": "Object", "name": "oArgs.oldData", "description": "  Object literal of the deleted data."}, {"type": "Number", "name": "oArgs.recordIndex", "description": "  Index of the deleted Record."}, {"type": "Number", "name": "oArgs.trElIndex", "description": "  Index of the deleted TR element, if on current page."}], "description": "Fired when a row is deleted."}, "beforeInitialRequestChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitialRequestChange", "description": "Fires before the value for the configuration attribute 'initialRequest' changes. Return false to cancel the attribute change."}, "rowUnhighlightEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The highlighted TR element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The highlighted Record."}], "description": "Fired when a row is unhighlighted."}, "beforeSelectionModeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSelectionModeChange", "description": "Fires before the value for the configuration attribute 'selectionMode' changes. Return false to cancel the attribute change."}, "rowSelectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The selected TR element, if applicable."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The selected Record."}], "description": "Fired when a row is selected."}, "beforeMSG_SORTDESCChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMSG_SORTDESCChange", "description": "Fires before the value for the configuration attribute 'MSG_SORTDESC' changes. Return false to cancel the attribute change."}, "postRenderEvent": {"description": "Fired when the DataTable's post-render routine is complete, including\nColumn width validations."}, "editorSaveEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value from form input field."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when a CellEditor input is saved."}, "unselectAllRowsEvent": {"description": "Fired when all row selections are cleared."}, "MSG_SORTASCChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "MSG_SORTASCChange", "description": "Fires when the value for the configuration attribute 'MSG_SORTASC' changes."}, "unselectAllCellsEvent": {"description": "Fired when all cell selections are cleared."}, "beforeDraggableColumnsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDraggableColumnsChange", "description": "Fires before the value for the configuration attribute 'draggableColumns' changes. Return false to cancel the attribute change."}, "beforeMSG_EMPTYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMSG_EMPTYChange", "description": "Fires before the value for the configuration attribute 'MSG_EMPTY' changes. Return false to cancel the attribute change."}, "theadLabelDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a THEAD label has a dblclick."}, "dynamicDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dynamicDataChange", "description": "Fires when the value for the configuration attribute 'dynamicData' changes."}, "selectionModeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "selectionModeChange", "description": "Fires when the value for the configuration attribute 'selectionMode' changes."}}, "guessedname": "DataTable", "methods": {"sortColumn": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "String", "name": "sDir", "description": "  (Optional) YAHOO.widget.DataTable.CLASS_ASC or\nYAHOO.widget.DataTable.CLASS_DESC"}], "description": "Sorts given Column. If \"dynamicData\" is true, current selections are purged before\na request is sent to the DataSource for data for the new state (using the\nrequest returned by \"generateRequest()\").", "guessedname": "sortColumn", "guessedtype": "function"}, "_unselectAllTdEls": {"private": "", "description": "Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED\nfrom all TD elements in the internal tracker.", "guessedname": "_unselectAllTdEls", "guessedtype": "function"}, "getColumnById": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "String", "name": "column", "description": "  Column ID string."}], "description": "For the given Column ID, returns the associated Column instance. Note: For\ngetting Columns by key, please use the method getColumn().", "guessedname": "getColumnById", "guessedtype": "function"}, "onEventSortColumn": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to sort Column.", "guessedname": "onEventSortColumn", "guessedtype": "function"}, "renderPaginator": {"description": "Renders the Paginator to the DataTable UI", "guessedname": "renderPaginator", "guessedtype": "function"}, "_onTableFocus": {"guessedname": "_onTableFocus", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The focus event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles focus events on the DataTable instance.", "private": "", "guessedtype": "function"}, "_handleCellRangeSelectionByKey": {"guessedname": "_handleCellRangeSelectionByKey", "params": [{"type": "HTMLEvent", "name": "e", "description": "  Event object."}], "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"cellrange\".", "private": "", "guessedtype": "function"}, "updateCell": {"params": [{"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column | String | Number", "name": "oColumn", "description": "  A Column key, or a ColumnSet key index."}, {"type": "Object", "name": "oData", "description": "  New data value for the cell."}], "description": "For the given row and column, updates the Record with the given data. If the\ncell is on current page, the corresponding DOM elements are also updated.", "guessedname": "updateCell", "guessedtype": "function"}, "DataTable._cloneObject": {"description": "Clones object literal or array of object literals.", "private": "", "static": "", "guessedname": "_cloneObject", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": "  Object."}]}, "setColumnWidth": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Number", "name": "nWidth", "description": "  New width in pixels. A null value auto-sizes Column,\nsubject to minWidth and maxAutoWidth validations."}], "description": "Sets given Column to given pixel width. If new width is less than minimum\nwidth, sets to minimum width. Updates oColumn.width value.", "guessedname": "setColumnWidth", "guessedtype": "function"}, "focus": {"description": "Brings focus to the TBODY element. Alias to focusTbodyEl.", "guessedname": "focus", "guessedtype": "function"}, "_handleSingleCellSelectionByMouse": {"guessedname": "_handleSingleCellSelectionByMouse", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"singlecell\".", "private": "", "guessedtype": "function"}, "_setColumnWidthDynStyles": {"guessedname": "_setColumnWidthDynStyles", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "String", "name": "sWidth", "description": "  New width value."}], "description": "Updates width of a Column's liner DIV elements by dynamically creating a\nSTYLE node and writing and updating CSS style rules to it. If this fails during\nruntime, the fallback method _setColumnWidthDynFunction() will be called.\nNotes: This technique is not performant in IE6. IE7 crashes if DataTable is\nnested within another TABLE element. For these cases, it is recommended to\nuse the method _setColumnWidthDynFunction by setting _bDynStylesFallback to TRUE.", "private": "", "guessedtype": "function"}, "DataTable.formatTextarea": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats TEXTAREA elements.", "guessedname": "formatTextarea", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal definition of configuration values."}], "description": "Implementation of Element's abstract method. Sets up config values.", "private": "", "guessedtype": "function"}, "onEventSelectCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to select cell.", "guessedname": "onEventSelectCell", "guessedtype": "function"}, "getRow": {"deprecated": "Use getTrEl().", "guessedname": "getRow", "guessedtype": "function"}, "_repaintGecko": {"guessedname": "_repaintGecko", "el": "{HTMLElement} (Optional) Element to repaint, otherwise entire document body.", "description": "Forces Gecko repaint.", "private": "", "guessedtype": "property"}, "_initColgroupEl": {"guessedname": "_initColgroupEl", "params": [{"type": "HTMLElement", "name": "elTable", "description": "  TABLE element into which to create COLGROUP."}], "description": "Initializes COLGROUP and COL elements for managing minWidth.", "private": "", "guessedtype": "function"}, "_formatTdEl": {"return": {"type": "HTMLElement", "description": "A formatted TD element."}, "description": "Formats a basic TD element.", "private": "", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Associated Column instance."}, {"type": "HTMLElement", "name": "elTd", "description": "  An unformatted TD element."}, {"type": "Number", "name": "index", "description": "  Column key index."}, {"type": "Boolean", "name": "isLast", "description": "  True if Column is last key of the ColumnSet."}], "guessedname": "_formatTdEl", "guessedtype": "function"}, "focusTbodyEl": {"description": "Brings focus to the TBODY element.", "guessedname": "focusTbodyEl", "guessedtype": "function"}, "getTrIndex": {"return": {"type": "Number", "description": "Page row index, or null if row does not exist or is not on current page."}, "params": [{"type": "HTMLElement | String | YAHOO.widget.Record | Number", "name": "row", "description": "  DOM or ID\nstring reference to an element within the DataTable page, a Record instance,\nor a Record's RecordSet index."}], "description": "Returns the page row index of given row. Returns null if the row is not on the\ncurrent DataTable page.", "guessedname": "getTrIndex", "guessedtype": "function"}, "_onTheadClick": {"guessedname": "_onTheadClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on the THEAD element.", "private": "", "guessedtype": "function"}, "_handleSingleCellSelectionByKey": {"guessedname": "_handleSingleCellSelectionByKey", "params": [{"type": "HTMLEvent", "name": "e", "description": "  Event object."}], "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"singlecell\".", "private": "", "guessedtype": "function"}, "_onTbodyClick": {"guessedname": "_onTbodyClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on the primary TBODY element.", "private": "", "guessedtype": "function"}, "isSelected": {"return": {"type": "Boolean", "description": "True if item is selected."}, "params": [{"type": "String | HTMLElement | YAHOO.widget.Record | Number\n{record:YAHOO.widget.Record, column:YAHOO.widget.Column} ", "name": "o", "description": "  TR or TD element by\nreference or ID string, a Record instance, a RecordSet position index,\nor an object literal representation\nof a cell."}], "description": "Returns true if given item is selected, false otherwise.", "guessedname": "isSelected", "guessedtype": "function"}, "onEventSaveCellEditor": {"description": "Overridable custom event handler to save active CellEditor input.", "guessedname": "onEventSaveCellEditor", "guessedtype": "function"}, "_initTheadEl": {"guessedname": "_initTheadEl", "params": [{"type": "HTMLElement", "name": "elTable", "description": "  TABLE element into which to create COLGROUP."}, {"type": "HTMLElement", "name": "Initialized", "description": " THEAD element."}], "description": "Initializes THEAD element.", "private": "", "guessedtype": "function"}, "_insertColgroupColEl": {"guessedname": "_insertColgroupColEl", "params": [{"type": "Number", "name": "index", "description": "  Index of new COL element."}], "description": "Adds a COL element to COLGROUP at given index.", "private": "", "guessedtype": "function"}, "deleteRow": {"params": [{"type": "HTMLElement | String | Number", "name": "row", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}], "description": "Deletes the given row's Record from the RecordSet. If the row is on current page,\nthe corresponding DOM elements are also deleted.", "guessedname": "deleteRow", "guessedtype": "function"}, "showTableMessage": {"params": [{"type": "String", "name": "sHTML", "description": "  (optional) Value for innerHTMlang."}, {"type": "String", "name": "sClassName", "description": "  (optional) Classname."}], "description": "Displays message within secondary TBODY.", "guessedname": "showTableMessage", "guessedtype": "function"}, "selectRow": {"params": [{"type": "HTMLElement | String | YAHOO.widget.Record | Number", "name": "row", "description": "  HTML element\nreference or ID string, Record instance, or RecordSet position index."}], "description": "Sets given row to the selected state.", "guessedname": "selectRow", "guessedtype": "function"}, "onDataReturnAppendRows": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Callback function receives data from DataSource and appends to an existing\nDataTable new Records and, if applicable, creates or updates\ncorresponding TR elements.", "guessedname": "onDataReturnAppendRows", "guessedtype": "function"}, "unhighlightCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string."}], "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given cell.", "guessedname": "unhighlightCell", "guessedtype": "function"}, "getCell": {"deprecated": "Use getTdEl().", "guessedname": "getCell", "guessedtype": "function"}, "getTableEl": {"return": {"type": "HTMLElement", "description": "Reference to TABLE element."}, "description": "Returns DOM reference to the DataTable's TABLE element.", "guessedname": "getTableEl", "guessedtype": "function"}, "_onEditorCancelEvent": {"guessedname": "_onEditorCancelEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through cancelEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "DataTable.editTextarea": {"deprecated": "Use YAHOO.widget.TextareaCellEditor", "guessedname": "editTextarea", "guessedtype": "function"}, "_onTheadKeydown": {"guessedname": "_onTheadKeydown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The key event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles keydown events on the THEAD element.", "private": "", "guessedtype": "function"}, "clearTextSelection": {"description": "Clears browser text selection. Useful to call on rowSelectEvent or\ncellSelectEvent to prevent clicks or dblclicks from selecting text in the\nbrowser.", "guessedname": "clearTextSelection", "guessedtype": "function"}, "DataTable.editCheckbox": {"deprecated": "Use YAHOO.widget.CheckboxCellEditor.", "guessedname": "editCheckbox", "guessedtype": "function"}, "getBelowTdEl": {"return": {"type": "HTMLElement", "description": "Reference to previous TD element, or null."}, "params": [{"type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": "  from which to get previous TD element."}], "description": "Returns DOM reference to the below TD element from the given cell, or null.", "guessedname": "getBelowTdEl", "guessedtype": "function"}, "getFirstTdEl": {"return": {"type": "HTMLElement", "description": "Reference to TD element."}, "params": [{"type": "HTMLElement", "name": "row", "description": "  (optional) row from which to get first TD"}], "description": "Returns DOM reference to the first TD element in the DataTable page (by default),\nthe first TD element of the optionally given row, or null.", "guessedname": "getFirstTdEl", "guessedtype": "function"}, "DataTable.formatRadio": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats INPUT TYPE=RADIO elements.", "guessedname": "formatRadio", "guessedtype": "function"}, "_onEditorRevertEvent": {"guessedname": "_onEditorRevertEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through revertEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "_handleStandardSelectionByMouse": {"guessedname": "_handleStandardSelectionByMouse", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"standard\".", "private": "", "guessedtype": "function"}, "_destroyTbodyEl": {"private": "", "description": "Destroy's the DataTable TBODY element, if available.", "guessedname": "_destroyTbodyEl", "guessedtype": "function"}, "_updatePaginator": {"guessedname": "_updatePaginator", "params": [{"type": "Paginator", "name": "newPag", "description": "  Paginator instance (or null) for DataTable to use"}], "description": "Method executed during set() operation for the \"paginator\" attribute.\nAdds and/or severs event listeners between DataTable and Paginator", "private": "", "guessedtype": "function"}, "_onTbodyKeydown": {"guessedname": "_onTbodyKeydown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The key event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles keydown events on the TBODY element. Handles selection behavior,\nprovides hooks for ENTER to edit functionality.", "private": "", "guessedtype": "function"}, "_initCaptionEl": {"guessedname": "_initCaptionEl", "params": [{"type": "String", "name": "sCaption", "description": "  Text for caption."}], "description": "Creates HTML markup CAPTION element.", "private": "", "guessedtype": "function"}, "removeColumn": {"return": {"type": "YAHOO.widget.Column", "description": "oColumn  Removed Column instance."}, "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}], "description": "Removes given Column. NOTE: You cannot remove nested Columns. You can only remove\nnon-nested Columns, and top-level parent Columns (which will remove all\nchildren Columns).", "guessedname": "removeColumn", "guessedtype": "function"}, "onEventHighlightRow": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to highlight row. Accounts for spurious\ncaused-by-child events.", "guessedname": "onEventHighlightRow", "guessedtype": "function"}, "_initCellEditorEl": {"guessedname": "_initCellEditorEl", "deprecated": "", "description": "Backward compatibility.", "private": "", "guessedtype": "function"}, "_clearMinWidth": {"guessedname": "_clearMinWidth", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Which Column."}], "description": "Clears minWidth.", "private": "", "guessedtype": "function"}, "showCellEditor": {"params": [{"type": "HTMLElement | String", "name": "elCell", "description": "  Cell to edit."}], "description": "Activates and shows CellEditor instance for the given cell while deactivating and\ncanceling previous CellEditor. It is baked into DataTable that only one CellEditor\ncan be active at any given time.", "guessedname": "showCellEditor", "guessedtype": "function"}, "showColumn": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}], "description": "Shows given Column. NOTE: You cannot hide/show nested Columns. You can only\nhide/show non-nested Columns, and top-level parent Columns (which will\nhide/show all children Columns).", "guessedname": "showColumn", "guessedtype": "function"}, "_setColumnWidth": {"guessedname": "_setColumnWidth", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "String", "name": "sWidth", "description": "  New width value."}, {"type": "String", "name": "sOverflow", "description": "  Should be \"hidden\" when Column width is explicitly\nbeing set to a value, but should be \"visible\" when Column is meant to auto-fit content."}], "description": "Sets liner DIV elements of given Column to given width. When value should be\nauto-calculated to fit content overflow is set to visible, otherwise overflow\nis set to hidden. No validations against minimum width and no updating\nColumn.width value.", "private": "", "guessedtype": "function"}, "getSelectedRows": {"return": {"type": "String[]", "description": "Array of selected rows by Record ID."}, "description": "Returns selected rows as an array of Record IDs.", "guessedname": "getSelectedRows", "guessedtype": "function"}, "getTdEl": {"return": {"type": "HTMLElement", "description": "Reference to TD element."}, "params": [{"type": "HTMLElement | String | Object} TD element or child of a TD element, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": " ."}], "description": "Returns DOM reference to a TD element.", "guessedname": "getTdEl", "guessedtype": "function"}, "onDataReturnReplaceRows": {"params": [{"type": "MIXED", "name": "oRequest", "description": "  Original generated request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Callback function receives reponse from DataSource, replaces all existing\nRecords in  RecordSet, updates TR elements with new data, and updates state\nUI for pagination and sorting from payload data, if necessary.", "guessedname": "onDataReturnReplaceRows", "guessedtype": "function"}, "addRows": {"params": [{"type": "Object[]", "name": "aData", "description": "  Array of object literal data for the rows."}, {"type": "Number", "name": "index", "description": "  (optional) RecordSet position index at which to add data."}], "description": "Convenience method to add multiple rows.", "guessedname": "addRows", "guessedtype": "function"}, "onEventHighlightCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to highlight cell. Accounts for spurious\ncaused-by-child events.", "guessedname": "onEventHighlightCell", "guessedtype": "function"}, "_defaultPaginatorContainers": {"guessedname": "_defaultPaginatorContainers", "params": [{"type": "boolean", "name": "create", "description": "  Create the default containers if not found"}], "description": "Returns the default containers used for Paginators.  If create param is\npassed, the containers will be created and added to the DataTable container.", "private": "", "guessedtype": "function"}, "onEventSelectRow": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to manage selection according to desktop paradigm.", "guessedname": "onEventSelectRow", "guessedtype": "function"}, "_initContainerEl": {"guessedname": "_initContainerEl", "params": [{"type": "HTMLElement | String", "name": "elContainer", "description": "  HTML DIV element by reference or ID."}], "description": "Initializes the DataTable outer container element, including a mask.", "private": "", "guessedtype": "function"}, "_onEditorSaveEvent": {"guessedname": "_onEditorSaveEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through saveEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "_onTableMousedown": {"guessedname": "_onTableMousedown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mousedown event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mousedown events on the DataTable instance.", "private": "", "guessedtype": "function"}, "onPaginatorChangeRequest": {"params": [{"type": "Object", "name": "oPaginatorState", "description": "  An object literal describing the proposed pagination state."}], "description": "Responds to new Pagination states. By default, updates the UI to reflect the\nnew state. If \"dynamicData\" is true, current selections are purged before\na request is sent to the DataSource for data for the new state (using the\nrequest returned by \"generateRequest()\").", "guessedname": "onPaginatorChangeRequest", "guessedtype": "function"}, "_initDataSource": {"guessedname": "_initDataSource", "params": [{"type": "YAHOO.util.DataSource", "name": "oDataSource", "description": "  DataSource instance."}], "description": "Initializes DataSource.", "private": "", "guessedtype": "function"}, "_onDropdownChange": {"guessedname": "_onDropdownChange", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The change event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles change events on SELECT elements within DataTable.", "private": "", "guessedtype": "function"}, "onEventUnhighlightColumn": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to unhighlight Column. Accounts for spurious\ncaused-by-child events.", "guessedname": "onEventUnhighlightColumn", "guessedtype": "function"}, "DataTable._destroyColumnResizerProxyEl": {"return": {"type": "HTMLElement", "description": "Reference to Column resizer proxy."}, "description": "Destroys shared Column resizer proxy.", "private": "", "static": "", "guessedname": "_destroyColumnResizerProxyEl", "guessedtype": "function"}, "_initEvents": {"private": "", "description": "Initialize internal event listeners", "guessedname": "_initEvents", "guessedtype": "function"}, "updateRows": {"params": [{"type": "YAHOO.widget.Record | Number | HTMLElement | String", "name": "startrow", "description": " \nStarting row to update: By Record instance, by Record's RecordSet\nposition index, by HTMLElement reference to the TR element, or by ID string\nof the TR element."}, {"type": "Object[]", "name": "aData", "description": "  Array of object literal of data for the rows."}], "description": "Starting with the given row, updates associated Records with the given data.\nThe number of rows to update are determined by the array of data provided.\nUndefined data (i.e., not an object literal) causes a row to be skipped. If\nany of the rows are on current page, the corresponding DOM elements are also\nupdated.", "guessedname": "updateRows", "guessedtype": "function"}, "deleteRows": {"params": [{"type": "HTMLElement | String | Number", "name": "row", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}, {"type": "Number", "name": "count", "description": "  (optional) How many rows to delete. A negative value\nwill delete towards the beginning."}], "description": "Convenience method to delete multiple rows.", "guessedname": "deleteRows", "guessedtype": "function"}, "onEventCancelCellEditor": {"description": "Overridable custom event handler to cancel active CellEditor.", "guessedname": "onEventCancelCellEditor", "guessedtype": "function"}, "_initColumnSort": {"private": "", "description": "Initializes Column sorting.", "guessedname": "_initColumnSort", "guessedtype": "function"}, "highlightColumn": {"params": [{"type": "HTMLElement | String | Number", "name": "column", "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."}], "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.\nNOTE: You cannot highlight/unhighlight nested Columns. You can only\nhighlight/unhighlight non-nested Columns, and bottom-level key Columns.", "guessedname": "highlightColumn", "guessedtype": "function"}, "onEditorBlurEvent": {"params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Public handler of the editorBlurEvent. By default, saves on blur if\ndisableBtns is true, otherwise cancels on blur.", "guessedname": "onEditorBlurEvent", "guessedtype": "function"}, "onEventEditCell": {"deprecated": "Use onEventShowCellEditor.", "guessedname": "onEventEditCell", "guessedtype": "function"}, "getThLinerEl": {"return": {"type": "HTMLElement", "description": "Reference to TH liner element."}, "params": [{"type": "YAHOO.widget.Column | HTMLElement | String", "name": "theadCell", "description": "  Column instance,\nDOM element reference, or string ID."}], "description": "Returns DOM reference to a TH liner element. Needed to normalize for resizeable \nColumns, which have an additional resizer liner DIV element between the TH\nelement and the liner DIV element.", "guessedname": "getThLinerEl", "guessedtype": "function"}, "getRecordSet": {"return": {"type": "YAHOO.widget.RecordSet", "description": "RecordSet instance."}, "description": "Returns the DataTable instance's RecordSet instance.", "guessedname": "getRecordSet", "guessedtype": "function"}, "updateRow": {"params": [{"type": "YAHOO.widget.Record | Number | HTMLElement | String", "name": "row", "description": " \nWhich row to update: By Record instance, by Record's RecordSet\nposition index, by HTMLElement reference to the TR element, or by ID string\nof the TR element."}, {"type": "Object", "name": "oData", "description": "  Object literal of data for the row."}], "description": "For the given row, updates the associated Record with the given data. If the\nrow is on current page, the corresponding DOM elements are also updated.", "guessedname": "updateRow", "guessedtype": "function"}, "getPreviousTrEl": {"return": {"type": "HTMLElement", "description": "Reference to previous TR element."}, "params": [{"type": "HTMLElement | String | Number | YAHOO.widget.Record", "name": "row", "description": "  Element\nreference, ID string, page row index, or Record from which to get previous TR element."}], "description": "Returns DOM reference to the previous TR element from the given TR element, or null.", "guessedname": "getPreviousTrEl", "guessedtype": "function"}, "_initColumnHelpers": {"private": "", "description": "Initializes elements associated with Column functionality: ColumnDD and ColumnResizers.", "guessedname": "_initColumnHelpers", "guessedtype": "function"}, "hideTableMessage": {"description": "Hides secondary TBODY.", "guessedname": "hideTableMessage", "guessedtype": "function"}, "_getColumnClassnames": {"return": {"type": "String", "description": "A String of classnames to be assigned to TH or TD elements\nfor given Column."}, "description": "Retruns classnames to represent current Column states.", "private": "", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "String[]", "name": "aAddClasses", "description": "  An array of additional classnames to add to the\nreturn value."}], "guessedname": "_getColumnClassNames", "guessedtype": "function"}, "onEventUnhighlightCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to unhighlight cell. Accounts for spurious\ncaused-by-child events.", "guessedname": "onEventUnhighlightCell", "guessedtype": "function"}, "onEventSelectColumn": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to select Column.", "guessedname": "onEventSelectColumn", "guessedtype": "function"}, "_initTbodyEl": {"guessedname": "_initTbodyEl", "params": [{"type": "HTMLElement", "name": "elTable", "description": "  TABLE element into which to create TBODY ."}], "description": "Initializes TBODY element for data.", "private": "", "guessedtype": "function"}, "DataTable.formatCurrency": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Number", "name": "oData", "description": "  Data value for the cell."}], "description": "Formats currency. Default unit is USD.", "guessedname": "formatCurrency", "guessedtype": "function"}, "unselectRow": {"params": [{"type": "HTMLElement | String | YAHOO.widget.Record | Number", "name": "row", "description": "  HTML element\nreference or ID string, Record instance, or RecordSet position index."}], "description": "Sets given row to the unselected state.", "guessedname": "unselectRow", "guessedtype": "function"}, "DataTable.formatTheadCell": {"deprecated": "Use formatTheadCell.", "params": [{"type": "HTMLElement", "name": "elCellLabel", "description": "  The label SPAN element within the TH liner,\nnot the liner DIV element."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oSortedBy", "description": "  Sort state object literal."}], "description": "Outputs markup into the given TH based on given Column.", "guessedname": "formatTheadCell", "guessedtype": "function"}, "_onRenderChainEnd": {"private": "", "description": "Validates minWidths whenever the render chain ends.", "guessedname": "_onRenderChainEnd", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance."}, "description": "DataSource instance name, for logging.", "guessedname": "toString", "guessedtype": "function"}, "getTbodyEl": {"return": {"type": "HTMLElement", "description": "Reference to TBODY element."}, "description": "Returns DOM reference to the DataTable's primary TBODY element.", "guessedname": "getTbodyEl", "guessedtype": "function"}, "DataTable.formatLink": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats links.", "guessedname": "formatLink", "guessedtype": "function"}, "getTdLinerEl": {"return": {"type": "HTMLElement", "description": "Reference to TD liner element."}, "params": [{"type": "HTMLElement | Object} TD element or child of a TD element, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": " ."}], "description": "Returns DOM reference to a TD liner element.", "guessedname": "getTdLinerEl", "guessedtype": "function"}, "getColumnSet": {"return": {"type": "YAHOO.widget.ColumnSet", "description": "ColumnSet instance."}, "description": "Returns the DataTable instance's ColumnSet instance.", "guessedname": "getColumnSet", "guessedtype": "function"}, "addRow": {"params": [{"type": "Object", "name": "oData", "description": "  Object literal of data for the row."}, {"type": "Number", "name": "index", "description": "  (optional) RecordSet position index at which to add data."}], "description": "Adds one new Record of data into the RecordSet at the index if given,\notherwise at the end. If the new Record is in page view, the\ncorresponding DOM elements are also updated.", "guessedname": "addRow", "guessedtype": "function"}, "onEventShowCellEditor": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to edit cell.", "guessedname": "onEventShowCellEditor", "guessedtype": "function"}, "_initColumnSet": {"guessedname": "_initColumnSet", "params": [{"type": "Object[]", "name": "aColumnDefs", "description": "  Array of object literal Column definitions."}], "description": "Initializes ColumnSet.", "private": "", "guessedtype": "function"}, "DataTable._destroyColumnDragTargetEl": {"guessedname": "_destroyColumnDragTargetEl", "static": "", "description": "Destroys shared Column drag target.", "private": "", "guessedtype": "function"}, "getMsgTdEl": {"return": {"type": "HTMLElement", "description": "Reference to TD element."}, "description": "Returns DOM reference to the TD element within the secondary TBODY that is\nused to display messages.", "guessedname": "getMsgTdEl", "guessedtype": "function"}, "DataTable.formatEmail": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats emails.", "guessedname": "formatEmail", "guessedtype": "function"}, "unselectCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}], "description": "Sets given cell to the unselected state.", "guessedname": "unselectCell", "guessedtype": "function"}, "_onTableMouseout": {"guessedname": "_onTableMouseout", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mouseout event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mouseout events on the DataTable instance.", "private": "", "guessedtype": "function"}, "getCellEditor": {"return": {"type": "YAHOO.widget.CellEditor", "description": "CellEditor instance."}, "description": "Returns current CellEditor instance, or null.", "guessedname": "getCellEditor", "guessedtype": "function"}, "_destroyColumnHelpers": {"private": "", "description": "Destroys elements associated with Column functionality: ColumnDD and ColumnResizers.", "guessedname": "_destroyColumnHelpers", "guessedtype": "function"}, "getAboveTdEl": {"return": {"type": "HTMLElement", "description": "Reference to next TD element, or null."}, "params": [{"type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": "  from which to get next TD element."}], "description": "Returns DOM reference to the above TD element from the given cell, or null.", "guessedname": "getAboveTdEl", "guessedtype": "function"}, "onEventFormatCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to format cell.", "guessedname": "onEventFormatCell", "guessedtype": "function"}, "_onEditorKeydownEvent": {"guessedname": "_onEditorKeydownEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through keydownEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "_setRowStripes": {"guessedname": "_setRowStripes", "params": [{"type": "HTMLElement | String | Number", "name": "row", "description": "  (optional) HTML TR element reference\nor string ID, or page row index of where to start striping."}, {"type": "Number", "name": "range", "description": "  (optional) If given, how many rows to stripe, otherwise\nstripe all the rows until the end."}], "description": "Assigns the classes DT.CLASS_EVEN and DT.CLASS_ODD to one, many, or all TR elements.", "private": "", "guessedtype": "function"}, "_deleteTrEl": {"return": {"type": "Boolean", "description": "Returns true if successful, else returns false."}, "description": "Deletes TR element by DOM reference or by DataTable page row index.", "private": "", "params": [{"type": "HTMLElement | Number", "name": "row", "description": "  TR element reference or Datatable page row index."}], "guessedname": "_deleteTrEl", "guessedtype": "function"}, "_destroyPaginator": {"private": "", "description": "Calls Paginator's destroy() method", "guessedname": "_destroyPaginator", "guessedtype": "function"}, "_clearTrTemplateEl": {"private": "", "description": "Clears TR element template in response to any Column state change.", "guessedname": "_clearTrTemplateEl", "guessedtype": "function"}, "onEventUnhighlightRow": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to unhighlight row. Accounts for spurious\ncaused-by-child events.", "guessedname": "onEventUnhighlightRow", "guessedtype": "function"}, "getPreviousTdEl": {"return": {"type": "HTMLElement", "description": "Reference to previous TD element, or null."}, "params": [{"type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": "  from which to get previous TD element."}], "description": "Returns DOM reference to the previous TD element from the given cell, or null.", "guessedname": "getPreviousTdEl", "guessedtype": "function"}, "_destroyContainerEl": {"guessedname": "_destroyContainerEl", "params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Reference to the container element."}], "description": "Destroy's the DataTable outer container element, if available.", "private": "", "guessedtype": "function"}, "_getTrTemplateEl": {"guessedname": "_getTrTemplateEl", "return": {"type": "HTMLElement", "description": "A TR element to be cloned and added to the DOM."}, "description": "Returns a new TR element template with TD elements classed with current\nColumn states.", "private": "", "guessedtype": "function"}, "unselectAllRows": {"description": "Clears out all row selections.", "guessedname": "unselectAllRows", "guessedtype": "function"}, "getSelectedTdEls": {"return": {"type": "HTMLElement[]", "description": "Array of selected TD elements."}, "description": "Returns array of selected TD elements on the page.", "guessedname": "getSelectedTdEls", "guessedtype": "function"}, "destroyCellEditor": {"description": "Destroys active CellEditor instance and UI.", "guessedname": "destroyCellEditor", "guessedtype": "function"}, "onDataReturnInitializeTable": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Callback function receives data from DataSource and populates an entire\nDataTable with Records and TR elements, clearing previous Records, if any.", "guessedname": "onDataReturnInitializeTable", "guessedtype": "function"}, "doBeforeShowCellEditor": {"return": {"type": "Boolean", "description": "Return true to continue showing CellEditor."}, "params": [{"type": "YAHOO.widget.CellEditor", "name": "oCellEditor", "description": "  The CellEditor instance."}], "description": "Overridable abstract method to customize CellEditor before showing.", "guessedname": "doBeforeShowCellEditor", "guessedtype": "function"}, "_setFirstRow": {"private": "", "description": "Assigns the class YAHOO.widget.DataTable.CLASS_FIRST to the first TR element\nof the DataTable page and updates internal tracker.", "guessedname": "_setFirstRow", "guessedtype": "function"}, "reorderColumn": {"return": {"type": "YAHOO.widget.Column", "description": "oColumn  Reordered Column instance."}, "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Number", "name": "index", "description": "  New tree index."}], "description": "Removes given Column and inserts into given tree index. NOTE: You\ncan only reorder non-nested Columns and top-level parent Columns. You cannot\nreorder a nested Column to an existing parent.", "guessedname": "reorderColumn", "guessedtype": "function"}, "_restoreMinWidth": {"guessedname": "_restoreMinWidth", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Which Column."}], "description": "Restores minWidth.", "private": "", "guessedtype": "function"}, "_onDocumentClick": {"guessedname": "_onDocumentClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on the DOCUMENT.", "private": "", "guessedtype": "function"}, "DataTable.validateNumber": {"static": "", "params": [{"type": "Object", "name": "oData", "description": "  Data to validate."}], "description": "Validates data value to type Number, doing type conversion as\nnecessary. A valid Number value is return, else null is returned\nif input value does not validate.", "guessedname": "validateNumber", "guessedtype": "function"}, "DataTable._initColumnDragTargetEl": {"return": {"type": "HTMLElement", "description": "Reference to Column drag target."}, "description": "Creates HTML markup for shared Column drag target.", "private": "", "static": "", "guessedname": "_initColumnDragTargetEl", "guessedtype": "function"}, "undisable": {"description": "Undisables DataTable UI.", "guessedname": "undisable", "guessedtype": "function"}, "_destroyTheadEl": {"private": "", "description": "Destroy's the DataTable THEAD element, if available.", "guessedname": "_destroyTheadEl", "guessedtype": "function"}, "DataTable.formatCheckbox": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object | Boolean} Data value for the cell. Can be a simple\nBoolean to indicate whether checkbox is checked or not. Can be object literal\n{checked:bBoolean, label:sLabel", "name": "oData", "description": " . Other forms of oData require a custom\nformatter."}], "description": "Formats a CHECKBOX element.", "guessedname": "formatCheckbox", "guessedtype": "function"}, "getColumn": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "HTMLElement | String | Number", "name": "column", "description": "  TH/TD element (or child of a\nTH/TD element), a Column key, or a ColumnSet key index."}], "description": "For the given identifier, returns the associated Column instance. Note: For\ngetting Columns by Column ID string, please use the method getColumnById().", "guessedname": "getColumn", "guessedtype": "function"}, "DataTable.formatNumber": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats numbers.", "guessedname": "formatNumber", "guessedtype": "function"}, "_handleCellBlockSelectionByMouse": {"guessedname": "_handleCellBlockSelectionByMouse", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"cellblock\".", "private": "", "guessedtype": "function"}, "validateColumnWidths": {"params": [{"type": "YAHOO.widget.Column", "name": "oArg.column", "description": "  (optional) One Column to validate. If null, all Columns' widths are validated."}], "description": "For one or all Columns, when Column is not hidden, width is not set, and minWidth\nand/or maxAutoWidth is set, validates auto-width against minWidth and maxAutoWidth.", "guessedname": "validateColumnWidths", "guessedtype": "function"}, "_onTheadFocus": {"guessedname": "_onTheadFocus", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The focus event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles focus events on the THEAD element.", "private": "", "guessedtype": "function"}, "getDataSource": {"return": {"type": "YAHOO.util.DataSource", "description": "DataSource instance."}, "description": "Returns the DataTable instance's DataSource instance.", "guessedname": "getDataSource", "guessedtype": "function"}, "getColumnSortDir": {"return": {"type": "String", "description": "YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTableCLASS_DESC."}, "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oSortedBy", "description": "  (optional) Specify the state, or use current state."}], "description": "For the given Column instance, returns next direction to sort.", "guessedname": "getColumnSortDir", "guessedtype": "function"}, "_handleCellBlockSelectionByKey": {"guessedname": "_handleCellBlockSelectionByKey", "params": [{"type": "HTMLEvent", "name": "e", "description": "  Event object."}], "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"cellblock\".", "private": "", "guessedtype": "function"}, "DataTable.formatDefault": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Default cell formatter", "guessedname": "formatDefault", "guessedtype": "function"}, "select": {"deprecated": "Use selectRow.", "guessedname": "select", "guessedtype": "function"}, "_initRecordSet": {"private": "", "description": "Initializes RecordSet.", "guessedname": "_initRecordSet", "guessedtype": "function"}, "getNextTrEl": {"return": {"type": "HTMLElement", "description": "Reference to next TR element."}, "params": [{"type": "HTMLElement | String | Number | YAHOO.widget.Record", "name": "row", "description": "  Element\nreference, ID string, page row index, or Record from which to get next TR element."}], "description": "Returns DOM reference to the next TR element from the given TR element, or null.", "guessedname": "getNextTrEl", "guessedtype": "function"}, "_updateTrEl": {"return": {"type": "HTMLElement", "description": "DOM reference to the new TR element."}, "description": "Formats the contents of the given TR's TD elements with data from the given\nRecord. Only innerHTML should change, nothing structural.", "private": "", "params": [{"type": "HTMLElement", "name": "elTr", "description": "  The TR element to update."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  The associated Record instance."}], "guessedname": "_updateTrEl", "guessedtype": "function"}, "_initTableEl": {"guessedname": "_initTableEl", "params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Container element into which to create TABLE."}], "description": "Creates HTML markup for TABLE, COLGROUP, THEAD and TBODY elements in outer\ncontainer element.", "private": "", "guessedtype": "function"}, "unhighlightColumn": {"params": [{"type": "HTMLElement | String | Number", "name": "column", "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."}], "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.\nNOTE: You cannot highlight/unhighlight nested Columns. You can only\nhighlight/unhighlight non-nested Columns, and bottom-level key Columns.", "guessedname": "unhighlightColumn", "guessedtype": "function"}, "DataTable.editDropdown": {"deprecated": "Use YAHOO.widget.DropdownCellEditor.", "guessedname": "editDropdown", "guessedtype": "function"}, "_getSelectionAnchor": {"guessedname": "_getSelectionAnchor", "params": [{"type": "Object", "name": "oTrigger", "description": "  (Optional) Object literal of selection trigger values\n(for key events)."}], "description": "Returns object literal of values that represent the selection anchor. Used\nto determine selection behavior resulting from a user event.", "private": "", "guessedtype": "function"}, "_onEditorBlurEvent": {"guessedname": "_onEditorBlurEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through blurEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "getNextTdEl": {"return": {"type": "HTMLElement", "description": "Reference to next TD element, or null."}, "params": [{"type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": "  from which to get next TD element."}], "description": "Returns DOM reference to the next TD element from the given cell, or null.", "guessedname": "getNextTdEl", "guessedtype": "function"}, "_destroyResizeableColumns": {"private": "", "description": "Disables resizeability on key Column TH elements.", "guessedname": "_destroyResizeableColumns", "guessedtype": "function"}, "onDataReturnInsertRows": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  Argument payload, looks in oPayload.insertIndex."}], "description": "Callback function receives data from DataSource and inserts new records\nstarting at the index specified in oPayload.insertIndex. The value for\noPayload.insertIndex can be populated when sending the request to the DataSource,\nor by accessing oPayload.insertIndex with the doBeforeLoadData() method at runtime.\nIf applicable, creates or updates corresponding TR elements.", "guessedname": "onDataReturnInsertRows", "guessedtype": "function"}, "saveCellEditor": {"description": "Saves active CellEditor input to Record and upates DOM UI.", "guessedname": "saveCellEditor", "guessedtype": "function"}, "unhighlightRow": {"params": [{"type": "HTMLElement | String", "name": "row", "description": "  DOM element reference or ID string."}], "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given row.", "guessedname": "unhighlightRow", "guessedtype": "function"}, "_setSelections": {"private": "", "description": "Assigns the class DT.CLASS_SELECTED to TR and TD elements.", "guessedname": "_setSelections", "guessedtype": "function"}, "_unsetLastRow": {"private": "", "description": "Removes the class YAHOO.widget.DataTable.CLASS_LAST from the last TR element\nof the DataTable page and updates internal tracker.", "guessedname": "_unsetLastRow", "guessedtype": "function"}, "getSelectedCells": {"return": {"type": "Object[]", "description": "Array of selected cells by Record ID and Column ID."}, "description": "Returns selected cells as an array of object literals:\n{recordId:sRecordId, columnKey:sColumnKey}.", "guessedname": "getSelectedCells", "guessedtype": "function"}, "unselectColumn": {"params": [{"type": "HTMLElement | String | Number", "name": "column", "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."}], "description": "Unselects given Column. NOTE: You cannot select/unselect nested Columns. You can only\nselect/unselect non-nested Columns, and bottom-level key Columns.", "guessedname": "unselectColumn", "guessedtype": "function"}, "DataTable.formatTextbox": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats INPUT TYPE=TEXT elements.", "guessedname": "formatTextbox", "guessedtype": "function"}, "_setLastRow": {"private": "", "description": "Assigns the class YAHOO.widget.DataTable.CLASS_LAST to the last TR element\nof the DataTable page and updates internal tracker.", "guessedname": "_setLastRow", "guessedtype": "function"}, "_destroyColgroupEl": {"private": "", "description": "Destroy's the DataTable COLGROUP element, if available.", "guessedname": "_destroyColgroupEl", "guessedtype": "function"}, "_initDraggableColumns": {"private": "", "description": "Initializes top-level Column TH elements into DD instances.", "guessedname": "_initDraggableColumns", "guessedtype": "function"}, "DataTable._initColumnResizerProxyEl": {"return": {"type": "HTMLElement", "description": "Reference to Column resizer proxy."}, "description": "Creates HTML markup for shared Column resizer proxy.", "private": "", "static": "", "guessedname": "_initColumnResizerProxyEl", "guessedtype": "function"}, "_onTbodyFocus": {"guessedname": "_onTbodyFocus", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The focus event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles focus events on the TBODY element.", "private": "", "guessedtype": "function"}, "getLastSelectedCell": {"return": {"type": "Object", "description": "Object literal representation of a cell."}, "description": "Returns last selected cell as an object literal:\n{recordId:sRecordId, columnKey:sColumnKey}.", "guessedname": "getLastSelectedCell", "guessedtype": "function"}, "onDataReturnUpdateRows": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  Argument payload, looks in oPayload.updateIndex."}], "description": "Callback function receives data from DataSource and incrementally updates Records\nstarting at the index specified in oPayload.updateIndex. The value for\noPayload.updateIndex can be populated when sending the request to the DataSource,\nor by accessing oPayload.updateIndex with the doBeforeLoadData() method at runtime.\nIf applicable, creates or updates corresponding TR elements.", "guessedname": "onDataReturnUpdateRows", "guessedtype": "function"}, "DataTable.editRadio": {"deprecated": "Use YAHOO.widget.RadioCellEditor.", "guessedname": "editRadio", "guessedtype": "function"}, "_reorderColgroupColEl": {"guessedname": "_reorderColgroupColEl", "params": [{"type": "Number[]", "name": "aKeyIndexes", "description": "  Array of indexes of removed COL element."}, {"type": "Number", "name": "newIndex", "description": "  New index."}], "description": "Reorders a COL element from old index(es) to new index.", "private": "", "guessedtype": "function"}, "_runRenderChain": {"private": "", "description": "Internal wrapper calls run() on render Chain instance.", "guessedname": "_runRenderChain", "guessedtype": "function"}, "_getSelectionTrigger": {"private": "", "description": "Returns object literal of values that represent the selection trigger. Used\nto determine selection behavior resulting from a key event.", "guessedname": "_getSelectionTrigger", "guessedtype": "function"}, "_createTrEl": {"return": {"type": "HTMLElement", "description": "The new TR element.  This must be added to the DOM."}, "description": "Create a new TR element for a given Record and appends it with the correct\nnumber of Column-state-classed TD elements. Striping is the responsibility of\nthe calling function, which may decide to stripe the single row, a subset of\nrows, or all the rows.", "private": "", "params": [{"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance"}], "guessedname": "_addTrEl", "guessedtype": "function"}, "getLastTrEl": {"return": {"type": "HTMLElement", "description": "Reference to last TR element."}, "description": "Returns DOM reference to the last TR element in the DataTable page, or null.", "guessedname": "getLastTrEl", "guessedtype": "function"}, "selectColumn": {"params": [{"type": "HTMLElement | String | Number", "name": "column", "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."}], "description": "Selects given Column. NOTE: You cannot select/unselect nested Columns. You can only\nselect/unselect non-nested Columns, and bottom-level key Columns.", "guessedname": "selectColumn", "guessedtype": "function"}, "onEventHighlightColumn": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to highlight Column. Accounts for spurious\ncaused-by-child events.", "guessedname": "onEventHighlightColumn", "guessedtype": "function"}, "DataTable.formatText": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats text strings.", "guessedname": "formatText", "guessedtype": "function"}, "_initCellEditing": {"private": "", "description": "Initializes CellEditor integration.", "guessedname": "_initCellEditing", "guessedtype": "function"}, "_setColumnWidthDynFunction": {"guessedname": "_setColumnWidthDynFunction", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "String", "name": "sWidth", "description": "  New width value."}], "description": "Updates width of a Column's liner DIV elements by dynamically creating a\nfunction to update all element style properties in one pass. Note: This\ntechnique is not supported in sandboxed environments that prohibit EVALs.", "private": "", "guessedtype": "function"}, "_destroyDraggableColumns": {"private": "", "description": "Disables DD from top-level Column TH elements.", "guessedname": "_destroyDraggableColumns", "guessedtype": "function"}, "_initConfigs": {"guessedname": "_initConfigs", "params": [{"type": "Object", "name": "oConfig", "description": "  Object literal of config values."}], "description": "Initializes object literal of config values.", "private": "", "guessedtype": "function"}, "_initThEl": {"guessedname": "_initThEl", "params": [{"type": "HTMLElement", "name": "elTh", "description": "  TH element reference."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column object."}], "description": "Populates TH element as defined by Column.", "private": "", "guessedtype": "function"}, "getTrEl": {"return": {"type": "HTMLElement", "description": "Reference to TR element, or null."}, "params": [{"type": "HTMLElement | String | Number | YAHOO.widget.Record", "name": "row", "description": "  Which row to\nget: by element reference, ID string, page row index, or Record."}], "description": "Returns the corresponding TR reference for a given DOM element, ID string or\ndirectly page row index. If the given identifier is a child of a TR element,\nthen DOM tree is traversed until a parent TR element is returned, otherwise\nnull.", "guessedname": "getTrEl", "guessedtype": "function"}, "resetCellEditor": {"deprecated": "Use destroyCellEditor", "guessedname": "resetCellEditor", "guessedtype": "function"}, "onPaginatorChange": {"deprecated": "Use onPaginatorChangeRequest", "description": "Alias for onPaginatorChange for backward compatibility", "guessedname": "onPaginatorChange", "guessedtype": "property"}, "doBeforeSortColumn": {"return": {"type": "Boolean", "description": "Return true to continue sorting Column."}, "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "String", "name": "sSortDir", "description": "  YAHOO.widget.DataTable.CLASS_ASC or\nYAHOO.widget.DataTable.CLASS_DESC."}], "description": "Overridable method gives implementers a hook to show loading message before\nsorting Column.", "guessedname": "doBeforeSortColumn", "guessedtype": "function"}, "onShow": {"description": "Setting display:none on DataTable or any parent may impact width validations.\nAfter setting display back to \"\", implementers should call this method to \nmanually perform those validations.", "guessedname": "onShow", "guessedtype": "function"}, "getLastSelectedRecord": {"return": {"type": "String", "description": "Record ID of last selected row."}, "description": "Returns last selected Record ID.", "guessedname": "getLastSelectedRecord", "guessedtype": "function"}, "getTheadEl": {"return": {"type": "HTMLElement", "description": "Reference to THEAD element."}, "description": "Returns DOM reference to the DataTable's THEAD element.", "guessedname": "getTheadEl", "guessedtype": "function"}, "_repaintWebkit": {"guessedname": "_repaintWebkit", "el": "{HTMLElement} (Optional) Element to repaint, otherwise entire document body.", "description": "Forces Webkit repaint.", "private": "", "guessedtype": "property"}, "_handleStandardSelectionByKey": {"guessedname": "_handleStandardSelectionByKey", "params": [{"type": "HTMLEvent", "name": "e", "description": "  Event object."}], "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"standard\".", "private": "", "guessedtype": "function"}, "DataTable.editTextbox": {"deprecated": "Use YAHOO.widget.TextboxCellEditor", "guessedname": "editTextbox", "guessedtype": "function"}, "insertColumn": {"return": {"type": "YAHOO.widget.Column", "description": "oColumn  Inserted Column instance."}, "params": [{"type": "Object | YAHOO.widget.Column", "name": "oColumn", "description": "  Object literal Column\ndefinition or a Column instance."}, {"type": "Number", "name": "index", "description": "  (optional) New tree index."}], "description": "Inserts given Column at the index if given, otherwise at the end. NOTE: You\ncan only add non-nested Columns and top-level parent Columns. You cannot add\na nested Column to an existing parent.", "guessedname": "insertColumn", "guessedtype": "function"}, "getState": {"return": {"type": "Object", "description": "DataTable instance state object literal values."}, "description": "Returns on object literal representing the DataTable instance's current\nstate with the following properties:\n<dl>\n<dt>pagination</dt>\n<dd>Instance of YAHOO.widget.Paginator</dd>\n<dt>sortedBy</dt>\n<dd>\n<dl>\n<dt>sortedBy.key</dt>\n<dd>{String} Key of sorted Column</dd>\n<dt>sortedBy.dir</dt>\n<dd>{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</dd>\n</dl>\n</dd>\n<dt>selectedRows</dt>\n<dd>Array of selected rows by Record ID.</dd>\n<dt>selectedCells</dt>\n<dd>Selected cells as an array of object literals:\n{recordId:sRecordId, columnKey:sColumnKey}</dd>\n</dl>", "guessedname": "getState", "guessedtype": "function"}, "onEditorUnblockEvent": {"params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Public handler of the editorUnblockEvent. By default, undisables DataTable UI.", "guessedname": "onEditorUnblockEvent", "guessedtype": "function"}, "getSelectedTrEls": {"return": {"type": "HTMLElement[]", "description": "Array of selected TR elements."}, "description": "Returns array of selected TR elements on the page.", "guessedname": "getSelectedTrEls", "guessedtype": "function"}, "getThEl": {"return": {"type": "HTMLElement", "description": "Reference to TH element."}, "params": [{"type": "YAHOO.widget.Column | HTMLElement | String", "name": "theadCell", "description": "  Column instance,\nDOM element reference, or string ID."}], "description": "Returns DOM reference to a TH element.", "guessedname": "getThEl", "guessedtype": "function"}, "_handleCellRangeSelectionByMouse": {"guessedname": "_handleCellRangeSelectionByMouse", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"cellrange\".", "private": "", "guessedtype": "function"}, "_focusEl": {"guessedname": "_focusEl", "params": [{"type": "HTMLElement", "name": "el", "description": "  Element."}], "description": "Sets focus on the given element.", "private": "", "guessedtype": "function"}, "getFirstTrEl": {"return": {"type": "HTMLElement", "description": "Reference to TR element."}, "description": "Returns DOM reference to the first TR element in the DataTable page, or null.", "guessedname": "getFirstTrEl", "guessedtype": "function"}, "_onEditorUnblockEvent": {"guessedname": "_onEditorUnblockEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through unblockEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "hideColumn": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}], "description": "Hides given Column. NOTE: You cannot hide/show nested Columns. You can only\nhide/show non-nested Columns, and top-level parent Columns (which will\nhide/show all children Columns).", "guessedname": "hideColumn", "guessedtype": "function"}, "onDataReturnSetRecords": {"deprecated": "Use onDataReturnSetRows", "description": "Alias for onDataReturnSetRows for backward compatibility", "guessedname": "onDataReturnSetRecords", "guessedtype": "property"}, "_onTableKeypress": {"guessedname": "_onTableKeypress", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The key event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles keypress events on the TABLE. Mainly to support stopEvent on Mac.", "private": "", "guessedtype": "function"}, "refreshView": {"deprecated": "Use render.", "guessedname": "refreshView", "guessedtype": "function"}, "focusTheadEl": {"description": "Brings focus to the THEAD element.", "guessedname": "focusTheadEl", "guessedtype": "function"}, "getRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Record instance."}, "params": [{"type": "HTMLElement | Number | String", "name": "row", "description": "  DOM reference to a TR element (or\nchild of a TR element), RecordSet position index, or Record ID."}], "description": "For the given identifier, returns the associated Record instance.", "guessedname": "getRecord", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "Unique ID of the DataSource instance."}, "description": "Returns unique id assigned to instance, which is a useful prefix for\ngenerating unique DOM ID strings.", "guessedname": "getId", "guessedtype": "function"}, "_destroyMsgTbodyEl": {"private": "", "description": "Destroy's the DataTable message TBODY element, if available.", "guessedname": "_destroyMsgTbodyEl", "guessedtype": "function"}, "initializeTable": {"description": "Resets a RecordSet with the given data and populates the page view\nwith the new data. Any previous data, and selection and sort states are\ncleared. New data should be added as a separate step.", "guessedname": "initializeTable", "guessedtype": "function"}, "_onEditorShowEvent": {"guessedname": "_onEditorShowEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through showEvent of the active CellEditor.", "private": "", "guessedtype": "function"}, "highlightCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string."}], "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given cell.", "guessedname": "highlightCell", "guessedtype": "function"}, "_initResizeableColumns": {"private": "", "description": "Initializes resizeability on key Column TH elements.", "guessedname": "_initResizeableColumns", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire DataTable instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "_handlePaginatorChange": {"guessedname": "_handlePaginatorChange", "params": [{"type": "Object", "name": "e", "description": "  Change event object containing keys 'type','newValue',\nand 'prevValue'"}], "description": "Update the UI infrastructure in response to a \"paginator\" attribute change.", "private": "", "guessedtype": "function"}, "DataTable.formatButton": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object | Boolean", "name": "oData", "description": "  Data value for the cell. By default, the value\nis what gets written to the BUTTON."}], "description": "Formats a BUTTON element.", "guessedname": "formatButton", "guessedtype": "function"}, "DataTable.formatDropdown": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats SELECT elements.", "guessedname": "formatDropdown", "guessedtype": "function"}, "_onTableMouseup": {"guessedname": "_onTableMouseup", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mouseup event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mouseup events on the DataTable instance.", "private": "", "guessedtype": "function"}, "_handleSingleSelectionByMouse": {"guessedname": "_handleSingleSelectionByMouse", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"single\".", "private": "", "guessedtype": "function"}, "selectCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}], "description": "Sets given cell to the selected state.", "guessedname": "selectCell", "guessedtype": "function"}, "onEditorBlockEvent": {"params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Public handler of the editorBlockEvent. By default, disables DataTable UI.", "guessedname": "onEditorBlockEvent", "guessedtype": "function"}, "cancelCellEditor": {"description": "Cancels active CellEditor.", "guessedname": "cancelCellEditor", "guessedtype": "function"}, "_unselectAllTrEls": {"private": "", "description": "Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED\nfrom all TR elements on the page.", "guessedname": "_unselectAllTrEls", "guessedtype": "function"}, "_removeColgroupColEl": {"guessedname": "_removeColgroupColEl", "params": [{"type": "Number", "name": "index", "description": "  Index of removed COL element."}], "description": "Removes a COL element to COLGROUP at given index.", "private": "", "guessedtype": "function"}, "_initDomElements": {"guessedname": "_initDomElements", "params": [{"type": "HTMLElement | String} HTML DIV element by reference or ID. \nreturn {Boolean", "name": "elContainer", "description": "  False in case of error, otherwise true"}], "description": "Initializes DOM elements.", "private": "", "guessedtype": "function"}, "DataTable.editDate": {"deprecated": "Use YAHOO.widget.DateCellEditor.", "guessedname": "editDate", "guessedtype": "function"}, "render": {"description": "Renders the view with existing Records from the RecordSet while\nmaintaining sort, pagination, and selection states. For performance, reuses\nexisting DOM elements when possible while deleting extraneous elements.", "guessedname": "render", "guessedtype": "function"}, "disable": {"description": "Disables DataTable UI.", "guessedname": "disable", "guessedtype": "function"}, "_destroyTableEl": {"private": "", "description": "Destroy's the DataTable TABLE element, if available.", "guessedname": "_destroyTableEl", "guessedtype": "function"}, "getBody": {"deprecated": "Use getTbodyEl().", "guessedname": "getBody", "guessedtype": "function"}, "doBeforePaginatorChange": {"return": {"type": "Boolean", "description": "Return true to continue changing Paginator value."}, "params": [{"type": "Object", "name": "oPaginatorState", "description": "  An object literal describing the proposed pagination state."}], "description": "Overridable method gives implementers a hook to show loading message before\nchanging Paginator value.", "guessedname": "doBeforePaginatorChange", "guessedtype": "function"}, "_unsetFirstRow": {"private": "", "description": "Removes the class YAHOO.widget.DataTable.CLASS_FIRST from the first TR element\nof the DataTable page and updates internal tracker.", "guessedname": "_unsetFirstRow", "guessedtype": "function"}, "getRecordIndex": {"return": {"type": "Number", "description": "Record's RecordSet index, or null."}, "params": [{"type": "YAHOO.widget.Record | HTMLElement | Number", "name": "row", "description": "  Record instance, TR\nelement reference or page row index."}], "description": "Returns Record index for given TR element or page row index.", "guessedname": "getRecordIndex", "guessedtype": "function"}, "_repaintOpera": {"private": "", "description": "Forces Opera repaint.", "guessedname": "_repaintOpera", "guessedtype": "property"}, "handleDataReturnPayload": {"return": {"type": "MIXED", "description": "oPayload  State values."}, "description": "Hook to update oPayload before consumption.", "param": "oRequest {MIXED} Original generated request.", "params": [{"type": "MIXED", "name": "oRequest", "description": "  Original generated request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  State values."}], "guessedname": "handleDataReturnPayload", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": "Return true to continue loading data into RecordSet and\nupdating DataTable with new Records, false to cancel."}, "params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  additional arguments"}], "description": "Overridable method gives implementers a hook to access data before\nit gets added to RecordSet and rendered to the TBODY.", "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "onDataReturnSetRows": {"params": [{"type": "MIXED", "name": "oRequest", "description": "  Original generated request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Callback function receives reponse from DataSource and populates the\nRecordSet with the results.", "guessedname": "onDataReturnSetRows", "guessedtype": "function"}, "getContainerEl": {"return": {"type": "HTMLElement", "description": "Reference to DIV element."}, "description": "Returns DOM reference to the DataTable's container element.", "guessedname": "getContainerEl", "guessedtype": "function"}, "_onTableDblclick": {"guessedname": "_onTableDblclick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The dblclick event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles dblclick events on the DataTable instance.", "private": "", "guessedtype": "function"}, "getMsgTbodyEl": {"return": {"type": "HTMLElement", "description": "Reference to TBODY element."}, "description": "Returns DOM reference to the DataTable's secondary TBODY element that is\nused to display messages.", "guessedname": "getMsgTbodyEl", "guessedtype": "function"}, "getLastTdEl": {"return": {"type": "HTMLElement", "description": "Reference to last TD element."}, "description": "Returns DOM reference to the last TD element in the DataTable page (by default),\nthe first TD element of the optionally given row, or null.", "guessedname": "getLastTdEl", "guessedtype": "function"}, "getSelectedColumns": {"return": {"type": "YAHOO.widget.Column[]", "description": "Array of Column instances."}, "description": "Returns an array selected Column instances.", "guessedname": "getSelectedColumns", "guessedtype": "function"}, "_onTableMouseover": {"guessedname": "_onTableMouseover", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mouseover event."}, {"type": "YAHOO.wiget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mouseover events on the DataTable instance.", "private": "", "guessedtype": "function"}, "DataTable.formatDate": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats JavaScript Dates.", "guessedname": "formatDate", "guessedtype": "function"}, "_syncColWidths": {"deprecated": "Use validateColumnWidths.", "guessedname": "_syncColWidths", "guessedtype": "function"}, "_initMsgTbodyEl": {"guessedname": "_initMsgTbodyEl", "params": [{"type": "HTMLElement", "name": "elTable", "description": "  TABLE element into which to create TBODY"}], "description": "Initializes TBODY element for messaging.", "private": "", "guessedtype": "function"}, "formatCell": {"params": [{"type": "HTMLElement", "name": "elLiner", "description": "  The liner DIV element within the TD."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  (Optional) Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  (Optional) Column instance."}], "description": "Outputs markup into the given TD based on given Record.", "guessedname": "formatCell", "guessedtype": "function"}, "_handleSingleSelectionByKey": {"guessedname": "_handleSingleSelectionByKey", "params": [{"type": "HTMLEvent", "name": "e", "description": "  Event object."}], "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"single\".", "private": "", "guessedtype": "function"}, "highlightRow": {"params": [{"type": "HTMLElement | String", "name": "row", "description": "  DOM element reference or ID string."}], "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given row.", "guessedname": "highlightRow", "guessedtype": "function"}, "unselectAllCells": {"description": "Clears out all cell selections.", "guessedname": "unselectAllCells", "guessedtype": "function"}, "_onEditorBlockEvent": {"guessedname": "_onEditorBlockEvent", "params": [{"type": "Object", "name": "oArgs", "description": "   Custom Event args."}], "description": "Passes through blockEvent of the active CellEditor.", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "DataTable.js", "guessedtype": "function", "shortname": "DataTable", "properties": {"DataTable.CLASS_MASK": {"description": "Class name assigned to mask element when DataTable is disabled.", "default": "\"yui-dt-mask\"", "static": "", "guessedname": "CLASS_MASK", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_LABEL": {"description": "Class name assigned to display label elements.", "default": "\"yui-dt-label\"", "static": "", "guessedname": "CLASS_LABEL", "guessedtype": "property", "type": "String", "final": ""}, "_sFirstTrId": {"guessedname": "_sFirstTrId", "type": "String", "description": "ID string of first TR element of the current DataTable page.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_LINER": {"description": "Class name assigned to liner DIV elements.", "default": "\"yui-dt-liner\"", "static": "", "guessedname": "CLASS_LINER", "guessedtype": "property", "type": "String", "final": ""}, "DataTable._elDynStyleNode": {"description": "Reference to the STYLE node that is dynamically created and updated\nin order to manage Column widths.", "private": "", "static": "", "guessedname": "_elDynStyleNode", "guessedtype": "property", "type": "HTMLElement"}, "_oColumnSet": {"guessedname": "_oColumnSet", "type": "YAHOO.widget.ColumnSet", "description": "ColumnSet instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "_elMsgTbody": {"guessedname": "_elMsgTbody", "type": "HTMLElement", "description": "DOM reference to the secondary TBODY element used to display DataTable messages.", "private": "", "guessedtype": "property"}, "DataTable._oDynStyles": {"description": "Object literal hash of Columns and their dynamically create style rules.", "private": "", "static": "", "guessedname": "_oDynStyles", "guessedtype": "property", "type": "Object"}, "_bInit": {"description": "True if instance is initialized, so as to fire the initEvent after render.", "default": "true", "private": "", "guessedname": "_bInit", "guessedtype": "property", "type": "Boolean"}, "_elCaption": {"guessedname": "_elCaption", "type": "HTMLElement", "description": "DOM reference to the CAPTION element for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_DISABLED": {"description": "Class name assigned to disabled elements.", "default": "\"yui-dt-disabled\"", "static": "", "guessedname": "CLASS_DISABLED", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.Formatter": {"type": "Object", "static": "", "description": "Cell formatting functions.", "guessedname": "Formatter", "guessedtype": "property"}, "DataTable.CLASS_CHECKBOX": {"description": "Class name assigned to INPUT TYPE=CHECKBOX elements and/or container elements.", "default": "\"yui-dt-checkbox\"", "static": "", "guessedname": "CLASS_CHECKBOX", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_PAGINATOR": {"description": "Class name assigned to paginator container elements.", "default": "\"yui-dt-paginator\"", "static": "", "guessedname": "CLASS_PAGINATOR", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_ERROR": {"description": "Class name assigned to error indicators.", "default": "\"yui-dt-error\"", "static": "", "guessedname": "CLASS_ERROR", "guessedtype": "property", "type": "String", "final": ""}, "_oRecordSet": {"guessedname": "_oRecordSet", "type": "YAHOO.widget.RecordSet", "description": "RecordSet instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_DESC": {"description": "Class name assigned to descending elements.", "default": "\"yui-dt-desc\"", "static": "", "guessedname": "CLASS_DESC", "guessedtype": "property", "type": "String", "final": ""}, "DataTable._nCurrentCount": {"description": "Internal class variable tracking current number of DataTable instances,\nso that certain class values can be reset when all instances are destroyed.", "private": "", "static": "", "guessedname": "_nCurrentCount", "guessedtype": "property", "type": "Number"}, "DataTable.CLASS_HIGHLIGHTED": {"description": "Class name assigned to highlighted elements.", "default": "\"yui-dt-highlighted\"", "static": "", "guessedname": "CLASS_HIGHLIGHTED", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_EVEN": {"description": "Class name assigned to even elements.", "default": "\"yui-dt-even\"", "static": "", "guessedname": "CLASS_EVEN", "guessedtype": "property", "type": "String", "final": ""}, "DataTable._bDynStylesFallback": {"description": "Set to true if _elDynStyleNode cannot be populated due to browser incompatibility.", "private": "", "static": "", "guessedname": "_bDynStylesFallback", "guessedtype": "property", "type": "boolean"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "DOM reference to the container element for the DataTable instance into which\nall other elements get created.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_HIDDEN": {"description": "Class name assigned to hidden elements.", "default": "\"yui-dt-hidden\"", "static": "", "guessedname": "CLASS_HIDDEN", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_NEXT": {"description": "Class name assigned next indicators.", "default": "\"yui-dt-next\"", "static": "", "guessedname": "CLASS_NEXT", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_RESIZERPROXY": {"description": "Class name assigned to resizer proxy elements.", "default": "\"yui-dt-resizerproxy\"", "static": "", "guessedname": "CLASS_RESIZERPROXY", "guessedtype": "property", "type": "String", "final": ""}, "_oAnchorCell": {"guessedname": "_oAnchorCell", "type": "Object", "description": "Object literal representing cell selection anchor:\n{recordId:sRecordId, columnKey:sColumnKey}.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_RESIZER": {"description": "Class name assigned to resizer handle elements.", "default": "\"yui-dt-resizer\"", "static": "", "guessedname": "CLASS_RESIZER", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_RADIO": {"description": "Class name assigned to INPUT TYPE=RADIO elements and/or container elements.", "default": "\"yui-dt-radio\"", "static": "", "guessedname": "CLASS_RADIO", "guessedtype": "property", "type": "String", "final": ""}, "_oCellEditor": {"guessedname": "_oCellEditor", "type": "YAHOO.widget.CellEditor", "description": "The active CellEditor instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable._elColumnResizerProxy": {"description": "Element reference to shared Column resizer proxy.", "private": "", "static": "", "guessedname": "_elColumnResizerProxy", "guessedtype": "property", "type": "HTMLElement"}, "DataTable.CLASS_MESSAGE": {"description": "Class name assigned to messaging elements.", "default": "\"yui-dt-message\"", "static": "", "guessedname": "CLASS_MESSAGE", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_PREVIOUS": {"description": "Class name assigned to previous indicators.", "default": "\"yui-dt-previous\"", "static": "", "guessedname": "CLASS_PREVIOUS", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_DEFAULT": {"description": "Class name assigned to default indicators.", "default": "\"yui-dt-default\"", "static": "", "guessedname": "CLASS_DEFAULT", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_DATA": {"description": "Class name assigned to data elements.", "default": "\"yui-dt-data\"", "static": "", "guessedname": "CLASS_DATA", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_RESIZERLINER": {"description": "Class name assigned to resizer liner elements.", "default": "\"yui-dt-resizerliner\"", "static": "", "guessedname": "CLASS_RESIZERLINER", "guessedtype": "property", "type": "String", "final": ""}, "_elMsgTr": {"guessedname": "_elMsgTr", "type": "HTMLElement", "description": "DOM reference to the secondary TBODY element's single TR element used to display DataTable messages.", "private": "", "guessedtype": "property"}, "_sLastTrId": {"guessedname": "_sLastTrId", "type": "String", "description": "ID string of the last TR element of the current DataTable page.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_BUTTON": {"description": "Class name assigned to BUTTON elements and/or container elements.", "default": "\"yui-dt-button\"", "static": "", "guessedname": "CLASS_BUTTON", "guessedtype": "property", "type": "String", "final": ""}, "DataTable._elColumnDragTarget": {"description": "Element reference to shared Column drag target.", "private": "", "static": "", "guessedname": "_elColumnDragTarget", "guessedtype": "property", "type": "HTMLElement"}, "DataTable.CLASS_RESIZEABLE": {"description": "Class name assigned to resizeable elements.", "default": "\"yui-dt-resizeable\"", "static": "", "guessedname": "CLASS_RESIZEABLE", "guessedtype": "property", "type": "String", "final": ""}, "_oChainRender": {"guessedname": "_oChainRender", "type": "YAHOO.util.Chain", "description": "Render chain.", "private": "", "guessedtype": "property"}, "DataTable._nCount": {"description": "Internal class variable for indexing multiple DataTable instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "DataTable.CLASS_PAGE": {"description": "Class name assigned to page number indicators.", "default": "\"yui-dt-page\"", "static": "", "guessedname": "CLASS_PAGE", "guessedtype": "property", "type": "String", "final": ""}, "_aSelections": {"guessedname": "_aSelections", "type": "Object[]", "description": "Array to track row selections (by sRecordId) and/or cell selections\n(by {recordId:sRecordId, columnKey:sColumnKey})", "private": "", "guessedtype": "property"}, "DataTable.CLASS_ASC": {"description": "Class name assigned to ascending elements.", "default": "\"yui-dt-asc\"", "static": "", "guessedname": "CLASS_ASC", "guessedtype": "property", "type": "String", "final": ""}, "_sId": {"guessedname": "_sId", "type": "String", "description": "Unique id assigned to instance \"yui-dtN\", useful prefix for generating unique\nDOM ID strings and log messages.", "private": "", "guessedtype": "property"}, "configs": {"default": "{}", "type": "Object", "description": "Returns object literal of initial configs.", "guessedname": "configs", "guessedtype": "property"}, "_oDataSource": {"guessedname": "_oDataSource", "type": "YAHOO.util.DataSource", "description": "DataSource instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "_elMask": {"guessedname": "_elMask", "type": "HTMLElement", "description": "DOM reference to the mask element for the DataTable instance which disables it.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_EMPTY": {"description": "Class name assigned to empty indicators.", "default": "\"yui-dt-empty\"", "static": "", "guessedname": "CLASS_EMPTY", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_DATATABLE": {"description": "Class name assigned to outer DataTable container.", "default": "\"yui-dt\"", "static": "", "guessedname": "CLASS_DATATABLE", "guessedtype": "property", "type": "String", "final": ""}, "_elTable": {"guessedname": "_elTable", "type": "HTMLElement", "description": "DOM reference to the TABLE element for the DataTable instance.", "private": "", "guessedtype": "property"}, "_elColgroup": {"guessedname": "_elColgroup", "type": "HTMLElement", "description": "DOM reference to the COLGROUP element for the DataTable instance.", "private": "", "guessedtype": "property"}, "_nIndex": {"guessedname": "_nIndex", "type": "Number", "description": "Index assigned to instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_DRAGGABLE": {"description": "Class name assigned to draggable elements.", "default": "\"yui-dt-draggable\"", "static": "", "guessedname": "CLASS_DRAGGABLE", "guessedtype": "property", "type": "String", "final": ""}, "_elThead": {"guessedname": "_elThead", "type": "HTMLElement", "description": "DOM reference to the THEAD element for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_DROPDOWN": {"description": "Class name assigned to SELECT elements and/or container elements.", "default": "\"yui-dt-dropdown\"", "static": "", "guessedname": "CLASS_DROPDOWN", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_SCROLLABLE": {"description": "Class name assigned to scrollable elements.", "default": "\"yui-dt-scrollable\"", "static": "", "guessedname": "CLASS_SCROLLABLE", "guessedtype": "property", "type": "String", "final": ""}, "_nTdCount": {"guessedname": "_nTdCount", "type": "Number", "description": "Counter for IDs assigned to TD elements.", "private": "", "guessedtype": "property"}, "_oAnchorRecord": {"guessedname": "_oAnchorRecord", "type": "YAHOO.widget.Record", "description": "Record instance of the row selection anchor.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_EDITOR": {"description": "Class name assigned to CellEditor container elements.", "default": "\"yui-dt-editor\"", "static": "", "guessedname": "CLASS_EDITOR", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_LAST": {"description": "Class name assigned to last elements.", "default": "\"yui-dt-last\"", "static": "", "guessedname": "CLASS_LAST", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_ODD": {"description": "Class name assigned to odd elements.", "default": "\"yui-dt-odd\"", "static": "", "guessedname": "CLASS_ODD", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_FIRST": {"description": "Class name assigned to first elements.", "default": "\"yui-dt-first\"", "static": "", "guessedname": "CLASS_FIRST", "guessedtype": "property", "type": "String", "final": ""}, "_aDynFunctions": {"guessedname": "_aDynFunctions", "type": "Array", "description": "Sparse array of custom functions to set column widths for browsers that don't\nsupport dynamic CSS rules.  Functions are added at the index representing\nthe number of rows they update.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_COLTARGET": {"description": "Class name assigned to Column drag target.", "default": "\"yui-dt-coltarget\"", "static": "", "guessedname": "CLASS_COLTARGET", "guessedtype": "property", "type": "String", "final": ""}, "_elTbody": {"guessedname": "_elTbody", "type": "HTMLElement", "description": "DOM reference to the primary TBODY element for the DataTable instance.", "private": "", "guessedtype": "property"}, "_elTrTemplate": {"guessedname": "_elTrTemplate", "type": "{HTMLElement}", "description": "Template row to create all new rows from.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_SELECTED": {"description": "Class name assigned to selected elements.", "default": "\"yui-dt-selected\"", "static": "", "guessedname": "CLASS_SELECTED", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_LOADING": {"description": "Class name assigned to loading indicatorx.", "default": "\"yui-dt-loading\"", "static": "", "guessedname": "CLASS_LOADING", "guessedtype": "property", "type": "String", "final": ""}, "_nTrCount": {"guessedname": "_nTrCount", "type": "Number", "description": "Counter for IDs assigned to TR elements.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_EDITABLE": {"description": "Class name assigned to editable elements.", "default": "\"yui-dt-editable\"", "static": "", "guessedname": "CLASS_EDITABLE", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_SORTABLE": {"description": "Class name assigned to sortable elements.", "default": "\"yui-dt-sortable\"", "static": "", "guessedname": "CLASS_SORTABLE", "guessedtype": "property", "type": "String", "final": ""}, "_elMsgTd": {"guessedname": "_elMsgTd", "type": "HTMLElement", "description": "DOM reference to the secondary TBODY element's single TD element used to display DataTable messages.", "private": "", "guessedtype": "property"}}, "description": "DataTable class for the YUI DataTable widget."}, "YAHOO.widget.Paginator.ui.PreviousPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.PreviousPageLink", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the previous page."}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"beforePreviousPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePreviousPageLinkLabelChange", "description": "Fires before the value for the configuration attribute 'previousPageLinkLabel' changes. Return false to cancel the attribute change."}, "beforePreviousPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePreviousPageLinkClassChange", "description": "Fires before the value for the configuration attribute 'previousPageLinkClass' changes. Return false to cancel the attribute change."}, "previousPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "previousPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'previousPageLinkClass' changes."}, "previousPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "previousPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'previousPageLinkLabel' changes."}}, "guessedname": "PreviousPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "PreviousPageLink.js", "guessedtype": "function", "shortname": "PreviousPageLink", "configs": {"previousPageLinkLabel": {"default": "'&lt; prev'", "description": "Used as innerHTML for the previous page link/span."}, "previousPageLinkClass": {"default": "'yui-pg-previous'", "description": "CSS class assigned to the link/span"}}, "description": "ui Component to generate the link to jump to the previous page."}, "YAHOO.util.ColorAnim": {"name": "YAHOO.util.ColorAnim", "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.\nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.\nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").\nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);</code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)</p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "ColorAnim", "methods": {"parseColor": {"return": {"type": "Array", "description": "The 3-tuple of rgb values."}, "params": [{"type": "String", "name": "s", "description": " The string to parse."}], "description": "Attempts to parse the given string and return a 3-tuple.", "guessedname": "parseColor", "guessedtype": "function"}}, "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "ColorAnim.js", "guessedtype": "function", "shortname": "ColorAnim", "requires": "YAHOO.util.Anim", "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);</code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)</p>"}, "YAHOO.lang.JSON": {"name": "YAHOO.lang.JSON", "namespace": "YAHOO.lang", "module": "json", "methods": {"stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "<p>Converts an arbitrary value to a JSON string representation.</p>\n<p>Objects with cyclical references will trigger an exception.</p>\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.</p>\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.</p>\n<p>When lang.JSON.useNativeStringify is true, this will defer to the\nnative JSON.stringify if the browser has a native implementation.\nOtherwise, a JavaScript implementation is used.</p>", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary object to convert to JSON string"}, {"type": "Array|Function", "name": "w", "description": "  (optional) whitelist of acceptable object keys\nto include OR a function(value,key) to alter values\nbefore serialization"}, {"type": "Number|String", "name": "space", "description": "  (optional) indentation character(s) or\ndepthy of spaces to format the output"}], "throws": "Error"}, "_prepare": {"return": {"type": "String", "description": "sanitized JSON string ready to be validated/parsed"}, "params": [{"type": "String", "name": "s", "description": "  parse input"}], "description": "Replace certain Unicode characters that may be handled incorrectly by\nsome browser implementations.", "private": ""}, "isValid": {"return": {"type": "boolean", "description": "is the string safe for eval?"}, "description": "<p>Four step determination whether a string is safe to eval. In three steps,\nescape sequences, safe values, and properly placed open square brackets\nare replaced with placeholders or removed.  Then in the final step, the\nresult of all these replacements is checked for invalid characters.</p>\n<p>This is an alias for isSafe.</p>", "deprecated": "use isSafe", "static": "", "guessedname": "isValid", "guessedtype": "property", "params": [{"type": "String", "name": "str", "description": "  JSON string to be tested"}]}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nthe JavaScript implementation of stringify.  If you need a different\nDate serialization format, override this method.  If you change this,\nyou should also set useNativeStringify to false, since native JSON\nimplementations serialize Dates per the ECMAScript 5 spec.  You've been\nwarned.", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "<p>Parse a JSON string, returning the native JavaScript\nrepresentation.</p>\n<p>When lang.JSON.useNativeParse is true, this will defer to the native\nJSON.parse if the browser has a native implementation.  Otherwise, a\nJavaScript implementation based on http://www.json.org/json2.js\nis used.</p>", "static": "", "guessedname": "parse", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key:value\npair of object literals, allowing pruning or altering values"}], "throws": "SyntaxError"}, "isSafe": {"return": {"type": "boolean", "description": "is the string safe for eval?"}, "description": "Four step determination whether a string is safe to eval. In three steps,\nescape sequences, safe values, and properly placed open square brackets\nare replaced with placeholders or removed.  Then in the final step, the\nresult of all these replacements is checked for invalid characters.", "static": "", "guessedname": "isSafe", "guessedtype": "function", "params": [{"type": "String", "name": "str", "description": "  JSON string to be tested"}]}, "stringToDate": {"return": {"type": "Date", "description": ""}, "params": [{"type": "String", "name": "str", "description": "  String serialization of a Date"}], "description": "Reconstitute Date instances from the default JSON UTC serialization.\nReference this from a reviver function to rebuild Dates during the\nparse operation.", "guessedname": "stringToDate", "guessedtype": "function"}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered/mutated data structure"}, "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}], "description": "Traverses nested objects, applying a filter or reviver function to\neach value.  The value returned from the function will replace the\noriginal value in the key:value pair.  If the value returned is\nundefined, the key will be omitted from the returned object.", "private": ""}}, "static": "", "file": "JSON.js", "shortname": "JSON", "properties": {"_BRACKETS": {"description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring.", "private": "", "static": "", "guessedname": "_BRACKETS", "guessedtype": "property", "type": "{RegExp}"}, "_VALUES": {"description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "static": "", "guessedname": "_VALUES", "guessedtype": "property", "type": "{RegExp}"}, "useNativeStringify": {"description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support.", "default": "true", "static": "", "guessedname": "useNativeStringify", "guessedtype": "property", "type": "Boolean"}, "useNativeParse": {"description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support.", "default": "true", "static": "", "guessedname": "useNativeParse", "guessedtype": "property", "type": "Boolean"}, "_SPECIAL_CHARS": {"description": "Regex used to replace special characters in strings for JSON\nstringification.", "private": "", "static": "", "guessedname": "_SPECIAL_CHARS", "guessedtype": "property", "type": "{RegExp}"}, "_CHARS": {"description": "Character substitution map for common escapes and special characters.", "private": "", "static": "", "guessedname": "_CHARS", "guessedtype": "property", "type": "{Object}"}, "_UNSAFE": {"description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters.", "private": "", "static": "", "guessedname": "_UNSAFE", "guessedtype": "property", "type": "{RegExp}"}, "_ESCAPES": {"description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "static": "", "guessedname": "_ESCAPES", "guessedtype": "property", "type": "{RegExp}"}, "_UNICODE_EXCEPTIONS": {"guessedname": "_UNICODE_EXCEPTIONS", "type": "{RegExp}", "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.", "private": "", "guessedtype": "property"}}, "description": "Provides methods to parse JSON strings and convert objects to JSON strings."}, "YAHOO.util.ImageLoader.srcImgObj": {"name": "YAHOO.util.ImageLoader.srcImgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}, {"type": "Int", "name": "width", "description": "\tpixel width of the image - defaults to image's natural size"}, {"type": "Int", "name": "height", "description": "\tpixel height of the image - defaults to image's natural size"}], "description": "Source image object. A source image is one whose URL is specified by a src attribute in the DOM element"}], "namespace": "YAHOO.util.ImageLoader", "module": "imageloader", "guessedname": "srcImgObj", "methods": {"_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nSets src", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.ImageLoader.imgObj", "superclass": "YAHOO.util.ImageLoader.imgObj", "file": "ImageLoader.js", "guessedtype": "function", "shortname": "srcImgObj", "description": "Source image object. A source image is one whose URL is specified by a src attribute in the DOM element"}, "LogMsg": {"name": "LogMsg", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  Object literal of configuration params."}], "description": "The LogMsg class defines a single log message."}], "namespace": "", "module": "logger", "guessedname": "LogMsg", "file": "LogMsg.js", "guessedtype": "function", "shortname": "LogMsg", "properties": {"msg": {"type": "String", "description": "Log message.", "guessedname": "msg", "guessedtype": "property"}, "category": {"type": "String", "description": "Log category.", "guessedname": "category", "guessedtype": "property"}, "sourceDetail": {"type": "String", "description": "Log source detail. The remainder of the string passed in as the source argument, not\nincluding the first word (if any).", "guessedname": "sourceDetail", "guessedtype": "property"}, "source": {"type": "String", "description": "Log source. The first word passed in as the source argument.", "guessedname": "source", "guessedtype": "property"}, "time": {"type": "Date", "description": "Log timestamp.", "guessedname": "time", "guessedtype": "property"}}, "description": "The LogMsg class defines a single log message."}, "YAHOO.widget.CartesianChart": {"name": "YAHOO.widget.CartesianChart", "configs": {"yField": {"type": "String", "description": "The field in each item that corresponds to a value on the x axis."}, "constrainViewport": {"type": "Boolean", "description": "Determines whether the viewport is constrained to prevent series data from overflow."}, "yAxis": {"type": "Axis", "description": "A custom configuration for the vertical y axis."}, "xAxes": {"type": "Array", "description": "Custom configurations for the horizontal x axes."}, "yAxes": {"type": "Array", "description": "Custom configurations for the vertical y axes."}, "xAxis": {"type": "Axis", "description": "A custom configuration for the horizontal x axis."}, "xField": {"type": "String", "description": "The field in each item that corresponds to a value on the x axis."}}, "constructors": [{"params": [{"type": "String", "name": "type", "description": "  The char type. May be \"line\", \"column\", or \"bar\""}, {"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "CartesianChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "events": {"beforeYFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeYFieldChange", "description": "Fires before the value for the configuration attribute 'yField' changes. Return false to cancel the attribute change."}, "xAxesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "xAxesChange", "description": "Fires when the value for the configuration attribute 'xAxes' changes."}, "beforeXAxisChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeXAxisChange", "description": "Fires before the value for the configuration attribute 'xAxis' changes. Return false to cancel the attribute change."}, "xAxisChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "xAxisChange", "description": "Fires when the value for the configuration attribute 'xAxis' changes."}, "yAxesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "yAxesChange", "description": "Fires when the value for the configuration attribute 'yAxes' changes."}, "constrainViewportChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "constrainViewportChange", "description": "Fires when the value for the configuration attribute 'constrainViewport' changes."}, "yAxisChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "yAxisChange", "description": "Fires when the value for the configuration attribute 'yAxis' changes."}, "xFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "xFieldChange", "description": "Fires when the value for the configuration attribute 'xField' changes."}, "yFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "yFieldChange", "description": "Fires when the value for the configuration attribute 'yField' changes."}, "beforeYAxisChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeYAxisChange", "description": "Fires before the value for the configuration attribute 'yAxis' changes. Return false to cancel the attribute change."}, "beforeYAxesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeYAxesChange", "description": "Fires before the value for the configuration attribute 'yAxes' changes. Return false to cancel the attribute change."}, "beforeConstrainViewportChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeConstrainViewportChange", "description": "Fires before the value for the configuration attribute 'constrainViewport' changes. Return false to cancel the attribute change."}, "beforeXAxesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeXAxesChange", "description": "Fires before the value for the configuration attribute 'xAxes' changes. Return false to cancel the attribute change."}, "beforeXFieldChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeXFieldChange", "description": "Fires before the value for the configuration attribute 'xField' changes. Return false to cancel the attribute change."}}, "guessedname": "CartesianChart", "methods": {"_setYAxis": {"private": "", "description": "Setter for the yAxis attribute.", "guessedname": "_setYAxis", "guessedtype": "function"}, "_removeAxisFunctions": {"private": "", "description": "Removes axis functions contained in an array", "guessedname": "_removeAxisFunctions", "guessedtype": "function"}, "setSeriesStylesByIndex": {"params": [{"type": "Number", "name": "index", "description": "  The position within the series definition to apply the style"}, {"type": "object", "name": "style", "description": "  Style object to be applied to the selected series"}], "description": "Sets the style object for a single series based on its index", "guessedname": "setSeriesStylesByIndex", "guessedtype": "function"}, "_setXAxes": {"private": "", "description": "Setter for the xAxes attribute", "guessedname": "_setXAxes", "guessedtype": "function"}, "_setConstrainViewport": {"private": "", "description": "Setter for the constrainViewport attribute", "guessedname": "_setConstrainViewport", "guessedtype": "function"}, "_getYField": {"private": "", "description": "Getter for the yField attribute.", "guessedname": "_getYField", "guessedtype": "function"}, "_setYAxes": {"private": "", "description": "Setter for the yAxes attribute.", "guessedname": "_setYAxes", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_setXAxis": {"private": "", "description": "Setter for the xAxis attribute.", "guessedname": "_setXAxis", "guessedtype": "function"}, "_getXField": {"private": "", "description": "Getter for the xField attribute.", "guessedname": "_getXField", "guessedtype": "function"}, "_setXField": {"private": "", "description": "Setter for the xField attribute.", "guessedname": "_setXField", "guessedtype": "function"}, "_setYField": {"private": "", "description": "Setter for the yField attribute.", "guessedname": "_setYField", "guessedtype": "function"}, "_getClonedAxis": {"private": "", "description": "Receives an axis object, creates a proxy function for \nthe labelFunction and returns the updated object.", "guessedname": "_getClonedAxis", "guessedtype": "function"}}, "uses": ["YAHOO.widget.Chart"], "file": "CartesianChart.js", "guessedtype": "function", "shortname": "CartesianChart", "properties": {"_yAxisLabelFunctions": {"guessedname": "_yAxisLabelFunctions", "type": "Array", "description": "Stores a reference to the yAxis labelFunctions created by\nYAHOO.widget.Chart.createProxyFunction()", "private": "", "guessedtype": "property"}, "_xAxisLabelFunctions": {"guessedname": "_xAxisLabelFunctions", "type": "String", "description": "Stores a reference to the xAxis labelFunction created by\nYAHOO.widget.Chart.createProxyFunction()", "private": "", "guessedtype": "property"}}, "description": "CartesianChart class for the YUI Charts widget."}, "YAHOO.widget.Layout": {"name": "YAHOO.widget.Layout", "configs": {"parent": {"type": "Object YAHOO.widget.Layout", "description": "If this layout is to be used as a child of another Layout instance, this config will bind the resize events together."}, "minHeight": {"type": "Number", "description": "The minimum height in pixels"}, "height": {"type": "Number", "description": "The height in pixels"}, "minWidth": {"type": "Number", "description": "The minimum width in pixels"}, "width": {"type": "Number", "description": "The width in pixels"}, "units": {"type": "Array", "description": "An array of config definitions for the LayoutUnits to add to this layout"}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The element to make contain a layout."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>"}], "namespace": "YAHOO.widget", "module": "layout", "events": {"beforeMinWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinWidthChange", "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change."}, "minHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' changes."}, "startResize": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the Resize Utility for a Unit fires it's startResize Event."}, "heightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' changes."}, "unitsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "unitsChange", "description": "Fires when the value for the configuration attribute 'units' changes."}, "beforeMinHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinHeightChange", "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change."}, "render": {"type": "YAHOO.util.CustomEvent", "description": "Fired after the render method completes.", "guessedname": "Layout", "guessedtype": "property"}, "resize": {"type": "YAHOO.util.CustomEvent", "description": "Fired when this.resize is called"}, "parentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "parentChange", "description": "Fires when the value for the configuration attribute 'parent' changes."}, "beforeHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeightChange", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "beforeWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWidthChange", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "beforeUnitsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUnitsChange", "description": "Fires before the value for the configuration attribute 'units' changes. Return false to cancel the attribute change."}, "beforeParentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeParentChange", "description": "Fires before the value for the configuration attribute 'parent' changes. Return false to cancel the attribute change."}, "beforeResize": {"type": "YAHOO.util.CustomEvent", "description": "Fires at the beginning of the resize method. If you return false, the resize is cancelled."}, "minWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' changes."}, "widthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' changes."}}, "guessedname": "Layout", "methods": {"_stamp": {"description": "Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable.", "private": "", "guessedname": "_stamp", "guessedtype": "function"}, "_setupElements": {"description": "Sets up the main doc element when not using the body as the main element.", "private": "", "guessedname": "_setupElements", "guessedtype": "function"}, "addUnit": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "params": [{"type": "Object", "name": "cfg", "description": " The config for the LayoutUnit that you want to add"}], "description": "Add a unit to this layout and if the layout is rendered, resize the layout.", "guessedname": "addUnit", "guessedtype": "function"}, "render": {"return": {"type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>", "description": "The Layout instance"}, "description": "This method starts the render process, applying classnames and creating elements", "guessedname": "render", "guessedtype": "function"}, "removeUnit": {"params": [{"type": "Object", "name": "unit", "description": " The LayoutUnit that you want to remove"}], "description": "Remove the unit from this layout and resize the layout.", "guessedname": "removeUnit", "guessedtype": "function"}, "getUnitByPosition": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "params": [{"type": "String", "name": "pos", "description": " The position of the unit in this layout"}], "description": "Get the LayoutUnit by it's position in this layout", "guessedname": "getUnitByPosition", "guessedtype": "function"}, "_setBodySize": {"guessedname": "_setBodySize", "params": [{"type": "Boolean", "name": "set", "description": " If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)"}], "description": "Used to set the body size of the layout, sets the height and width of the parent container", "private": "", "guessedtype": "function"}, "getLayoutById": {"static": "", "return": {"type": "Object", "description": "The Layout Object"}, "description": "Get's a layout object by the HTML id of the element associated with the Layout object.", "guessedname": "getLayoutById", "guessedtype": "function"}, "_setCenter": {"guessedname": "_setCenter", "params": [{"type": "Boolean", "name": "set", "description": " If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)"}], "description": "Used to set the size and position of the center unit", "private": "", "guessedtype": "function"}, "_createUnits": {"description": "Private method to create units from the config that was passed in.", "private": "", "guessedname": "_createUnits", "guessedtype": "function"}, "init": {"description": "The Layout class' initialization method", "private": "", "guessedname": "init", "guessedtype": "function"}, "initAttributes": {"description": "Processes the config", "private": "", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the Layout.", "guessedname": "toString", "guessedtype": "function"}, "resize": {"return": {"type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>", "description": "The Layout instance"}, "params": [{"type": "", "name": "Boolean/Event", "description": " set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units). This can also have an attribute event passed to it."}], "description": "Starts the chain of resize routines that will resize all the units.", "guessedname": "resize", "guessedtype": "function"}, "destroy": {"description": "Removes this layout from the page and destroys all units that it contains. This will destroy all data inside the layout and it's children.", "guessedname": "destroy", "guessedtype": "function"}, "getUnitById": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "params": [{"type": "String", "name": "id", "description": " The HTML element id of the unit"}], "description": "Get the LayoutUnit by it's HTML id", "guessedname": "getUnitById", "guessedtype": "function"}, "_setupBodyElements": {"description": "Sets up the main doc element when using the body as the main element.", "private": "", "guessedname": "_setupBodyElements", "guessedtype": "function"}, "_setSides": {"guessedname": "_setSides", "params": [{"type": "Boolean", "name": "set", "description": " If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)"}], "description": "Used to set the size and position of the left, right, top and bottom units", "private": "", "guessedtype": "function"}, "getSizes": {"return": {"type": "Object", "description": "An object of the layout unit sizes"}, "description": "Get a reference to the internal Layout Unit sizes object used to build the layout wireframe", "guessedname": "getSizes", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "layout.js", "guessedtype": "function", "shortname": "Layout", "properties": {"_sizes": {"guessedname": "_sizes", "type": "Object", "description": "A collection of the current sizes of all usable LayoutUnits to be used for calculations", "private": "", "guessedtype": "property"}, "_units": {"guessedname": "_units", "type": "Object", "description": "An object literal that contains a list of units in the layout", "private": "", "guessedtype": "property"}, "_doc": {"guessedname": "_doc", "type": "HTMLElement", "description": "Reference to the root element", "private": "", "guessedtype": "property"}, "_rendered": {"guessedname": "_rendered", "type": "Boolean", "description": "Set to true when the layout is rendered", "private": "", "guessedtype": "property"}, "_zIndex": {"guessedname": "_zIndex", "type": "Number", "description": "The zIndex to set all LayoutUnits to", "private": "", "guessedtype": "property"}, "_instances": {"description": "Internal hash table for all layout instances", "private": "", "static": "", "guessedname": "_instances", "guessedtype": "property", "type": "Object"}, "_isBody": {"guessedname": "_isBody", "type": "Boolean", "description": "Flag to determine if we are using the body as the root element.", "private": "", "guessedtype": "property"}, "browser": {"type": "Object", "description": "A modified version of the YAHOO.env.ua object", "guessedname": "browser", "guessedtype": "function"}}, "description": "<p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>"}, "YAHOO.util.DDProxy": {"name": "YAHOO.util.DDProxy", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the linked html element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DDProxy in addition to those in DragDrop: \nresizeFrame, centerFrame, dragElId"}], "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage."}], "namespace": "YAHOO.util", "module": "dragdrop", "events": {"startDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown."}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fired from inside DragDropMgr when the drag operation is finished."}, "dragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs every mousemove event while dragging."}, "dragOverEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires every mousemove event while over a drag and drop object."}, "dragOutEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when a dragged object is no longer over an object that had the onDragEnter fire."}, "b4EndDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the endDragEvent. Returning false will cancel."}, "b4StartDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the startDragEvent, returning false will cancel the startDrag Event."}, "b4DragOutEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragOutEvent"}, "endDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires on the mouseup event after a drag has been initiated (startDrag fired)."}, "b4DragOverEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragOverEvent."}, "dragEnterEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs when the dragged object first interacts with another targettable drag and drop object."}, "b4DragDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragDropEvent"}, "b4DragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragEvent."}, "dragDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when the dragged objects is dropped on another."}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Provides access to the mousedown event. The mousedown does not always result in a drag operation."}, "invalidDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when the dragged objects is dropped in a location that contains no drop targets."}, "b4MouseDownEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag."}}, "guessedname": "DDProxy", "methods": {"createFrame": {"description": "Creates the proxy element if it does not yet exist", "guessedname": "createFrame", "guessedtype": "function"}, "initFrame": {"description": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses", "guessedname": "initFrame", "guessedtype": "function"}, "_resizeProxy": {"private": "", "description": "The proxy is automatically resized to the dimensions of the linked\nelement when a drag is initiated, unless resizeFrame is set to false", "guessedname": "_resizeProxy", "guessedtype": "function"}, "showFrame": {"guessedname": "showFrame", "params": [{"type": "int", "name": "iPageX", "description": " X click position"}, {"type": "int", "name": "iPageY", "description": " Y click position"}], "description": "Resizes the drag frame to the dimensions of the clicked object, positions \nit over the object, and finally displays it", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "DDProxy.js", "guessedtype": "function", "shortname": "DDProxy", "properties": {"YAHOO.util.DDProxy.dragElId": {"type": "String", "static": "", "description": "The default drag frame div id", "guessedname": "dragElId", "guessedtype": "property"}, "resizeFrame": {"type": "boolean", "description": "By default we resize the drag frame to be the same size as the element\nwe want to drag (this is to get the frame effect).  We can turn it off\nif we want a different behavior.", "guessedname": "resizeFrame", "guessedtype": "property"}, "centerFrame": {"type": "boolean", "description": "By default the frame is positioned exactly where the drag element is, so\nwe use the cursor offset provided by YAHOO.util.DD.  Another option that works only if\nyou do not have constraints on the obj is to have the drag frame centered\naround the cursor.  Set centerFrame to true for this effect.", "guessedname": "centerFrame", "guessedtype": "property"}}, "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage."}, "YAHOO.widget.RecordSet": {"name": "YAHOO.widget.RecordSet", "constructors": [{"params": [{"type": "Object || Object[]", "name": "data", "description": "  An object literal or an array of data."}], "description": "A RecordSet defines and manages a set of Records."}], "namespace": "YAHOO.widget", "module": "datatable", "events": {"resetEvent": {"description": "Fired when all Records are deleted from the RecordSet at once."}, "recordDeleteEvent": {"params": [{"type": "Object", "name": "oArgs.data", "description": "  A copy of the data held by the Record,\nor an array of data object literals if multiple Records were deleted at once."}, {"type": "Object", "name": "oArgs.index", "description": "  Index of the deleted Record."}], "description": "Fired when a Record is deleted from the RecordSet."}, "recordSetEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "Object", "name": "oArgs.data", "description": "  Data added."}], "description": "Fired when a Record is set in the RecordSet."}, "recordAddEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "Object", "name": "oArgs.data", "description": "  Data added."}], "description": "Fired when a new Record is added to the RecordSet."}, "recordsDeleteEvent": {"params": [{"type": "Object[]", "name": "oArgs.data", "description": "  An array of data object literals copied\nfrom the Records."}, {"type": "Object", "name": "oArgs.index", "description": "  Index of the first deleted Record."}], "description": "Fired when multiple Records are deleted from the RecordSet at once."}, "keyUpdateEvent": {"deprecated": "Use recordValueUpdateEvent"}, "recordUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data."}], "description": "Fired when a Record is updated with new data."}, "recordValueUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "String", "name": "oArgs.key", "description": "  The updated key."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data."}], "description": "Fired when a Record value is updated with new data."}, "recordsAddEvent": {"params": [{"type": "YAHOO.widget.Record[]", "name": "oArgs.records", "description": "  An array of Record instances."}, {"type": "Object[]", "name": "oArgs.data", "description": "  Data added."}], "description": "Fired when multiple Records are added to the RecordSet at once."}, "recordsSetEvent": {"params": [{"type": "YAHOO.widget.Record[]", "name": "oArgs.records", "description": "  An array of Record instances."}, {"type": "Object[]", "name": "oArgs.data", "description": "  Data added."}], "description": "Fired when multiple Records are set in the RecordSet at once."}}, "guessedname": "RecordSet", "methods": {"hasRecords": {"return": {"type": "Boolean", "description": "true if all indices are populated in the RecordSet"}, "params": [{"type": "", "name": "index", "description": ""}, {"type": "", "name": "range", "description": ""}], "description": "Returns a boolean indicating whether Records exist in the RecordSet at the\nspecified index range.  Returns true if and only if a Record exists at each\nindex in the range.", "guessedname": "hasRecords", "guessedtype": "function"}, "updateRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Updated Record, or null."}, "params": [{"type": "YAHOO.widget.Record | Number | String", "name": "record", "description": "  A Record instance,\na RecordSet position index, or a Record ID."}, {"type": "Object", "name": "oData", "description": "  Object literal of new data."}], "description": "Updates given Record with given data.", "guessedname": "updateRecord", "guessedtype": "function"}, "replaceRecords": {"return": {"type": "YAHOO.widget.Record || YAHOO.widget.Record[]", "description": "A Record instance or\nan array of Records."}, "params": [{"type": "Object || Object[]", "name": "data", "description": "  An object literal of data or an array of\ndata object literals."}], "description": "Replaces all Records in RecordSet with new object literal data.", "guessedname": "replaceRecords", "guessedtype": "function"}, "addRecord": {"return": {"type": "YAHOO.widget.Record", "description": "A Record instance."}, "params": [{"type": "Object", "name": "oData", "description": "  An object literal of data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "description": "Adds one Record to the RecordSet at the given index. If index is null,\nthen adds the Record to the end of the RecordSet.", "guessedname": "addRecord", "guessedtype": "function"}, "updateKey": {"deprecated": "Use updateRecordValue", "guessedname": "updateKey", "guessedtype": "function"}, "deleteRecord": {"return": {"type": "Object", "description": "A copy of the data held by the deleted Record."}, "params": [{"type": "Number", "name": "index", "description": "  Record's RecordSet position index."}, {"type": "Number", "name": "range", "description": "  (optional) How many Records to delete."}], "description": "Removes the Record at the given position index from the RecordSet. If a range\nis also provided, removes that many Records, starting from the index. Length\nof RecordSet is correspondingly shortened.", "guessedname": "deleteRecord", "guessedtype": "function"}, "_setRecord": {"return": {"type": "YAHOO.widget.Record", "description": "A Record instance."}, "description": "Sets/replaces one Record to the RecordSet at the given index.  Existing\nRecords with higher indexes are not shifted.  If no index specified, the\nRecord is added to the end of the RecordSet.", "private": "", "params": [{"type": "Object", "name": "oData", "description": "  An object literal of data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "guessedname": "_setRecord", "guessedtype": "function"}, "getLength": {"return": {"type": "Number", "description": "Number of records in the RecordSet."}, "description": "Returns the number of Records held in the RecordSet.", "guessedname": "getLength", "guessedtype": "function"}, "getRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Record object."}, "params": [{"type": "YAHOO.widget.Record | Number | String", "name": "record", "description": "  Record instance,\nRecordSet position index, or Record ID."}], "description": "Returns Record by ID or RecordSet position index.", "guessedname": "getRecord", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "Unique name of the RecordSet instance."}, "description": "Returns unique name of the RecordSet instance.", "guessedname": "getId", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the RecordSet instance."}, "description": "Public accessor to the unique name of the RecordSet instance.", "guessedname": "toString", "guessedtype": "function"}, "reverseRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "Reverse-sorted array of Records."}, "description": "Reverses all Records, so [\"one\", \"two\", \"three\"] becomes [\"three\", \"two\", \"one\"].", "guessedname": "reverseRecords", "guessedtype": "function"}, "addRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "An array of Record instances."}, "params": [{"type": "Object[]", "name": "aData", "description": "  An object literal data or an array of data object literals."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "description": "Adds multiple Records at once to the RecordSet at the given index with the\ngiven object literal data. If index is null, then the new Records are\nadded to the end of the RecordSet.", "guessedname": "addRecords", "guessedtype": "function"}, "setRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "An array of Record instances."}, "params": [{"type": "Object[]", "name": "aData", "description": "  An array of object literal data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "description": "Sets or replaces multiple Records at once to the RecordSet with the given\ndata, starting at the given index. If index is not specified, then the new\nRecords are added to the end of the RecordSet.", "guessedname": "setRecords", "guessedtype": "function"}, "reset": {"description": "Deletes all Records from the RecordSet.", "guessedname": "reset", "guessedtype": "function"}, "getRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "Array of Records starting at given index and\nlength equal to given range. If index is not given, all Records are returned."}, "params": [{"type": "Number", "name": "index", "description": "  (optional) Recordset position index of which Record to\nstart at."}, {"type": "Number", "name": "range", "description": "  (optional) Number of Records to get."}], "description": "Returns an array of Records from the RecordSet.", "guessedname": "getRecords", "guessedtype": "function"}, "sortRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "Sorted array of Records."}, "params": [{"type": "Function", "name": "fnSort", "description": "  Reference to a sort function."}, {"type": "Boolean", "name": "desc", "description": "  True if sort direction is descending, false if sort\ndirection is ascending."}, {"type": "String", "name": "field", "description": "  The field to sort by, from sortOptions.field"}], "description": "Sorts all Records by given function. Records keep their unique IDs but will\nhave new RecordSet position indexes.", "guessedname": "sortRecords", "guessedtype": "function"}, "updateRecordValue": {"params": [{"type": "YAHOO.widget.Record | Number | String", "name": "record", "description": "  A Record instance,\na RecordSet position index, or a Record ID."}, {"type": "String", "name": "sKey", "description": "  Key name."}, {"type": "Object", "name": "oData", "description": "  New data."}], "description": "Sets given Record at given key to given data.", "guessedname": "updateRecordValue", "guessedtype": "function"}, "getRecordIndex": {"return": {"type": "Number", "description": "Record's RecordSet position index."}, "params": [{"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}], "description": "Returns current position index for the given Record.", "guessedname": "getRecordIndex", "guessedtype": "function"}, "setRecord": {"return": {"type": "YAHOO.widget.Record", "description": "A Record instance."}, "params": [{"type": "Object", "name": "oData", "description": "  An object literal of data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "description": "Sets or replaces one Record to the RecordSet at the given index. Unlike\naddRecord, an existing Record at that index is not shifted to preserve it.\nIf no index is specified, it adds the Record to the end of the RecordSet.", "guessedname": "setRecord", "guessedtype": "function"}, "_deleteRecord": {"guessedname": "_deleteRecord", "params": [{"type": "Number", "name": "index", "description": "  Position index."}, {"type": "Number", "name": "range", "description": "  (optional) How many Records to delete"}], "description": "Deletes Records from the RecordSet at the given index. If range is null,\nthen only one Record is deleted.", "private": "", "guessedtype": "function"}, "deleteRecords": {"return": {"type": "Object[]", "description": "An array of copies of the data held by the deleted Records."}, "params": [{"type": "Number", "name": "index", "description": "  Record's RecordSet position index."}, {"type": "Number", "name": "range", "description": "  (optional) How many Records to delete."}], "description": "Removes the Record at the given position index from the RecordSet. If a range\nis also provided, removes that many Records, starting from the index. Length\nof RecordSet is correspondingly shortened.", "guessedname": "deleteRecords", "guessedtype": "function"}, "_addRecord": {"return": {"type": "YAHOO.widget.Record", "description": "A Record instance."}, "description": "Adds one Record to the RecordSet at the given index. If index is null,\nthen adds the Record to the end of the RecordSet.", "private": "", "params": [{"type": "Object", "name": "oData", "description": "  An object literal of data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "guessedname": "_addRecord", "guessedtype": "function"}}, "file": "RecordSet.js", "guessedtype": "function", "shortname": "RecordSet", "properties": {"_length": {"deprecated": "No longer used", "type": "Number", "description": "Internal counter of how many Records are in the RecordSet.", "private": ""}, "_sId": {"guessedname": "_sId", "type": "String", "description": "Unique String identifier assigned at instantiation.", "private": "", "guessedtype": "property"}, "RecordSet._nCount": {"description": "Internal class variable to name multiple Recordset instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}}, "description": "A RecordSet defines and manages a set of Records."}, "YAHOO.widget.TextNode": {"name": "YAHOO.widget.TextNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node.\nProviding a string is the same as providing an object with a single property named label.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions.\nAll attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"}], "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has at least a string property called label.  By default,  clicking the\nlabel will toggle the expanded/collapsed state of the node.  By\nsetting the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TextNode", "methods": {"getEditorValue": {"return": {"type": "string", "description": "value entered"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Returns the value from the input element.\nOverrides Node.getEditorValue.", "guessedname": "getEditorValue", "guessedtype": "function"}, "fillEditorContainer": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Places an &lt;input&gt;  textbox in the input container and loads the label text into it.", "guessedname": "fillEditorContainer", "guessedtype": "function"}, "displayEditedValue": {"params": [{"type": "string", "name": "value", "description": "  value to be displayed and stored in the node"}, {"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Finally displays the newly edited value in the tree.\nOverrides Node.displayEditedValue.", "guessedname": "displayEditedValue", "guessedtype": "function"}, "getNodeDefinition": {"return": {"type": "Object | false", "description": "definition of the tree or false if this node or any descendant is defined as dynamic"}, "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.", "guessedname": "getNodeDefinition", "guessedtype": "function"}, "destroyEditorContents": {"params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Destroys the contents of the inline editor panel.\nOverrides Node.destroyEditorContent.\nSince we didn't set any event listeners on this inline editor, it is more efficient to avoid the generic method in Node.", "guessedname": "destroyEditorContents", "guessedtype": "function"}, "getLabelEl": {"return": {"type": "object", "description": "the element"}, "description": "Returns the label element", "guessedname": "getLabelEl", "guessedtype": "function"}, "setUpLabel": {"params": [{"type": "", "name": "oData", "description": " string containing the label, or an object with a label property"}], "description": "Sets up the node label", "guessedname": "setUpLabel", "guessedtype": "function"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "TextNode.js", "guessedtype": "function", "shortname": "TextNode", "properties": {"_type": {"description": "The node type", "default": "\"TextNode\"", "private": "", "guessedname": "_type", "guessedtype": "property", "type": "string"}, "target": {"type": "string", "description": "The label href target, defaults to current window", "guessedname": "target", "guessedtype": "property"}, "title": {"type": "string", "description": "The text for the title (tooltip) for the label element", "guessedname": "title", "guessedtype": "property"}, "labelStyle": {"type": "string", "description": "The CSS class for the label href.  Defaults to ygtvlabel, but can be\noverridden to provide a custom presentation for a specific node.", "guessedname": "labelStyle", "guessedtype": "property"}, "label": {"type": "string", "description": "The text for the label.  It is assumed that the oData parameter will\neither be a string that will be used as the label, or an object that\nhas a property called \"label\" that we will use.", "guessedname": "label", "guessedtype": "property"}, "href": {"type": "string", "description": "The href for the node's label.  If one is not specified, the href will\nbe set so that it toggles the node.", "guessedname": "href", "guessedtype": "property"}, "labelElId": {"type": "string", "description": "The derived element id of the label for this node", "guessedname": "labelElId", "guessedtype": "property"}}, "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has at least a string property called label.  By default,  clicking the\nlabel will toggle the expanded/collapsed state of the node.  By\nsetting the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href."}, "YAHOO.util.ImageLoader.imgObj": {"name": "YAHOO.util.ImageLoader.imgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Base class for image objects to be registered with the groups"}], "namespace": "YAHOO.util.ImageLoader", "module": "imageloader", "guessedname": "imgObj", "methods": {"fetch": {"description": "Displays the image; puts the URL into the DOM", "guessedname": "fetch", "guessedtype": "function"}, "_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nMust be overridden by child class", "private": "", "guessedtype": "function"}}, "file": "ImageLoader.js", "guessedtype": "function", "shortname": "imgObj", "properties": {"_fetched": {"guessedname": "_fetched", "type": "Boolean", "description": "Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren't fetched twice", "private": "", "guessedtype": "property"}, "url": {"type": "String", "description": "URL for the image", "guessedname": "url", "guessedtype": "property"}, "domId": {"type": "String", "description": "HTML DOM id of the image element", "guessedname": "domId", "guessedtype": "property"}, "height": {"type": "Int", "description": "Pixel height of the image. Will be set as a \"height\" attribute after the image is fetched.\nDetaults to the natural height of the image.\nOnly appropriate with src images", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Int", "description": "Pixel width of the image. Will be set as a \"width\" attribute after the image is fetched.\nDetaults to the natural width of the image.\nOnly appropriate with src images", "guessedname": "width", "guessedtype": "property"}, "setVisible": {"type": "Boolean", "description": "Whether the style.visibility should be set to \"visible\" after the image is fetched.\nUsed when setting src images as visibility:hidden prior to image fetching", "guessedname": "setVisible", "guessedtype": "property"}}, "description": "Base class for image objects to be registered with the groups"}, "YAHOO.widget.ImageCropper": {"name": "YAHOO.widget.ImageCropper", "configs": {"status": {"type": "Boolean", "description": "Show the Resize Utility status, defaults to true"}, "initialXY": {"type": "Array", "description": "Array of the XY position that we need to set the crop element to when we build it. Defaults to [10, 10]"}, "minHeight": {"type": "Number", "description": "MinHeight of the crop area, default 50"}, "minWidth": {"type": "Number", "description": "MinWidth of the crop area, default 50."}, "initHeight": {"type": "Number", "description": "Set the initlal height of the crop area, defaults to 1/4 of the image height"}, "shiftKeyTick": {"type": "Number", "description": "The pixel tick for shift + the arrow keys, defaults to 10"}, "initWidth": {"type": "Number", "description": "Set the initlal width of the crop area, defaults to 1/4 of the image width"}, "ratio": {"type": "Boolean", "description": "Set the ratio config option of the Resize Utlility, default false"}, "keyTick": {"type": "Number", "description": "The pixel tick for the arrow keys, defaults to 1"}, "useKeys": {"type": "Boolean", "description": "Should we use the Arrow keys to position the crop element, defaults to true"}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The image element to make croppable."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Creates a Image Cropper control.</p>"}], "namespace": "YAHOO.widget", "module": "imagecropper", "events": {"beforeUseKeysChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUseKeysChange", "description": "Fires before the value for the configuration attribute 'useKeys' changes. Return false to cancel the attribute change."}, "ratioChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "ratioChange", "description": "Fires when the value for the configuration attribute 'ratio' changes."}, "resizeEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires on every element resize."}, "beforeMinHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinHeightChange", "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change."}, "beforeShiftKeyTickChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShiftKeyTickChange", "description": "Fires before the value for the configuration attribute 'shiftKeyTick' changes. Return false to cancel the attribute change."}, "dragEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the DragDrop dragEvent"}, "beforeMinWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinWidthChange", "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change."}, "beforeRatioChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRatioChange", "description": "Fires before the value for the configuration attribute 'ratio' changes. Return false to cancel the attribute change."}, "beforeStatusChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeStatusChange", "description": "Fires before the value for the configuration attribute 'status' changes. Return false to cancel the attribute change."}, "useKeysChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "useKeysChange", "description": "Fires when the value for the configuration attribute 'useKeys' changes."}, "initHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initHeightChange", "description": "Fires when the value for the configuration attribute 'initHeight' changes."}, "beforeInitWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitWidthChange", "description": "Fires before the value for the configuration attribute 'initWidth' changes. Return false to cancel the attribute change."}, "minWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' changes."}, "initWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initWidthChange", "description": "Fires when the value for the configuration attribute 'initWidth' changes."}, "startResizeEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when when a resize action is started."}, "shiftKeyTickChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "shiftKeyTickChange", "description": "Fires when the value for the configuration attribute 'shiftKeyTick' changes."}, "beforeKeyTickChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeKeyTickChange", "description": "Fires before the value for the configuration attribute 'keyTick' changes. Return false to cancel the attribute change."}, "keyTickChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "keyTickChange", "description": "Fires when the value for the configuration attribute 'keyTick' changes."}, "beforeInitHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitHeightChange", "description": "Fires before the value for the configuration attribute 'initHeight' changes. Return false to cancel the attribute change."}, "minHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' changes."}, "moveEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires on every element move. Inside these methods: _handleKeyPress, _handleDragEvent, _handleResizeEvent"}, "statusChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "statusChange", "description": "Fires when the value for the configuration attribute 'status' changes."}, "beforeInitialXYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitialXYChange", "description": "Fires before the value for the configuration attribute 'initialXY' changes. Return false to cancel the attribute change."}, "initialXYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initialXYChange", "description": "Fires when the value for the configuration attribute 'initialXY' changes."}}, "guessedname": "Crop", "methods": {"_handleStartResizeEvent": {"description": "Handles the Resize Utilitys startResize event", "private": "", "guessedname": "_handleStartResizeEvent", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the ImageCropper Object.", "guessedname": "toString", "guessedtype": "function"}, "_setBackgroundImage": {"guessedname": "_setBackgroundImage", "params": [{"type": "", "name": "String", "description": " url The url of the image"}], "description": "Sets the background image of the resize element", "private": "", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the widget."}], "description": "Initializes all of the configuration attributes used to create a croppable element.", "private": "", "guessedtype": "function"}, "_handleResizeEvent": {"guessedname": "_handleResizeEvent", "params": [{"type": "", "name": "Event", "description": " ev The Resize Utilitys resize event."}], "description": "Handles the Resize Utilitys Resize event", "private": "", "guessedtype": "function"}, "getResizeObject": {"return": {"type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>", "description": "The Resize instance"}, "description": "Get the Resize Utility object.", "guessedname": "getResizeObject", "guessedtype": "function"}, "getResizeMaskEl": {"return": {"type": "HTMLElement", "description": "The resize objects mask element."}, "description": "Get the HTML reference for the resizable object's mask element.", "guessedname": "getResizeMaskEl", "guessedtype": "function"}, "_handleBeforeResizeEvent": {"description": "Handles the Resize Utilitys beforeResize event", "private": "", "guessedname": "_handleBeforeResizeEvent", "guessedtype": "function"}, "_syncBackgroundPosition": {"description": "Syncs the packground position of the resize element with the resize elements top and left style position", "private": "", "guessedname": "_syncBackgroundPosition", "guessedtype": "function"}, "_handleMouseOut": {"description": "Handles the mouseout event", "private": "", "guessedname": "_handleMouseOut", "guessedtype": "function"}, "init": {"description": "The ImageCropper class's initialization method", "private": "", "guessedname": "init", "guessedtype": "function"}, "_moveEl": {"description": "Moves the resize element based on the arrow keys", "private": "", "guessedname": "_moveEl", "guessedtype": "function"}, "getCropperById": {"static": "", "return": {"type": "Object", "description": "The ImageCropper Object"}, "description": "Get's an ImageCropper object by the HTML id of the image associated with the ImageCropper object.", "guessedname": "getCropperById", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "The image element"}, "description": "Get the HTML reference for the image element.", "guessedname": "getEl", "guessedtype": "function"}, "_handleKeyPress": {"description": "Handles the keypress event", "private": "", "guessedname": "_handleKeyPress", "guessedtype": "function"}, "getResizeEl": {"return": {"type": "HTMLElement", "description": "The resize element"}, "description": "Get the HTML reference for the resize element.", "guessedname": "getResizeEl", "guessedtype": "function"}, "_handleDragEvent": {"description": "Handles the DragDrop DragEvent event", "private": "", "guessedname": "_handleDragEvent", "guessedtype": "function"}, "_createResize": {"description": "Creates the resize element and the instance of the Resize Utility", "private": "", "guessedname": "_createResize", "guessedtype": "function"}, "_createWrap": {"description": "Creates the wrapper element used to wrap the image", "private": "", "guessedname": "_createWrap", "guessedtype": "function"}, "getMaskEl": {"return": {"type": "HTMLElement", "description": "The mask element"}, "description": "Get the HTML reference for the mask element.", "guessedname": "getMaskEl", "guessedtype": "function"}, "_handleB4DragEvent": {"description": "Handles the DragDrop b4DragEvent event", "private": "", "guessedname": "_handleB4DragEvent", "guessedtype": "function"}, "getWrapEl": {"return": {"type": "HTMLElement", "description": "The wrap element"}, "description": "Get the HTML reference for the wrap element.", "guessedname": "getWrapEl", "guessedtype": "function"}, "destroy": {"description": "Destroys the ImageCropper object and all of it's elements & listeners.", "guessedname": "destroy", "guessedtype": "function"}, "getCropCoords": {"return": {"type": "Object", "description": "The top, left, height, width and image url of the image being cropped"}, "description": "Returns the coordinates needed to crop the image", "guessedname": "getCropCoords", "guessedtype": "function"}, "_setBackgroundPosition": {"guessedname": "_setBackgroundPosition", "params": [{"type": "", "name": "Number", "description": " l The left position"}, {"type": "", "name": "Number", "description": " t The top position"}], "description": "Sets the background image position to the top and left position", "private": "", "guessedtype": "function"}, "_handleMouseOver": {"description": "Handles the mouseover event", "private": "", "guessedname": "_handleMouseOver", "guessedtype": "function"}, "reset": {"return": {"type": "<a href=\"YAHOO.widget.ImageCropper.html\">YAHOO.widget.ImageCropper</a>", "description": "The ImageCropper instance"}, "description": "Resets the crop element back to it's original position", "guessedname": "reset", "guessedtype": "function"}, "_handleResizeMaskEl": {"description": "Resizes the inner mask element", "private": "", "guessedname": "_handleResizeMaskEl", "guessedtype": "function"}, "_setConstraints": {"return": {"type": "Object", "description": "Object containing Top, Right, Bottom and Left constraints"}, "description": "Set the DragDrop constraints to keep the element inside the crop area.", "private": "", "params": [{"type": "", "name": "Boolean", "description": " inside Used when called from inside a resize event, false by default (dragging)"}], "guessedname": "_setConstraints", "guessedtype": "function"}, "_createMask": {"description": "Creates the mask element used to mask the image", "private": "", "guessedname": "_createMask", "guessedtype": "function"}, "_handleEndResizeEvent": {"description": "Handles the Resize Utilitys endResize event", "private": "", "guessedname": "_handleEndResizeEvent", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "crop.js", "guessedtype": "function", "shortname": "ImageCropper", "properties": {"_resizeEl": {"guessedname": "_resizeEl", "type": "HTMLElement", "description": "The HTML Element used to create the Resize Oject", "private": "", "guessedtype": "property"}, "CSS_RESIZE_MASK": {"guessedname": "CSS_RESIZE_MASK", "type": "String", "description": "The CSS class for the mask inside the resize element", "private": "", "guessedtype": "property"}, "_resizeMaskEl": {"guessedname": "_resizeMaskEl", "type": "HTMLElement", "description": "The HTML Element used to create the Resize mask", "private": "", "guessedtype": "property"}, "_active": {"guessedname": "_active", "type": "Boolean", "description": "Flag to determine if the crop region is active", "private": "", "guessedtype": "property"}, "_mask": {"guessedname": "_mask", "type": "HTMLElement", "description": "The HTML Element created to \"mask\" the image being cropped", "private": "", "guessedtype": "property"}, "_image": {"guessedname": "_image", "type": "String", "description": "The url of the image we are cropping", "private": "", "guessedtype": "property"}, "_instances": {"description": "Internal hash table for all ImageCropper instances", "private": "", "static": "", "guessedname": "_instances", "guessedtype": "property", "type": "Object"}, "CSS_MASK": {"guessedname": "CSS_MASK", "type": "String", "description": "The CSS class for the mask element", "private": "", "guessedtype": "property"}, "_resize": {"guessedname": "_resize", "type": "Object", "description": "A reference to the Resize Utility used in this Cropper Instance", "private": "", "guessedtype": "property"}, "_wrap": {"guessedname": "_wrap", "type": "HTMLElement", "description": "The HTML Element created to wrap the image", "private": "", "guessedtype": "property"}, "CSS_MAIN": {"guessedname": "CSS_MAIN", "type": "String", "description": "The CSS class used to wrap the element", "private": "", "guessedtype": "property"}}, "description": "<p>Creates a Image Cropper control.</p>"}, "YAHOO.widget.ContextMenuItem": {"name": "YAHOO.widget.ContextMenuItem", "deprecated": "As of version 2.4.0 items for YAHOO.widget.ContextMenu instances\nare of type YAHOO.widget.MenuItem.", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the context menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;</code> element of the context menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the context \nmenu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;</code> element of the context menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu item. See configuration class \ndocumentation for more details."}], "description": "Creates an item for a context menu."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "ContextMenuItem", "extends": "YAHOO.widget.MenuItem", "superclass": "YAHOO.widget.MenuItem", "file": "contextmenuitem.js", "guessedtype": "property", "shortname": "ContextMenuItem", "description": "Creates an item for a context menu."}, "YAHOO.util.EventProvider": {"name": "YAHOO.util.EventProvider", "namespace": "YAHOO.util", "module": "event", "guessedname": "EventProvider", "methods": {"unsubscribeAll": {"params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "p_type", "description": "        the type, or name of the event"}, {"type": "function", "name": "p_fn", "description": "        the function to exectute when the event fires"}, {"type": "Object", "name": "p_obj", "description": "         An object to be passed along when the event \nfires"}, {"type": "boolean", "name": "overrideContext", "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"}], "description": "Subscribe to a CustomEvent by event type", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "p_fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "p_obj", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "hasEvent": {"params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns true if the custom event of the provided type has been created\nwith createEvent.", "guessedname": "hasEvent", "guessedtype": "function"}, "fireEvent": {"return": {"type": "boolean", "description": "the return value from CustomEvent.fire"}, "params": [{"type": "string", "name": "p_type", "description": "      the type, or name of the event"}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The first argument fire() was executed with</li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod</li>\n</ul>", "guessedname": "fireEvent", "guessedtype": "function"}, "createEvent": {"return": {"type": "CustomEvent", "description": "the custom event"}, "params": [{"type": "string", "name": "p_type", "description": "  the type, or name of the event"}, {"type": "object", "name": "p_config", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\nscope: defines the default execution scope.  If not defined\nthe default scope will be this instance.\n</li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n</li>\n<li>\nfireOnce: if true, the custom event will only notify subscribers\nonce regardless of the number of times the event is fired.  In\naddition, new subscribers will be executed immediately if the\nevent has already fired.\nThis is false by default.\n</li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n</li>\n</ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "createEvent", "guessedtype": "function"}}, "file": "EventProvider.js", "guessedtype": "function", "shortname": "EventProvider", "properties": {"__yui_subscribers": {"guessedname": "__yui_subscribers", "type": "Object[]", "description": "Private storage of custom event subscribers", "private": "", "guessedtype": "property"}, "__yui_events": {"guessedname": "__yui_events", "type": "Object[]", "description": "Private storage of custom events", "private": "", "guessedtype": "property"}}, "description": "EventProvider is designed to be used with YAHOO.augment to wrap \nCustomEvents in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "YAHOO.widget.CheckboxCellEditor": {"name": "YAHOO.widget.CheckboxCellEditor", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The CheckboxCellEditor class provides functionality for inline editing\nDataTable cell data with checkboxes."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "CheckboxCellEditor", "methods": {"renderForm": {"description": "Render a form with input(s) type=checkbox.", "guessedname": "renderForm", "guessedtype": "function"}, "handleDisabledBtns": {"description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them.", "guessedname": "handleDisabledBtns", "guessedtype": "function"}, "getInputValue": {"description": "Retrieves input value from CheckboxCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in CheckboxCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets CheckboxCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "CheckboxCellEditor", "properties": {"checkboxOptions": {"type": "String[] | Object[]", "description": "Array of checkbox values. Can either be a simple array (e.g., [\"red\",\"green\",\"blue\"])\nor a an array of objects (e.g., [{label:\"red\", value:\"#FF0000\"},\n{label:\"green\", value:\"#00FF00\"}, {label:\"blue\", value:\"#0000FF\"}]).", "guessedname": "checkboxOptions", "guessedtype": "property"}, "checkboxes": {"type": "HTMLElement[]", "description": "Reference to the checkbox elements.", "guessedname": "checkboxes", "guessedtype": "property"}, "value": {"type": "String[]", "description": "Array of checked values", "guessedname": "value", "guessedtype": "property"}}, "description": "The CheckboxCellEditor class provides functionality for inline editing\nDataTable cell data with checkboxes."}, "YAHOO.tool.Profiler": {"name": "YAHOO.tool.Profiler", "namespace": "YAHOO.tool", "module": "profiler", "guessedname": "Profiler", "methods": {"getFunctionReport": {"return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "deprecated": "Use getReport() instead.", "static": "", "guessedname": "getFunctionReport", "guessedtype": "function"}, "pause": {"return": {"type": "Void", "description": ""}, "description": "Pauses profiling information for a given name.", "static": "", "guessedname": "pause", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getReport": {"static": "", "return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "guessedname": "getReport", "guessedtype": "function"}, "start": {"return": {"type": "Void", "description": ""}, "description": "Start profiling information for a given name. The name cannot be the name\nof a registered function or object. This is used to start timing for a\nparticular block of code rather than instrumenting the entire function.", "static": "", "guessedname": "start", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getFullReport": {"static": "", "return": {"type": "Object", "description": "An object containing all profile data."}, "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.", "guessedname": "getFullReport", "guessedtype": "function"}, "unregisterFunction": {"return": {"type": "Void", "description": ""}, "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "static": "", "guessedname": "unregisterConstructor", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}]}, "clear": {"return": {"type": "Void", "description": ""}, "description": "Removes all report data from the profiler.", "static": "", "guessedname": "clear", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " (Optional) The name of the report to clear. If\nomitted, then all report data is cleared."}]}, "stop": {"return": {"type": "Void", "description": ""}, "description": "Stops profiling information for a given name.", "static": "", "guessedname": "stop", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getCallCount": {"return": {"type": "int", "description": "The number of times the function was called."}, "description": "Returns the number of times that the given function has been called.", "static": "", "guessedname": "getCallCount", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned."}]}, "saveDataPoint": {"return": {"type": "Void", "description": ""}, "static": "", "params": [{"type": "String", "name": "name", "description": " The name of the function to mark as stopped."}, {"type": "int", "name": "duration", "description": " The number of milliseconds it took the function to\nexecute."}], "description": "Called when a method ends execution. Marks the start and end time of the \nmethod so it can calculate how long the function took to execute. Also \nupdates min/max/avg calculations for the function.", "private": ""}, "registerFunction": {"return": {"type": "Void", "description": ""}, "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the container object.", "static": "", "guessedname": "registerFunction", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to, such as YAHOO.util.Dom, or the object on which it's\na method."}, {"type": "Boolean", "name": "registerPrototype", "description": " (Optional) Indicates that the prototype should\nalso be instrumented. Setting to true has the same effect as calling\nregisterConstructor()."}]}, "instrument": {"return": {"type": "Function", "description": "An instrumented version of the function."}, "description": "Instruments a method to have profiling calls.", "static": "", "guessedname": "instrument", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the report for the function."}, {"type": "Function", "name": "method", "description": " The function to instrument."}]}, "getOriginal": {"return": {"type": "Function|Object", "description": "The uninstrumented version of a function/object."}, "description": "Returns the uninstrumented version of a function/object.", "static": "", "guessedname": "getOriginal", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function/object to retrieve."}]}, "getAverage": {"return": {"type": "float", "description": "The average time it takes the function to execute."}, "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getAverage", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "createReport": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name to store for the report object."}], "description": "Creates a report object with the given name.", "private": ""}, "getMin": {"return": {"type": "float", "description": "The minimum time it takes the function to execute."}, "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getMin", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "unregisterObject": {"return": {"type": "Void", "description": ""}, "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.", "static": "", "guessedname": "unregisterObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to unregister."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods should also be\nunregistered."}]}, "getMax": {"return": {"type": "float", "description": "The maximum time it takes the function to execute."}, "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getMax", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "registerConstructor": {"return": {"type": "Void", "description": ""}, "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.", "static": "", "guessedname": "registerConstructor", "guessedtype": "function", "params": [{"type": "string", "name": "name", "description": " The fully-qualified name of the function including namespace information."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function (namespace or containing object)."}]}, "registerObject": {"return": {"type": "Void", "description": ""}, "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.", "static": "", "guessedname": "registerObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to profile (shows up in report)."}, {"type": "Object", "name": "owner", "description": " (Optional) The object represented by the name."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods are also profiled."}]}}, "static": "", "file": "Profiler.js", "guessedtype": "function", "shortname": "Profiler", "description": "Profiles functions in JavaScript."}, "YAHOO.widget.OverlayManager": {"name": "YAHOO.widget.OverlayManager", "configs": {"focusevent": {"default": "\"mousedown\"", "type": "String", "description": "The default DOM event that should be used to focus an Overlay", "guessedname": "value", "guessedtype": "property"}, "overlays": {"default": "null", "type": "YAHOO.widget.Overlay[]", "description": "The collection of registered Overlays in use by \nthe OverlayManager", "guessedname": "suppressEvent", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Array", "name": "overlays", "description": " Optional. A collection of Overlays to register \nwith the manager."}, {"type": "Object", "name": "userConfig", "description": "  The object literal representing the user \nconfiguration of the OverlayManager"}], "description": "OverlayManager is used for maintaining the focus status of \nmultiple Overlays."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "OverlayManager", "methods": {"toString": {"return": {"type": "String", "description": "The string representation of the OverlayManager"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "blurAll": {"description": "Removes focus from all registered Overlays in the manager", "guessedname": "blurAll", "guessedtype": "function"}, "focus": {"params": [{"type": "Overlay", "name": "overlay", "description": " The Overlay to focus"}, {"type": "String", "name": "overlay", "description": " The id of the Overlay to focus"}], "description": "Focuses the specified Overlay", "guessedname": "focus", "guessedtype": "function"}, "_bindBlur": {"protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " The overlay for which blur needs to be managed"}], "description": "Subscribes to the Overlay based instance's blurEvent to allow the OverlayManager to\nmonitor blur state.\nIf the instance already has a blurEvent (e.g. Menu), OverlayManager will subscribe \nto the existing blurEvent, however if a blurEvent or blur method does not exist\non the instance, the _bindBlur method will add them, and the blur method \nupdate the OverlayManager's state directly.", "guessedname": "_bindBlur", "guessedtype": "function"}, "_manageBlur": {"protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " The overlay instance which got blurred."}], "description": "Updates the state of the OverlayManager and overlay, as a result of the overlay\nbeing blurred.", "guessedname": "_manageBlur", "guessedtype": "function"}, "_onOverlayBlurHandler": {"guessedname": "_onOverlayBlurHandler", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "Overlay", "name": "p_oOverlay", "description": " Object representing the overlay that \nfired the event."}], "description": "blurEvent Handler, used to delegate to _manageBlur with the correct arguments.", "private": "", "guessedtype": "function"}, "_manageFocus": {"protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " The overlay instance which got focus."}], "description": "Updates the state of the OverlayManager and overlay, as a result of the overlay \nreceiving focus.", "guessedname": "_manageFocus", "guessedtype": "function"}, "find": {"return": {"type": "Overlay", "description": "The requested Overlay, if found, or null if it \ncannot be located."}, "params": [{"type": "Overlay", "name": "overlay", "description": "  An Overlay to locate within the manager"}, {"type": "String", "name": "overlay", "description": "  An Overlay id to locate within the manager"}], "description": "Attempts to locate an Overlay by instance or ID.", "guessedname": "find", "guessedtype": "function"}, "bringToTop": {"params": [{"type": "YAHOO.widget.Overlay", "name": "p_oOverlay", "description": " Object representing an \nOverlay instance."}, {"type": "String", "name": "p_oOverlay", "description": " String representing the id of an \nOverlay instance."}], "description": "Places the specified Overlay instance on top of all other \nOverlay instances.", "guessedname": "bringToTop", "guessedtype": "function"}, "init": {"params": [{"type": "Overlay[]", "name": "overlays", "description": " Optional. A collection of Overlays to \nregister with the manager."}, {"type": "Object", "name": "userConfig", "description": "  The object literal representing the user \nconfiguration of the OverlayManager"}], "description": "Initializes the OverlayManager", "guessedname": "init", "guessedtype": "function"}, "getActive": {"return": {"type": "Overlay", "description": "The currently focused Overlay"}, "description": "Returns the currently focused Overlay", "guessedname": "getActive", "guessedtype": "function"}, "_bindDestroy": {"protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " The overlay instance being managed"}], "description": "Subscribes to the Overlay based instance's destroyEvent, to allow the Overlay\nto be removed for the OverlayManager when destroyed.", "guessedname": "_bindDestroy", "guessedtype": "function"}, "showAll": {"description": "Shows all Overlays in the manager.", "guessedname": "showAll", "guessedtype": "function"}, "_bindFocus": {"protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " The overlay for which focus needs to be managed"}], "description": "Subscribes to the Overlay based instance focusEvent, to allow the OverlayManager to\nmonitor focus state.\nIf the instance already has a focusEvent (e.g. Menu), OverlayManager will subscribe \nto the existing focusEvent, however if a focusEvent or focus method does not exist\non the instance, the _bindFocus method will add them, and the focus method will \nupdate the OverlayManager's state directly.", "guessedname": "_bindFocus", "guessedtype": "function"}, "hideAll": {"description": "Hides all Overlays in the manager.", "guessedname": "hideAll", "guessedtype": "function"}, "_syncZIndex": {"protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " The overlay instance being managed"}], "description": "Ensures the zIndex configuration property on the managed overlay based instance\nis set to the computed zIndex value from the DOM (with \"auto\" translating to 0).", "guessedname": "_syncZIndex", "guessedtype": "function"}, "_onOverlayDestroy": {"guessedname": "_onOverlayDestroy", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "Overlay", "name": "p_oOverlay", "description": " Object representing the overlay that \nfired the event."}], "description": "\"destroy\" event handler for the Overlay.", "private": "", "guessedtype": "function"}, "_onOverlayFocusHandler": {"guessedname": "_onOverlayFocusHandler", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "Overlay", "name": "p_oOverlay", "description": " Object representing the overlay that \nfired the event."}], "description": "focusEvent Handler, used to delegate to _manageFocus with the correct arguments.", "private": "", "guessedtype": "function"}, "register": {"return": {"type": "boolean", "description": "true if any Overlays are registered."}, "params": [{"type": "Overlay", "name": "overlay", "description": "  An Overlay to register with the manager."}, {"type": "Overlay[]", "name": "overlay", "description": "  An array of Overlays to register with \nthe manager."}], "description": "Registers an Overlay or an array of Overlays with the manager. Upon \nregistration, the Overlay receives functions for focus and blur, \nalong with CustomEvents for each.", "guessedname": "register", "guessedtype": "function"}, "remove": {"params": [{"type": "Overlay", "name": "overlay", "description": " The Overlay to remove"}, {"type": "String", "name": "overlay", "description": " The id of the Overlay to remove"}], "description": "Removes the specified Overlay from the manager", "guessedname": "remove", "guessedtype": "function"}, "compareZIndexDesc": {"guessedname": "compareZIndexDesc", "return": {"type": "Number", "description": "0, 1, or -1, depending on where the Overlay should \nfall in the stacking order."}, "description": "Used for sorting the manager's Overlays by z-index.", "private": "", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the default configuration of the OverlayManager", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "_onOverlayElementFocus": {"guessedname": "_onOverlayElementFocus", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event \nobject passed back by the event utility (Event)."}], "description": "Event handler for the DOM event that is used to focus \nthe Overlay instance as specified by the \"focusevent\" \nconfiguration property.", "private": "", "guessedtype": "function"}}, "file": "OverlayManager.js", "guessedtype": "function", "shortname": "OverlayManager", "properties": {"activeOverlay": {"guessedname": "activeOverlay", "type": "YAHOO.widget.Overlay", "description": "The currently activated Overlay", "private": "", "guessedtype": "property"}, "cfg": {"type": "Config", "description": "The OverlayManager's Config object used for monitoring \nconfiguration properties.", "guessedname": "cfg", "guessedtype": "property"}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "overlays": {"type": "YAHOO.widget.Overlay[]", "description": "The array of Overlays that are currently registered", "guessedname": "overlays", "guessedtype": "property"}, "OverlayManager.CSS_FOCUSED": {"description": "The CSS class representing a focused Overlay", "static": "", "guessedname": "CSS_FOCUSED", "guessedtype": "property", "type": "String", "final": ""}}, "description": "OverlayManager is used for maintaining the focus status of \nmultiple Overlays."}, "YAHOO.widget.SimpleEditor": {"name": "YAHOO.widget.SimpleEditor", "configs": {"saveEl": {"default": "element", "type": "HTMLElement", "description": "When save HTML is called, this element will be updated as well as the source of data."}, "height": {"default": "Best guessed size of the textarea, for best results use CSS to style the height of the textarea or pass it in as an argument", "type": "String", "description": "The height of the editor iframe container, not including the toolbar.."}, "disabled": {"default": "false", "type": "Boolean", "description": "This will toggle the editor's disabled state. When the editor is disabled, designMode is turned off and a mask is placed over the iframe so no interaction can take place.\nAll Toolbar buttons are also disabled so they cannot be used."}, "focusAtStart": {"default": "false", "type": "Boolean", "description": "Should we focus the window when the content is ready?"}, "toolbar_cont": {"default": "false", "type": "Boolean", "description": "Internal config for the toolbars container"}, "editor_wrapper": {"default": "null", "type": "HTMLElement", "description": "The outter wrapper for the entire editor.", "private": ""}, "animate": {"default": "false unless Animation is found, then true", "type": "Boolean", "description": "Should the editor animate window movements"}, "maxUndo": {"default": "30", "type": "Number", "description": "The max number of undo levels to store."}, "container": {"default": "false", "type": "HTMLElement", "description": "Used when dynamically creating the Editor from Javascript with no default textarea.\nWe will create one and place it in this container. If no container is passed we will append to document.body."}, "extracss": {"default": "''", "type": "String", "description": "Extra user defined css to load after the default SimpleEditor CSS"}, "width": {"default": "Best guessed size of the textarea, for best results use CSS to style the width of the textarea or pass it in as an argument", "type": "String", "description": "The width of the editor container."}, "setDesignMode": {"default": "true", "type": "Boolean", "description": "Should the Editor set designMode on the document. Default: true."}, "blankimage": {"default": "The yahooapis.com address for the current release + 'assets/blankimage.png'", "type": "String", "description": "The URL for the image placeholder to put in when inserting an image."}, "handleSubmit": {"default": "false", "type": "Boolean", "description": "Config handles if the editor will attach itself to the textareas parent form's submit handler.\nIf it is set to true, the editor will attempt to attach a submit listener to the textareas parent form.\nThen it will trigger the editors save handler and place the new content back into the text area before the form is submitted."}, "allowNoEdit": {"default": "false", "type": "Boolean", "description": "Should the editor check for non-edit fields. It should be noted that this technique is not perfect. If the user does the right things, they will still be able to make changes.\nSuch as highlighting an element below and above the content and hitting a toolbar button or a shortcut key."}, "css": {"default": "<code><pre>html {\nheight: 95%;\n}\nbody {\nheight: 100%;\npadding: 7px; background-color: #fff; font:13px/1.22 arial,helvetica,clean,sans-serif;*font-size:small;*font:x-small;\n}\na {\ncolor: blue;\ntext-decoration: underline;\ncursor: pointer;\n}\n.warning-localfile {\nborder-bottom: 1px dashed red !important;\n}\n.yui-busy {\ncursor: wait !important;\n}\nimg.selected { //Safari image selection\nborder: 2px dotted #808080;\n}\nimg {\ncursor: pointer !important;\nborder: none;\n}\n</pre></code>", "type": "String", "description": "The Base CSS used to format the content of the editor"}, "autoHeight": {"default": "false", "type": "Boolean || Number", "description": "Remove the scrollbars from the edit area and resize it to fit the content. It will not go any lower than the current config height."}, "element_cont": {"default": "false", "type": "HTMLElement", "description": "Internal config for the editors container"}, "disabled_iframe": {"default": "null", "type": "HTMLElement", "description": "Internal config for holding the iframe element used when disabling the Editor.", "private": ""}, "ptags": {"default": "false", "type": "Boolean", "description": "If true, the editor uses &lt;P&gt; tags instead of &lt;br&gt; tags. (Use Shift + Enter to get a &lt;br&gt;)"}, "filterWord": {"type": "Boolean", "description": "Attempt to filter out MS Word HTML from the Editor's output."}, "removeLineBreaks": {"default": "false", "type": "Boolean", "description": "Should we remove linebreaks and extra spaces on cleanup"}, "toolbar": {"type": "Object", "description": "The default toolbar config."}, "drag": {"type": "{Boolean/String}", "description": "Set this config to make the Editor draggable, pass 'proxy' to make use YAHOO.util.DDProxy."}, "resize": {"type": "Boolean", "description": "Set this to true to make the Editor Resizable with YAHOO.util.Resize. The default config is available: myEditor._resizeConfig\nAnimation will be ignored while performing this resize to allow for the dynamic change in size of the toolbar."}, "nodeChangeThreshold": {"default": "3", "type": "Number", "description": "The number of seconds that need to be in between nodeChange processing"}, "limitCommands": {"default": "false", "type": "Boolean", "description": "Should the Editor limit the allowed execCommands to the ones available in the toolbar. If true, then execCommand and keyboard shortcuts will fail if they are not defined in the toolbar."}, "panel": {"default": "false", "type": "Boolean", "description": "A reference to the panel we are using for windows."}, "insert": {"default": "false", "type": "Boolean", "description": "If true, selection is not required for: fontname, fontsize, forecolor, backcolor."}, "nodeChangeDelay": {"default": "true", "type": "Boolean", "description": "Do we wrap the nodeChange method in a timeout for performance. Default: true."}, "textarea": {"default": "null", "depreciated": "- No longer used, should use this.get('element')", "type": "HTMLElement", "description": "Internal config for holding the textarea element (replaced with element).", "private": ""}, "plainText": {"default": "false", "type": "Boolean", "description": "Process the inital textarea data as if it was plain text. Accounting for spaces, tabs and line feeds."}, "markup": {"default": "\"semantic\"", "type": "String", "description": "Should we try to adjust the markup for the following types: semantic, css, default or xhtml"}, "html": {"default": "This HTML requires a few things if you are to override:\n<p><code>{TITLE}, {CSS}, {HIDDEN_CSS}, {EXTRA_CSS}</code> and <code>{CONTENT}</code> need to be there, they are passed to YAHOO.lang.substitute to be replace with other strings.<p>\n<p><code>onload=\"document.body._rteLoaded = true;\"</code> : the onload statement must be there or the editor will not finish loading.</p>\n<code>\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{TITLE}&lt;/title&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;style&gt;\n{CSS}\n&lt;/style&gt;\n&lt;style&gt;\n{HIDDEN_CSS}\n&lt;/style&gt;\n&lt;style&gt;\n{EXTRA_CSS}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body onload=\"document.body._rteLoaded = true;\"&gt;\n{CONTENT}\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</code>", "type": "String", "description": "The default HTML to be written to the iframe document before the contents are loaded (Note that the DOCTYPE attr will be added at render item)"}, "dompath": {"default": "false", "type": "Boolean", "description": "Toggle the display of the current Dom path below the editor"}, "iframe": {"default": "null", "type": "HTMLElement", "description": "Internal config for holding the iframe element.", "private": ""}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The textarea element to turn into an editor."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}], "namespace": "YAHOO.widget", "module": "editor", "events": {"markupChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "markupChange", "description": "Fires when the value for the configuration attribute 'markup' changes."}, "beforeBlankimageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBlankimageChange", "description": "Fires before the value for the configuration attribute 'blankimage' changes. Return false to cancel the attribute change."}, "editorKeyUp": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "htmlChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "htmlChange", "description": "Fires when the value for the configuration attribute 'html' changes."}, "heightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' changes."}, "dompathChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dompathChange", "description": "Fires when the value for the configuration attribute 'dompath' changes."}, "beforeFocusAtStartChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFocusAtStartChange", "description": "Fires before the value for the configuration attribute 'focusAtStart' changes. Return false to cancel the attribute change."}, "beforeEditorMouseDown": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "beforeDisabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDisabledChange", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "toolbarLoaded": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired during the render process directly after the Toolbar is loaded. Allowing you to attach events to the toolbar. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeToolbarChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeToolbarChange", "description": "Fires before the value for the configuration attribute 'toolbar' changes. Return false to cancel the attribute change."}, "editorMouseDown": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeightChange", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "editorDoubleClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeHtmlChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHtmlChange", "description": "Fires before the value for the configuration attribute 'html' changes. Return false to cancel the attribute change."}, "afterRender": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired after the render process finishes. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "cssChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "cssChange", "description": "Fires when the value for the configuration attribute 'css' changes."}, "editorWindowFocus": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the iframe is focused. Note, this is window focus event, not an Editor focus event."}, "afterExecCommand": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the end of the execCommand process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeEditorKeyPress": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "beforeEditorMouseUp": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "beforeEditorKeyDown": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "beforeWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWidthChange", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "beforeCssChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCssChange", "description": "Fires before the value for the configuration attribute 'css' changes. Return false to cancel the attribute change."}, "editorKeyDown": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeMarkupChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMarkupChange", "description": "Fires before the value for the configuration attribute 'markup' changes. Return false to cancel the attribute change."}, "beforeExtracssChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeExtracssChange", "description": "Fires before the value for the configuration attribute 'extracss' changes. Return false to cancel the attribute change."}, "beforeEditorKeyUp": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "removeLineBreaksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "removeLineBreaksChange", "description": "Fires when the value for the configuration attribute 'removeLineBreaks' changes."}, "beforeDompathChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDompathChange", "description": "Fires before the value for the configuration attribute 'dompath' changes. Return false to cancel the attribute change."}, "editorClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "animateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animateChange", "description": "Fires when the value for the configuration attribute 'animate' changes."}, "focusAtStartChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "focusAtStartChange", "description": "Fires when the value for the configuration attribute 'focusAtStart' changes."}, "beforeExecCommand": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the beginning of the execCommand process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "toolbarChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "toolbarChange", "description": "Fires when the value for the configuration attribute 'toolbar' changes."}, "disabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "blankimageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "blankimageChange", "description": "Fires when the value for the configuration attribute 'blankimage' changes."}, "beforeEditorDoubleClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "editorMouseUp": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeAnimateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimateChange", "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change."}, "editorContentLoaded": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired after the editor iframe's document fully loads and fires it's onload event. From here you can start injecting your own things into the document. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeRemoveLineBreaksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRemoveLineBreaksChange", "description": "Fires before the value for the configuration attribute 'removeLineBreaks' changes. Return false to cancel the attribute change."}, "beforeEditorClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Fires before editor event, returning false will stop the internal processing."}, "cleanHTML": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired after the cleanHTML method is called."}, "beforeHandleSubmitChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHandleSubmitChange", "description": "Fires before the value for the configuration attribute 'handleSubmit' changes. Return false to cancel the attribute change."}, "extracssChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "extracssChange", "description": "Fires when the value for the configuration attribute 'extracss' changes."}, "editorKeyPress": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "handleSubmitChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "handleSubmitChange", "description": "Fires when the value for the configuration attribute 'handleSubmit' changes."}, "beforeNodeChange": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the beginning of the nodeChange process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "afterNodeChange": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the end of the nodeChange process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "editorWindowBlur": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the iframe is blurred. Note, this is window blur event, not an Editor blur event."}, "widthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' changes."}}, "guessedname": "SimpleEditor", "methods": {"_setCurrentEvent": {"guessedname": "_setCurrentEvent", "params": [{"type": "Event", "name": "ev", "description": " The event to cache"}], "description": "Sets the current event property", "private": "", "guessedtype": "function"}, "show": {"description": "This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none.", "guessedname": "show", "guessedtype": "function"}, "focus": {"description": "Attempt to set the focus of the iframes window.", "guessedname": "focus", "guessedtype": "function"}, "cmd_inserthtml": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.", "guessedname": "cmd_inserthtml", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the editor."}], "description": "Initializes all of the configuration attributes used to create \nthe editor.", "guessedname": "initAttributes", "guessedtype": "function"}, "cmd_bold": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('bold') is used.", "guessedname": "cmd_bold", "guessedtype": "function"}, "filter_invalid_lists": {"params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters invalid ol and ul list markup, converts this: <li></li><ol>..</ol> to this: <li></li><li><ol>..</ol></li>", "guessedname": "filter_invalid_lists", "guessedtype": "function"}, "_checkLoaded": {"guessedname": "_checkLoaded", "params": [{"type": "Boolean", "name": "raw", "description": " Don't add events."}], "description": "Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.", "private": "", "guessedtype": "function"}, "_removeEditorEvents": {"description": "This method removes the listeners on the Editors document (for disabling).", "private": "", "guessedname": "_removeEditorEvents", "guessedtype": "function"}, "_toggleDesignMode": {"guessedname": "_toggleDesignMode", "return": {"type": "String", "description": "The state that it was set to."}, "description": "Toggles the designMode property of the iFrame document on and off.", "private": "", "guessedtype": "function"}, "_setupDD": {"description": "Sets up the DD instance used from the 'drag' config option.", "private": "", "guessedname": "_setupDD", "guessedtype": "function"}, "render": {"description": "Calls the private method _render in a setTimeout to allow for other things on the page to continue to load.", "guessedname": "render", "guessedtype": "function"}, "_handleAfterNodeChange": {"description": "Fires after a nodeChange happens to setup the things that where reset on the node change (button state).", "private": "", "guessedname": "_handleAfterNodeChange", "guessedtype": "function"}, "_fixListDupIds": {"description": "Some browsers will duplicate the id of an LI when created in designMode.\nThis method will fix the duplicate id issue. However it will only preserve the first element \nin the document list with the unique id.", "private": "", "guessedname": "_fixListDupIds", "guessedtype": "function"}, "init": {"description": "The Editor class' initialization method", "guessedname": "init", "guessedtype": "function"}, "closeWindow": {"description": "Override Method for Advanced Editor", "guessedname": "closeWindow", "guessedtype": "function"}, "_handleFormSubmit": {"guessedname": "_handleFormSubmit", "params": [{"type": "Object", "name": "ev", "description": " The Form Submit Event"}], "description": "Handles the form submission.", "private": "", "guessedtype": "function"}, "_handleMouseDown": {"guessedname": "_handleMouseDown", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all mousedown events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_handleFocus": {"guessedname": "_handleFocus", "params": [{"type": "Event", "name": "e", "description": " The DOM Event"}], "description": "Handles the focus of the iframe. Note, this is window focus event, not an Editor focus event.", "private": "", "guessedtype": "function"}, "_handleFontSize": {"guessedname": "_handleFontSize", "params": [{"type": "Object", "name": "o", "description": " Object returned from Toolbar's buttonClick Event"}], "description": "Handles the font size button in the toolbar.", "private": "", "guessedtype": "function"}, "_initEditorEvents": {"description": "This method sets up the listeners on the Editors document.", "private": "", "guessedname": "_initEditorEvents", "guessedtype": "function"}, "nodeChange": {"params": [{"type": "Boolean", "name": "force", "description": " Optional paramenter to skip the threshold counter"}], "description": "Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.", "guessedname": "nodeChange", "guessedtype": "function"}, "_updateMenuChecked": {"guessedname": "_updateMenuChecked", "params": [{"type": "Object", "name": "button", "description": " The command identifier of the button you want to check"}, {"type": "String", "name": "value", "description": " The value of the menu item you want to check"}, {"type": "<a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar</a>", "name": "The", "description": " Toolbar instance the button belongs to (defaults to this.toolbar)"}], "description": "Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.", "private": "", "guessedtype": "function"}, "_cleanClassName": {"return": {"type": "String", "description": ""}, "description": "Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.", "private": "", "params": [{"type": "String", "name": "str", "description": " The classname to clean up"}], "guessedname": "_cleanClassName", "guessedtype": "function"}, "_setDesignMode": {"guessedname": "_setDesignMode", "params": [{"type": "String", "name": "state", "description": " This should be either on or off"}], "description": "Sets the designMode property of the iFrame document's body.", "private": "", "guessedtype": "function"}, "cmd_fontname": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.", "guessedname": "cmd_fontname", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all mouseup events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_render": {"description": "Causes the toolbar and the editor to render and replace the textarea.", "private": "", "guessedname": "_render", "guessedtype": "function"}, "_getSelection": {"guessedname": "_getSelection", "return": {"type": "Object", "description": "Selection Object"}, "description": "Handles the different selection objects across the A-Grade list.", "private": "", "guessedtype": "function"}, "_createIframe": {"return": {"type": "Object", "description": "iFrame object"}, "description": "_createIframe", "private": "", "params": [{"type": "String", "name": "id", "description": " The string ID to prefix the iframe with"}], "guessedname": "_createIframe", "guessedtype": "function"}, "cmd_forecolor": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.", "guessedname": "cmd_forecolor", "guessedtype": "function"}, "_handleBlur": {"guessedname": "_handleBlur", "params": [{"type": "Event", "name": "e", "description": " The DOM Event"}], "description": "Handles the blur of the iframe. Note, this is window blur event, not an Editor blur event.", "private": "", "guessedtype": "function"}, "_getDoc": {"guessedname": "_getDoc", "return": {"type": "Object", "description": ""}, "description": "Get the Document of the IFRAME", "private": "", "guessedtype": "function"}, "filter_all_rgb": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " str The HTML string to filter"}], "description": "Converts all RGB color strings found in passed string to a hex color, example: style=\"color: rgb(0, 255, 0)\" converts to style=\"color: #00ff00\"", "guessedname": "filter_all_rgb", "guessedtype": "function"}, "cmd_italic": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('italic') is used.", "guessedname": "cmd_italic", "guessedtype": "function"}, "_handleInsertImageWindowClose": {"description": "Handles the closing of the Image Properties Window.", "private": "", "guessedname": "_handleInsertImageWindowClose", "guessedtype": "function"}, "_handleToolbarClick": {"guessedname": "_handleToolbarClick", "params": [{"type": "Event", "name": "ev", "description": " The event that triggered the button click"}], "description": "This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.", "private": "", "guessedtype": "function"}, "filter_rgb": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " css The CSS string containing rgb(#,#,#);"}], "description": "Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00", "guessedname": "filter_rgb", "guessedtype": "function"}, "cmd_createlink": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.", "guessedname": "cmd_createlink", "guessedtype": "function"}, "cmd_insertorderedlist": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.", "guessedname": "cmd_insertorderedlist", "guessedtype": "function"}, "_disableEditor": {"guessedname": "_disableEditor", "params": [{"type": "Boolean", "name": "disabled", "description": " Pass true to disable, false to enable"}], "description": "Creates a mask to place over the Editor.", "private": "", "guessedtype": "function"}, "cmd_insertunorderedlist": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.", "guessedname": "cmd_insertunorderedlist", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the editor.", "guessedname": "toString", "guessedtype": "function"}, "cmd_insertimage": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.", "guessedname": "cmd_insertimage", "guessedtype": "function"}, "getEditorHTML": {"description": "Gets the unprocessed/unfiltered HTML from the editor", "guessedname": "getEditorHTML", "guessedtype": "function"}, "saveHTML": {"return": {"type": "", "description": "String"}, "description": "Cleans the HTML with the cleanHTML method then places that string back into the textarea.", "guessedname": "saveHTML", "guessedtype": "function"}, "_setupAfterElement": {"description": "Creates the accessibility h2 header and places it after the iframe in the Dom for navigation.", "private": "", "guessedname": "_setupAfterElement", "guessedtype": "function"}, "cmd_underline": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('underline') is used.", "guessedname": "cmd_underline", "guessedtype": "function"}, "_getDomPath": {"return": {"type": "Array", "description": "An array of node references that will create the DOM Path."}, "description": "This method will attempt to build the DOM path from the currently selected element.", "private": "", "params": [{"type": "", "name": "HTMLElement", "description": " el The element to start with, if not provided _getSelectedElement is used"}], "guessedname": "_getDomPath", "guessedtype": "function"}, "_hasParent": {"return": {"type": "", "description": "HTMLElement"}, "description": "_hasParent", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "tag", "description": " The tag that the element needs to be"}], "guessedname": "_hasParent", "guessedtype": "function"}, "_listFix": {"guessedname": "_listFix", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles the Enter key, Tab Key and Shift + Tab keys for List Items.", "private": "", "guessedtype": "function"}, "_createCurrentElement": {"guessedname": "_createCurrentElement", "params": [{"type": "String", "name": "tagName", "description": " (optional defaults to a) The tagname of the element that you wish to create"}, {"type": "Object", "name": "tagStyle", "description": " (optional) Object literal containing styles to apply to the new element."}], "description": "This is a work around for the various browser issues with execCommand. This method will run <code>execCommand('fontname', false, 'yui-tmp')</code> on the given selection.\nIt will then search the document for an element with the font-family set to <strong>yui-tmp</strong> and replace that with another span that has other information in it, then assign the new span to the \n<code>this.currentElement</code> array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.", "private": "", "guessedtype": "function"}, "_focusWindow": {"guessedname": "_focusWindow", "depreciated": "- This should not be used, moved to this.focus();", "description": "Attempt to set the focus of the iframes window.", "private": "", "guessedtype": "function"}, "_handleKeyDown": {"guessedname": "_handleKeyDown", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all keydown events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_closeWindow": {"description": "Override Method for Advanced Editor", "private": "", "guessedname": "_closeWindow", "guessedtype": "function"}, "_nodeChange": {"guessedname": "_nodeChange", "params": [{"type": "Boolean", "name": "force", "description": " Optional paramenter to skip the threshold counter"}], "description": "Fired from nodeChange in a setTimeout.", "private": "", "guessedtype": "function"}, "_fixNodes": {"description": "Fix href and imgs as well as remove invalid HTML.", "private": "", "guessedname": "_fixNodes", "guessedtype": "function"}, "setEditorHTML": {"params": [{"type": "String", "name": "incomingHTML", "description": " The html content to load into the editor"}], "description": "Loads HTML into the editors body", "guessedname": "setEditorHTML", "guessedtype": "function"}, "_cleanIncomingHTML": {"return": {"type": "String", "description": "The filtered HTML"}, "params": [{"type": "String", "name": "html", "description": " The unfiltered HTML"}], "description": "Process the HTML with a few regexes to clean it up and stabilize the input", "guessedname": "_cleanIncomingHTML", "guessedtype": "function"}, "_isLocalFile": {"guessedname": "_isLocalFile", "params": [{"type": "String", "name": "url", "description": " THe url/string to check"}], "description": "Checks to see if a string (href or img src) is possibly a local file reference..", "private": "", "guessedtype": "function"}, "_swapEl": {"guessedname": "_swapEl", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to swap with"}, {"type": "String", "name": "tagName", "description": " The tagname of the element that you wish to create"}, {"type": "Function", "name": "callback", "description": " (optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function."}], "description": "This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.", "private": "", "guessedtype": "function"}, "openWindow": {"description": "Override Method for Advanced Editor", "guessedname": "openWindow", "guessedtype": "function"}, "pre_filter_linebreaks": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML to filter"}, {"type": "", "name": "String", "description": " markup The markup type to filter to"}], "description": "HTML Pre Filter", "guessedname": "pre_filter_linebreaks", "guessedtype": "function"}, "_getSelectedElement": {"guessedname": "_getSelectedElement", "return": {"type": "HTMLElement", "description": "The currently selected element."}, "description": "This method will attempt to locate the element that was last interacted with, either via selection, location or event.", "private": "", "guessedtype": "function"}, "clearEditorDoc": {"description": "Clear the doc of the Editor", "guessedname": "clearEditorDoc", "guessedtype": "function"}, "_handleInsertImageClick": {"description": "Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.", "private": "", "guessedname": "_handleInsertImageClick", "guessedtype": "function"}, "_handleKeyPress": {"guessedname": "_handleKeyPress", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all keypress events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_hasSelection": {"guessedname": "_hasSelection", "return": {"type": "Boolean", "description": ""}, "description": "Determines if there is a selection in the editor document.", "private": "", "guessedtype": "function"}, "_handleColorPicker": {"guessedname": "_handleColorPicker", "params": [{"type": "Object", "name": "o", "description": " Object returned from Toolbar's buttonClick Event"}], "description": "Handles the colorpicker buttons in the toolbar.", "private": "", "guessedtype": "function"}, "_selectNode": {"guessedname": "_selectNode", "params": [{"type": "HTMLElement", "name": "node", "description": " The node to select"}], "description": "Places the highlight around a given node", "private": "", "guessedtype": "function"}, "_handleAutoHeight": {"description": "Handles resizing the editor's height based on the content", "private": "", "guessedname": "_handleAutoHeight", "guessedtype": "function"}, "_handleAlign": {"guessedname": "_handleAlign", "params": [{"type": "Object", "name": "o", "description": " Object returned from Toolbar's buttonClick Event"}], "description": "Handles the alignment buttons in the toolbar.", "private": "", "guessedtype": "function"}, "cmd_backcolor": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.", "guessedname": "cmd_backcolor", "guessedtype": "function"}, "moveWindow": {"description": "Override Method for Advanced Editor", "guessedname": "moveWindow", "guessedtype": "function"}, "cleanHTML": {"return": {"type": "String", "description": "The filtered HTML"}, "params": [{"type": "String", "name": "html", "description": " The unfiltered HTML"}], "description": "Process the HTML with a few regexes to clean it up and stabilize the output", "guessedname": "cleanHTML", "guessedtype": "function"}, "_createInsertElement": {"return": {"type": "HTMLElement", "description": ""}, "description": "Creates a new \"currentElement\" then adds some text (and other things) to make it selectable and stylable. Then the user can continue typing.", "private": "", "params": [{"type": "Object", "name": "css", "description": " (optional) Object literal containing styles to apply to the new element."}], "guessedname": "_createInsertElement", "guessedtype": "function"}, "_isNonEditable": {"return": {"type": "", "description": "Boolean"}, "description": "Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.\nIf it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also\ndisable and enable the Editor's toolbar based on the noedit state.", "private": "", "params": [{"type": "", "name": "Event", "description": " ev The Dom event being checked"}], "guessedname": "_isNonEditable", "guessedtype": "function"}, "_isElement": {"return": {"type": "Boolean", "description": ""}, "description": "_isElement", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "tag", "description": " The tag that the element needs to be"}], "guessedname": "_isElement", "guessedtype": "function"}, "_initEditor": {"guessedname": "_initEditor", "params": [{"type": "Boolean", "name": "raw", "description": " Don't add events."}], "description": "This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.", "private": "", "guessedtype": "function"}, "_handleKeyUp": {"guessedname": "_handleKeyUp", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all keyup events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_handleFormButtonClick": {"guessedname": "_handleFormButtonClick", "params": [{"type": "Event", "name": "ev", "description": " The click event"}], "description": "The click listener assigned to each submit button in the Editor's parent form.", "private": "", "guessedtype": "function"}, "_handleCreateLinkClick": {"description": "Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked.", "private": "", "guessedname": "_handleCreateLinkClick", "guessedtype": "function"}, "_getBlankImage": {"guessedname": "_getBlankImage", "return": {"type": "String", "description": "The URL to the blank image"}, "description": "Retrieves the full url of the image to use as the blank image.", "private": "", "guessedtype": "function"}, "_setMarkupType": {"guessedname": "_setMarkupType", "params": [{"type": "String", "name": "action", "description": " The action to take. Possible values are: css, default or semantic"}], "description": "This method will turn on/off the useCSS execCommand.", "private": "", "guessedtype": "function"}, "filter_safari": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters strings specific to Safari", "guessedname": "filter_safari", "guessedtype": "function"}, "destroy": {"return": {"type": "Boolean", "description": ""}, "description": "Destroys the editor, all of it's elements and objects.", "guessedname": "destroy", "guessedtype": "function"}, "_handleCreateLinkWindowClose": {"description": "Handles the closing of the Link Properties Window.", "private": "", "guessedname": "_handleCreateLinkWindowClose", "guessedtype": "function"}, "filter_internals": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters internal RTE strings and bogus attrs we don't want", "guessedname": "filter_internals", "guessedtype": "function"}, "cmd_list": {"params": [{"type": "", "name": "tag", "description": " The tag of the list you want to create (eg, ul or ol)"}], "description": "This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.", "guessedname": "cmd_list", "guessedtype": "function"}, "cmd_fontsize": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.", "guessedname": "cmd_fontsize", "guessedtype": "function"}, "_setInitialContent": {"guessedname": "_setInitialContent", "params": [{"type": "Boolean", "name": "raw", "description": " Don't add events."}], "description": "This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.", "private": "", "guessedtype": "function"}, "_handleDoubleClick": {"guessedname": "_handleDoubleClick", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all doubleclick events inside the iFrame document.", "private": "", "guessedtype": "function"}, "filter_msword": {"params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters out msword html attributes and other junk. Activate with filterWord: true in config", "guessedname": "filter_msword", "guessedtype": "function"}, "hide": {"description": "This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows.", "guessedname": "hide", "guessedtype": "function"}, "post_filter_linebreaks": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML to filter"}, {"type": "", "name": "String", "description": " markup The markup type to filter to"}], "description": "HTML Pre Filter", "guessedname": "post_filter_linebreaks", "guessedtype": "function"}, "cmd_unlink": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.", "guessedname": "cmd_unlink", "guessedtype": "function"}, "_getWindow": {"guessedname": "_getWindow", "return": {"type": "Object", "description": ""}, "description": "Get the Window of the IFRAME", "private": "", "guessedtype": "function"}, "_writeDomPath": {"description": "Write the current DOM path out to the dompath container below the editor.", "private": "", "guessedname": "_writeDomPath", "guessedtype": "function"}, "_handleClick": {"guessedname": "_handleClick", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all click events inside the iFrame document.", "private": "", "guessedtype": "function"}, "execCommand": {"params": [{"type": "String", "name": "action", "description": " The \"execCommand\" action to try to execute (Example: bold, insertimage, inserthtml)"}, {"type": "String", "name": "value", "description": " (optional) The value for a given action such as action: fontname value: 'Verdana'"}], "description": "This method attempts to try and level the differences in the various browsers and their support for execCommand actions", "guessedname": "execCommand", "guessedtype": "function"}, "_checkKey": {"return": {"type": "Boolean", "description": ""}, "description": "Checks a keyMap entry against a key event", "private": "", "params": [{"type": "Object", "name": "k", "description": " The _keyMap object"}, {"type": "Event", "name": "e", "description": " The Mouse Event"}], "guessedname": "_checkKey", "guessedtype": "function"}, "_getRange": {"guessedname": "_getRange", "return": {"type": "Object", "description": "Range Object"}, "description": "Handles the different range objects across the A-Grade list.", "private": "", "guessedtype": "function"}, "_setupResize": {"description": "Creates the Resize instance and binds its events.", "private": "", "guessedname": "_setupResize", "guessedtype": "function"}, "_setEditorStyle": {"params": [{"type": "Booleen", "name": "stat", "description": " True/False"}], "description": "Set the editor to use CSS instead of HTML", "guessedname": "_setEditorStyle", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "simple-editor.js", "guessedtype": "function", "shortname": "SimpleEditor", "properties": {"CLASS_EDITABLE_CONT": {"protected": "", "type": "String", "description": "Default CSS class to apply to the editors iframe's parent element", "guessedname": "CLASS_EDITABLE_CONT", "guessedtype": "property"}, "_alwaysDisabled": {"guessedname": "_alwaysDisabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.", "private": "", "guessedtype": "property"}, "_blankImageLoaded": {"guessedname": "_blankImageLoaded", "type": "Boolean", "description": "Don't load the blank image more than once..", "private": "", "guessedtype": "property"}, "_showingHiddenElements": {"guessedname": "_showingHiddenElements", "type": "Boolean", "description": "Status of the hidden elements button", "private": "", "guessedtype": "property"}, "afterElement": {"type": "HTMLElement", "description": "A reference to the H2 placed after the editor for Accessibilty.", "guessedname": "afterElement", "guessedtype": "property"}, "CLASS_EDITABLE": {"protected": "", "type": "String", "description": "Default CSS class to apply to the editors iframe element", "guessedname": "CLASS_EDITABLE", "guessedtype": "property"}, "_baseHREF": {"guessedname": "_baseHREF", "type": "String", "description": "The base location of the editable page (this page) so that relative paths for image work.", "private": "", "guessedtype": "function"}, "operaEvent": {"guessedname": "operaEvent", "type": "Object", "description": "setTimeout holder for Opera and Image DoubleClick event..", "private": "", "guessedtype": "property"}, "SEP_DOMPATH": {"type": "String", "description": "The value to place in between the Dom path items", "guessedname": "SEP_DOMPATH", "guessedtype": "property"}, "_selection": {"guessedname": "_selection", "type": "Object", "description": "Holder for caching iframe selections", "private": "", "guessedtype": "property"}, "STR_BEFORE_EDITOR": {"type": "String", "description": "The accessibility string for the element before the iFrame", "guessedname": "STR_BEFORE_EDITOR", "guessedtype": "property"}, "_defaultCSS": {"type": "String", "description": "The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }", "guessedname": "_defaultCSS", "guessedtype": "property"}, "_formButtons": {"guessedname": "_formButtons", "type": "Array", "description": "Array of buttons that are in the Editor's parent form (for handleSubmit)", "private": "", "guessedtype": "property"}, "DOMReady": {"guessedname": "DOMReady", "type": "Boolean", "description": "Flag to determine if DOM is ready or not", "private": "", "guessedtype": "property"}, "_tag2cmd": {"guessedname": "_tag2cmd", "type": "Object", "description": "A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button.", "private": "", "guessedtype": "property"}, "_resizeConfig": {"private": "", "description": "The default config for the Resize Utility", "guessedname": "_resizeConfig", "guessedtype": "property"}, "_lastNodeChangeEvent": {"guessedname": "_lastNodeChangeEvent", "type": "Event", "description": "Flag to determine the last event that fired a node change", "private": "", "guessedtype": "property"}, "STOP_NODE_CHANGE": {"protected": "", "type": "Boolean", "description": "Set to true when you want the default nodeChange function to not process anything", "guessedname": "STOP_NODE_CHANGE", "guessedtype": "property"}, "_textarea": {"type": "Boolean", "description": "Flag to determine if we are using a textarea or an HTML Node.", "guessedname": "_textarea", "guessedtype": "property"}, "currentEvent": {"type": "Event", "description": "A reference to the current editor event", "guessedname": "currentEvent", "guessedtype": "property"}, "STR_TITLE": {"type": "String", "description": "The Title of the HTML document that is created in the iFrame", "guessedname": "STR_TITLE", "guessedtype": "property"}, "_rendered": {"guessedname": "_rendered", "type": "Boolean", "description": "Flag to determine if editor has been rendered or not", "private": "", "guessedtype": "property"}, "STR_LINK_URL": {"type": "String", "description": "The label string for the Link URL.", "guessedname": "STR_LINK_URL", "guessedtype": "property"}, "CLASS_PREFIX": {"protected": "", "type": "String", "description": "Default prefix for dynamically created class names", "guessedname": "CLASS_PREFIX", "guessedtype": "property"}, "CLASS_NOEDIT": {"protected": "", "type": "String", "description": "CSS class applied to elements that are not editable.", "guessedname": "CLASS_NOEDIT", "guessedtype": "property"}, "_fixListRunning": {"guessedname": "_fixListRunning", "type": "Boolean", "description": "Keeps more than one _fixListDupIds from running at the same time.", "private": "", "guessedtype": "property"}, "toolbar": {"type": "<a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar</a>", "description": "Local property containing the <a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar</a> instance", "guessedname": "toolbar", "guessedtype": "property"}, "editorDirty": {"type": "Boolean", "description": "This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed.", "guessedname": "editorDirty", "guessedtype": "property"}, "_semantic": {"guessedname": "_semantic", "type": "Object", "description": "The Toolbar commands that we should attempt to make tags out of instead of using styles.", "private": "", "guessedtype": "property"}, "_alwaysEnabled": {"guessedname": "_alwaysEnabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.", "private": "", "guessedtype": "property"}, "_contentTimerCounter": {"guessedname": "_contentTimerCounter", "type": "Number", "description": "Counter to check the number of times the body is polled for before giving up", "private": "", "guessedtype": "property"}, "_disabled": {"guessedname": "_disabled", "type": "Array", "description": "The Toolbar items that should be disabled if there is no selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_LEAVE_EDITOR": {"type": "String", "description": "The accessibility string for the element after the iFrame", "guessedname": "STR_LEAVE_EDITOR", "guessedtype": "property"}, "_lastImage": {"guessedname": "_lastImage", "type": "HTMLElement", "description": "Safari reference for the last image selected (for styling as selected).", "private": "", "guessedtype": "property"}, "_lastButton": {"guessedname": "_lastButton", "type": "Object", "description": "The last button pressed, so we don't disable it.", "private": "", "guessedtype": "property"}, "dd": {"type": "YAHOO.util.DD/YAHOO.util.DDProxy", "description": "A reference to the DragDrop object.", "guessedname": "dd", "guessedtype": "property"}, "currentFont": {"type": "HTMLElement", "description": "A reference to the last font selected from the Toolbar", "guessedname": "currentFont", "guessedtype": "property"}, "_lastNodeChange": {"guessedname": "_lastNodeChange", "type": "Date", "description": "Flag to determine when the last node change was fired", "private": "", "guessedtype": "property"}, "_nodeChangeTimer": {"guessedname": "_nodeChangeTimer", "type": "Number", "description": "Holds a reference to the nodeChange setTimeout call", "private": "", "guessedtype": "property"}, "_fixNodesTimer": {"guessedname": "_fixNodesTimer", "type": "Date", "description": "Holder for the fixNodes timer", "private": "", "guessedtype": "property"}, "_contentTimerMax": {"private": "", "description": "The number of times the loaded content should be checked before giving up. Default: 500", "guessedname": "_contentTimerMax", "guessedtype": "property"}, "currentWindow": {"type": "Object", "description": "A reference to the currently open EditorWindow", "guessedname": "currentWindow", "guessedtype": "property"}, "currentElement": {"type": "Array", "description": "A reference to the current working element in the editor", "guessedname": "currentElement", "guessedtype": "property"}, "_nodeChangeDelayTimer": {"guessedname": "_nodeChangeDelayTimer", "type": "Number", "description": "Holds a reference to the nodeChangeDelay setTimeout call", "private": "", "guessedtype": "property"}, "CLASS_CONTAINER": {"protected": "", "type": "String", "description": "Default CSS class to apply to the editors container element", "guessedname": "CLASS_CONTAINER", "guessedtype": "property"}, "_keyMap": {"guessedname": "_keyMap", "type": "{Object/Mixed}", "description": "Named key maps for various actions in the Editor. Example: <code>CLOSE_WINDOW: { key: 87, mods: ['shift', 'ctrl'] }</code>. \nThis entry shows that when key 87 (W) is found with the modifiers of shift and control, the window will close. You can customize this object to tweak keyboard shortcuts.", "private": "", "guessedtype": "property"}, "_formButtonClicked": {"guessedname": "_formButtonClicked", "type": "HTMLElement", "description": "The form button that was clicked to submit the form.", "private": "", "guessedtype": "property"}, "resize": {"type": "YAHOO.util.Resize", "description": "A reference to the Resize object", "guessedname": "resize", "guessedtype": "property"}, "_docType": {"type": "String", "description": "The DOCTYPE to use in the editable container.", "guessedname": "_docType", "guessedtype": "property"}, "STR_IMAGE_URL": {"type": "String", "description": "The label string for Image URL", "guessedname": "STR_IMAGE_URL", "guessedtype": "property"}, "STR_IMAGE_HERE": {"type": "String", "description": "The text to place in the URL textbox when using the blankimage.", "guessedname": "STR_IMAGE_HERE", "guessedtype": "property"}, "_lastCommand": {"guessedname": "_lastCommand", "type": "String", "description": "A cache of the last execCommand (used for Undo/Redo so they don't mark an undo level)", "private": "", "guessedtype": "property"}, "_mask": {"guessedname": "_mask", "type": "Object", "description": "DOM Element holder for the editor Mask when disabled", "private": "", "guessedtype": "property"}, "dompath": {"type": "HTMLElement", "description": "A reference to the dompath container for writing the current working dom path to.", "guessedname": "dompath", "guessedtype": "property"}, "beforeElement": {"type": "HTMLElement", "description": "A reference to the H2 placed before the editor for Accessibilty.", "guessedname": "beforeElement", "guessedtype": "property"}, "STOP_EXEC_COMMAND": {"protected": "", "type": "Boolean", "description": "Set to true when you want the default execCommand function to not process anything", "guessedname": "STOP_EXEC_COMMAND", "guessedtype": "property"}, "_contentTimer": {"private": "", "description": "setTimeout holder for documentReady check", "guessedname": "_contentTimer", "guessedtype": "property"}, "_focused": {"guessedname": "_focused", "type": "Boolean", "description": "Holder for trapping focus/blur state and prevent double events", "private": "", "guessedtype": "property"}, "_defaultToolbar": {"guessedname": "_defaultToolbar", "type": "Object", "description": "Default toolbar config.", "private": "", "guessedtype": "property"}, "invalidHTML": {"type": "Object", "description": "Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to \"{ keepContents: true }\", then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine.", "guessedname": "invalidHTML", "guessedtype": "property"}, "browser": {"type": "Object", "description": "Standard browser detection", "guessedname": "browser", "guessedtype": "function"}}, "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}, "YAHOO.util.Get": {"name": "YAHOO.util.Get", "namespace": "YAHOO.util", "module": "get", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"guessedname": "_finalize", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}], "description": "Called by the the helper for detecting script load in Safari", "private": "", "guessedtype": "function"}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onFailure</dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted successfully</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onTimeout</dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>scope</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>autopurge</dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n</dd>\n<dt>varName</dt>\n<dd>\nvariable that should be available when a script is finished\nloading.  Used to help Safari 2.x and below with script load \ndetection.  The type of this property should match what was\npassed into the url parameter: if loading a single url, a\nstring can be supplied.  If loading multiple scripts, you\nmust supply an array that contains the variable name for\neach script.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n</dl>\n<dt>charset</dt>\n<dd>Node charset, deprecated, use 'attributes'</dd>\n<dt>attributes</dt>\n<dd>A hash of attributes to apply to dynamic nodes.</dd>\n<dt>timeout</dt>\n<dd>Number of milliseconds to wait before aborting and firing the timeout event</dd>\n<pre>\n// assumes yahoo, dom, and event are already on the page\n&nbsp;&nbsp;YAHOO.util.Get.script(\n&nbsp;&nbsp;[\"http://yui.yahooapis.com/2.7.0/build/dragdrop/dragdrop-min.js\",\n&nbsp;&nbsp;&nbsp;\"http://yui.yahooapis.com/2.7.0/build/animation/animation-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(o.data); // foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new YAHOO.util.DDProxy(\"dd1\"); // also new o.reference(\"dd1\"); would work\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because YAHOO is the scope\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) // true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// o.purge(); // optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, // 10 second timeout\n&nbsp;&nbsp;&nbsp;&nbsp;scope: YAHOO,\n&nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&#125;);\n</pre>"}]}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"guessedname": "_queue", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"params": [{"type": "string|object", "name": "either", "description": " the tId or the object returned from\nscript() or css()"}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"guessedname": "_next", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "description": "Loads the next item for a given request", "private": "", "guessedtype": "function"}, "_timeout": {"guessedname": "_timeout", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "Timeout detected", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win</dl>\n<dd>the window the link nodes(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>scope</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n<dt>charset</dt>\n<dd>Node charset, deprecated, use 'attributes'</dd>\n<dt>attributes</dt>\n<dd>A hash of attributes to apply to dynamic nodes.</dd>\n</dl>\n<pre>\nYAHOO.util.Get.css(\"http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css\");\n</pre>\n<pre>\nYAHOO.util.Get.css([\"http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css\",\n\"http://yui.yahooapis.com/2.7.0/build/logger/assets/skins/sam/logger.css\"]);\n</pre>"}]}}, "file": "Get.js", "guessedtype": "function", "shortname": "Get", "properties": {"POLL_FREQ": {"description": "The default poll freqency in ms, when needed", "default": "10", "static": "", "guessedname": "POLL_FREQ", "guessedtype": "property", "type": "int"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}, "TIMEOUT": {"description": "The length time to poll for varName when loading a script in\nSafari 2.x before the transaction fails.\nproperty TIMEOUT", "default": "2000", "static": "", "guessedname": "TIMEOUT", "guessedtype": "property", "type": "int"}, "nidx": {"guessedname": "nidx", "type": "int", "description": "node index used to generate unique node ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH", "default": "20", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "YAHOO.widget.BaseCellEditor": {"name": "YAHOO.widget.BaseCellEditor", "constructors": [{"params": [{"type": "String", "name": "sType", "description": "  Type indicator, to map to YAHOO.widget.DataTable.Editors."}, {"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The BaseCellEditor class provides base functionality common to all inline cell\neditors for a DataTable widget."}], "namespace": "YAHOO.widget", "module": "datatable", "events": {"saveEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value from form input field."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when a CellEditor input is saved."}, "revertEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value from form input field."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when a CellEditor input is reverted due to asyncSubmitter failure."}, "blurEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor has a blur event."}, "showEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor is shown."}, "cancelEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}], "description": "Fired when a CellEditor input is canceled."}, "invalidDataEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value from form input field."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when a CellEditor input is reverted due to invalid data."}, "keydownEvent": {"params": [{"type": "YAHOO.widget.CellEditor", "name": "oArgs.editor", "description": "  The CellEditor instance."}, {"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}], "description": "Fired when a CellEditor has a keydown."}}, "guessedname": "BaseCellEditor", "methods": {"_initEvents": {"private": "", "description": "Initialize Custom Events.", "guessedname": "_initEvents", "guessedtype": "function"}, "getColumn": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "description": "Returns reference to associated Column instance.", "guessedname": "getColumn", "guessedtype": "function"}, "getDataTable": {"return": {"type": "YAHOO.widget.DataTable", "description": "DataTable instance."}, "description": "Returns reference to associated DataTable instance.", "guessedname": "getDataTable", "guessedtype": "function"}, "render": {"description": "Renders DOM elements and attaches event listeners.", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Displays CellEditor UI in the correct position.", "guessedname": "show", "guessedtype": "function"}, "move": {"description": "Moves container into position for display.", "guessedname": "move", "guessedtype": "function"}, "focus": {"description": "Sets focus in CellEditor.", "guessedname": "focus", "guessedtype": "function"}, "renderBtns": {"description": "Renders Save/Cancel buttons.", "guessedname": "renderBtns", "guessedtype": "function"}, "unblock": {"description": "Fires unblockEvent", "guessedname": "unblock", "guessedtype": "function"}, "cancel": {"description": "Cancels CellEditor input and hides UI.", "guessedname": "cancel", "guessedtype": "function"}, "doAfterRender": {"description": "Access to add additional event listeners.", "guessedname": "doAfterRender", "guessedtype": "function"}, "renderForm": {"description": "Renders form elements.", "guessedname": "renderForm", "guessedtype": "function"}, "getRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Record instance."}, "description": "Returns reference to associated Record instance.", "guessedname": "getRecord", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "Unique ID of the CellEditor instance."}, "description": "CellEditor unique ID.", "guessedname": "getId", "guessedtype": "function"}, "attach": {"params": [{"type": "YAHOO.widget.DataTable", "name": "oDataTable", "description": "  Associated DataTable instance."}, {"type": "HTMLElement", "name": "elCell", "description": "  Cell to edit."}], "description": "Attach CellEditor for a new interaction.", "guessedname": "attach", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the CellEditor instance."}, "description": "CellEditor instance name, for logging.", "guessedname": "toString", "guessedtype": "function"}, "getInputValue": {"description": "Retrieves input value from CellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire CellEditor instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container, removes\ncontainer from the DOM.", "guessedname": "destroy", "guessedtype": "function"}, "save": {"description": "Saves value of CellEditor and hides UI.", "guessedname": "save", "guessedtype": "function"}, "handleDisabledBtns": {"description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them.", "guessedname": "handleDisabledBtns", "guessedtype": "function"}, "resetForm": {"description": "Resets CellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}, "getContainerEl": {"return": {"type": "HTMLElement", "description": "Reference to container element."}, "description": "Returns container element.", "guessedname": "getContainerEl", "guessedtype": "function"}, "getTdEl": {"return": {"type": "HTMLElement", "description": "TD element."}, "description": "Returns reference to associated TD element.", "guessedname": "getTdEl", "guessedtype": "function"}, "_initConfigs": {"private": "", "description": "Initialize configs.", "guessedname": "_initConfigs", "guessedtype": "function"}, "block": {"description": "Fires blockEvent", "guessedname": "block", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "CellEditor.js", "guessedtype": "function", "shortname": "BaseCellEditor", "properties": {"LABEL_SAVE": {"default": "\"Save\"", "type": "String", "description": "Text to display on Save button.", "guessedname": "LABEL_SAVE", "guessedtype": "property"}, "CellEditor._nCount": {"description": "Global instance counter.", "default": "0", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "_sType": {"guessedname": "_sType", "type": "String", "description": "Editor type.", "private": "", "guessedtype": "property"}, "_sId": {"guessedname": "_sId", "type": "String", "description": "Unique id assigned to instance \"yui-ceditorN\", useful prefix for generating unique\nDOM ID strings and log messages.", "private": "", "guessedtype": "property"}, "defaultValue": {"default": "null", "type": "MIXED", "description": "Default value in case Record data is undefined. NB: Null values will not trigger\nthe default value.", "guessedname": "defaultValue", "guessedtype": "property"}, "resetInvalidData": {"default": "true", "type": "Boolean", "description": "If validation is enabled, resets input field of invalid data.", "guessedname": "resetInvalidData", "guessedtype": "property"}, "_oColumn": {"description": "Column instance.", "default": "null", "private": "", "guessedname": "_oColumn", "guessedtype": "property", "type": "YAHOO.widget.Column"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "Container for inline editor.", "private": "", "guessedtype": "property"}, "value": {"type": "MIXED", "description": "Current value.", "guessedname": "value", "guessedtype": "property"}, "_elCancelBtn": {"description": "Reference to Cancel button, if available.", "default": "null", "private": "", "guessedname": "_elCancelBtn", "guessedtype": "property", "type": "HTMLElement"}, "asyncSubmitter": {"type": "HTMLFunction", "description": "Implementer defined function that can submit the input value to a server. This\nfunction must accept the arguments fnCallback and oNewValue. When the submission\nis complete, the function must also call fnCallback(bSuccess, oNewValue) to \nfinish the save routine in the CellEditor. This function can also be used to \nperform extra validation or input value manipulation.", "guessedname": "asyncSubmitter", "guessedtype": "property"}, "disableBtns": {"default": "false", "type": "Boolean", "description": "True if Save/Cancel buttons should not be displayed in the CellEditor.", "guessedname": "disableBtns", "guessedtype": "property"}, "_oDataTable": {"guessedname": "_oDataTable", "type": "YAHOO.widget.DataTable", "description": "DataTable instance.", "private": "", "guessedtype": "property"}, "_elTd": {"description": "TD element.", "default": "null", "private": "", "guessedname": "_elTd", "guessedtype": "property", "type": "HTMLElement"}, "CellEditor.CLASS_CELLEDITOR": {"description": "Class applied to CellEditor container.", "default": "\"yui-ceditor\"", "static": "", "guessedname": "CLASS_CELLEDITOR", "guessedtype": "property", "type": "String"}, "_oRecord": {"description": "Record instance.", "default": "null", "private": "", "guessedname": "_oRecord", "guessedtype": "property", "type": "YAHOO.widget.Record"}, "_elSaveBtn": {"description": "Reference to Save button, if available.", "default": "null", "private": "", "guessedname": "_elSaveBtn", "guessedtype": "property", "type": "HTMLElement"}, "LABEL_CANCEL": {"default": "\"Cancel\"", "type": "String", "description": "Text to display on Cancel button.", "guessedname": "LABEL_CANCEL", "guessedtype": "property"}, "isActive": {"type": "Boolean", "description": "True if currently active.", "guessedname": "isActive", "guessedtype": "property"}, "validator": {"default": "null", "type": "HTMLFunction", "description": "Validator function for input data, called from the DataTable instance scope,\nreceives the arguments (inputValue, currentValue, editorInstance) and returns\neither the validated (or type-converted) value or undefined.", "guessedname": "validator", "guessedtype": "property"}}, "description": "The BaseCellEditor class provides base functionality common to all inline cell\neditors for a DataTable widget."}, "YAHOO.widget.TVFadeIn": {"name": "YAHOO.widget.TVFadeIn", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "function", "name": "callback", "description": "  function to invoke when the animation is finished"}], "description": "A 1/2 second fade-in animation."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVFadeIn", "methods": {"onComplete": {"description": "Clean up and invoke callback", "guessedname": "onComplete", "guessedtype": "function"}, "animate": {"description": "Performs the animation", "guessedname": "animate", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "the string representation of the instance"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}}, "file": "TVFadeIn.js", "guessedtype": "function", "shortname": "TVFadeIn", "properties": {"el": {"type": "HTMLElement", "description": "The element to animate", "guessedname": "el", "guessedtype": "property"}, "callback": {"type": "function", "description": "the callback to invoke when the animation is complete", "guessedname": "callback", "guessedtype": "property"}}, "description": "A 1/2 second fade-in animation."}, "YAHOO.widget.CalendarGroup": {"name": "YAHOO.widget.CalendarGroup", "configs": {"MY_LABEL_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEKDAYS": {"default": "true", "type": "Boolean", "description": "True if the Calendar should show weekday labels. True by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month/day/year date string", "guessedname": "value", "guessedtype": "property"}, "MY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month/year date string", "guessedname": "value", "guessedtype": "property"}, "MONTHS_SHORT": {"default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]", "type": "String[]", "description": "The short month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MULTI_SELECT": {"default": "false", "type": "Boolean", "description": "True if the Calendar should allow multiple selections. False by default.", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_YEAR_SUFFIX": {"default": "\"\"", "type": "String", "description": "The suffix used after the year when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "DATE_FIELD_DELIMITER": {"default": "\"/\"", "type": "String", "description": "The value used to delimit date fields in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "MY_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in a month/year date string", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "false", "type": "Boolean", "description": "Whether or not a close button should be displayed for this CalendarGroup", "guessedname": "value", "guessedtype": "property"}, "MONTHS_LONG": {"default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"", "type": "String[]", "description": "The long month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_MEDIUM": {"default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]", "type": "String[]", "description": "The medium weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_WEEKDAYS": {"default": "\"short\"", "type": "String", "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".", "guessedname": "value", "guessedtype": "property"}, "DATE_RANGE_DELIMITER": {"default": "\"-\"", "type": "String", "description": "The value used to delimit date ranges in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_HEADER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row headers. False by default.", "guessedname": "value", "guessedtype": "property"}, "title": {"default": "\"\"", "type": "String", "description": "The title to display above the CalendarGroup's month header", "guessedname": "value", "guessedtype": "property"}, "maxdate": {"default": "null", "type": "String | Date", "description": "The maximum selectable date in the current Calendar (mm/dd/yyyy)", "guessedname": "value", "guessedtype": "property"}, "selected": {"default": "[]", "type": "String", "description": "The date or range of dates representing the current Calendar selection", "guessedname": "value", "guessedtype": "property"}, "pages": {"default": "2", "type": "Number", "description": "The number of pages to include in the CalendarGroup. This value can only be set once, in the CalendarGroup's constructor arguments.", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_RIGHT": {"description": "The image that should be used for the right navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "HIDE_BLANK_WEEKS": {"default": "false", "type": "Boolean", "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default.", "guessedname": "value", "guessedtype": "property"}, "today": {"default": "Today's date", "type": "Date", "description": "The date to use to represent \"Today\".", "guessedname": "value", "guessedtype": "property"}, "mindate": {"default": "null", "type": "String | Date", "description": "The minimum selectable date in the current Calendar (mm/dd/yyyy)", "guessedname": "value", "guessedtype": "property"}, "START_WEEKDAY": {"default": "0", "type": "number", "description": "The weekday the week begins on. Default is 0 (Sunday).", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_FOOTER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row footers. False by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_YEAR_POSITION": {"default": "3", "type": "Number", "description": "The position of the year in a month/day/year date string", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_LONG": {"default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]", "type": "String[]", "description": "The long weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MDY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month/day/year date string", "guessedname": "value", "guessedtype": "property"}, "year_offset": {"default": "0", "type": "Number", "description": "The positive or negative year offset from the Gregorian calendar year (assuming a January 1st rollover) to \nbe used when displaying or parsing dates.  NOTE: All JS Date objects returned by methods, or expected as input by\nmethods will always represent the Gregorian year, in order to maintain date/month/week values.", "guessedname": "value", "guessedtype": "property"}, "pagedate": {"default": "Today's date", "type": "String | Date", "description": "The month/year representing the current visible Calendar date (mm/yyyy)", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_MONTH_SUFFIX": {"default": "\" \"", "type": "String", "description": "The suffix used after the month when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "MD_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month/year date string", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_LEFT": {"description": "The image that should be used for the left navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "MY_LABEL_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "MD_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month/day date string", "guessedname": "value", "guessedtype": "property"}, "DATE_DELIMITER": {"default": "\",\"", "type": "String", "description": "The value used to delimit individual dates in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_MONTHS": {"default": "\"long\"", "type": "String", "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".", "guessedname": "value", "guessedtype": "property"}, "iframe": {"default": "true for IE6 and below, false for all other browsers", "type": "Boolean", "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.\nThis property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be \nenabled if required.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_1CHAR": {"default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]", "type": "String[]", "description": "The 1-character weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_SHORT": {"default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]", "type": "String[]", "description": "The short weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "NAV": {"default": "null", "type": "Object", "description": "Configuration for the Month Year Navigation UI. By default it is disabled", "guessedname": "value", "guessedtype": "property"}, "strings": {"default": "An object with the properties shown below:\n<dl>\n<dt>previousMonth</dt><dd><em>String</em> : The string to use for the \"Previous Month\" navigation UI. Defaults to \"Previous Month\".</dd>\n<dt>nextMonth</dt><dd><em>String</em> : The string to use for the \"Next Month\" navigation UI. Defaults to \"Next Month\".</dd>\n<dt>close</dt><dd><em>String</em> : The string to use for the close button label. Defaults to \"Close\".</dd>\n</dl>", "type": "{Object}", "description": "The map of UI strings which the CalendarGroup UI uses."}}, "constructors": [{"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the CalendarGroup."}], "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"></div>\n<div id=\"cal1Container_1\"></div>\n</xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe CalendarGroup can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".\n</p>"}], "namespace": "YAHOO.widget", "module": "calendar", "events": {"showNavEvent": {"description": "Fired after the CalendarNavigator is shown", "guessedname": "showNavEvent", "guessedtype": "property"}, "beforeDeselectEvent": {"description": "Fired before a date or set of dates is deselected", "guessedname": "beforeDeselectEvent", "guessedtype": "property"}, "beforeRenderNavEvent": {"description": "Fired just before the CalendarNavigator is to be rendered", "guessedname": "beforeRenderNavEvent", "guessedtype": "property"}, "beforeHideNavEvent": {"description": "Fired just before the CalendarNavigator is to be hidden", "guessedname": "beforeHideNavEvent", "guessedtype": "property"}, "hideEvent": {"description": "Fired after the CalendarGroup is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "hideNavEvent": {"description": "Fired after the CalendarNavigator is hidden", "guessedname": "hideNavEvent", "guessedtype": "property"}, "renderNavEvent": {"description": "Fired after the CalendarNavigator is rendered", "guessedname": "renderNavEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "Fired before the Calendar is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "Fired just before the CalendarGroup is to be shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "beforeSelectEvent": {"description": "Fired before a date selection is made", "guessedname": "beforeSelectEvent", "guessedtype": "property"}, "renderEvent": {"description": "Fired when the Calendar is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "changePageEvent": {"description": "Fired when the Calendar page is changed", "guessedname": "changePageEvent", "guessedtype": "property"}, "resetEvent": {"description": "Fired when the Calendar is reset", "guessedname": "resetEvent", "guessedtype": "property"}, "clearEvent": {"description": "Fired when the Calendar is cleared", "guessedname": "clearEvent", "guessedtype": "property"}, "showEvent": {"description": "Fired after the CalendarGroup is shown", "guessedname": "showEvent", "guessedtype": "property"}, "beforeDestroyEvent": {"description": "Fired just before the CalendarGroup is to be destroyed", "guessedname": "beforeDestroyEvent", "guessedtype": "property"}, "destroyEvent": {"description": "Fired after the CalendarGroup is destroyed. This event should be used\nfor notification only. When this event is fired, important CalendarGroup instance\nproperties, dom references and event listeners have already been \nremoved/dereferenced, and hence the CalendarGroup instance is not in a usable \nstate.", "guessedname": "destroyEvent", "guessedtype": "property"}, "selectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a date selection is made", "guessedname": "selectEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "Fired just before the CalendarGroup is to be hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "beforeShowNavEvent": {"description": "Fired just before the CalendarNavigator is to be shown", "guessedname": "beforeShowNavEvent", "guessedtype": "property"}, "deselectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a date or set of dates has been deselected", "guessedname": "deselectEvent", "guessedtype": "property"}}, "methods": {"deselectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": " The index of the cell to deselect."}], "description": "Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.\ndeselectCell will deselect the cell at the specified index on each displayed Calendar page.", "guessedname": "deselectCell", "guessedtype": "function"}, "addWeekdayRenderer": {"params": [{"type": "Number", "name": "weekday", "description": "  The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc."}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.", "guessedname": "addWeekdayRenderer", "guessedtype": "function"}, "render": {"description": "Calls the render function of all child calendars within the group.", "guessedname": "render", "guessedtype": "function"}, "nextYear": {"description": "Navigates to the next year in the currently selected month in the calendar widget.", "guessedname": "nextYear", "guessedtype": "function"}, "delegateConfig": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, this will usually equal the owner."}], "description": "Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children", "guessedname": "delegateConfig", "guessedtype": "function"}, "configPages": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the \"pages\" property", "guessedname": "configPages", "guessedtype": "function"}, "subtractYears": {"params": [{"type": "Number", "name": "count", "description": " The number of years to subtract from the current calendar"}], "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractYears", "guessedtype": "function"}, "previousMonth": {"description": "Navigates to the previous month page in the calendar widget.", "guessedname": "previousMonth", "guessedtype": "function"}, "select": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String/Date/Date[]", "name": "date", "description": "    The date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "select", "guessedtype": "function"}, "callChildFunction": {"params": [{"type": "String", "name": "fnName", "description": "  The name of the function"}, {"type": "Array", "name": "args", "description": "  The arguments to pass to the function"}], "description": "Calls a function within all child Calendars within this CalendarGroup.", "guessedname": "callChildFunction", "guessedtype": "function"}, "deselect": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String/Date/Date[]", "name": "date", "description": " The date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "deselect", "guessedtype": "function"}, "sub": {"guessedname": "sub", "params": [{"type": "Function", "name": "fn", "description": " The function to subscribe to this CustomEvent"}, {"type": "Object", "name": "obj", "description": " The CustomEvent's scope object"}, {"type": "Boolean", "name": "bOverride", "description": " Whether or not to apply scope correction"}], "description": "Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents", "private": "", "guessedtype": "function"}, "initEvents": {"description": "Initializes CalendarGroup's built-in CustomEvents", "guessedname": "initEvents", "guessedtype": "function"}, "previousYear": {"description": "Navigates to the previous year in the currently selected month in the calendar widget.", "guessedname": "previousYear", "guessedtype": "function"}, "nextMonth": {"description": "Navigates to the next month page in the calendar widget.", "guessedname": "nextMonth", "guessedtype": "function"}, "configPageDate": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the \"pagedate\" property", "guessedname": "configPageDate", "guessedtype": "function"}, "setChildFunction": {"params": [{"type": "String", "name": "fnName", "description": "  The name of the function"}, {"type": "Function", "name": "fn", "description": "   The function to apply to each Calendar page object"}], "description": "Adds a function to all child Calendars within this CalendarGroup.", "guessedname": "setChildFunction", "guessedtype": "function"}, "addMonthRenderer": {"params": [{"type": "Number", "name": "month", "description": "  The month (1-12) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.", "guessedname": "addMonthRenderer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the CalendarGroup."}], "description": "Initializes the calendar group. All subclasses must call this method in order for the\ngroup to be initialized properly.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the CalendarGroup object."}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "_setMonthOnDate": {"guessedname": "_setMonthOnDate", "params": [{"type": "Date", "name": "date", "description": " The Date object on which to set the month index"}, {"type": "Number", "name": "iMonth", "description": " The month index to set"}], "description": "Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.\nThe Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained", "private": "", "guessedtype": "function"}, "removeRenderers": {"description": "Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and \naddWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers \nto see the changes applied.", "guessedname": "removeRenderers", "guessedtype": "function"}, "selectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": " The index of the cell to be selected."}], "description": "Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.\nThe value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected. \n<ul>\n<li>If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.</li>\n<li>If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.</li>\n</ul>", "guessedname": "selectCell", "guessedtype": "function"}, "renderFooter": {"description": "Renders a footer for the 2-up calendar container. By default, this method is\nunimplemented.", "guessedname": "renderFooter", "guessedtype": "function"}, "configSelected": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the CalendarGroup \"selected\" property", "guessedname": "configSelected", "guessedtype": "function"}, "_fixWidth": {"private": "", "description": "Fixes the width of the CalendarGroup container element, to account for miswrapped floats", "guessedname": "_fixWidth", "guessedtype": "function"}, "destroy": {"description": "Destroys the CalendarGroup instance. The method will remove references\nto HTML elements, remove any event listeners added by the CalendarGroup.\nIt will also destroy the Config and CalendarNavigator instances created by the \nCalendarGroup and the individual Calendar instances created for each page.", "guessedname": "destroy", "guessedtype": "function"}, "unsub": {"guessedname": "unsub", "params": [{"type": "Function", "name": "fn", "description": " The function to subscribe to this CustomEvent"}, {"type": "Object", "name": "obj", "description": " The CustomEvent's scope object"}], "description": "Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents", "private": "", "guessedtype": "function"}, "getSelectedDates": {"type": "Date[]", "return": {"type": "", "description": "An array of currently selected JavaScript Date objects."}, "description": "Gets the list of currently selected dates from the calendar.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "addRenderer": {"params": [{"type": "String", "name": "sDates", "description": "  A date string to associate with the specified renderer. Valid formats\ninclude date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)"}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.", "guessedname": "addRenderer", "guessedtype": "function"}, "reset": {"description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s).", "guessedname": "reset", "guessedtype": "function"}, "deselectAll": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."}, "description": "Deselects all dates on the current calendar.", "guessedname": "deselectAll", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "month", "description": "  The numeric month, from 0 (January) to 11 (December)"}], "description": "Sets the calendar group's month explicitly. This month will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.", "guessedname": "setMonth", "guessedtype": "function"}, "clear": {"description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year.", "guessedname": "clear", "guessedtype": "function"}, "getCalendarPage": {"return": {"type": "Calendar", "description": "The Calendar page instance representing the month to which the date \nbelongs."}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date object for which a Calendar page is to be found."}], "description": "Returns the Calendar page instance which has a pagedate (month/year) matching the given date. \nReturns null if no match is found.", "guessedname": "getCalendarPage", "guessedtype": "function"}, "addMonths": {"params": [{"type": "Number", "name": "count", "description": " The number of months to add to the current calendar"}], "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "addMonths", "guessedtype": "function"}, "subtractMonths": {"params": [{"type": "Number", "name": "count", "description": " The number of months to subtract from the current calendar"}], "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractMonths", "guessedtype": "function"}, "constructChild": {"return": {"type": "YAHOO.widget.Calendar", "description": "The YAHOO.widget.Calendar instance that is constructed"}, "params": [{"type": "String", "name": "id", "description": "   The id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": " The id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "  The configuration object containing the Calendar's arguments"}], "description": "Constructs a child calendar. This method can be overridden if a subclassed version of the default\ncalendar is to be used.", "guessedname": "constructChild", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "year", "description": "  The numeric 4-digit year"}], "description": "Sets the calendar group's year explicitly. This year will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.", "guessedname": "setYear", "guessedtype": "function"}, "renderHeader": {"description": "Renders the header for the CalendarGroup.", "guessedname": "renderHeader", "guessedtype": "function"}, "addYears": {"params": [{"type": "Number", "name": "count", "description": " The number of years to add to the current calendar"}], "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "addYears", "guessedtype": "function"}}, "file": "CalendarGroup.js", "shortname": "CalendarGroup", "properties": {"Options": {"type": "Object", "description": "The local object which contains the CalendarGroup's options", "guessedname": "Options", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_2UPCLOSE": {"description": "CSS class representing the close icon for the 2-up calendar", "deprecated": "Along with Calendar.IMG_ROOT and NAV_ARROW_LEFT, NAV_ARROW_RIGHT configuration properties.\nCalendar's <a href=\"YAHOO.widget.Calendar.html#Style.CSS_CLOSE\">Style.CSS_CLOSE</a> property now represents the CSS class used to render the close icon", "static": "", "guessedname": "CSS_2UPCLOSE", "guessedtype": "property", "type": "String", "final": ""}, "containerId": {"type": "String", "description": "The unique id associated with the CalendarGroup container", "guessedname": "containerId", "guessedtype": "property"}, "Locale": {"type": "Object", "description": "The local object which contains the CalendarGroup's locale settings", "guessedname": "Locale", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Config object used to hold the configuration variables for the CalendarGroup", "guessedname": "cfg", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_2UPTITLE": {"description": "CSS class representing the title for the 2-up calendar", "static": "", "guessedname": "CSS_2UPTITLE", "guessedtype": "property", "type": "String", "final": ""}, "id": {"type": "String", "description": "The unique id associated with the CalendarGroup", "guessedname": "id", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.DEFAULT_CONFIG": {"static": "", "type": "Object An object with key/value pairs, the key being the \nuppercase configuration property name and the value being an objec \nliteral with a key string property, and a value property, specifying the \ndefault value of the property", "description": "The set of default Config property keys and values for the CalendarGroup.\n<p>\nNOTE: This property is made public in order to allow users to change \nthe default values of configuration properties. Users should not \nmodify the key string, unless they are overriding the Calendar implementation\n</p>"}, "YAHOO.widget.CalendarGroup.CSS_CONTAINER": {"description": "CSS class representing the container for the calendar", "static": "", "guessedname": "CSS_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarGroup.CSS_MULTI_UP": {"description": "CSS class representing the container for the calendar", "static": "", "guessedname": "CSS_MULTI_UP", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarGroup._DEFAULT_CONFIG": {"description": "The set of default Config property keys and values for the CalendarGroup", "deprecated": "Made public. See the public DEFAULT_CONFIG property for details", "private": "", "static": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object"}, "pages": {"type": "YAHOO.widget.Calendar[]", "description": "The collection of Calendar pages contained within the CalendarGroup", "guessedname": "pages", "guessedtype": "property"}}, "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"></div>\n<div id=\"cal1Container_1\"></div>\n</xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe CalendarGroup can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".\n</p>"}, "YAHOO.widget.CategoryAxis": {"name": "YAHOO.widget.CategoryAxis", "constructors": [{"description": "A type of axis that displays items in categories."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "CategoryAxis", "file": "CategoryAxis.js", "guessedtype": "function", "shortname": "CategoryAxis", "properties": {"categoryNames": {"type": "Array", "description": "A list of category names to display along this axis.", "guessedname": "categoryNames", "guessedtype": "property"}, "calculateCategoryCount": {"type": "Boolean", "description": "Indicates whether or not to calculate the number of categories (ticks and labels)\nwhen there is not enough room to display all labels on the axis. If set to true, the axis \nwill determine the number of categories to plot. If not, all categories will be plotted.", "guessedname": "calculateCategoryCount", "guessedtype": "property"}}, "description": "A type of axis that displays items in categories."}, "YAHOO.util.Assert": {"name": "YAHOO.util.Assert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "Assert", "methods": {"isTrue": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isTrue", "guessedtype": "function"}, "isFalse": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isFalse", "guessedtype": "function"}, "isNotNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotNull", "guessedtype": "function"}, "fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur.", "guessedname": "fail", "guessedtype": "function"}, "isFunction": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a function.", "guessedname": "isFunction", "guessedtype": "function"}, "isNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not a number.", "guessedname": "isNaN", "guessedtype": "function"}, "isBoolean": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a Boolean.", "guessedname": "isBoolean", "guessedtype": "function"}, "areNotSame": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areNotSame", "guessedtype": "function"}, "isNotNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the special NaN value.", "guessedname": "isNotNaN", "guessedtype": "function"}, "areNotEqual": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areNotEqual", "guessedtype": "function"}, "areSame": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areSame", "guessedtype": "function"}, "isUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isUndefined", "guessedtype": "function"}, "isArray": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an array.", "guessedname": "isArray", "guessedtype": "function"}, "isTypeOf": {"static": "", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is of a particular type.", "guessedname": "isTypeOf", "guessedtype": "function"}, "_formatMessage": {"return": {"type": "String", "description": "The final error message, containing either or both."}, "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.", "protected": "", "static": "", "guessedname": "_formatMessage", "guessedtype": "function", "params": [{"type": "String", "name": "customMessage", "description": " The message passed in by the developer."}, {"type": "String", "name": "defaultMessage", "description": " The message created by the error by default."}]}, "areEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areEqual", "guessedtype": "function"}, "isNumber": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a number.", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an object.", "guessedname": "isObject", "guessedtype": "function"}, "isString": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a string.", "guessedname": "isString", "guessedtype": "function"}, "isNotUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotUndefined", "guessedtype": "function"}, "isNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNull", "guessedtype": "function"}, "isInstanceOf": {"static": "", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "guessedname": "isInstanceOf", "guessedtype": "function"}}, "static": "", "file": "Assert.js", "guessedtype": "property", "shortname": "Assert", "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "YAHOO.widget.DropdownCellEditor": {"name": "YAHOO.widget.DropdownCellEditor", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The DropdownCellEditor class provides functionality for inline editing\nDataTable cell data a SELECT element."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "DropdownCellEditor", "methods": {"renderForm": {"description": "Render a form with select element.", "guessedname": "renderForm", "guessedtype": "function"}, "handleDisabledBtns": {"description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them.", "guessedname": "handleDisabledBtns", "guessedtype": "function"}, "getInputValue": {"description": "Retrieves input value from DropdownCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in DropdownCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets DropdownCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "DropdownCellEditor", "properties": {"dropdownOptions": {"type": "String[] | Object[]", "description": "Array of dropdown values. Can either be a simple array (e.g.,\n[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\"]) or a an array of objects (e.g., \n[{label:\"Alabama\", value:\"AL\"}, {label:\"Alaska\", value:\"AK\"},\n{label:\"Arizona\", value:\"AZ\"}, {label:\"Arkansas\", value:\"AR\"}]).", "guessedname": "dropdownOptions", "guessedtype": "property"}, "size": {"type": "Number", "description": "Specifies number of visible options.", "guessedname": "size", "guessedtype": "property"}, "multiple": {"type": "Boolean", "description": "Enables multi-select.", "guessedname": "multiple", "guessedtype": "property"}, "dropdown": {"type": "HTMLElement", "description": "Reference to Dropdown element.", "guessedname": "dropdown", "guessedtype": "property"}}, "description": "The DropdownCellEditor class provides functionality for inline editing\nDataTable cell data a SELECT element."}, "YAHOO.widget.TextboxCellEditor": {"name": "YAHOO.widget.TextboxCellEditor", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The TextboxCellEditor class provides functionality for inline editing\nDataTable cell data with an INPUT TYPE=TEXT element."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "TextboxCellEditor", "methods": {"renderForm": {"description": "Render a form with input type=text.", "guessedname": "renderForm", "guessedtype": "function"}, "move": {"description": "Moves TextboxCellEditor UI to a cell.", "guessedname": "move", "guessedtype": "function"}, "getInputValue": {"description": "Returns new value for TextboxCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in TextboxCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets TextboxCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "TextboxCellEditor", "properties": {"DataTable.Editors": {"type": "Object", "static": "", "description": "CellEditor subclasses.", "guessedname": "Editors", "guessedtype": "property"}, "textbox": {"description": "Reference to the textbox element.", "guessedname": "textbox", "guessedtype": "property"}}, "description": "The TextboxCellEditor class provides functionality for inline editing\nDataTable cell data with an INPUT TYPE=TEXT element."}, "YAHOO.widget.Paginator.ui.CurrentPageReport": {"properties": {"span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node containing the formatted info", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.CurrentPageReport", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\"."}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"pageReportTemplateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageReportTemplateChange", "description": "Fires when the value for the configuration attribute 'pageReportTemplate' changes."}, "beforePageReportValueGenaratorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageReportValueGenaratorChange", "description": "Fires before the value for the configuration attribute 'pageReportValueGenarator' changes. Return false to cancel the attribute change."}, "beforePageReportClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageReportClassChange", "description": "Fires before the value for the configuration attribute 'pageReportClass' changes. Return false to cancel the attribute change."}, "pageReportValueGenaratorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageReportValueGenaratorChange", "description": "Fires when the value for the configuration attribute 'pageReportValueGenarator' changes."}, "beforePageReportTemplateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageReportTemplateChange", "description": "Fires before the value for the configuration attribute 'pageReportTemplate' changes. Return false to cancel the attribute change."}, "pageReportClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageReportClassChange", "description": "Fires when the value for the configuration attribute 'pageReportClass' changes."}}, "guessedname": "CurrentPageReport", "methods": {"destroy": {"private": "", "description": "Removes the link/span node and clears event listeners\nremoval.", "guessedname": "destroy", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "sprintf": {"return": {"type": "string", "description": ""}, "description": "Replace place holders in a string with the named values found in an\nobject literal.", "static": "", "guessedname": "sprintf", "guessedtype": "function", "params": [{"type": "string", "name": "template", "description": "  The content string containing place holders"}, {"type": "object", "name": "values", "description": "  The key:value pairs used to replace the place holders"}]}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the span containing info formatted per the pageReportTemplate\nattribute.", "guessedname": "render", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Regenerate the content of the span if appropriate. Calls\nCurrentPageReport.sprintf with the value of the pageReportTemplate\nattribute and the value map returned from pageReportValueGenerator\nfunction.", "guessedname": "update", "guessedtype": "function"}}, "file": "CurrentPageReport.js", "guessedtype": "function", "shortname": "CurrentPageReport", "configs": {"pageReportValueGenarator": {"description": "Function to generate the value map used to populate the\npageReportTemplate.  The function is passed the Paginator instance as a\nparameter.  The default function returns a map with the following keys:\n<ul>\n<li>currentPage</li>\n<li>totalPages</li>\n<li>startIndex</li>\n<li>endIndex</li>\n<li>startRecord</li>\n<li>endRecord</li>\n<li>totalRecords</li>\n</ul>"}, "pageReportClass": {"default": "'yui-pg-current'", "description": "CSS class assigned to the span containing the info."}, "pageReportTemplate": {"default": "'({currentPage} of {totalPages})'", "see": "pageReportValueGenerator attribute", "description": "Used as innerHTML for the span.  Place holders in the form of {name}\nwill be replaced with the so named value from the key:value map\ngenerated by the function held in the pageReportValueGenerator attribute."}}, "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\"."}, "YAHOO.util.Bezier": {"name": "YAHOO.util.Bezier", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Bezier", "methods": {"getPosition": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}], "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "guessedname": "getPosition", "guessedtype": "function"}}, "file": "Bezier.js", "guessedtype": "function", "shortname": "Bezier", "description": "Used to calculate Bezier splines for any number of control points."}, "YAHOO.util.StorageEngineGears": {"name": "YAHOO.util.StorageEngineGears", "extend": "YAHOO.util.Storage", "constructors": [{"params": [{"type": "String", "name": "location", "description": "  Required. The storage location."}, {"type": "Object", "name": "conf", "description": "  Required. A configuration object."}], "description": "The StorageEngineGears class implements the Google Gears storage engine."}], "namespace": "YAHOO.util", "module": "Storage", "guessedname": "StorageEngineGears", "file": "StorageEngineGears.js", "guessedtype": "function", "shortname": "StorageEngineGears", "description": "The StorageEngineGears class implements the Google Gears storage engine."}, "YAHOO.util.Subscriber": {"name": "YAHOO.util.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "boolean", "name": "overrideContext", "description": " If true, the obj passed in becomes the execution\ncontext of the listener"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "YAHOO.util", "module": "event", "guessedname": "Subscriber", "methods": {"getScope": {"params": [{"type": "Object", "name": "defaultScope", "description": " the context to use if this listener does not\noverride it."}], "description": "Returns the execution context for this listener.  If overrideContext was set to true\nthe custom obj will be the context.  If overrideContext is an object, that is the\ncontext, otherwise the default context will be used.", "guessedname": "getScope", "guessedtype": "function"}, "contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}}, "file": "CustomEvent.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"obj": {"type": "object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "overrideContext": {"type": "boolean|object", "description": "The default execution context for the event listener is defined when the\nevent is created (usually the object which contains the event).\nBy setting overrideContext to true, the execution context becomes the custom\nobject passed in by the subscriber.  If overrideContext is an object, that \nobject becomes the context.", "guessedname": "overrideContext", "guessedtype": "property"}, "fn": {"type": "function", "description": "The callback that will be execute when the event fires", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "YAHOO.util.StorageEngineSWF": {"name": "YAHOO.util.StorageEngineSWF", "extend": "YAHOO.util.Storage", "constructors": [{"params": [{"type": "String", "name": "location", "description": "  Required. The storage location."}, {"type": "Object", "name": "conf", "description": "  Required. A configuration object."}], "description": "The StorageEngineSWF class implements the SWF storage engine."}], "namespace": "YAHOO.util", "module": "Storage", "guessedname": "StorageEngineSWF", "uses": ["YAHOO.widget.SWF"], "file": "StorageEngineSWF.js", "guessedtype": "function", "shortname": "StorageEngineSWF", "properties": {"_swf": {"protected": "", "type": "{Object}", "description": "The underlying SWF of the engine, exposed so developers can modify the adapter behavior.", "guessedname": "_swf", "guessedtype": "property"}}, "description": "The StorageEngineSWF class implements the SWF storage engine."}, "YAHOO.widget.Paginator.ui.PageLinks": {"properties": {"current": {"guessedname": "current", "type": "number", "description": "Current page", "private": "", "guessedtype": "property"}, "container": {"guessedname": "container", "type": "HTMLElement", "description": "Span node containing the page links", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.PageLinks", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the page links"}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"currentPageClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "currentPageClassChange", "description": "Fires when the value for the configuration attribute 'currentPageClass' changes."}, "pageLabelBuilderChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageLabelBuilderChange", "description": "Fires when the value for the configuration attribute 'pageLabelBuilder' changes."}, "beforePageLinksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageLinksChange", "description": "Fires before the value for the configuration attribute 'pageLinks' changes. Return false to cancel the attribute change."}, "beforeCurrentPageClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCurrentPageClassChange", "description": "Fires before the value for the configuration attribute 'currentPageClass' changes. Return false to cancel the attribute change."}, "beforePageLabelBuilderChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageLabelBuilderChange", "description": "Fires before the value for the configuration attribute 'pageLabelBuilder' changes. Return false to cancel the attribute change."}, "beforePageLinksContainerClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageLinksContainerClassChange", "description": "Fires before the value for the configuration attribute 'pageLinksContainerClass' changes. Return false to cancel the attribute change."}, "pageLinksChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageLinksChange", "description": "Fires when the value for the configuration attribute 'pageLinks' changes."}, "pageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageLinkClassChange", "description": "Fires when the value for the configuration attribute 'pageLinkClass' changes."}, "beforePageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePageLinkClassChange", "description": "Fires before the value for the configuration attribute 'pageLinkClass' changes. Return false to cancel the attribute change."}, "pageLinksContainerClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pageLinksContainerClassChange", "description": "Fires when the value for the configuration attribute 'pageLinksContainerClass' changes."}}, "guessedname": "PageLinks", "methods": {"render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the container node containing page links\nappropriate to the current pagination state.", "guessedname": "render", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Force a rebuild of the page links.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Update the links if appropriate", "guessedname": "update", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the container's onclick event.  Looks for qualifying link\nclicks, and pulls the page number from the link's page attribute.\nSends link's page attribute to the Paginator's setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the page links container node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "calculateRange": {"return": {"type": "Array", "description": "[start_page_number, end_page_number]"}, "description": "Calculates start and end page numbers given a current page, attempting\nto keep the current page in the middle", "static": "", "guessedname": "calculateRange", "guessedtype": "function", "params": [{"type": "int", "name": "currentPage", "description": "  The current page"}, {"type": "int", "name": "totalPages", "description": "   (optional) Maximum number of pages"}, {"type": "int", "name": "numPages", "description": "     (optional) Preferred number of pages in range"}]}}, "file": "PageLinks.js", "guessedtype": "function", "shortname": "PageLinks", "configs": {"pageLinksContainerClass": {"default": "'yui-pg-pages'", "description": "CSS class assigned to the span containing the page links."}, "currentPageClass": {"default": "'yui-pg-current-page'", "description": "CSS class assigned to the current page span."}, "pageLabelBuilder": {"default": "function (page, paginator) { return page; }", "description": "Function used generate the innerHTML for each page link/span.  The\nfunction receives as parameters the page number and a reference to the\npaginator object."}, "pageLinks": {"default": "10", "description": "Maximum number of page links to display at one time."}, "pageLinkClass": {"default": "'yui-pg-page'", "description": "CSS class assigned to each page link/span."}}, "description": "ui Component to generate the page links"}, "YAHOO.widget.MenuBar": {"name": "YAHOO.widget.MenuBar", "configs": {"position": {"default": "static", "type": "String", "description": "String indicating how a menu bar should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menu bars \nare visible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menu bars are hidden by default, reside\nout of the normal flow of the document (CSS position: absolute), and can \noverlay other elements on the screen."}, "submenualignment": {"default": "[\"tl\",\"bl\"]", "type": "Array", "description": "Array defining how submenus should be aligned to their \nparent menu bar item. The format is: [itemCorner, submenuCorner]."}, "autosubmenudisplay": {"default": "false", "type": "Boolean", "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu bar's items."}, "submenutoggleregion": {"default": "false", "type": "Boolean", "description": "Boolean indicating if only a specific region of a MenuBarItem should toggle the \ndisplay of a submenu.  The default width of the region is determined by the value of the\nSUBMENU_TOGGLE_REGION_WIDTH property.  If set to true, the autosubmenudisplay \nconfiguration property will be set to false, and any click event listeners will not be \ncalled when the user clicks inside the submenu toggle region of a MenuBarItem.  If the \nuser clicks outside of the submenu toggle region, the MenuBarItem will maintain its \nstandard behavior."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu bar."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for the \nmenu bar."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;div&#62;</code> element of the menu bar."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-94282980\">HTMLSelectElement</a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;</code> element to be used as the data \nsource for the menu bar."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."}], "description": "Horizontal collection of items, each of which can contain a submenu."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuBar", "methods": {"configSubmenuToggle": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event was fired."}], "description": "Event handler for when the \"submenutoggleregion\" configuration property of \na MenuBar changes.", "guessedname": "configSubmenuToggle", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu bar."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for the \nmenu bar."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;div&#62;</code> element of the menu bar."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-94282980\">HTMLSelectElement</a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;</code> element to be used as the data \nsource for the menu bar."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."}], "description": "The MenuBar class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu bar.", "guessedname": "toString", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuBar", "name": "p_oMenuBar", "description": " Object representing the menu bar \nthat fired the event."}], "description": "\"click\" event handler for the menu bar.", "guessedname": "_onClick", "guessedtype": "function"}, "checkPosition": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "p_sPosition", "description": " String specifying the position of the menu."}], "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.", "private": ""}, "_onKeyDown": {"guessedname": "_onKeyDown", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuBar", "name": "p_oMenuBar", "description": " Object representing the menu bar \nthat fired the event."}], "description": "\"keydown\" Custom Event handler for the menu bar.", "private": "", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be\nchanged using the menu bar's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Menu", "superclass": "YAHOO.widget.Menu", "file": "menubar.js", "guessedtype": "function", "shortname": "MenuBar", "properties": {"SUBMENU_TOGGLE_REGION_WIDTH": {"description": "Width (in pixels) of the area of a MenuBarItem that, when pressed, will toggle the\ndisplay of the MenuBarItem's submenu.", "default": "20", "guessedname": "SUBMENU_TOGGLE_REGION_WIDTH", "guessedtype": "property", "type": "Number", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the menu \nbar's <code>&#60;div&#62;</code> element.", "default": "\"yuimenubar\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Horizontal collection of items, each of which can contain a submenu."}, "YAHOO.env": {"name": "YAHOO.env", "namespace": "", "module": "yahoo", "guessedname": "env", "methods": {"getVersion": {"return": {"type": "Object", "description": "The version info"}, "description": "Returns the version data for the specified module:\n<dl>\n<dt>name:</dt>      <dd>The name of the module</dd>\n<dt>version:</dt>   <dd>The version in use</dd>\n<dt>build:</dt>     <dd>The build number in use</dd>\n<dt>versions:</dt>  <dd>All versions that were registered</dd>\n<dt>builds:</dt>    <dd>All builds that were registered.</dd>\n<dt>mainClass:</dt> <dd>An object that was was stamped with the\ncurrent version and build. If \nmainClass.VERSION != version or mainClass.BUILD != build,\nmultiple versions of pieces of the library have been\nloaded, potentially causing issues.</dd>\n</dl>", "static": "", "guessedname": "getVersion", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " the name of the module (event, slider, etc)"}]}}, "static": "", "file": "Env.js", "guessedtype": "property", "shortname": "YAHOO.env", "properties": {"listeners": {"type": "Function[]", "description": "List of functions that should be executed every time a YUI module\nreports itself.", "guessedname": "listeners", "guessedtype": "property"}, "modules": {"type": "Object[]", "description": "Keeps the version info for all YUI modules that have reported themselves", "guessedname": "modules", "guessedtype": "property"}}, "description": "YAHOO.env is used to keep track of what is known about the YUI library and\nthe browsing environment"}, "YAHOO.util.ShouldFail": {"name": "YAHOO.util.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of AssertionError that is thrown whenever\na test was expected to fail but did not."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ShouldFail", "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ShouldFail is subclass of AssertionError that is thrown whenever\na test was expected to fail but did not."}, "YAHOO.widget.TextareaCellEditor": {"name": "YAHOO.widget.TextareaCellEditor", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The TextareaCellEditor class provides functionality for inline editing\nDataTable cell data with a TEXTAREA element."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "TextareaCellEditor", "methods": {"move": {"description": "Moves TextareaCellEditor UI to a cell.", "guessedname": "move", "guessedtype": "function"}, "renderForm": {"description": "Render a form with textarea.", "guessedname": "renderForm", "guessedtype": "function"}, "handleDisabledBtns": {"description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them.", "guessedname": "handleDisabledBtns", "guessedtype": "function"}, "focus": {"description": "Sets focus in TextareaCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets TextareaCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}, "getInputValue": {"description": "Retrieves input value from TextareaCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "TextareaCellEditor", "properties": {"textarea": {"type": "HTMLElement", "description": "Reference to textarea element.", "guessedname": "textarea", "guessedtype": "property"}}, "description": "The TextareaCellEditor class provides functionality for inline editing\nDataTable cell data with a TEXTAREA element."}, "YAHOO.widget.SliderThumb": {"name": "YAHOO.widget.SliderThumb", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the slider html element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop items"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}], "description": "A drag and drop implementation to be used as the thumb of a slider."}], "namespace": "YAHOO.widget", "module": "slider", "guessedname": "SliderThumb", "methods": {"onChange": {"private": "", "description": "The onchange event for the handle/thumb is delegated to the YAHOO.widget.Slider\ninstance it belongs to.", "guessedname": "onChange", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved from the start position."}, "description": "Gets the current offset from the element's start position in\npixels.", "guessedname": "getValue", "guessedtype": "function"}, "getOffsetFromParent": {"type": "[int, int]", "params": [{"type": "[int, int]", "name": "parentPos", "description": " Optionally accepts the position of the parent"}], "description": "Returns the difference between the location of the thumb and its parent.", "guessedname": "getOffsetFromParent0", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the instance"}, "description": "Thumb toString", "guessedname": "toString", "guessedtype": "function"}, "getYValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved vertically from the start position."}, "description": "Gets the current Y offset from the element's start position in\npixels.", "guessedname": "getYValue", "guessedtype": "function"}, "initSlider": {"params": [{"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " the width of the tick interval."}], "description": "Set up the slider, must be called in the constructor of all subclasses", "guessedname": "initSlider", "guessedtype": "function"}, "getXValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved horizontally from the start position."}, "description": "Gets the current X offset from the element's start position in\npixels.", "guessedname": "getXValue", "guessedtype": "function"}, "clearTicks": {"description": "Clear's the slider's ticks", "guessedname": "clearTicks", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "SliderThumb.js", "guessedtype": "function", "shortname": "SliderThumb", "properties": {"isTarget": {"private": "", "description": "Overrides the isTarget property in YAHOO.util.DragDrop", "guessedname": "isTarget", "guessedtype": "property"}, "maintainOffset": {"guessedname": "maintainOffset", "type": "boolean", "description": "Informs the drag and drop util that the offsets should remain when\nresetting the constraints.  This preserves the slider value when\nthe constraints are reset", "private": "", "guessedtype": "property"}, "parentElId": {"type": "string", "description": "The id of the thumbs parent HTML element (the slider background \nelement).", "guessedname": "parentElId", "guessedtype": "property"}, "_isHoriz": {"guessedname": "_isHoriz", "type": "boolean", "description": "Flag used to figure out if this is a horizontal or vertical slider", "private": "", "guessedtype": "property"}, "tickSize": {"guessedname": "tickSize", "type": "int", "description": "The tick size for this slider", "private": "", "guessedtype": "property"}, "_prevVal": {"guessedname": "_prevVal", "type": "int", "description": "Cache the last value so we can check for change", "private": "", "guessedtype": "property"}, "startOffset": {"type": "[int, int]", "description": "The (X and Y) difference between the thumb location and its parent \n(the slider background) when the control is instantiated.", "guessedname": "startOffset", "guessedtype": "property"}, "dragOnly": {"default": "true", "type": "boolean", "description": "Override the default setting of dragOnly to true.", "guessedname": "dragOnly", "guessedtype": "property"}, "_graduated": {"guessedname": "_graduated", "type": "boolean", "description": "The slider is _graduated if there is a tick interval defined", "private": "", "guessedtype": "property"}, "scroll": {"private": "", "description": "Turns off the autoscroll feature in drag and drop", "guessedname": "scroll", "guessedtype": "property"}}, "description": "A drag and drop implementation to be used as the thumb of a slider."}, "YAHOO.util.AttributeProvider": {"name": "YAHOO.util.AttributeProvider", "namespace": "YAHOO.util", "module": "element", "guessedname": "AttributeProvider", "methods": {"set": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the value of a config.", "guessedname": "set", "guessedtype": "function"}, "fireBeforeChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to handlers."}], "description": "Fires the attribute's beforeChange event.", "guessedname": "fireBeforeChangeEvent", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set"}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Resets the specified attribute's value to its initial value.", "guessedname": "resetValue", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The current value of the attribute."}, "params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned."}], "description": "Returns the current value of the attribute.", "guessedname": "get", "guessedtype": "function"}, "setAttributeConfig": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Object", "name": "map", "description": " A key-value map of attribute properties"}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the intial config."}], "description": "Sets or updates an Attribute instance's properties.", "guessedname": "setAttributeConfig", "guessedtype": "function"}, "resetAttributeConfig": {"guessedname": "resetAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name."}], "description": "Resets an attribute to its intial configuration.", "private": "", "guessedtype": "function"}, "register": {"deprecated": "Use setAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name"}, {"type": "Object", "name": "map", "description": " A key-value map containing the\nattribute's properties."}], "description": "Adds an Attribute to the AttributeProvider instance.", "guessedname": "register", "guessedtype": "function"}, "getAttributeConfig": {"return": {"type": "object", "description": "A key-value map containing all of the\nattribute's properties."}, "description": "Returns the attribute's properties.", "private": "", "params": [{"type": "String", "name": "key", "description": " The attribute's name"}], "guessedname": "getAttributeConfig", "guessedtype": "function"}, "refresh": {"params": [{"type": "String | Array", "name": "key", "description": " The attribute(s) to refresh"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the attribute's value to its current value.", "guessedname": "refresh", "guessedtype": "function"}, "configureAttribute": {"deprecated": "Use setAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Object", "name": "map", "description": " A key-value map of attribute properties"}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the intial config."}], "description": "Sets or updates an Attribute instance's properties.", "guessedname": "configureAttribute", "guessedtype": "function"}, "getAttributeKeys": {"return": {"type": "Array", "description": "An array of attribute names."}, "description": "Returns an array of attribute names.", "guessedname": "getAttributeKeys", "guessedtype": "function"}, "fireChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to the handlers."}], "description": "Fires the attribute's change event.", "guessedname": "fireChangeEvent", "guessedtype": "function"}, "setAttributes": {"params": [{"type": "Object", "name": "map", "description": "  A key-value map of attributes"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets multiple attribute values.", "guessedname": "setAttributes", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "AttributeProvider.js", "guessedtype": "function", "shortname": "AttributeProvider", "properties": {"_configs": {"description": "A key-value map of Attribute configurations", "private": "", "protected": "", "guessedname": "_configs", "guessedtype": "property", "type": "{Object}"}}, "description": "Provides and manages YAHOO.util.Attribute instances"}, "YAHOO.widget.Column": {"name": "YAHOO.widget.Column", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  Object literal of definitions."}], "description": "The Column class defines and manages attributes of DataTable Columns"}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "Column", "methods": {"getSanitizedKey": {"return": {"type": "String", "description": "Sanitized Column key."}, "description": "Returns Column key which has been sanitized for DOM (class and ID) usage\nstarts with letter, contains only letters, numbers, hyphen, or period.", "guessedname": "getSanitizedKey", "guessedtype": "function"}, "getTreeIndex": {"return": {"type": "Number", "description": "Position index, or null."}, "description": "Public accessor returns Column's current position index within its\nColumnSet's tree array, if applicable. Only non-nested and top-level parent\nColumns will return a value;", "guessedname": "getTreeIndex", "guessedtype": "function"}, "getParent": {"return": {"type": "YAHOO.widget.Column", "description": "Column's parent instance."}, "description": "Public accessor returns Column's parent instance if any, or null otherwise.", "guessedname": "getParent", "guessedtype": "function"}, "getField": {"return": {"type": "String", "description": "Column field."}, "description": "Returns field.", "guessedname": "getField", "guessedtype": "function"}, "getDefinition": {"return": {"type": "Object", "description": "Object literal definition."}, "description": "Returns object literal definition.", "guessedname": "getDefinition", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "Unique ID string."}, "description": "Returns unique ID string.", "guessedname": "getId", "guessedtype": "function"}, "getKey": {"return": {"type": "String", "description": "Column key."}, "description": "Returns unique Column key.", "guessedname": "getKey", "guessedtype": "function"}, "getKeyIndex": {"return": {"type": "Number", "description": "Position index, or null."}, "description": "Public accessor returns Column's current position index within its\nColumnSet's keys array, if applicable. Only non-nested and bottom-level\nchild Columns will return a value.", "guessedname": "getKeyIndex", "guessedtype": "function"}, "getColspan": {"return": {"type": "Number", "description": "Column's COLSPAN value."}, "description": "Public accessor returns Column's calculated COLSPAN value.", "guessedname": "getColspan", "guessedtype": "function"}, "getRowspan": {"return": {"type": "Number", "description": "Column's ROWSPAN value."}, "description": "Public accessor returns Column's calculated ROWSPAN value.", "guessedname": "getRowspan", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Column's unique name."}, "description": "Column instance name, for logging.", "guessedname": "toString", "guessedtype": "function"}, "getColEl": {"deprecated": "Use getThEl", "guessedname": "getColEl", "guessedtype": "function"}, "getThLInerEl": {"return": {"type": "HTMLElement", "description": "TH element."}, "description": "Returns DOM reference to the TH's liner DIV element. Introduced since\nresizeable Columns may have an extra resizer liner, making the DIV liner\nnot reliably the TH element's first child.", "guessedname": "getThLinerEl", "guessedtype": "function"}, "getThEl": {"return": {"type": "HTMLElement", "description": "TH element."}, "description": "Returns DOM reference to the key TH element.", "guessedname": "getThEl", "guessedtype": "function"}, "getResizerEl": {"return": {"type": "HTMLElement", "description": "DIV element."}, "description": "Returns DOM reference to the resizer element, or null.", "guessedname": "getResizerEl", "guessedtype": "function"}}, "file": "ColumnSet.js", "guessedtype": "function", "shortname": "Column", "properties": {"sortOptions.sortFunction": {"default": "null", "type": "Function", "description": "Custom sort handler. Signature: sortFunction(a, b, desc, field) where field is the sortOptions.field value", "guessedname": "sortOptions", "guessedtype": "property"}, "_nTreeIndex": {"guessedname": "_nTreeIndex", "type": "Number", "description": "Reference to Column's current position index within its ColumnSet's tree\narray, if applicable. This property only applies to non-nested and top-\nlevel parent Columns.", "private": "", "guessedtype": "property"}, "_elResizer": {"guessedname": "_elResizer", "type": "HTMLElement", "description": "The DOM reference to the associated resizerelement (if any).", "private": "", "guessedtype": "property"}, "sortOptions.defaultOrder": {"deprecated": "Use sortOptions.defaultDir."}, "resizeable": {"default": "false", "type": "Boolean", "description": "True if Column is resizeable, false otherwise. The Drag & Drop Utility is\nrequired to enable this feature. Only bottom-level and non-nested Columns are\nresizeble.", "guessedname": "resizeable", "guessedtype": "property"}, "children": {"type": "Object[]", "description": "Array of object literals that define children (nested headers) of a Column.", "guessedname": "children", "guessedtype": "property"}, "dropdownOptions": {"type": "String[] | Object[]", "description": "Array of dropdown values for formatter:\"dropdown\" cases. Can either be a simple array (e.g.,\n[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\"]) or a an array of objects (e.g.,\n[{label:\"Alabama\", value:\"AL\"}, {label:\"Alaska\", value:\"AK\"},\n{label:\"Arizona\", value:\"AZ\"}, {label:\"Arkansas\", value:\"AR\"}]).", "guessedname": "dropdownOptions", "guessedtype": "property"}, "_elThLiner": {"guessedname": "_elThLiner", "type": "HTMLElement", "description": "The DOM reference to the associated TH element's liner DIV element.", "private": "", "guessedtype": "property"}, "_elTh": {"guessedname": "_elTh", "type": "HTMLElement", "description": "The DOM reference to the associated TH element.", "private": "", "guessedtype": "property"}, "width": {"type": "Number", "description": "Column width (in pixels).", "guessedname": "width", "guessedtype": "property"}, "sortOptions.field": {"default": "null", "type": "String", "description": "Custom field to sort on."}, "selected": {"default": "false", "type": "Boolean", "description": "True if Column is in selected state.", "guessedname": "selected", "guessedtype": "property"}, "sortOptions.defaultDir": {"default": "null", "type": "String", "description": "Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC."}, "label": {"type": "String", "description": "Text or HTML for display as Column's label in the TH element.", "guessedname": "label", "guessedtype": "property"}, "minWidth": {"default": "null", "type": "Number", "description": "Minimum Column width (in pixels).", "guessedname": "minWidth", "guessedtype": "property"}, "field": {"type": "String", "description": "Associated database field, or null.", "guessedname": "field", "guessedtype": "property"}, "editor": {"type": "YAHOO.widget.CellEditor", "description": "A CellEditor instance, otherwise Column is not editable.", "guessedname": "editor", "guessedtype": "property"}, "_nRowspan": {"guessedname": "_nRowspan", "type": "Number", "description": "Number of table rows the Column spans.", "private": "", "guessedtype": "property"}, "_nColspan": {"guessedname": "_nColspan", "type": "Number", "description": "Number of table cells the Column spans.", "private": "", "guessedtype": "property"}, "formatter": {"type": "String || HTMLFunction", "description": "Defines a format function.", "guessedname": "formatter", "guessedtype": "property"}, "Column._nCount": {"description": "Internal class variable to index multiple Column instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "_dd": {"guessedname": "_dd", "type": "YAHOO.util.DragDrop", "description": "For unreg() purposes, a reference to the Column's DragDrop instance.", "private": "", "guessedtype": "property"}, "currencyOptions": {"default": "null", "type": "Object", "description": "Config passed to YAHOO.util.Number.format() by the 'currency' Column formatter.", "guessedname": "currencyOptions", "guessedtype": "property"}, "_nKeyIndex": {"guessedname": "_nKeyIndex", "type": "Number", "description": "Reference to Column's current position index within its ColumnSet's keys\narray, if applicable. This property only applies to non-nested and bottom-\nlevel child Columns.", "private": "", "guessedtype": "property"}, "abbr": {"type": "String", "description": "Column head cell ABBR for accessibility.", "guessedname": "abbr", "guessedtype": "property"}, "key": {"type": "String", "description": "Unique name, required.", "guessedname": "key", "guessedtype": "property"}, "hidden": {"default": "false", "type": "Boolean", "description": "True if Column is in hidden state.", "guessedname": "hidden", "guessedtype": "property"}, "_elThLabel": {"guessedname": "_elThLabel", "type": "HTMLElement", "description": "The DOM reference to the associated TH element's label SPAN element.", "private": "", "guessedtype": "property"}, "_ddResizer": {"guessedname": "_ddResizer", "type": "YAHOO.util.DragDrop", "description": "For unreg() purposes, a reference to the Column resizer's DragDrop instance.", "private": "", "guessedtype": "property"}, "sortable": {"default": "false", "type": "Boolean", "description": "True if Column is sortable, false otherwise.", "guessedname": "sortable", "guessedtype": "property"}, "_sId": {"guessedname": "_sId", "type": "String", "description": "Unique String identifier assigned at instantiation.", "private": "", "guessedtype": "property"}, "className": {"type": "String || String[]", "description": "Custom CSS class or array of classes to be applied to every cell in the Column.", "guessedname": "className", "guessedtype": "property"}, "dateOptions": {"default": "null", "type": "Object", "description": "Config passed to YAHOO.util.Date.format() by the 'date' Column formatter.", "guessedname": "dateOptions", "guessedtype": "property"}, "_nWidth": {"guessedname": "_nWidth", "type": "Number", "description": "Internal width tracker.", "private": "", "guessedtype": "property"}, "_oParent": {"guessedname": "_oParent", "type": "YAHOO.widget.Column", "description": "Column's parent Column instance, or null.", "private": "", "guessedtype": "property"}, "maxAutoWidth": {"default": "null", "type": "Number", "description": "When a width is not defined for a Column, maxAutoWidth defines an upper\nlimit that the Column should be auto-sized to. If resizeable is enabled, \nusers may still resize to a greater width. Most useful for Columns intended\nto hold long unbroken, unwrapped Strings, such as URLs, to prevent very\nwide Columns from disrupting visual readability by inducing truncation.", "guessedname": "maxAutoWidth", "guessedtype": "property"}}, "description": "The Column class defines and manages attributes of DataTable Columns"}, "YAHOO.util.LocalDataSource": {"name": "YAHOO.util.LocalDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "LocalDataSource class for in-memory data structs including JavaScript arrays,\nJavaScript object literals (JSON), XML documents, and HTML tables."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "LocalDataSource", "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "DataSource.js", "guessedtype": "function", "shortname": "LocalDataSource", "description": "LocalDataSource class for in-memory data structs including JavaScript arrays,\nJavaScript object literals (JSON), XML documents, and HTML tables."}, "YAHOO.env.ua": {"name": "YAHOO.env.ua", "namespace": "", "module": "yahoo", "guessedname": "ua", "static": "", "file": "Env.js", "guessedtype": "function", "shortname": "YAHOO.env.ua", "properties": {"secure": {"type": "boolean", "static": "", "description": "Set to true if the page appears to be in SSL", "guessedname": "secure", "guessedtype": "property"}, "opera": {"type": "float", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "ie": {"type": "float", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "air": {"type": "float", "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0", "guessedname": "air", "guessedtype": "property"}, "mobile": {"type": "string", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}, "caja": {"type": "float", "description": "Google Caja version number or 0.", "guessedname": "caja", "guessedtype": "property"}, "os": {"type": "string", "static": "", "description": "The operating system.  Currently only detecting windows or macintosh", "guessedname": "os", "guessedtype": "property"}, "webkit": {"type": "float", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).  \n3.x yahoo.com, flickr:422     <-- Safari 3.x hacks the user agent\nstring when hitting yahoo.com and \nflickr.com.\nSafari 3.0.4 (523.12):523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\nWebkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n</pre>\nhttp://developer.apple.com/internet/safari/uamatrix.html", "guessedname": "webkit", "guessedtype": "property"}, "gecko": {"type": "float", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n</pre>", "guessedname": "gecko", "guessedtype": "property"}}, "description": "Do not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8)."}, "YAHOO.util.StorageManager": {"name": "YAHOO.util.StorageManager", "namespace": "YAHOO.util", "module": "Storage", "methods": {"register": {"return": {"type": "Boolean", "description": "When successfully registered."}, "description": "Registers a engineType Class with the StorageManager singleton; first in is the first out.", "static": "", "guessedname": "register", "guessedtype": "function", "params": [{"type": "Function", "name": "engineConstructor", "description": "  Required. The engine constructor function, see engines."}]}, "_getClass": {"return": {"type": "Function", "description": "An available storage constructor or NULL."}, "description": "Fetches a storage constructor if it is available, otherwise returns NULL.", "private": "", "params": [{"type": "Function", "name": "klass", "description": "  Required. The storage constructor to test."}], "guessedname": "_getClass", "guessedtype": "function"}, "_getStorageEngine": {"guessedname": "_getStorageEngine", "params": [{"type": "String", "name": "location", "description": "  Required. The location to store."}, {"type": "Function", "name": "klass", "description": "  Required. A pointer to the engineType Class."}, {"type": "Object", "name": "conf", "description": "  Optional. Additional configuration for the data source engine."}], "description": "Fetches the storage engine from the cache, or creates and caches it.", "private": "", "guessedtype": "function"}, "_getValidLocation": {"guessedname": "_getValidLocation", "params": [{"type": "String", "name": "location", "description": "  Required. The location to evaluate."}], "description": "Ensures that the location is valid before returning it or a default value.", "private": "", "guessedtype": "function"}, "get": {"static": "", "params": [{"type": "String", "name": "engineType", "description": "  Optional. The engine type, see engines."}, {"type": "String", "name": "location", "description": "  Optional. The storage location - LOCATION_SESSION & LOCATION_LOCAL; default is LOCAL."}, {"type": "Object} Optional. Additional configuration for the getting the storage engine.\n{\nengine: {Object} configuration parameters for the desired engine\norder: {Array} an array of storage engine names; the desired order to try engines}\n", "name": "conf", "description": ""}], "description": "Fetches the desired engine type or first available engine type.", "guessedname": "get", "guessedtype": "function"}}, "static": "", "file": "StorageManager.js", "shortname": "StorageManager", "properties": {"LOCATION_SESSION": {"type": "{String}", "static": "", "description": "The storage location - session; data cleared at the end of a user's session.", "guessedname": "LOCATION_SESSION", "guessedtype": "property"}, "LOCATION_LOCAL": {"type": "{String}", "static": "", "description": "The storage location - local; data cleared on demand.", "guessedname": "LOCATION_LOCAL", "guessedtype": "property"}}, "description": "The StorageManager class is a singleton that registers DataStorage objects and returns instances of those objects."}, "YAHOO.widget.PieSeries": {"name": "YAHOO.widget.PieSeries", "constructors": [{"description": "PieSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "PieSeries", "uses": ["YAHOO.widget.Series"], "file": "Series.js", "guessedtype": "function", "shortname": "PieSeries", "properties": {"categoryField": {"type": "String", "description": "The field used to access the category value from the items from the data source.", "guessedname": "categoryField", "guessedtype": "property"}, "labelFunction": {"type": "String", "description": "A string reference to the globally-accessible function that may be called to\ndetermine each of the label values for this series. Also accepts function references.", "guessedname": "labelFunction", "guessedtype": "property"}, "dataField": {"type": "String", "description": "The field used to access the data value from the items from the data source.", "guessedname": "dataField", "guessedtype": "property"}}, "description": "PieSeries class for the YUI Charts widget."}, "YAHOO.widget.ScrollingDataTable": {"name": "YAHOO.widget.ScrollingDataTable", "configs": {"width": {"type": "String", "description": "Table width for scrollable tables (e.g., \"40em\")."}, "COLOR_COLUMNFILLER": {"default": "\"#F2F2F2\"", "type": "String", "description": "CSS color value assigned to header filler on scrollable tables."}, "height": {"type": "String", "description": "Table body height for scrollable tables, not including headers (e.g., \"40em\")."}}, "constructors": [{"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Container element for the TABLE."}, {"type": "Object[]", "name": "aColumnDefs", "description": "  Array of object literal Column definitions."}, {"type": "YAHOO.util.DataSource", "name": "oDataSource", "description": "  DataSource instance."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "The ScrollingDataTable class extends the DataTable class to provide\nfunctionality for x-scrolling, y-scrolling, and xy-scrolling."}], "namespace": "YAHOO.widget", "module": "datatable", "events": {"COLOR_COLUMNFILLERChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "COLOR_COLUMNFILLERChange", "description": "Fires when the value for the configuration attribute 'COLOR_COLUMNFILLER' changes."}, "heightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' changes."}, "beforeCOLOR_COLUMNFILLERChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCOLOR_COLUMNFILLERChange", "description": "Fires before the value for the configuration attribute 'COLOR_COLUMNFILLER' changes. Return false to cancel the attribute change."}, "beforeWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWidthChange", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "tableScrollEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's CONTAINER element (in IE)\nor the DataTable's TBODY element (everyone else)."}], "description": "Fired when a fixed scrolling DataTable has a scroll."}, "beforeHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeightChange", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "widthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' changes."}}, "guessedname": "ScrollingDataTable", "methods": {"_onTheadKeydown": {"guessedname": "_onTheadKeydown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The key event."}, {"type": "YAHOO.widget.ScrollingDataTable", "name": "oSelf", "description": "  ScrollingDataTable instance."}], "description": "Handles keydown events on the THEAD element.", "private": "", "guessedtype": "function"}, "onColumnChange": {"params": [{"type": "Object", "name": "oArgs", "description": "  Custom Event data."}], "description": "Handles Column mutations", "guessedname": "_onColumnChange", "guessedtype": "function"}, "scrollTo": {"params": [{"type": "YAHOO.widget.Record | HTMLElement ", "name": "to", "description": "  Itme to scroll to."}], "description": "Scrolls to given row or cell", "guessedname": "scrollTo", "guessedtype": "function"}, "setColumnWidth": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Number", "name": "nWidth", "description": "  New width in pixels."}], "description": "Sets given Column to given pixel width. If new width is less than minWidth\nwidth, sets to minWidth. Updates oColumn.width value.", "guessedname": "setColumnWidth", "guessedtype": "function"}, "validateColumnWidths": {"params": [{"type": "YAHOO.widget.Column", "name": "oArg.column", "description": "  (optional) One Column to validate. If null, all Columns' widths are validated."}], "description": "For one or all Columns of a ScrollingDataTable, when Column is not hidden,\nand width is not set, syncs widths of header and body cells and \nvalidates that width against minWidth and/or maxAutoWidth as necessary.", "guessedname": "validateColumnWidths", "guessedtype": "function"}, "insertColumn": {"return": {"type": "YAHOO.widget.Column", "description": "oColumn  Inserted Column instance."}, "params": [{"type": "Object | YAHOO.widget.Column", "name": "oColumn", "description": "  Object literal Column\ndefinition or a Column instance."}, {"type": "Number", "name": "index", "description": "  (optional) New tree index."}], "description": "Inserts given Column at the index if given, otherwise at the end. NOTE: You\ncan only add non-nested Columns and top-level parent Columns. You cannot add\na nested Column to an existing parent.", "guessedname": "insertColumn", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal definition of configuration values."}], "description": "Implementation of Element's abstract method. Sets up config values.", "private": "", "guessedtype": "function"}, "_validateColumnWidth": {"guessedname": "_validateColumnWidth", "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "HTMLElement", "name": "elTd", "description": "  TD element to validate against."}], "description": "Helper function calculates and sets a validated width for a Column in a ScrollingDataTable.", "private": "", "guessedtype": "function"}, "_syncScrollY": {"private": "", "description": "Snaps container width for y-scrolling tables.", "guessedname": "_syncScrollY", "guessedtype": "function"}, "_syncScrollX": {"private": "", "description": "Snaps container height for x-scrolling tables in IE. Syncs message TBODY width.", "guessedname": "_syncScrollX", "guessedtype": "function"}, "_initBdThEl": {"guessedname": "_initBdThEl", "params": [{"type": "HTMLElement", "name": "elTh", "description": "  TH element reference."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column object."}], "description": "Populates TH element for the body THEAD element.", "private": "", "guessedtype": "function"}, "_destroyBdTheadEl": {"private": "", "description": "Destroy's the DataTable body THEAD element, if available.", "guessedname": "_destroyBdTheadEl", "guessedtype": "function"}, "_initTableEl": {"private": "", "description": "Initializes ScrollingDataTable TABLE elements into the two inner containers.", "guessedname": "_initTableEl", "guessedtype": "function"}, "_initTheadEl": {"guessedname": "_initTheadEl", "params": [{"type": "HTMLElement", "name": "elHdTable", "description": "  (optional) Fixed header TABLE element reference."}, {"type": "HTMLElement", "name": "elTable", "description": "  (optional) TABLE element reference."}], "description": "Initializes ScrollingDataTable THEAD elements into the two inner containers.", "private": "", "guessedtype": "function"}, "showTableMessage": {"params": [{"type": "String", "name": "sHTML", "description": "  (optional) Value for innerHTMlang."}, {"type": "String", "name": "sClassName", "description": "  (optional) Classname."}], "description": "Displays message within secondary TBODY.", "guessedname": "showTableMessage", "guessedtype": "function"}, "_focusEl": {"guessedname": "_focusEl", "params": [{"type": "HTMLElement", "name": "el", "description": "  Element."}], "description": "Sets focus on the given element.", "private": "", "guessedtype": "function"}, "_destroyHdTableEl": {"private": "", "description": "Destroy's the DataTable head TABLE element, if available.", "guessedname": "_destroyHdTableEl", "guessedtype": "function"}, "getHdTableEl": {"return": {"type": "HTMLElement", "description": "Reference to TABLE element."}, "description": "Returns DOM reference to the DataTable's fixed header TABLE element.", "guessedname": "getHdTableEl", "guessedtype": "function"}, "clearScrollPositions": {"private": "", "description": "Clears stored scroll positions to interrupt the automatic restore mechanism.\nUseful for setting scroll positions programmatically rather than as part of\nthe post-render cleanup process.", "guessedname": "clearScrollPositions", "guessedtype": "function"}, "getBdContainerEl": {"return": {"type": "HTMLElement", "description": "Reference to DIV element."}, "description": "Returns DOM reference to the DataTable's scrolling body container element.", "guessedname": "getBdContainerEl", "guessedtype": "function"}, "_initDomElements": {"guessedname": "_initDomElements", "params": [{"type": "HTMLElement | String} HTML DIV element by reference or ID. \nreturn {Boolean", "name": "elContainer", "description": "  False in case of error, otherwise true"}], "description": "Initializes DOM elements for a ScrollingDataTable, including creation of\ntwo separate TABLE elements.", "private": "", "guessedtype": "function"}, "_syncScroll": {"private": "", "description": "Syncs padding around scrollable tables, including Column header right-padding\nand container width and height.", "guessedname": "_syncScroll", "guessedtype": "function"}, "disable": {"description": "Disables ScrollingDataTable UI.", "guessedname": "disable", "guessedtype": "function"}, "_setOverhangValue": {"guessedname": "_setOverhangValue", "params": [{"type": "Number", "name": "nBorderWidth", "description": "  Value of new border for overhang."}], "description": "Sets Column header overhang to given width.", "private": "", "guessedtype": "function"}, "_initCaptionEl": {"guessedname": "_initCaptionEl", "params": [{"type": "String", "name": "sCaption", "description": "  Text for caption."}], "description": "Creates HTML markup CAPTION element.", "private": "", "guessedtype": "function"}, "removeColumn": {"return": {"type": "YAHOO.widget.Column", "description": "oColumn  Removed Column instance."}, "params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}], "description": "Removes given Column. NOTE: You cannot remove nested Columns. You can only remove\nnon-nested Columns, and top-level parent Columns (which will remove all\nchildren Columns).", "guessedname": "removeColumn", "guessedtype": "function"}, "_runRenderChain": {"private": "", "description": "Internal wrapper calls run() on render Chain instance.", "guessedname": "_runRenderChain", "guessedtype": "function"}, "_destroyContainerEl": {"guessedname": "_destroyContainerEl", "params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Reference to the container element."}], "description": "Destroy's the DataTable outer and inner container elements, if available.", "private": "", "guessedtype": "function"}, "getBdTableEl": {"return": {"type": "HTMLElement", "description": "Reference to TABLE element."}, "description": "Returns DOM reference to the DataTable's scrolling body TABLE element.", "guessedname": "getBdTableEl", "guessedtype": "function"}, "getHdContainerEl": {"return": {"type": "HTMLElement", "description": "Reference to DIV element."}, "description": "Returns DOM reference to the DataTable's fixed header container element.", "guessedname": "getHdContainerEl", "guessedtype": "function"}, "_onScroll": {"guessedname": "_onScroll", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The scroll event."}, {"type": "YAHOO.widget.ScrollingDataTable", "name": "oSelf", "description": "  ScrollingDataTable instance."}], "description": "Syncs scrolltop and scrollleft of all TABLEs.", "private": "", "guessedtype": "function"}, "_retoreScrollPositions": {"private": "", "description": "Restores scroll positions to stored value.", "guessedname": "_restoreScrollPositions", "guessedtype": "function"}, "_initBdTheadEl": {"return": {"type": "HTMLElement", "description": "Initialized THEAD element."}, "description": "Initializes body THEAD element.", "private": "", "params": [{"type": "HTMLElement", "name": "elTable", "description": "  TABLE element into which to create THEAD."}], "guessedname": "_initBdTheadEl", "guessedtype": "function"}, "_initTbodyEl": {"guessedname": "_initTbodyEl", "params": [{"type": "HTMLElement", "name": "elTable", "description": "  TABLE element into which to create TBODY ."}], "description": "Initializes ScrollingDataTable TBODY element for data", "private": "", "guessedtype": "function"}, "_storeScrollPositions": {"private": "", "description": "Stores scroll positions so they can be restored after a render.", "guessedname": "_storeScrollPositions", "guessedtype": "function"}, "_initContainerEl": {"guessedname": "_initContainerEl", "params": [{"type": "HTMLElement | String", "name": "elContainer", "description": "  HTML DIV element by reference or ID."}], "description": "Initializes the DataTable outer container element and creates inner header\nand body container elements.", "private": "", "guessedtype": "function"}, "reorderColumn": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Number", "name": "index", "description": "  New tree index."}], "description": "Removes given Column and inserts into given tree index. NOTE: You\ncan only reorder non-nested Columns and top-level parent Columns. You cannot\nreorder a nested Column to an existing parent.", "guessedname": "reorderColumn", "guessedtype": "function"}, "_initThEl": {"guessedname": "_initThEl", "params": [{"type": "HTMLElement", "name": "elTh", "description": "  TH element reference."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column object."}], "description": "SDT changes ID so as not to duplicate the accessibility TH IDs.", "private": "", "guessedtype": "function"}, "_syncScrollOverhang": {"private": "", "description": "Adds/removes Column header overhang as necesary.", "guessedname": "_syncScrollOverhang", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataTable", "superclass": "YAHOO.widget.DataTable", "file": "ScrollingDataTable.js", "guessedtype": "function", "shortname": "ScrollingDataTable", "properties": {"DataTable.CLASS_BODY": {"description": "Class name assigned to inner DataTable body container.", "default": "\"yui-dt-bd\"", "static": "", "guessedname": "CLASS_BODY", "guessedtype": "property", "type": "String", "final": ""}, "_elBdThead": {"guessedname": "_elBdThead", "type": "HTMLElement", "description": "Body THEAD element.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_HEADER": {"description": "Class name assigned to inner DataTable header container.", "default": "\"yui-dt-hd\"", "static": "", "guessedname": "CLASS_HEADER", "guessedtype": "property", "type": "String", "final": ""}, "_elHdContainer": {"guessedname": "_elHdContainer", "type": "HTMLElement", "description": "Container for fixed header TABLE element.", "private": "", "guessedtype": "property"}, "_elHdTable": {"guessedname": "_elHdTable", "type": "HTMLElement", "description": "Fixed header TABLE element.", "private": "", "guessedtype": "property"}, "_bScrollbarX": {"guessedname": "_bScrollbarX", "type": "Boolean", "description": "True if x-scrollbar is currently visible.", "private": "", "guessedtype": "property"}, "_elTmpTable": {"guessedname": "_elTmpTable", "type": "HTMLElement", "description": "Offscreen TABLE element for auto-width calculation.", "private": "", "guessedtype": "property"}, "_elBdContainer": {"guessedname": "_elBdContainer", "type": "HTMLElement", "description": "Container for scrolling body TABLE element.", "private": "", "guessedtype": "property"}, "_elTmpContainer": {"guessedname": "_elTmpContainer", "type": "HTMLElement", "description": "Offscreen container to temporarily clone SDT for auto-width calculation.", "private": "", "guessedtype": "property"}}, "description": "The ScrollingDataTable class extends the DataTable class to provide\nfunctionality for x-scrolling, y-scrolling, and xy-scrolling."}, "YAHOO_config": {"name": "YAHOO_config", "namespace": "", "module": "yahoo", "static": "", "file": "YAHOO.js", "shortname": "YAHOO_config", "properties": {"listener": {"default": "undefined", "type": "Function", "static": "", "description": "A reference to a function that will be executed every time a YAHOO module\nis loaded.  As parameter, this function will receive the version\ninformation for the module. See <a href=\"YAHOO.env.html#getVersion\">\nYAHOO.env.getVersion</a> for the description of the version data structure."}, "load": {"default": "undefined", "see": "yuiloader", "static": "", "description": "Instructs the yuiloader component to dynamically load yui components and\ntheir dependencies.  See the yuiloader documentation for more information\nabout dynamic loading"}, "locale": {"description": "Forces the use of the supplied locale where applicable in the library", "default": "undefined", "static": "", "guessedname": "YAHOO", "guessedtype": "property", "type": "string"}, "injecting": {"default": "undefined", "type": "boolean", "static": "", "description": "Set to true if the library will be dynamically loaded after window.onload.\nDefaults to false"}}, "description": "YAHOO_config is not included as part of the library.  Instead it is an \nobject that can be defined by the implementer immediately before \nincluding the YUI library.  The properties included in this object\nwill be used to configure global properties needed as soon as the \nlibrary begins to load."}, "YAHOO.util.FunctionDataSource": {"name": "YAHOO.util.FunctionDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "FunctionDataSource class for JavaScript functions."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "FunctionDataSource", "methods": {"makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overriding method passes query to a function. The returned response is then\nforwarded to the handleResponse function.", "guessedname": "makeConnection", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "DataSource.js", "guessedtype": "function", "shortname": "FunctionDataSource", "properties": {"scope": {"default": "null", "type": "Object", "description": "Context in which to execute the function. By default, is the DataSource\ninstance itself. If set, the function will receive the DataSource instance\nas an additional argument.", "guessedname": "scope", "guessedtype": "property"}}, "description": "FunctionDataSource class for JavaScript functions."}, "YAHOO.widget.DateMath": {"name": "YAHOO.widget.DateMath", "namespace": "YAHOO.widget", "module": "datemath", "guessedname": "DateMath", "methods": {"isYearOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different years."}, "params": [{"type": "Date", "name": "weekBeginDate", "description": " The JavaScript Date representing the first day of the week."}], "description": "Determines if a given week overlaps two different years.", "guessedname": "isYearOverlapWeek", "guessedtype": "function"}, "getWeekNumber": {"return": {"type": "Number", "description": "The number of the week containing the given date."}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript date for which to find the week number"}, {"type": "Number", "name": "firstDayOfWeek", "description": " The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat).\nDefaults to 0"}, {"type": "Number", "name": "janDate", "description": " The date in the first week of January which defines week one for the year\nDefaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st). \nFor the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year."}], "description": "Calculates the week number for the given date. Can currently support standard\nU.S. week numbers, based on Jan 1st defining the 1st week of the year, and \nISO8601 week numbers, based on Jan 4th defining the 1st week of the year.", "guessedname": "getWeekNumber", "guessedtype": "function"}, "getDayOffset": {"return": {"type": "Number", "description": "The number of days since January 1 of the given year"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript date for which to find the offset"}, {"type": "Number", "name": "calendarYear", "description": " The calendar year to use for determining the offset"}], "description": "Calculates the number of days the specified date is from January 1 of the specified calendar year.\nPassing January 1 to this function would return an offset value of zero.", "guessedname": "getDayOffset", "guessedtype": "function"}, "findMonthEnd": {"return": {"type": "Date", "description": "The JavaScript Date representing the last day of the month"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date used to calculate the month end"}], "description": "Gets the last day of a month containing a given date.", "guessedname": "findMonthEnd", "guessedtype": "function"}, "getFirstDayOfWeek": {"return": {"type": "Date", "description": "The first day of the week"}, "params": [{"type": "Date", "name": "dt", "description": " The date in the week for which the first day is required."}, {"type": "Number", "name": "startOfWeek", "description": " The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)"}], "description": "Get the first day of the week, for the give date.", "guessedname": "getFirstDayOfWeek", "guessedtype": "function"}, "after": {"return": {"type": "Boolean", "description": "true if the date occurs after the compared date; false if not."}, "params": [{"type": "Date", "name": "date", "description": "  The Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": " The Date object to use for the comparison"}], "description": "Determines whether a given date is after another date on the calendar.", "guessedname": "after", "guessedtype": "function"}, "clearTime": {"return": {"type": "Date", "description": "The JavaScript Date cleared of all time fields"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date for which the time fields will be cleared"}], "description": "Clears the time fields from a given date, effectively setting the time to 12 noon.", "guessedname": "clearTime", "guessedtype": "function"}, "isMonthOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different months."}, "params": [{"type": "Date", "name": "weekBeginDate", "description": " The JavaScript Date representing the first day of the week."}], "description": "Determines if a given week overlaps two different months.", "guessedname": "isMonthOverlapWeek", "guessedtype": "function"}, "add": {"return": {"type": "Date", "description": "The resulting Date object"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date object to perform addition on"}, {"type": "String", "name": "field", "description": " The field constant to be used for performing addition."}, {"type": "Number", "name": "amount", "description": " The number of units (measured in the field constant) to add to the date."}], "description": "Adds the specified amount of time to the this instance.", "guessedname": "add", "guessedtype": "function"}, "getJan1": {"return": {"type": "Date", "description": "January 1 of the calendar year specified."}, "params": [{"type": "Number", "name": "calendarYear", "description": "  The calendar year for which to retrieve January 1"}], "description": "Retrieves a JavaScript Date object representing January 1 of any given year.", "guessedname": "getJan1", "guessedtype": "function"}, "between": {"return": {"type": "Boolean", "description": "true if the date occurs between the compared dates; false if not."}, "params": [{"type": "Date", "name": "date", "description": "  The date to check for"}, {"type": "Date", "name": "dateBegin", "description": " The start of the range"}, {"type": "Date", "name": "dateEnd", "description": "  The end of the range"}], "description": "Determines whether a given date is between two other dates on the calendar.", "guessedname": "between", "guessedtype": "function"}, "findMonthStart": {"return": {"type": "Date", "description": "The JavaScript Date representing the first day of the month"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date used to calculate the month start"}], "description": "Gets the first day of a month containing a given date.", "guessedname": "findMonthStart", "guessedtype": "function"}, "getDate": {"return": {"type": "Date", "description": "The JavaScript date object with year, month, date set as provided."}, "params": [{"type": "Number", "name": "y", "description": " Year."}, {"type": "Number", "name": "m", "description": " Month index from 0 (Jan) to 11 (Dec)."}, {"type": "Number", "name": "d", "description": " (optional) Date from 1 to 31. If not provided, defaults to 1."}], "description": "Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object\nare set to 0. The method allows Date instances to be created with the a year less than 100. \"new Date(year, month, date)\" implementations \nset the year to 19xx if a year (xx) which is less than 100 is provided.\n<p>\n<em>NOTE:</em>Validation on argument values is not performed. It is the caller's responsibility to ensure\narguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.\n</p>", "guessedname": "getDate", "guessedtype": "function"}, "subtract": {"return": {"type": "Date", "description": "The resulting Date object"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date object to perform subtraction on"}, {"type": "Number", "name": "field", "description": " The this field constant to be used for performing subtraction."}, {"type": "Number", "name": "amount", "description": " The number of units (measured in the field constant) to subtract from the date."}], "description": "Subtracts the specified amount of time from the this instance.", "guessedname": "subtract", "guessedtype": "function"}, "_addDays": {"guessedname": "_addDays", "params": [{"type": "Date", "name": "d", "description": " JavaScript date object"}, {"type": "Number", "name": "nDays", "description": " The number of days to add to the date object (can be negative)"}], "description": "Private helper method to account for bug in Safari 2 (webkit < 420)\nwhen Date.setDate(n) is called with n less than -128 or greater than 127.\n<p>\nFix approach and original findings are available here:\nhttp://brianary.blogspot.com/2006/03/safari-date-bug.html\n</p>", "private": "", "guessedtype": "function"}, "before": {"return": {"type": "Boolean", "description": "true if the date occurs before the compared date; false if not."}, "params": [{"type": "Date", "name": "date", "description": "  The Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": " The Date object to use for the comparison"}], "description": "Determines whether a given date is before another date on the calendar.", "guessedname": "before", "guessedtype": "function"}}, "file": "DateMath.js", "guessedtype": "property", "shortname": "DateMath", "properties": {"WEEK": {"description": "Constant field representing Week", "static": "", "guessedname": "WEEK", "guessedtype": "property", "type": "String", "final": ""}, "YEAR": {"description": "Constant field representing Year", "static": "", "guessedname": "YEAR", "guessedtype": "property", "type": "String", "final": ""}, "MONTH": {"description": "Constant field representing Month", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "ONE_DAY_MS": {"description": "Constant field representing one day, in milliseconds", "static": "", "guessedname": "ONE_DAY_MS", "guessedtype": "property", "type": "Number", "final": ""}, "WEEK_ONE_JAN_DATE": {"type": "Number", "static": "", "description": "Constant field representing the date in first week of January\nwhich identifies the first week of the year.\n<p>\nIn the U.S, Jan 1st is normally used based on a Sunday start of week.\nISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.\n</p>", "guessedname": "WEEK_ONE_JAN_DATE", "guessedtype": "property"}, "DAY": {"description": "Constant field representing Day", "static": "", "guessedname": "DAY", "guessedtype": "property", "type": "String", "final": ""}}, "description": "YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility\nused for adding, subtracting, and comparing dates."}, "YAHOO.util.DateLocale": {"name": "YAHOO.util.DateLocale", "namespace": "YAHOO.util", "module": "datasource", "guessedname": "DateLocale", "file": "Type.js", "guessedtype": "property", "shortname": "DateLocale", "requires": "yahoo", "description": "The DateLocale class is a container and base class for all\nlocalised date strings used by YAHOO.util.Date. It is used\ninternally, but may be extended to provide new date localisations.\nTo create your own DateLocale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs</li>\n<li>Use this as your base class.  Use YAHOO.util.DateLocale if nothing\nmatches.</li>\n<li>Create your own class as an extension of the base class using\nYAHOO.lang.merge, and add your own localisations where needed.</li>\n</ol>\nSee the YAHOO.util.DateLocale['en-US'] and YAHOO.util.DateLocale['en-GB']\nclasses which extend YAHOO.util.DateLocale['en'].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nYAHOO.util.DateLocale as the base, and extend it:\n<pre>\nYAHOO.util.DateLocale['fr'] = YAHOO.lang.merge(YAHOO.util.DateLocale, {\na: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],\nA: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],\nb: ['jan', 'f&eacute;v', 'mar', 'avr', 'mai', 'jun', 'jui', 'ao&ucirc;', 'sep', 'oct', 'nov', 'd&eacute;c'],\nB: ['janvier', 'f&eacute;vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao&ucirc;t', 'septembre', 'octobre', 'novembre', 'd&eacute;cembre'],\nc: '%a %d %b %Y %T %Z',\np: ['', ''],\nP: ['', ''],\nx: '%d.%m.%Y',\nX: '%T'\n});\n</pre>\n</li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nYAHOO.util.DateLocale['fr-CA'] = YAHOO.lang.merge(YAHOO.util.DateLocale['fr'], {\nx: '%Y-%m-%d'\n});\n</pre>\n</li>\n</ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008/04/22\");\nYAHOO.util.Date.format(d, {format: \"%A, %d %B == %x\"}, \"fr\");\n</pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n</pre>\nAnd\n<pre>\nYAHOO.util.Date.format(d, {format: \"%A, %d %B == %x\"}, \"fr-CA\");\n</pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n</pre>"}, "YAHOO.util.StorageEngineKeyed": {"name": "YAHOO.util.StorageEngineKeyed", "extend": "YAHOO.util.Storage", "constructors": [{"description": "The StorageEngineKeyed class implements the interface necessary for managing keys."}], "namespace": "YAHOO.util", "module": "Storage", "guessedname": "StorageEngineKeyed", "methods": {"_indexOfKey": {"protected": "", "params": [{"type": "String", "name": "key", "description": "  Required. The key to evaluate."}], "description": "Evaluates if a key exists in the keys array; indexOf does not work in all flavors of IE.", "guessedname": "_indexOfKey", "guessedtype": "function"}, "_removeKey": {"protected": "", "params": [{"type": "String", "name": "key", "description": "  Required. The key to remove."}], "description": "Removes a key from the keys array.", "guessedname": "_removeKey", "guessedtype": "function"}, "_addKey": {"protected": "", "params": [{"type": "String", "name": "key", "description": "  Required. The key to evaluate."}], "description": "Adds the key to the set.", "guessedname": "_addKey", "guessedtype": "function"}}, "file": "StorageEngineKeyed.js", "guessedtype": "function", "shortname": "StorageEngineKeyed", "properties": {"_keyMap": {"protected": "", "type": "{Object}", "description": "A map of keys to their applicable position in keys array. This should never be edited by the developer.", "guessedname": "_keyMap", "guessedtype": "property"}, "_keys": {"protected": "", "type": "{Array}", "description": "A collection of keys applicable to the current location. This should never be edited by the developer.", "guessedname": "_keys", "guessedtype": "property"}}, "description": "The StorageEngineKeyed class implements the interface necessary for managing keys."}, "YAHOO.tool.TestSuite": {"name": "YAHOO.tool.TestSuite", "constructors": [{"params": [{"type": "String||Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestSuite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "params": [{"type": "YAHOO.tool.TestSuite||YAHOO.tool.TestCase", "name": "testObject", "description": " The test suite or test case to add."}], "description": "Adds a test suite or test case to the test suite.", "guessedname": "add", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "TestSuite.js", "guessedtype": "function", "shortname": "TestSuite", "properties": {"name": {"type": "String", "description": "The name of the test suite."}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "YAHOO.util.DragDropMgr.ElementWrapper": {"name": "YAHOO.util.DragDropMgr.ElementWrapper", "for": "DragDropMgr", "innerClasses": ["DragDropMgr"], "deprecated": "", "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "ElementWrapper", "private": "", "file": "DragDropMgr.js", "guessedtype": "function", "shortname": "DragDropMgr.ElementWrapper", "properties": {"el": {"description": "The element", "guessedname": "el", "guessedtype": "property"}, "id": {"description": "The element id", "guessedname": "id", "guessedtype": "property"}, "css": {"description": "A reference to the style property", "guessedname": "css", "guessedtype": "property"}}, "description": "Inner class for cached elements"}, "YAHOO.util.ColumnResizer": {"name": "YAHOO.util.ColumnResizer", "constructors": [{"params": [{"type": "YAHOO.widget.DataTable", "name": "oDataTable", "description": "  DataTable instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "HTMLElement", "name": "elTh", "description": "  TH element reference."}, {"type": "String", "name": "sHandleElId", "description": "  DOM ID of the handle element that causes the resize."}, {"type": "HTMLElement", "name": "elProxy", "description": "  Resizer proxy element."}], "description": "ColumnResizer subclasses DragDrop to support resizeable Columns."}], "namespace": "YAHOO.util", "module": "datatable", "guessedname": "ColumnResizer", "methods": {"startDrag": {"params": [{"type": "string", "name": "e", "description": "  The drag event"}], "description": "Handles start drag on the Column resizer.", "guessedname": "startDrag", "guessedtype": "function"}, "resetResizerEl": {"description": "Resets resizer element.", "guessedname": "resetResizerEl", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "string", "name": "e", "description": "  The mousedown event"}], "description": "Handles mousedown events on the Column resizer.", "guessedname": "onMouseDown", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "string", "name": "e", "description": "  The mouseup event"}], "description": "Handles mouseup events on the Column resizer.", "guessedname": "onMouseUp", "guessedtype": "function"}, "onDrag": {"params": [{"type": "string", "name": "e", "description": "  The drag event"}], "description": "Handles drag events on the Column resizer.", "guessedname": "onDrag", "guessedtype": "function"}, "clickValidator": {"guessedname": "clickValidator", "params": [{"type": "Event", "name": "e", "description": ""}], "description": "Custom clickValidator to ensure Column is not in hidden state.", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.DDProxy", "superclass": "YAHOO.util.DDProxy", "file": "ColumnSet.js", "guessedtype": "function", "shortname": "ColumnResizer", "properties": {"editorOptions": {"deprecated": "Pass configs directly to CellEditor constructor."}}, "description": "ColumnResizer subclasses DragDrop to support resizeable Columns."}, "YAHOO.util.StorageEngineHTML5": {"name": "YAHOO.util.StorageEngineHTML5", "extend": "YAHOO.util.Storage", "constructors": [{"params": [{"type": "String", "name": "location", "description": "  Required. The storage location."}, {"type": "Object", "name": "conf", "description": "  Required. A configuration object."}], "description": "The StorageEngineHTML5 class implements the HTML5 storage engine."}], "namespace": "YAHOO.util", "module": "Storage", "guessedname": "StorageEngineHTML5", "file": "StorageEngineHTML5.js", "guessedtype": "function", "shortname": "StorageEngineHTML5", "description": "The StorageEngineHTML5 class implements the HTML5 storage engine."}, "YAHOO.widget.DualSlider": {"name": "YAHOO.widget.DualSlider", "constructors": [{"params": [{"type": "Slider", "name": "minSlider", "description": " The Slider instance used for the min value thumb"}, {"type": "Slider", "name": "maxSlider", "description": " The Slider instance used for the max value thumb"}, {"type": "int", "name": "range", "description": " The number of pixels the thumbs may move within"}, {"type": "Array", "name": "initVals", "description": " (optional) [min,max] Initial thumb placement"}], "description": "A slider with two thumbs, one that represents the min value and \nthe other the max.  Actually a composition of two sliders, both with\nthe same background.  The constraints for each slider are adjusted\ndynamically so that the min value of the max slider is equal or greater\nto the current value of the min slider, and the max value of the min\nslider is the current value of the max slider.\nConstructor assumes both thumbs are positioned absolutely at the 0 mark on\nthe background."}], "namespace": "YAHOO.widget", "module": "slider", "events": {"ready": {"params": [{"type": "DualSlider", "name": "dualslider", "description": " the DualSlider instance"}], "description": "Event that fires when the slider is finished setting up"}, "slideEnd": {"params": [{"type": "Slider", "name": "activeSlider", "description": " the moving slider"}], "description": "Event that fires when one of the thumbs finishes moving"}, "change": {"params": [{"type": "DualSlider", "name": "dualslider", "description": " the DualSlider instance"}], "description": "Event that fires when either the min or max value changes"}, "slideStart": {"params": [{"type": "Slider", "name": "activeSlider", "description": " the moving slider"}], "description": "Event that fires when one of the thumbs begins to move"}}, "methods": {"_handleSlideStart": {"private": "", "description": "Executed when one of the sliders fires the slideStart event", "guessedname": "_handleSlideStart", "guessedtype": "function"}, "_handleMouseDown": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  mouseup event"}], "description": "Delegates the onMouseDown to the appropriate Slider", "guessedname": "_handleMouseDown", "guessedtype": "function"}, "_oneTimeCallback": {"guessedname": "_oneTimeCallback", "params": [{"type": "EventProvider", "name": "o", "description": "  Object to attach the event to"}, {"type": "string", "name": "evt", "description": "  Name of the event"}, {"type": "Function", "name": "fn", "description": "  function to execute once"}], "description": "Schedule an event callback that will execute once, then unsubscribe\nitself.", "private": "", "guessedtype": "function"}, "_handleSlideEnd": {"private": "", "description": "Executed when one of the sliders fires the slideEnd event", "guessedname": "_handleSlideEnd", "guessedtype": "function"}, "_handleDrag": {"private": "", "description": "Overrides the onDrag method for both sliders", "guessedname": "_handleDrag", "guessedtype": "function"}, "_bindKeyEvents": {"protected": "", "description": "Set up the listeners for the keydown and keypress events.", "guessedname": "_bindKeyEvents", "guessedtype": "function"}, "selectActiveSlider": {"guessedname": "selectActiveSlider", "params": [{"type": "Event", "name": "e", "description": "  the mousedown event"}], "description": "A background click will move the slider thumb nearest to the click.\nOverride if you need different behavior.", "private": "", "guessedtype": "function"}, "setMinValue": {"params": [{"type": "int", "name": "min", "description": "  Pixel offset for min thumb"}, {"type": "boolean", "name": "skipAnim", "description": "  (optional) Set to true to skip thumb animation.\nDefault false"}, {"type": "boolean", "name": "force", "description": "  (optional) ignore the locked setting and set\nvalue anyway. Default false"}, {"type": "boolean", "name": "silent", "description": "  (optional) Set to true to skip firing change\nevents.  Default false"}], "description": "Set the min thumb position to a new value.", "guessedname": "setMinValue", "guessedtype": "function"}, "setMaxValue": {"params": [{"type": "int", "name": "max", "description": "  Pixel offset for max thumb"}, {"type": "boolean", "name": "skipAnim", "description": "  (optional) Set to true to skip thumb animation.\nDefault false"}, {"type": "boolean", "name": "force", "description": "  (optional) ignore the locked setting and set\nvalue anyway. Default false"}, {"type": "boolean", "name": "silent", "description": "  (optional) Set to true to skip firing change\nevents.  Default false"}], "description": "Set the max thumb position to a new value.", "guessedname": "setMaxValue", "guessedtype": "function"}, "_cleanEvent": {"guessedname": "_cleanEvent", "params": [{"type": "EventProvider", "name": "o", "description": "  object housing the CustomEvent"}, {"type": "string", "name": "evt", "description": "  name of the CustomEvent"}], "description": "Clean up the slideEnd event subscribers array, since each one-time\ncallback will be replaced in the event's subscribers property with\nnull.  This will cause memory bloat and loss of performance.", "private": "", "guessedtype": "function"}, "_handleKeyDown": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the mousedown DOM event"}], "description": "Delegate event handling to the active Slider.  See Slider.handleKeyDown.", "guessedname": "_handleKeyDown", "guessedtype": "function"}, "updateValue": {"guessedname": "updateValue", "params": [{"type": "boolean", "name": "silent", "description": "  (optional) Set to true to skip firing change\nevents.  Default false"}], "description": "Executed when one of the sliders is moved", "private": "", "guessedtype": "function"}, "_handleKeyPress": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the mousedown DOM event"}], "description": "Delegate event handling to the active Slider.  See Slider.handleKeyPress.", "guessedname": "_handleKeyPress", "guessedtype": "function"}, "_handleMinChange": {"private": "", "description": "Executed when the min slider fires the change event", "guessedname": "_handleMinChange", "guessedtype": "function"}, "setValues": {"params": [{"type": "int", "name": "min", "description": "  Pixel offset to assign to the min thumb"}, {"type": "int", "name": "max", "description": "  Pixel offset to assign to the max thumb"}, {"type": "boolean", "name": "skipAnim", "description": "  (optional) Set to true to skip thumb animation.\nDefault false"}, {"type": "boolean", "name": "force", "description": "  (optional) ignore the locked setting and set\nvalue anyway. Default false"}, {"type": "boolean", "name": "silent", "description": "  (optional) Set to true to skip firing change\nevents.  Default false"}], "description": "Sets the min and max thumbs to new values.", "guessedname": "setValues", "guessedtype": "function"}, "_handleMaxChange": {"private": "", "description": "Executed when the max slider fires the change event", "guessedname": "_handleMaxChange", "guessedtype": "function"}, "_handleMouseUp": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  mouseup event"}], "description": "Delegates the onMouseUp to the active Slider", "guessedname": "_handleMouseUp", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "DualSlider.js", "shortname": "DualSlider", "properties": {"maxVal": {"type": "int", "description": "The current value of the max thumb. <strong>read only</strong>.", "guessedname": "maxVal", "guessedtype": "property"}, "minRange": {"default": "0", "type": "int", "description": "Pixel distance to maintain between thumbs.", "guessedname": "minRange", "guessedtype": "property"}, "minVal": {"type": "int", "description": "The current value of the min thumb. <strong>read only</strong>.", "guessedname": "minVal", "guessedtype": "property"}, "maxSlider": {"type": "Slider", "description": "A slider instance that keeps track of the upper value of the range.\n<strong>read only</strong>", "guessedname": "maxSlider", "guessedtype": "property"}, "minSlider": {"type": "Slider", "description": "A slider instance that keeps track of the lower value of the range.\n<strong>read only</strong>", "guessedname": "minSlider", "guessedtype": "property"}, "isHoriz": {"type": "boolean", "description": "Is the DualSlider oriented horizontally or vertically?\n<strong>read only</strong>", "guessedname": "isHoriz", "guessedtype": "property"}, "activeSlider": {"type": "Slider", "description": "The currently active slider (min or max). <strong>read only</strong>", "guessedname": "activeSlider", "guessedtype": "property"}}, "description": "A slider with two thumbs, one that represents the min value and \nthe other the max.  Actually a composition of two sliders, both with\nthe same background.  The constraints for each slider are adjusted\ndynamically so that the min value of the max slider is equal or greater\nto the current value of the min slider, and the max value of the min\nslider is the current value of the max slider.\nConstructor assumes both thumbs are positioned absolutely at the 0 mark on\nthe background."}, "YAHOO.widget.DateCellEditor": {"name": "YAHOO.widget.DateCellEditor", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The DataCellEditor class provides functionality for inline editing\nDataTable cell data with a YUI Calendar."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "DateCellEditor", "methods": {"renderForm": {"description": "Render a Calendar.", "guessedname": "renderForm", "guessedtype": "function"}, "handleDisabledBtns": {"description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them.", "guessedname": "handleDisabledBtns", "guessedtype": "function"}, "getInputValue": {"description": "Retrieves input value from DateCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in DateCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets DateCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "DateCellEditor", "properties": {"calendar": {"type": "YAHOO.widget.Calendar", "description": "Reference to Calendar instance.", "guessedname": "calendar", "guessedtype": "property"}, "defaultValue": {"default": "new Date()", "type": "Date", "description": "Default value.", "guessedname": "defaultValue", "guessedtype": "property"}, "calendarOptions": {"type": "Object", "description": "Configs for the calendar instance, to be passed to Calendar constructor.", "guessedname": "calendarOptions", "guessedtype": "property"}}, "description": "The DataCellEditor class provides functionality for inline editing\nDataTable cell data with a YUI Calendar."}, "YAHOO.util.Element": {"name": "YAHOO.util.Element", "configs": {"element": {"type": "HTMLElement", "description": "The HTMLElement the Element instance refers to."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": "  The html element that \nrepresents the Element."}, {"type": "Object", "name": "map", "description": " A key-value map of initial config names and values"}], "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes."}], "namespace": "YAHOO.util", "module": "element", "events": {"available": {"description": "Fires when the Element's HTMLElement can be retrieved by Id.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> available<br>\n<code>&lt;HTMLElement&gt;\ntarget</code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('available', handler);</code></p>"}, "contentReady": {"description": "Fires when the Element's HTMLElement subtree is rendered.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> contentReady<br>\n<code>&lt;HTMLElement&gt;\ntarget</code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('contentReady', handler);</code></p>"}, "beforeElementChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeElementChange", "description": "Fires before the value for the configuration attribute 'element' changes. Return false to cancel the attribute change."}, "beforeAppendTo": {"description": "Fires before the Element is appended to another Element.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> beforeAppendTo<br>\n<code>&lt;HTMLElement/Element&gt;\ntarget</code> the HTMLElement/Element being appended to \n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('beforeAppendTo', handler);</code></p>"}, "elementChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "elementChange", "description": "Fires when the value for the configuration attribute 'element' changes."}, "appendTo": {"description": "Fires after the Element is appended to another Element.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> appendTo<br>\n<code>&lt;HTMLElement/Element&gt;\ntarget</code> the HTMLElement/Element being appended to \n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('appendTo', handler);</code></p>"}}, "guessedname": "Element", "methods": {"appendChild": {"return": {"type": "HTMLElement", "description": "The appended DOM element."}, "params": [{"type": "YAHOO.util.Element || HTMLElement", "name": "child", "description": " The element to append."}], "description": "Wrapper for HTMLElement method.", "guessedname": "appendChild", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String", "name": "property", "description": " The style property to set"}, {"type": "String", "name": "value", "description": " The value to apply to the style property"}], "description": "Wrapper for Dom method.", "guessedname": "setStyle", "guessedtype": "function"}, "subscribe": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Alias for addListener", "guessedname": "subscribe", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of initial attribute configs"}], "description": "Registers Element specific attributes.", "guessedname": "initAttributes", "guessedtype": "function"}, "removeDelegate": {"return": {"type": "boolean", "description": "Returns true if the unbind was successful, false \notherwise."}, "params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}], "description": "Remove a delegated event listener", "guessedname": "removeDelegate", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "String", "name": "className", "description": " The className to collect"}, {"type": "String", "name": "tag", "description": " (optional) The tag to use in\nconjunction with class name"}], "description": "Wrapper for Dom method.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "String", "name": "oldClassName", "description": " The className to replace"}, {"type": "String", "name": "newClassName", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "replaceClass", "guessedtype": "function"}, "appendTo": {"return": {"type": "HTMLElement", "description": "The appended DOM element."}, "params": [{"type": "HTMLElement | Element", "name": "parentNode", "description": " The node to append to"}, {"type": "HTMLElement | Element", "name": "before", "description": " An optional node to insert before"}], "description": "Appends the HTMLElement into either the supplied parentNode.", "guessedname": "appendTo", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the element has childNodes"}, "description": "Wrapper for HTMLElement method.", "guessedname": "hasChildNodes", "guessedtype": "function"}, "_setHTMLAttrConfig": {"guessedname": "_setHTMLAttrConfig", "params": [{"type": "YAHOO.util.Element", "name": "element", "description": " The Element instance to\nregister the config to."}, {"type": "String", "name": "key", "description": " The name of the config to register"}, {"type": "Object", "name": "map", "description": " A key-value map of the config's params"}], "description": "Sets the value of the property and fires beforeChange and change events.", "private": "", "guessedtype": "function"}, "fireQueue": {"description": "Apply any queued set calls.", "guessedname": "fireQueue", "guessedtype": "function"}, "addListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Adds a listener for the given event.  These may be DOM or \ncustomEvent listeners.  Any event that is fired via fireEvent\ncan be listened for.  All handlers receive an event object.", "guessedname": "addListener", "guessedtype": "function"}, "insertBefore": {"return": {"type": "HTMLElement", "description": "The inserted DOM element."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "before", "description": " The HTMLElement to insert\nthe element before."}], "description": "Wrapper for HTMLElement method.", "guessedname": "insertBefore", "guessedtype": "function"}, "getElementsByTagName": {"return": {"type": "HTMLCollection", "description": "A collection of DOM elements."}, "params": [{"type": "String", "name": "tag", "description": " The tagName to collect"}], "description": "Wrapper for HTMLElement method.", "guessedname": "getElementsByTagName", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " The className to remove"}], "description": "Wrapper for Dom method.", "guessedname": "removeClass", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "The current value of the property"}, "params": [{"type": "String", "name": "property", "description": " The style property to retrieve"}], "description": "Wrapper for Dom method.", "guessedname": "getStyle", "guessedtype": "function"}, "replaceChild": {"return": {"type": "HTMLElement", "description": "The replaced DOM element."}, "params": [{"type": "HTMLElement", "name": "newNode", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "oldNode", "description": " The HTMLElement to replace"}], "description": "Wrapper for HTMLElement method.", "guessedname": "replaceChild", "guessedtype": "function"}, "removeListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}], "description": "Remove an event listener", "guessedname": "removeListener", "guessedtype": "function"}, "on": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Alias for addListener", "guessedname": "on", "guessedtype": "function"}, "removeChild": {"return": {"type": "HTMLElement", "description": "The removed DOM element."}, "params": [{"type": "HTMLElement", "name": "child", "description": " The HTMLElement to remove"}], "description": "Wrapper for HTMLElement method.", "guessedname": "removeChild", "guessedtype": "function"}, "delegate": {"return": {"type": "boolean", "description": "Returns true if the delegated event listener \nwas added successfully"}, "params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Function|string", "name": "filter", "description": " Function or CSS selector used to \ndetermine for what element(s) the event listener should be called. \nWhen a function is specified, the function should return an \nHTML element.  Using a CSS Selector requires the inclusion of the \nCSS Selector Utility."}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Appends a delegated event listener.  Delegated event listeners \nreceive two arguments by default: the DOM event and the element  \nspecified by the filtering function or CSS selector.\n(Note: Using the delegate method requires the element-delegate \nmodule.  Using CSS selectors as the filtering criteria for delegated \nevent listeners requires inclusion of the Selector Utility.)", "guessedname": "delegate", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the class name"}, "params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "hasClass", "guessedtype": "function"}, "addClass": {"params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "addClass", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "Element.js", "guessedtype": "function", "shortname": "Element", "properties": {"DOM_EVENTS": {"type": "Object", "description": "Dom events supported by the Element instance.", "guessedname": "DOM_EVENTS", "guessedtype": "property"}}, "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes."}, "YAHOO.util.DragDrop": {"name": "YAHOO.util.DragDrop", "constructors": [{"params": [{"type": "String", "name": "id", "description": " of the element that is linked to this instance"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DragDrop: \npadding, isTarget, maintainOffset, primaryButtonOnly,"}], "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.</li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.</li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n</li>\n</ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n</pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n</pre>"}], "namespace": "YAHOO.util", "module": "dragdrop", "events": {"startDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown."}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fired from inside DragDropMgr when the drag operation is finished."}, "dragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs every mousemove event while dragging."}, "dragOverEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires every mousemove event while over a drag and drop object."}, "dragOutEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when a dragged object is no longer over an object that had the onDragEnter fire."}, "b4EndDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the endDragEvent. Returning false will cancel."}, "b4StartDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the startDragEvent, returning false will cancel the startDrag Event."}, "b4DragOutEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragOutEvent"}, "endDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires on the mouseup event after a drag has been initiated (startDrag fired)."}, "b4DragOverEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragOverEvent."}, "dragEnterEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs when the dragged object first interacts with another targettable drag and drop object."}, "b4DragDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragDropEvent"}, "b4DragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragEvent."}, "dragDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when the dragged objects is dropped on another."}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Provides access to the mousedown event. The mousedown does not always result in a drag operation."}, "invalidDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when the dragged objects is dropped in a location that contains no drop targets."}, "b4MouseDownEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag."}}, "guessedname": "DragDrop", "methods": {"addToGroup": {"params": [{"type": "string", "name": "sGroup", "description": "  the name of the group"}], "description": "Add this instance to a group of related drag/drop objects.  All \ninstances belong to at least one group, and can belong to as many \ngroups as needed.", "guessedname": "addToGroup", "guessedtype": "function"}, "startDrag": {"params": [{"type": "int", "name": "X", "description": " click location"}, {"type": "int", "name": "Y", "description": " click location"}], "description": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.", "guessedname": "startDrag", "guessedtype": "function"}, "isValidHandleChild": {"return": {"type": "boolean", "description": "true if this is a valid tag type, false if not"}, "params": [{"type": "HTMLElement", "name": "node", "description": " the HTMLElement to evaluate"}], "description": "Checks the tag exclusion list to see if this click should be ignored", "guessedname": "isValidHandleChild", "guessedtype": "function"}, "b4Drag": {"private": "", "description": "Code that executes immediately before the onDrag event", "guessedname": "b4Drag", "guessedtype": "function"}, "lock": {"description": "Lock this instance", "guessedname": "lock", "guessedtype": "function"}, "onDragEnter": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of one or more \ndragdrop items being hovered over."}], "description": "Abstract method called when this element fist begins hovering over \nanother DragDrop obj", "guessedname": "onDragEnter", "guessedtype": "function"}, "b4StartDrag": {"private": "", "description": "Code that executes immediately before the startDrag event", "guessedname": "b4StartDrag", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "Event", "name": "e", "description": " the mousedown event"}], "description": "Event handler that fires when a drag/drop obj gets a mousedown", "guessedname": "onMouseDown", "guessedtype": "function"}, "setOuterHandleElId": {"params": [{"type": "", "name": "id", "description": " the id of the element that will be used to initiate the drag"}], "description": "Allows you to set an element outside of the linked element as a drag \nhandle", "guessedname": "setOuterHandleElId", "guessedtype": "function"}, "unlock": {"description": "Unlock this instace", "guessedname": "unlock", "guessedtype": "function"}, "clearTicks": {"description": "Clears any tick interval defined for this instance", "guessedname": "clearTicks", "guessedtype": "function"}, "setStartPosition": {"guessedname": "setStartPosition", "params": [{"type": "", "name": "pos", "description": " current position (from previous lookup)"}], "description": "Sets the start position of the element.  This is set when the obj\nis initialized, the reset when a drag is started.", "private": "", "guessedtype": "function"}, "resetConstraints": {"description": "resetConstraints must be called if you manually reposition a dd element.", "guessedname": "resetConstraints", "guessedtype": "function"}, "clickValidator": {"params": [{"type": "Event", "name": "e", "description": ""}], "description": "Method validates that the clicked element\nwas indeed the handle or a valid child of the handle", "guessedname": "clickValidator", "guessedtype": "function"}, "handleMouseDown": {"guessedname": "handleMouseDown", "params": [{"type": "Event", "name": "e", "description": ""}, {"type": "YAHOO.util.DragDrop", "name": "oDD", "description": " the clicked dd object (this dd obj)"}], "description": "Fired when this object is clicked", "private": "", "guessedtype": "function"}, "onDragOver": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of dd items \nbeing hovered over."}], "description": "Abstract method called when this element is hovering over another \nDragDrop obj", "guessedname": "onDragOver", "guessedtype": "function"}, "addInvalidHandleType": {"params": [{"type": "string", "name": "tagName", "description": " the type of element to exclude"}], "description": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.", "guessedname": "addInvalidHandleType", "guessedtype": "function"}, "setDragElId": {"params": [{"type": "string", "name": "id", "description": "  the id of the element that will be used to initiate the drag"}], "description": "Allows you to specify that an element other than the linked element \nwill be moved with the cursor during a drag", "guessedname": "setDragElId", "guessedtype": "function"}, "setXConstraint": {"params": [{"type": "int", "name": "iLeft", "description": " the number of pixels the element can move to the left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move to the \nright"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the \nelement\nshould move iTickSize pixels at a time."}], "description": "By default, the element can be dragged any place on the screen.  Use \nthis method to limit the horizontal travel of the element.  Pass in \n0,0 for the parameters if you want to lock the drag to the y axis.", "guessedname": "setXConstraint", "guessedtype": "function"}, "getTick": {"return": {"type": "int", "description": "the closest tick"}, "description": "Normally the drag element is moved pixel by pixel, but we can specify \nthat it move a number of pixels at a time.  This method resolves the \nlocation when we have it set up like this.", "private": "", "params": [{"type": "int", "name": "val", "description": " where we want to place the object"}, {"type": "int[]", "name": "tickArray", "description": " sorted array of valid points"}], "guessedname": "getTick", "guessedtype": "function"}, "init": {"params": [{"type": "", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related items"}, {"type": "object", "name": "config", "description": " configuration attributes"}], "description": "Sets up the DragDrop object.  Must be called in the constructor of any\nYAHOO.util.DragDrop subclass", "guessedname": "init", "guessedtype": "function"}, "clearConstraints": {"description": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.", "guessedname": "clearConstraints", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the html element"}, "description": "Returns a reference to the linked element", "guessedname": "getEl", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the dd obj"}, "description": "toString method", "guessedname": "toString", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Event handler that fires when a drag/drop obj gets a mouseup", "guessedname": "onMouseUp", "guessedtype": "function"}, "removeInvalidHandleType": {"params": [{"type": "string", "name": "tagName", "description": " the type of element to unexclude"}], "description": "Unsets an excluded tag name set by addInvalidHandleType", "guessedname": "removeInvalidHandleType", "guessedtype": "function"}, "getTargetCoord": {"return": {"type": "", "description": "an object that contains the coordinates (Object.x and Object.y)"}, "description": "Finds the location the element should be placed if we want to move\nit to where the mouse location less the click offset would place us.", "private": "", "params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the click"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the click"}], "guessedname": "getTargetCoord", "guessedtype": "function"}, "setHandleElId": {"params": [{"type": "string", "name": "id", "description": "  the id of the element that will be used to \ninitiate the drag."}], "description": "Allows you to specify a child of the linked element that should be \nused to initiate the drag operation.  An example of this would be if \nyou have a content div with text and links.  Clicking anywhere in the \ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element \nthat starts the drag operation.", "guessedname": "setHandleElId", "guessedtype": "function"}, "onDragOut": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this was hovering over.  In INTERSECT mode, an array of dd items \nthat the mouse is no longer over."}], "description": "Abstract method called when we are no longer hovering over an element", "guessedname": "onDragOut", "guessedtype": "function"}, "onInvalidDrop": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Abstract method called when this item is dropped on an area with no\ndrop target", "guessedname": "onInvalidDrop", "guessedtype": "function"}, "setInitialPosition": {"guessedname": "setInitPosition", "params": [{"type": "int", "name": "diffX", "description": "   the X offset, default 0"}, {"type": "int", "name": "diffY", "description": "   the Y offset, default 0"}], "description": "Stores the initial placement of the linked element.", "private": "", "guessedtype": "function"}, "b4DragDrop": {"private": "", "description": "Code that executes immediately before the onDragDrop event", "guessedname": "b4DragDrop", "guessedtype": "function"}, "removeFromGroup": {"params": [{"type": "string", "name": "sGroup", "description": "  The group to drop"}], "description": "Remove's this instance from the supplied interaction group", "guessedname": "removeFromGroup", "guessedtype": "function"}, "initTarget": {"params": [{"type": "", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related items"}, {"type": "object", "name": "config", "description": " configuration attributes"}], "description": "Initializes Targeting functionality only... the object does not\nget a mousedown handler.", "guessedname": "initTarget", "guessedtype": "function"}, "removeInvalidHandleClass": {"params": [{"type": "string", "name": "cssClass", "description": " the class of the element(s) you wish to \nre-enable"}], "description": "Unsets an invalid css class", "guessedname": "removeInvalidHandleClass", "guessedtype": "function"}, "onDragDrop": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this was dropped on.  In INTERSECT mode, an array of dd items this \nwas dropped on."}], "description": "Abstract method called when this item is dropped on another DragDrop \nobj", "guessedname": "onDragDrop", "guessedtype": "function"}, "setYTicks": {"private": "", "description": "Create the array of vertical tick marks if an interval was specified in \nsetYConstraint().", "guessedname": "setYTicks", "guessedtype": "function"}, "b4EndDrag": {"private": "", "description": "Code that executes immediately before the endDrag event", "guessedname": "b4EndDrag", "guessedtype": "function"}, "removeInvalidHandleId": {"params": [{"type": "string", "name": "id", "description": " the id of the element to re-enable"}], "description": "Unsets an invalid handle id", "guessedname": "removeInvalidHandleId", "guessedtype": "function"}, "onAvailable": {"description": "Override the onAvailable method to do what is needed after the initial\nposition was determined.", "guessedname": "onAvailable", "guessedtype": "function"}, "getDragEl": {"return": {"type": "HTMLElement", "description": "the html element"}, "description": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another \nelement. An example of this can be found in YAHOO.util.DDProxy", "guessedname": "getDragEl", "guessedtype": "function"}, "onDrag": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}], "description": "Abstract method called during the onMouseMove event while dragging an \nobject.", "guessedname": "onDrag", "guessedtype": "function"}, "applyConfig": {"description": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and \nDragDrop in order to get all of the parameters that are available in\neach object.", "guessedname": "applyConfig", "guessedtype": "function"}, "on": {"description": "Shortcut for EventProvider.subscribe, see <a href=\"YAHOO.util.EventProvider.html#subscribe\">YAHOO.util.EventProvider.subscribe</a>", "guessedname": "on", "guessedtype": "function"}, "b4DragOver": {"private": "", "description": "Code that executes immediately before the onDragOver event", "guessedname": "b4DragOver", "guessedtype": "function"}, "setYConstraint": {"params": [{"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the \nelement should move iTickSize pixels at a time."}], "description": "By default, the element can be dragged any place on the screen.  Set \nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.", "guessedname": "setYConstraint", "guessedtype": "function"}, "endDrag": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Fired when we are done dragging the object", "guessedname": "endDrag", "guessedtype": "function"}, "isLocked": {"return": {"type": "boolean", "description": "true if this obj or all drag/drop is locked, else \nfalse"}, "description": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)", "guessedname": "isLocked", "guessedtype": "function"}, "addInvalidHandleClass": {"params": [{"type": "string", "name": "cssClass", "description": " the class of the elements you wish to ignore"}], "description": "Lets you specify a css class of elements that will not initiate a drag", "guessedname": "addInvalidHandleClass", "guessedtype": "function"}, "handleOnAvailable": {"private": "", "description": "Executed when the linked element is available", "guessedname": "handleOnAvailable", "guessedtype": "function"}, "setPadding": {"params": [{"type": "int", "name": "iTop", "description": "    Top pad"}, {"type": "int", "name": "iRight", "description": "  Right pad"}, {"type": "int", "name": "iBot", "description": "    Bot pad"}, {"type": "int", "name": "iLeft", "description": "   Left pad"}], "description": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.  \nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.", "guessedname": "setPadding", "guessedtype": "function"}, "unreg": {"description": "Remove all drag and drop hooks for this element", "guessedname": "unreg", "guessedtype": "function"}, "b4MouseDown": {"guessedname": "b4MouseDown", "params": [{"type": "Event", "name": "e", "description": " the mousedown event"}], "description": "Code executed immediately before the onMouseDown event", "private": "", "guessedtype": "function"}, "b4DragOut": {"private": "", "description": "Code that executes immediately before the onDragOut event", "guessedname": "b4DragOut", "guessedtype": "function"}, "addInvalidHandleId": {"params": [{"type": "string", "name": "id", "description": " the element id of the element you wish to ignore"}], "description": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag", "guessedname": "addInvalidHandleId", "guessedtype": "function"}, "setXTicks": {"private": "", "description": "Create the array of horizontal tick marks if an interval was specified\nin setXConstraint().", "guessedname": "setXTicks", "guessedtype": "function"}}, "file": "DragDrop.js", "guessedtype": "function", "shortname": "DragDrop", "properties": {"maxX": {"guessedname": "maxX", "type": "int", "description": "The right constraint", "private": "", "guessedtype": "property"}, "maxY": {"guessedname": "maxY", "type": "int", "description": "The down constraint", "private": "", "guessedtype": "property"}, "hasOuterHandles": {"default": "false", "type": "boolean", "description": "By default, drags can only be initiated if the mousedown occurs in the\nregion the linked element is.  This is done in part to work around a\nbug in some browsers that mis-report the mousedown if the previous\nmouseup happened outside of the window.  This property is set to true\nif outer handles are defined.", "guessedname": "hasOuterHandles", "guessedtype": "property"}, "_domRef": {"private": "", "description": "Cached reference to the linked element", "guessedname": "_domRef", "guessedtype": "property"}, "yTicks": {"type": "int[]", "description": "Array of pixel locations the element will snap to if we specified a \nvertical graduation/interval.  This array is generated automatically \nwhen you define a tick interval.", "guessedname": "yTicks", "guessedtype": "property"}, "startPageY": {"guessedname": "startPageY", "type": "int", "description": "The linked element's absolute X position at the time the drag was \nstarted", "private": "", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element associated with this object.  This is what we \nrefer to as the \"linked element\" because the size and position of \nthis element is used to determine when the drag and drop objects have \ninteracted.", "guessedname": "id", "guessedtype": "property"}, "deltaX": {"guessedname": "deltaX", "type": "int", "description": "The difference between the click position and the source element's location", "private": "", "guessedtype": "property"}, "deltaY": {"guessedname": "deltaY", "type": "int", "description": "The difference between the click position and the source element's location", "private": "", "guessedtype": "property"}, "__ygDragDrop": {"private": "", "description": "Internal typeof flag", "guessedname": "__ygDragDrop", "guessedtype": "property"}, "overlap": {"type": "YAHOO.util.Region", "description": "Property that is assigned to a drag and drop object when testing to\nsee if it is being targeted by another dd object.  This is a region\nthat represents the area the draggable element overlaps this target.\nDDM.getBestMatch uses this property to compare the size of the overlap\nto that of other targets in order to determine the closest match in\nINTERSECT mode when multiple targets are part of the same interaction.", "guessedname": "overlap", "guessedtype": "property"}, "minX": {"guessedname": "minX", "type": "int", "description": "The left constraint", "private": "", "guessedtype": "property"}, "minY": {"guessedname": "minY", "type": "int", "description": "The up constraint", "private": "", "guessedtype": "property"}, "invalidHandleIds": {"type": "{string: string}", "description": "An associative array of ids for elements that will be ignored if clicked", "guessedname": "invalidHandleIds", "guessedtype": "property"}, "config": {"type": "object", "description": "Configuration attributes passed into the constructor", "guessedname": "config", "guessedtype": "property"}, "dragElId": {"guessedname": "dragElId", "type": "String", "description": "The id of the element that will be dragged.  By default this is same \nas the linked element , but could be changed to another element. Ex: \nYAHOO.util.DDProxy", "private": "", "guessedtype": "property"}, "available": {"type": "boolean", "description": "The availabe property is false until the linked dom element is accessible.", "guessedname": "available", "guessedtype": "property"}, "invalidHandleClasses": {"type": "string[]", "description": "An indexted array of css class names for elements that will be ignored\nif clicked.", "guessedname": "invalidHandleClasses", "guessedtype": "property"}, "isTarget": {"type": "boolean", "description": "By default, all instances can be a drop target.  This can be disabled by\nsetting isTarget to false.", "guessedname": "isTarget", "guessedtype": "property"}, "invalidHandleTypes": {"type": "{string: string}", "description": "An associative array of HTML tags that will be ignored if clicked.", "guessedname": "invalidHandleTypes", "guessedtype": "property"}, "startPageX": {"guessedname": "startPageX", "type": "int", "description": "The linked element's absolute X position at the time the drag was \nstarted", "private": "", "guessedtype": "property"}, "cursorIsOver": {"type": "boolean", "description": "Property that is assigned to a drag and drop object when testing to\nsee if it is being targeted by another dd object.  This property\ncan be used in intersect mode to help determine the focus of\nthe mouse interaction.  DDM.getBestMatch uses this property first to\ndetermine the closest match in INTERSECT mode when multiple targets\nare part of the same interaction.", "guessedname": "cursorIsOver", "guessedtype": "property"}, "constrainY": {"guessedname": "constrainY", "type": "boolean", "description": "Set to true when vertical contraints are applied", "private": "", "guessedtype": "property"}, "constrainX": {"guessedname": "constrainX", "type": "boolean", "description": "Set to true when horizontal contraints are applied", "private": "", "guessedtype": "property"}, "padding": {"type": "int[]", "description": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.", "guessedname": "padding", "guessedtype": "property"}, "dragOnly": {"type": "Boolean", "description": "If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)", "guessedname": "dragOnly", "guessedtype": "property"}, "groups": {"type": "{string: string}", "description": "The group defines a logical collection of DragDrop objects that are \nrelated.  Instances only get events when interacting with other \nDragDrop object in the same group.  This lets us define multiple \ngroups using a single DragDrop subclass if we want.", "guessedname": "groups", "guessedtype": "property"}, "maintainOffset": {"type": "boolean", "description": "Maintain offsets when we resetconstraints.  Set to true when you want\nthe position of the element relative to its parent to stay the same\nwhen the page changes", "guessedname": "maintainOffset", "guessedtype": "property"}, "handleElId": {"guessedname": "handleElId", "type": "String", "description": "the id of the element that initiates the drag operation.  By default \nthis is the linked element, but could be changed to be a child of this\nelement.  This lets us do things like only starting the drag when the \nheader element within the linked html element is clicked.", "private": "", "guessedtype": "property"}, "xTicks": {"type": "int[]", "description": "Array of pixel locations the element will snap to if we specified a \nhorizontal graduation/interval.  This array is generated automatically\nwhen you define a tick interval.", "guessedname": "xTicks", "guessedtype": "property"}, "locked": {"guessedname": "locked", "type": "boolean", "description": "Individual drag/drop instances can be locked.  This will prevent \nonmousedown start drag.", "private": "", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "If this flag is true, a shim will be placed over the screen/viewable area to track mouse events. Should help with dragging elements over iframes and other controls.", "guessedname": "useShim", "guessedtype": "property"}, "events": {"type": "object", "description": "An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop\nBy setting any of these to false, then event will not be fired.", "guessedname": "events", "guessedtype": "property"}, "primaryButtonOnly": {"type": "boolean", "description": "By default the drag and drop instance will only respond to the primary\nbutton click (left button for a right-handed mouse).  Set to true to\nallow drag and drop to start with any mouse click that is propogated\nby the browser", "guessedname": "primaryButtonOnly", "guessedtype": "property"}}, "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.</li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.</li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n</li>\n</ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n</pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n</pre>"}, "YAHOO.widget.ColumnSet": {"name": "YAHOO.widget.ColumnSet", "constructors": [{"params": [{"type": "Object[]", "name": "aDefinitions", "description": "  Array of object literals that define cells in\nthe THEAD."}], "description": "The ColumnSet class defines and manages a DataTable's Columns,\nincluding nested hierarchies and access to individual Column instances."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "ColumnSet", "methods": {"getColumn": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "String | Number", "name": "column", "description": "  Column key or ColumnSet key index."}], "description": "Returns Column instance with given key or ColumnSet key index.", "guessedname": "getColumn", "guessedtype": "function"}, "getDefinitions": {"return": {"type": "Object[]", "description": "Array of object literal Column definitions."}, "description": "Public accessor to the definitions array.", "guessedname": "getDefinitions", "guessedtype": "function"}, "_init": {"guessedname": "_init", "params": [{"type": "Object[]", "name": "aDefinitions", "description": "  Array of object literals that define cells in\nthe THEAD ."}], "description": "Initializes ColumnSet instance with data from Column definitions.", "private": "", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "Unique name of the ColumnSet instance."}, "description": "Returns unique name of the ColumnSet instance.", "guessedname": "getId", "guessedtype": "function"}, "getColumnById": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "String", "name": "column", "description": "  Column ID."}], "description": "Returns Column instance with given ID.", "guessedname": "getColumnById", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the ColumnSet instance."}, "description": "ColumnSet instance name, for logging.", "guessedname": "toString", "guessedtype": "function"}, "getDescendants": {"parem": "{YAHOO.widget.Column} Column instance.", "return": {"type": "Array", "description": "Array including the Column itself and all descendants (if any)."}, "description": "Public accessor returns array of given Column's desendants (if any), including itself.", "guessedname": "getDescendants", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "ColumnSet.js", "guessedtype": "function", "shortname": "ColumnSet", "properties": {"flat": {"default": "[]", "type": "YAHOO.widget.Column[]", "description": "Flattened representation of all Columns.", "guessedname": "flat", "guessedtype": "property"}, "_aDefinitions": {"guessedname": "_aDefinitions", "type": "Object[]", "description": "Array of object literal Column definitions passed to the constructor.", "private": "", "guessedtype": "property"}, "keys": {"default": "[]", "type": "YAHOO.widget.Column[]", "description": "Array of Columns that map one-to-one to a table column.", "guessedname": "keys", "guessedtype": "property"}, "_sId": {"guessedname": "_sId", "type": "String", "description": "Unique instance name.", "private": "", "guessedtype": "property"}, "tree": {"type": "YAHOO.widget.Column[]", "description": "Top-down tree representation of Column hierarchy.", "guessedname": "tree", "guessedtype": "property"}, "ColumnSet._nCount": {"description": "Internal class variable to index multiple ColumnSet instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "headers": {"default": "[]", "type": "String[]", "description": "ID index of nested parent hierarchies for HEADERS accessibility attribute.", "guessedname": "headers", "guessedtype": "property"}}, "description": "The ColumnSet class defines and manages a DataTable's Columns,\nincluding nested hierarchies and access to individual Column instances."}, "YAHOO.util.SWFStore": {"name": "YAHOO.util.SWFStore", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "Boolean", "name": "shareData", "description": "  Whether or not data should be shared across browsers"}, {"type": "Boolean", "name": "useCompression", "description": "  Container element for the Flash Player instance."}], "description": "Class for the YUI SWFStore util."}], "namespace": "YAHOO.util", "module": "swfstore", "guessedname": "SWFStore", "methods": {"setUseCompression": {"params": [{"type": "Boolean", "name": "Whether", "description": " or to compress stored data"}], "description": "Public accessor to the unique name of the SWFStore instance.", "guessedname": "setUseCompression", "guessedtype": "function"}, "on": {"params": [{"type": "String", "name": "type", "description": "  The tyep of event to listen for"}, {"type": "String", "name": "listener", "description": "  The function to call"}], "description": "Method to attach listeners to events", "guessedname": "on", "guessedtype": "function"}, "addListener": {"params": [{"type": "String", "name": "type", "description": "  The tyep of event to listen for"}, {"type": "String", "name": "listener", "description": "  The function to call"}], "description": "Method to attach listeners to events", "guessedname": "addListener", "guessedtype": "function"}, "getTypeAt": {"return": {"type": "String", "description": "The type"}, "params": [{"type": "Number", "name": "location", "description": "  The index of the \"cookie\" or store"}], "description": "Returns the data type of of the storage.\n<p>May be one of the following types:\n<ul>\n<li>boolean</li>\n<li>function</li>\n<li>number</li>\n<li>object</li>\n<li>string</li>\n<li>number</li>\n<li>xml</li>\n</ul>\n</p>", "guessedname": "getTypeAt", "guessedtype": "function"}, "calculateCurrentSize": {"return": {"type": "Number", "description": "The size of the store in KB"}, "description": "Gets the current size, in KB, of the amount of space taken by the current store.\nNote that this is calculated, and may take time depending on the number of items stored", "guessedname": "calculateCurrentSize", "guessedtype": "function"}, "getValueAt": {"return": {"type": "Object", "description": "The value of the store at that index"}, "params": [{"type": "Number", "name": "index", "description": "  The index of the stored item"}], "description": "Returns the value of the store at the specified index, if any.", "guessedname": "getValueAt", "guessedtype": "function"}, "displaySettings": {"description": "Displays the settings dialog to allow the user to configure\nstorage settings manually. If the SWF height and width are smaller than\nwhat is allowable to display the local settings panel,\nan openExternalDialog message will be sent to JavaScript.", "guessedname": "displaySettings", "guessedtype": "function"}, "hasAdequateDimensions": {"return": {"type": "Boolean", "description": "Whether or not to share among browsers"}, "description": "Determines if SWF's visible area is large enough to fit the settings panel", "guessedname": "hasAdequateDimensions", "guessedtype": "function"}, "getLength": {"return": {"type": "Number", "description": "The number of items"}, "description": "Returns the number of items in storage, if any.", "guessedname": "getLength", "guessedtype": "function"}, "clear": {"description": "Removes all data in local storage for this domain.\n<p>Be careful when using this method, as it may \nremove stored information that is used by other applications\nin this domain </p>", "guessedname": "clear", "guessedtype": "function"}, "setShareData": {"params": [{"type": "Boolean", "name": "Whether", "description": " or not to share among browsers"}], "description": "Public accessor to the unique name of the SWFStore instance.", "guessedname": "setShareData", "guessedtype": "function"}, "getTypeOf": {"return": {"type": "String", "description": "The type"}, "params": [{"type": "String", "name": "location", "description": "  The name of the \"cookie\" or store"}], "description": "Returns the data type of of the storage.\n<p>May be one of the following types:\n<ul>\n<li>boolean</li>\n<li>function</li>\n<li>number</li>\n<li>object</li>\n<li>string</li>\n<li>number</li>\n<li>xml</li>\n</ul>\n</p>", "guessedname": "getTypeOf", "guessedtype": "function"}, "getValueOf": {"return": {"type": "Object", "description": "The data"}, "params": [{"type": "String", "name": "location", "description": "  The name of the \"cookie\" or store"}], "description": "Returns the value of the item in storage, if any.", "guessedname": "getValueOf", "guessedtype": "function"}, "getItems": {"public": "", "return": {"type": "Object", "description": "The data."}, "description": "Returns the items in storage as an array.", "guessedname": "getItems", "guessedtype": "function"}, "setItem": {"return": {"type": "Boolean", "description": "Whether or not the save was successful"}, "description": "Saves data to local storage. It returns a String that can\nbe one of three values: \"true\" if the storage succeeded; \"false\" if the user\nhas denied storage on their machine or storage space allotted is not sufficient.\n<p>The size limit for the passed parameters is ~40Kb.</p>", "param": "index {Number} The index of the \"cookie\" or store", "params": [{"type": "Object", "name": "data", "description": "  The data to store"}, {"type": "String", "name": "location", "description": "  The name of the \"cookie\" or store"}], "guessedname": "setItem", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the SWFStore instance."}, "description": "Public accessor to the unique name of the SWFStore instance.", "guessedname": "toString", "guessedtype": "function"}, "setSize": {"return": {"type": "String", "description": ""}, "params": [{"type": "Number", "name": "value", "description": "  The size, in KB"}], "description": "This method requests more storage (if the amount is above 100KB or the current setting).\nThe request dialog has to be displayed within the Flash player itself\nso the SWF it is called from must be visible and at least 215px x 138px (w x h) in size.", "guessedname": "setSize", "guessedtype": "function"}, "removeItem": {"param": "index {Number} The index of the \"cookie\" or store", "params": [{"type": "String", "name": "location", "description": "  The name of the \"cookie\" or store"}], "description": "Removes the item in storage, if any.", "guessedname": "removeItem", "guessedtype": "function"}, "getShareData": {"return": {"type": "Boolean", "description": "Whether or not data is being shared among browsers"}, "description": "Public accessor to the unique name of the SWFStore instance.", "guessedname": "getShareData", "guessedtype": "function"}, "getUseCompression": {"return": {"type": "Boolean", "description": "Whether or compression is being used"}, "description": "Public accessor to the unique name of the SWFStore instance.", "guessedname": "getUseCompression", "guessedtype": "function"}, "getModificationDate": {"return": {"type": "Date", "description": "A Date object"}, "description": "Gets the timestamp of the last store. This value is automatically set when \ndata is stored.", "guessedname": "getModificationDate", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "swfstore.js", "guessedtype": "function", "shortname": "SWFStore", "events": {"inadequateDimensions": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when a settings dialog is not able to be displayed due to \nthe SWF not being large enough to show it. In this case, the developer\nneeds to resize the SWF to width of 215px and height of 138px or above, \nor display an external settings page."}, "quotaExceededError": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.message", "description": "  The data"}], "description": "Fires when there is not enough space available to store the data"}, "clear": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when a store is successfully cleared"}, "securityError": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.message", "description": "  The data"}], "description": "Fires when the url matching for the security whitelist is invalid.\nIf no whitelist is used, fires when page's url does not match the embedded swf's url"}, "error": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.message", "description": "  The data"}], "description": "Fires when an error occurs", "param": "event.type {String} The event type"}, "save": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when a store is saved successfully"}, "openingDialog": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires as the settings dialog displays"}}, "description": "Class for the YUI SWFStore util."}, "YAHOO.widget.Carousel": {"name": "YAHOO.widget.Carousel", "configs": {"numPages": {"type": "Number", "description": "The number of pages in the carousel."}, "isCircular": {"default": "false", "type": "Boolean", "description": "Set this to true to wrap scrolling of the contents\nin the Carousel."}, "navigation": {"default": "<br>\n{ prev: null, // the previous navigation element<br>\nnext: null } // the next navigation element", "type": "Object", "description": "The set of navigation controls for Carousel"}, "autoPlay": {"deprecated": "Use autoPlayInterval instead.", "type": "Number", "description": "Set this to time in milli-seconds to have the\nCarousel automatically scroll the contents."}, "autoPlayInterval": {"type": "Number", "description": "The delay in milli-seconds for scrolling the\nCarousel during auto-play.\nNote: The startAutoPlay() method needs to be invoked to trigger\nautomatic scrolling of Carousel."}, "numVisible": {"default": "3", "type": "Number", "description": "The number of visible items in the Carousel's\nviewport."}, "selectedItem": {"type": "Number", "description": "The index of the selected item."}, "firstVisible": {"default": "0", "type": "Number", "description": "The index to start the Carousel from (indexes begin\nfrom zero)"}, "selectOnScroll": {"default": "true", "type": "Boolean", "description": "Set this to true to automatically set focus to\nfollow scrolling in the Carousel."}, "animation": {"default": "<br>\n{ speed: 0, // the animation speed (in seconds)<br>\neffect: null } // the animation effect (like\nYAHOO.util.Easing.easeOut)", "type": "Object", "description": "The optional animation attributes for the Carousel."}, "numItems": {"type": "Number", "description": "The number of items in the Carousel."}, "carouselItemEl": {"default": "LI", "type": "Boolean", "description": "The type of the list of items within the Carousel."}, "scrollIncrement": {"default": "1", "type": "Number", "description": "The number of items to scroll by for arrow keys."}, "currentPage": {"type": "Number", "description": "The current page number (read-only.)"}, "carouselEl": {"default": "OL", "type": "Boolean", "description": "The type of the Carousel element."}, "isVertical": {"default": "false", "type": "Boolean", "description": "True if the orientation of the Carousel is vertical"}, "lastVisible": {"type": "Number", "description": "The last item visible in the carousel."}, "revealAmount": {"default": "0", "type": "Number", "description": "The percentage of the item to be revealed on each\nside of the Carousel (before and after the first and last item\nin the Carousel's viewport.)"}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": "  The HTML element that represents the\nthe container that houses the Carousel."}, {"type": "Object", "name": "cfg", "description": "  (optional) The configuration values"}], "description": "The Carousel widget."}], "namespace": "YAHOO.widget", "module": "carousel", "events": {"selectedItemChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "selectedItemChange", "description": "Fires when the value for the configuration attribute 'selectedItem' changes."}, "itemReplaced": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item has been replaced in the Carousel.\nPasses back the content of the item that was replaced, the content\nof the new item, the index where the replacement occurred, and the event\nitself.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "itemReplacedEvent", "guessedtype": "property"}, "beforeIsCircularChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeIsCircularChange", "description": "Fires before the value for the configuration attribute 'isCircular' changes. Return false to cancel the attribute change."}, "autoPlayIntervalChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "autoPlayIntervalChange", "description": "Fires when the value for the configuration attribute 'autoPlayInterval' changes."}, "show": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel is shown.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "showEvent", "guessedtype": "property"}, "loadItems": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel needs more items to be loaded for\ndisplaying them.  Passes back the first and last visible items in the\nCarousel, and the number of items needed to be loaded.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "loadItemsEvent", "guessedtype": "property"}, "focus": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel gains focus.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "focusEvent", "guessedtype": "property"}, "itemAdded": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item has been added to the Carousel.  Passes\nback the content of the item that would be added, the index at which the\nitem would be added, and the event itself.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "itemAddedEvent", "guessedtype": "property"}, "numItemsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "numItemsChange", "description": "Fires when the value for the configuration attribute 'numItems' changes."}, "beforeNumPagesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNumPagesChange", "description": "Fires before the value for the configuration attribute 'numPages' changes. Return false to cancel the attribute change."}, "beforeLastVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLastVisibleChange", "description": "Fires before the value for the configuration attribute 'lastVisible' changes. Return false to cancel the attribute change."}, "currentPageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "currentPageChange", "description": "Fires when the value for the configuration attribute 'currentPage' changes."}, "beforeNumVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNumVisibleChange", "description": "Fires before the value for the configuration attribute 'numVisible' changes. Return false to cancel the attribute change."}, "itemRemoved": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item has been removed from the Carousel.\nPasses back the content of the item that would be removed, the index\nfrom which the item would be removed, and the event itself.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "itemRemovedEvent", "guessedtype": "property"}, "carouselElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "carouselElChange", "description": "Fires when the value for the configuration attribute 'carouselEl' changes."}, "autoPlayChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "autoPlayChange", "description": "Fires when the value for the configuration attribute 'autoPlay' changes."}, "beforeHide": {"type": "YAHOO.util.CustomEvent", "description": "Fires before the Carousel is hidden.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "hide": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel is hidden.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "hideEvent", "guessedtype": "property"}, "beforeFirstVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFirstVisibleChange", "description": "Fires before the value for the configuration attribute 'firstVisible' changes. Return false to cancel the attribute change."}, "scrollIncrementChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "scrollIncrementChange", "description": "Fires when the value for the configuration attribute 'scrollIncrement' changes."}, "beforeAnimationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimationChange", "description": "Fires before the value for the configuration attribute 'animation' changes. Return false to cancel the attribute change."}, "firstVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "firstVisibleChange", "description": "Fires when the value for the configuration attribute 'firstVisible' changes."}, "selectOnScrollChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "selectOnScrollChange", "description": "Fires when the value for the configuration attribute 'selectOnScroll' changes."}, "navigationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "navigationChange", "description": "Fires when the value for the configuration attribute 'navigation' changes."}, "numPagesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "numPagesChange", "description": "Fires when the value for the configuration attribute 'numPages' changes."}, "beforeAutoPlayIntervalChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAutoPlayIntervalChange", "description": "Fires before the value for the configuration attribute 'autoPlayInterval' changes. Return false to cancel the attribute change."}, "blur": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel loses focus.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "blurEvent", "guessedtype": "property"}, "afterScroll": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel has scrolled to the previous or\nnext page.  Passes back the index of the first and last visible items in\nthe Carousel.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "afterScrollEvent", "guessedtype": "property"}, "beforeSelectOnScrollChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSelectOnScrollChange", "description": "Fires before the value for the configuration attribute 'selectOnScroll' changes. Return false to cancel the attribute change."}, "beforeRevealAmountChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRevealAmountChange", "description": "Fires before the value for the configuration attribute 'revealAmount' changes. Return false to cancel the attribute change."}, "pageChange": {"type": "YAHOO.util.CustomEvent", "description": "Fires after the Carousel has scrolled to the previous or\nnext page.  Passes back the page number of the current page.  Note\nthat the first page number is zero.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "pageChangeEvent", "guessedtype": "property"}, "numVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "numVisibleChange", "description": "Fires when the value for the configuration attribute 'numVisible' changes."}, "itemSelected": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item has been selected in the Carousel.\nPasses back the index of the selected item in the Carousel.  Note, that\nthe index begins from zero.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "itemSelectedEvent", "guessedtype": "property"}, "animationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animationChange", "description": "Fires when the value for the configuration attribute 'animation' changes."}, "beforeNumItemsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNumItemsChange", "description": "Fires before the value for the configuration attribute 'numItems' changes. Return false to cancel the attribute change."}, "beforeScroll": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel is about to scroll to the previous\nor next page.  Passes back the index of the first and last visible items\nin the Carousel and the direction (backward/forward) of the scroll.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "beforeScrollEvent", "guessedtype": "property"}, "beforeCurrentPageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCurrentPageChange", "description": "Fires before the value for the configuration attribute 'currentPage' changes. Return false to cancel the attribute change."}, "beforeShow": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel is about to be shown.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "revealAmountChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "revealAmountChange", "description": "Fires when the value for the configuration attribute 'revealAmount' changes."}, "beforeSelectedItemChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSelectedItemChange", "description": "Fires before the value for the configuration attribute 'selectedItem' changes. Return false to cancel the attribute change."}, "beforeScrollIncrementChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeScrollIncrementChange", "description": "Fires before the value for the configuration attribute 'scrollIncrement' changes. Return false to cancel the attribute change."}, "beforeAutoPlayChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAutoPlayChange", "description": "Fires before the value for the configuration attribute 'autoPlay' changes. Return false to cancel the attribute change."}, "beforeNavigationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNavigationChange", "description": "Fires before the value for the configuration attribute 'navigation' changes. Return false to cancel the attribute change."}, "stopAutoPlay": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the auto play has been stopped in the Carousel.\nSee\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "stopAutoPlayEvent", "guessedtype": "property"}, "beforeCarouselItemElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCarouselItemElChange", "description": "Fires before the value for the configuration attribute 'carouselItemEl' changes. Return false to cancel the attribute change."}, "beforePageChange": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the Carousel is about to scroll to the previous\nor next page.  Passes back the page number of the current page.  Note\nthat the first page number is zero.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "beforePageChangeEvent", "guessedtype": "property"}, "isCircularChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "isCircularChange", "description": "Fires when the value for the configuration attribute 'isCircular' changes."}, "carouselItemElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "carouselItemElChange", "description": "Fires when the value for the configuration attribute 'carouselItemEl' changes."}, "beforeIsVerticalChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeIsVerticalChange", "description": "Fires before the value for the configuration attribute 'isVertical' changes. Return false to cancel the attribute change."}, "beforeCarouselElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCarouselElChange", "description": "Fires before the value for the configuration attribute 'carouselEl' changes. Return false to cancel the attribute change."}, "isVerticalChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "isVerticalChange", "description": "Fires when the value for the configuration attribute 'isVertical' changes."}, "lastVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "lastVisibleChange", "description": "Fires when the value for the configuration attribute 'lastVisible' changes."}, "navigationStateChange": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the state of either one of the navigation\nbuttons are changed from enabled to disabled or vice versa.  Passes back\nthe state (true/false) of the previous and next buttons.  The value true\nsignifies the button is enabled, false signifies disabled.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "navigationStateChangeEvent", "guessedtype": "property"}, "startAutoPlay": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the auto play has started in the Carousel.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "startAutoPlayEvent", "guessedtype": "property"}, "allItemsRemovedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when all items have been removed from the Carousel.\nSee\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event.", "guessedname": "allItemsRemovedEvent", "guessedtype": "property"}}, "guessedname": "Carousel", "methods": {"registerPagination": {"public": "", "params": [{"type": "String", "name": "template", "description": "  Pagination template as passed to lang.substitute"}], "description": "Register carousels pagination template, append to interface, and populate.", "guessedname": "registerPagination", "guessedtype": "function"}, "getVisibleItems": {"public": "", "return": {"type": "Array", "description": "The array of visible items"}, "description": "Return all visible items as an array.", "guessedname": "getVisibleItems", "guessedtype": "function"}, "focus": {"description": "Set focus on the Carousel.", "public": "", "guessedname": "focus", "guessedtype": "function"}, "_setupCarouselNavigation": {"protected": "", "description": "Setup/Create the Carousel navigation element (if needed).", "guessedname": "_setupCarouselNavigation", "guessedtype": "function"}, "initAttributes": {"public": "", "params": [{"type": "Object", "name": "attrs", "description": "  The set of configuration attributes for\ncreating the Carousel."}], "description": "Initialize the configuration attributes used to create the Carousel.", "guessedname": "initAttributes", "guessedtype": "function"}, "_setRevealAmount": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Set the value for the reveal amount percentage in the Carousel.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for revealAmount"}], "guessedname": "_setRevealAmount", "guessedtype": "function"}, "scrollPageBackward": {"description": "Scroll the Carousel by a page backward.", "private": "", "params": [{"type": "Event", "name": "ev", "description": " The event object"}, {"type": "Object", "name": "obj", "description": " The context object"}], "guessedname": "scrollPageBackward", "guessedtype": "function", "public": ""}, "_validateScrollIncrement": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate the scrollIncrement value.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The scrollIncrement value"}], "guessedname": "_validateScrollIncrement", "guessedtype": "function"}, "syncPagerUi": {"description": "Synchronize and redraw the Pager UI if necessary.", "private": ""}, "show": {"description": "Display the Carousel.", "public": "", "guessedname": "show", "guessedtype": "function"}, "_updateNavButtons": {"protected": "", "params": [{"type": "Object", "name": "el", "description": "  The target button"}, {"type": "Boolean", "name": "setFocus", "description": "  True to set focus ring, false otherwise."}], "description": "Set the correct class for the navigation buttons.", "guessedname": "_updateNavButtons", "guessedtype": "function"}, "init": {"public": "", "params": [{"type": "HTMLElement | String", "name": "el", "description": "  The html element that represents\nthe Carousel container."}, {"type": "Object", "name": "attrs", "description": "  The set of configuration attributes for\ncreating the Carousel."}], "description": "Initialize the Carousel.", "guessedname": "init", "guessedtype": "function"}, "getById": {"public": "", "static": "", "description": "Return the appropriate Carousel object based on the id associated with\nthe Carousel element or false if none match.", "guessedname": "getById", "guessedtype": "function"}, "_validateNavigation": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate and navigation parameters.", "protected": "", "params": [{"type": "Object", "name": "cfg", "description": "  The navigation configuration"}], "guessedname": "_validateNavigation", "guessedtype": "function"}, "syncUi": {"params": [{"type": "Object", "name": "o", "description": " The item that needs to be added or removed"}], "description": "Handle UI update.\nCall the appropriate methods on events fired when an item is added, or\nremoved for synchronizing the DOM.", "private": ""}, "parseCarouselItems": {"protected": "", "description": "Find the items within the Carousel and add them to the items table.\nA Carousel item is identified by elements that matches the carousel\nitem element tag.", "guessedname": "_parseCarouselItems", "guessedtype": "function"}, "_syncUiForItemReplace": {"protected": "", "description": "Synchronize and redraw the UI after an item is replaced.", "guessedname": "_syncUiForItemReplace", "guessedtype": "function"}, "getDimensions": {"params": [{"type": "Object", "name": "el", "description": " The element to get the dimensions of"}, {"type": "String", "name": "which", "description": " Get the height or width of an element"}], "description": "Get full dimensions of an element.", "private": ""}, "_pagerClickHandler": {"protected": "", "params": [{"type": "Event", "name": "ev", "description": " The event object"}], "description": "The \"click\" handler for anchor pagination.", "guessedname": "_pagerClickHandler", "guessedtype": "function"}, "removeItem": {"return": {"type": "Boolean", "description": "Return true on success, false otherwise"}, "description": "Remove an item at index from the Carousel.", "params": [{"type": "Number", "name": "index", "description": "  The position to where in the list (starts from\nzero)."}], "guessedname": "removeItem", "guessedtype": "function", "public": ""}, "_validateRevealAmount": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate the revealAmount value.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The revealAmount value"}], "guessedname": "_validateRevealAmount", "guessedtype": "function"}, "stopAutoPlay": {"description": "Stop auto-playing the Carousel.", "public": "", "guessedname": "stopAutoPlay", "guessedtype": "function"}, "isAutoPlayOn": {"public": "", "return": {"type": "Boolean", "description": "Return true if autoPlay is \"on\", or false\notherwise."}, "description": "Return true if the auto-scrolling of Carousel is \"on\", or false\notherwise.", "guessedname": "isAutoPlayOn", "guessedtype": "function"}, "_refreshUi": {"protected": "", "description": "Refresh the widget UI if it is not already rendered, on first item\naddition.", "guessedname": "_refreshUi", "guessedtype": "function"}, "getPageForItem": {"return": {"type": "Number", "description": "Page item is on"}, "description": "Get the page an item is on within carousel.", "params": [{"type": "Number", "name": "index", "description": "  Index of item"}], "guessedname": "getPageForItem", "guessedtype": "function", "public": ""}, "_validateNumVisible": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate the numVisible value.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The numVisible value"}], "guessedname": "_validateNumVisible", "guessedtype": "function"}, "getElementForItems": {"public": "", "return": {"type": "Array", "description": "Return all the items"}, "description": "Return the carouselItemEl for all items in the Carousel.", "guessedname": "getElementForItems", "guessedtype": "function"}, "_animationCompleteHandler": {"protected": "", "params": [{"type": "Event", "name": "ev", "description": " The event."}, {"type": "Array", "name": "p", "description": " The event parameters."}, {"type": "Object", "name": "o", "description": " The object that has the state of the Carousel"}], "description": "Handle the animation complete event.", "guessedname": "_animationCompleteHandler", "guessedtype": "function"}, "_pagerChangeHandler": {"protected": "", "params": [{"type": "Event", "name": "ev", "description": " The event object"}], "description": "The \"onchange\" handler for select box pagination.", "guessedname": "_pagerChangeHandler", "guessedtype": "function"}, "_autoScroll": {"protected": "", "description": "Automatically scroll the contents of the Carousel.", "guessedname": "_autoScroll", "guessedtype": "function"}, "hide": {"description": "Hide the Carousel.", "public": "", "guessedname": "hide", "guessedtype": "function"}, "scrollForward": {"description": "Scroll the Carousel by an item forward.", "public": "", "guessedname": "scrollForward", "guessedtype": "function"}, "getCarouselItemPosition": {"params": [{"type": "Number", "name": "position", "description": "  The position of the Carousel item."}], "description": "Compute and return the position of a Carousel item based on its\nposition.", "private": ""}, "_setSelectedItem": {"protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for \"selected\" item"}], "description": "Set the value for the selected item.", "guessedname": "_setSelectedItem", "guessedtype": "function"}, "_numVisibleSetter": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Set the value for the number of visible items in the Carousel.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for numVisible"}], "guessedname": "_numVisibleSetter", "guessedtype": "function"}, "_setCarouselOffset": {"protected": "", "description": "Set the Carousel offset to the passed offset.", "guessedname": "_setCarouselOffset", "guessedtype": "function"}, "toString": {"public": "", "return": {"type": "String", "description": ""}, "description": "Return the string representation of the Carousel.", "guessedname": "toString", "guessedtype": "function"}, "replaceItem": {"return": {"type": "Boolean", "description": "Return true on success, false otherwise"}, "description": "Replace an item at index witin Carousel.", "params": [{"type": "String | Object | HTMLElement", "name": "item", "description": "  The item to be appended\nto the Carousel. If the parameter is a string, it is assumed to be\nthe content of the newly created item. If the parameter is an\nobject, it is assumed to supply the content and an optional class\nand an optional id of the newly created item."}, {"type": "Number", "name": "index", "description": "  The position to where in the list (starts from\nzero)."}], "guessedname": "replaceItem", "guessedtype": "function", "public": ""}, "blur": {"description": "Remove focus from the Carousel.", "public": "", "guessedname": "blur", "guessedtype": "function"}, "getFirstVisibleOnpage": {"return": {"type": "Number", "description": "First item's index"}, "description": "Get the first visible item's index on any given page.", "params": [{"type": "Number", "name": "page", "description": "  Page"}], "guessedname": "getFirstVisibleOnPage", "guessedtype": "function", "public": ""}, "_updatePagerButtons": {"protected": "", "description": "Update the UI for the pager buttons based on the current page and\nthe number of pages.", "guessedname": "_updatePagerButtons", "guessedtype": "function"}, "_syncUiItems": {"protected": "", "description": "Redraw the UI for item positioning.", "guessedname": "_syncUiItems", "guessedtype": "function"}, "addItem": {"return": {"type": "Boolean", "description": "Return true on success, false otherwise"}, "description": "Insert or append an item to the Carousel.\nE.g. if Object: ({content:\"Your Content\", id:\"\", className:\"\"}, index)", "params": [{"type": "String | Object | HTMLElement", "name": "item", "description": "  The item to be appended\nto the Carousel. If the parameter is a string, it is assumed to be\nthe content of the newly created item. If the parameter is an\nobject, it is assumed to supply the content and an optional class\nand an optional id of the newly created item."}, {"type": "Number", "name": "index", "description": "  optional The position to where in the list\n(starts from zero)."}], "guessedname": "addItem", "guessedtype": "function", "public": ""}, "_setContainerSize": {"protected": "", "params": [{"type": "HTMLElement", "name": "clip", "description": "  The clip container element."}, {"type": "String", "name": "attr", "description": "  Either set the height or width."}], "description": "Set the container size.", "guessedname": "_setContainerSize", "guessedtype": "function"}, "_setNumItems": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Set the number of items in the Carousel.\nWarning: Setting this to a lower number than the current removes\nitems from the end.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for numItems"}], "guessedname": "_setNumItems", "guessedtype": "function"}, "getLoadingItems": {"public": "", "return": {"type": "Array", "description": "Return all items that are loading in the Carousel."}, "description": "Return all loading items as an array.", "guessedname": "getLoadingItems", "guessedtype": "function"}, "scrollBackward": {"description": "Scroll the Carousel by an item backward.", "public": "", "guessedname": "scrollBackward", "guessedtype": "function"}, "selectNextItem": {"description": "Select the next item in the Carousel.", "public": "", "guessedname": "selectNextItem", "guessedtype": "function"}, "_animateAndSetCarouselOffset": {"protected": "", "params": [{"type": "Integer", "name": "offset", "description": " The offset to which the Carousel has to be\nscrolled to."}, {"type": "Integer", "name": "item", "description": " The index to which the Carousel will scroll."}, {"type": "Integer", "name": "sentinel", "description": " The last element in the view port."}], "description": "Set the Carousel offset to the passed offset after animating.", "guessedname": "_animateAndSetCarouselOffset", "guessedtype": "function"}, "_selectedItemSetter": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Set the value for selectedItem.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for selectedItem"}], "guessedname": "_selectedItemSetter", "guessedtype": "function"}, "_validateFirstVisible": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate the firstVisible value.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The first visible value"}], "guessedname": "_validateFirstVisible", "guessedtype": "function"}, "updatePagination": {"description": "Update interface's pagination data within a registered template.", "public": "", "guessedname": "updatePagination", "guessedtype": "function"}, "syncNavigation": {"description": "Fire custom events for enabling/disabling navigation elements.", "private": ""}, "getFirstVisibleForPosition": {"params": [{"type": "Number", "name": "pos", "description": "  The position of the item to be displayed"}], "description": "Return the index of the first item in the view port for displaying item\nin \"pos\".", "private": ""}, "render": {"return": {"type": "Boolean", "description": "Status of the operation"}, "description": "Render the Carousel.", "params": [{"type": "HTMLElement | String", "name": "appendTo", "description": "  The element to which the\nCarousel should be appended prior to rendering."}], "guessedname": "render", "guessedtype": "function", "public": ""}, "replaceItems": {"return": {"type": "Boolean", "description": "Return true on success, false otherwise"}, "description": "Replace multiple items at specified indexes.\nNOTE: item at index must already exist.", "params": [{"type": "Array} An array containing an array of replacement items each linked to the\nindex where the substitution should take place.\nE.g. [[{content:'<img/>'}, index1], [{content:'<img/>'", "name": "items", "description": " , index2]]"}], "guessedname": "replaceItems", "guessedtype": "function", "public": ""}, "getElementForItem": {"return": {"type": "Element", "description": "Return the item at index or null if not found"}, "description": "Return the carouselItemEl at index or null if the index is not\nfound.", "params": [{"type": "Number", "name": "index", "description": "  The index of the item to be returned"}], "guessedname": "getElementForItem", "guessedtype": "function", "public": ""}, "_setNumVisible": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Clip the container size every time numVisible is set.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for numVisible"}], "guessedname": "_setNumVisible", "guessedtype": "function"}, "_keyboardEventHandler": {"protected": "", "params": [{"type": "Event", "name": "ev", "description": "  The event that is being handled."}], "description": "The keyboard event handler for Carousel.", "guessedname": "_keyboardEventHandler", "guessedtype": "function"}, "addItems": {"return": {"type": "Boolean", "description": "Return true on success, false otherwise"}, "description": "Insert or append multiple items to the Carousel.", "params": [{"type": "Array} An array containing an array of new items each linked to the\nindex where the insertion should take place.\nE.g. [[{content:'<img/>'}, index1], [{content:'<img/>'", "name": "items", "description": " , index2]]\nNOTE: An item at index must already exist."}], "guessedname": "addItems", "guessedtype": "function", "public": ""}, "scrollPageForward": {"description": "Scroll the Carousel by a page forward.", "private": "", "params": [{"type": "Event", "name": "ev", "description": " The event object"}, {"type": "Object", "name": "obj", "description": " The context object"}], "guessedname": "scrollPageForward", "guessedtype": "function", "public": ""}, "initEvents": {"description": "Initialize and bind the event handlers.", "public": "", "guessedname": "initEvents", "guessedtype": "function"}, "_getSelectedItem": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Get the value for the selected item.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for \"selected\" item"}], "guessedname": "_getSelectedItem", "guessedtype": "function"}, "_syncUiForLazyLoading": {"protected": "", "description": "Synchronize and redraw the UI for lazy loading.", "guessedname": "_syncUiForLazyLoading", "guessedtype": "function"}, "createCarouselClip": {"protected": "", "description": "Create the Carousel clip container.", "guessedname": "_createCarouselClip", "guessedtype": "function"}, "_updatePagerMenu": {"protected": "", "description": "Update the UI for the pager menu based on the current page and\nthe number of pages.  If the number of pages is greater than\nMAX_PAGER_BUTTONS, then the selection of pages is provided by a drop\ndown menu instead of a set of buttons.", "guessedname": "_updatePagerMenu", "guessedtype": "function"}, "parseCarousel": {"return": {"type": "Boolean", "description": "True if Carousel is found, false otherwise"}, "description": "Find the Carousel within a container. The Carousel is identified by\nthe first element that matches the carousel element tag or the\nelement that has the Carousel class.", "protected": "", "params": [{"type": "HTMLElement", "name": "parent", "description": "  The parent element to look under"}], "guessedname": "_parseCarousel", "guessedtype": "function"}, "getScrollOffset": {"params": [{"type": "Number", "name": "delta", "description": "  The delta number of elements to scroll by."}], "description": "Return the scrolling offset size given the number of elements to\nscroll.", "private": ""}, "_getValidIndex": {"return": {"type": "Object", "description": "Return a valid item index"}, "description": "Return a valid item for a possibly out of bounds index considering\nthe isCircular property.", "protected": "", "params": [{"type": "Number", "name": "index", "description": "  The index of the item to be returned"}], "guessedname": "_getValidIndex", "guessedtype": "function"}, "createElement": {"params": [{"type": "String", "name": "el", "description": "  The element to be created"}, {"type": "Object", "name": "attrs", "description": "  Configuration of parent, class and id attributes.\nIf the content is specified, it is inserted after creation of the\nelement. The content can also be an HTML element in which case it would\nbe appended as a child node of the created element."}], "description": "Create an element, set its class name and optionally install the element\nto its parent.", "private": ""}, "setItemSelection": {"params": [{"type": "Number", "name": "newpos", "description": " The index of the new position"}, {"type": "Number", "name": "oldpos", "description": " The index of the previous position"}], "description": "Set the selected item.", "private": ""}, "_syncUiForItemAdd": {"protected": "", "description": "Synchronize and redraw the UI after an item is added.", "guessedname": "_syncUiForItemAdd", "guessedtype": "function"}, "createCarouselItem": {"protected": "", "params": [{"type": "Object", "name": "obj", "description": "  The attributes of the element to be created"}], "description": "Create the Carousel item.", "guessedname": "_createCarouselItem", "guessedtype": "function"}, "_setFirstVisible": {"return": {"type": "Number", "description": "The new value that would be set"}, "description": "Set the value for the Carousel's first visible item.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new value for firstVisible"}], "guessedname": "_setFirstVisible", "guessedtype": "function"}, "_validateNumItems": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate the numItems value.", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The numItems value"}], "guessedname": "_validateNumItems", "guessedtype": "function"}, "getItemPositionById": {"public": "", "params": [{"type": "Number", "name": "index", "description": "  The index of the item to be returned"}], "description": "Return the position of the Carousel item that has the id \"id\", or -1\nif the id is not found.", "guessedname": "getItemPositionById", "guessedtype": "function"}, "scrollTo": {"public": "", "params": [{"type": "", "name": "item", "description": " Number The index of the element to position at."}, {"type": "", "name": "dontSelect", "description": " Boolean True if select should be avoided"}], "description": "Scroll the Carousel to make the item the first visible item.", "guessedname": "scrollTo", "guessedtype": "function"}, "_getNumPages": {"protected": "", "description": "Get the total number of pages.", "guessedname": "_getNumPages", "guessedtype": "function"}, "selectPreviousItem": {"description": "Select the previous item in the Carousel.", "public": "", "guessedname": "selectPreviousItem", "guessedtype": "function"}, "getRevealSize": {"description": "Return the size of a part of the item (reveal).", "private": ""}, "updateStateAfterScroll": {"params": [{"type": "Integer", "name": "item", "description": " The index to which the Carousel has scrolled to."}, {"type": "Integer", "name": "sentinel", "description": " The last element in the view port."}], "description": "Update the state variables after scrolling the Carousel view port.", "private": ""}, "_updateTabIndex": {"protected": "", "params": [{"type": "Object", "name": "el", "description": "  The element to be focussed"}], "description": "Set the correct tab index for the Carousel items.", "guessedname": "_updateTabIndex", "guessedtype": "function"}, "clearItems": {"description": "Clears the items from Carousel.", "public": "", "guessedname": "clearItems", "guessedtype": "function"}, "_validateAnimation": {"return": {"type": "Boolean", "description": "The status of the validation"}, "description": "Validate animation parameters.", "protected": "", "params": [{"type": "Object", "name": "cfg", "description": "  The animation configuration"}], "guessedname": "_validateAnimation", "guessedtype": "function"}, "_getLastVisible": {"protected": "", "description": "Get the index of the last visible item", "guessedname": "_getLastVisible", "guessedtype": "function"}, "setStyles": {"params": [{"type": "HTMLElement", "name": "el", "description": "  The element to set styles on"}, {"type": "Object", "name": "style", "description": "  top:\"10px\", left:\"0px\", etc."}], "description": "Set multiple styles on one element.", "private": ""}, "_setNavigation": {"return": {"type": "Object", "description": "The new value that would be set"}, "description": "Set the value for the Carousel's navigation.", "protected": "", "params": [{"type": "Object", "name": "cfg", "description": "  The navigation configuration"}], "guessedname": "_setNavigation", "guessedtype": "function"}, "isAnimating": {"public": "", "return": {"type": "Boolean", "description": "Return true if animation is still in progress, or\nfalse otherwise."}, "description": "Return true if the Carousel is still animating, or false otherwise.", "guessedname": "isAnimating", "guessedtype": "function"}, "_setOrientation": {"return": {"type": "Boolean", "description": "The new value that would be set"}, "description": "Set the orientation of the Carousel.", "protected": "", "params": [{"type": "Boolean", "name": "val", "description": "  The new value for isVertical"}], "guessedname": "_setOrientation", "guessedtype": "function"}, "_itemClickHandler": {"protected": "", "params": [{"type": "Event", "name": "ev", "description": " The event object"}], "description": "The \"click\" handler for the item.", "guessedname": "_itemClickHandler", "guessedtype": "function"}, "getItems": {"public": "", "return": {"type": "Array", "description": "Return all items in the Carousel"}, "description": "Return all items as an array.", "guessedname": "getItems", "guessedtype": "function"}, "getStyle": {"params": [{"type": "HTMLElement", "name": "el", "description": "  The element for which the style needs to be\nreturned."}, {"type": "String", "name": "style", "description": "  The style attribute"}, {"type": "String", "name": "type", "description": "  \"int\", \"float\", etc. (defaults to int)"}], "description": "Get the computed style of an element.", "private": ""}, "createCarousel": {"protected": "", "params": [{"type": "String", "name": "elId", "description": "  The id of the element to be created"}], "description": "Create the Carousel.", "guessedname": "_createCarousel", "guessedtype": "function"}, "getItem": {"return": {"type": "Object", "description": "Return the item at index or null if not found"}, "description": "Return the item at index or null if the index is not found.", "params": [{"type": "Number", "name": "index", "description": "  The index of the item to be returned"}], "guessedname": "getItem", "guessedtype": "function", "public": ""}, "_loadItems": {"protected": "", "description": "The load the required set of items that are needed for display.", "guessedname": "_loadItems", "guessedtype": "function"}, "parseCarouselNavigation": {"return": {"type": "Boolean", "description": "True if at least one is found, false otherwise"}, "description": "Find the Carousel navigation within a container. The navigation\nelements need to match the carousel navigation class names.", "protected": "", "params": [{"type": "HTMLElement", "name": "parent", "description": "  The parent element to look under"}], "guessedname": "_parseCarouselNavigation", "guessedtype": "function"}, "getCarouselItemSize": {"params": [{"type": "String", "name": "which", "description": "  \"height\" or \"width\" to be returned.  If this is\npassed explicitly, the calculated size is not cached."}], "description": "Compute and return the height or width of a single Carousel item\ndepending upon the orientation.", "private": ""}, "_setClipContainerSize": {"protected": "", "params": [{"type": "HTMLElement", "name": "clip", "description": "  The clip container element."}, {"type": "Number", "name": "num", "description": "  optional The number of items per page."}], "description": "Set the clip container size (based on the new numVisible value).", "guessedname": "_setClipContainerSize", "guessedtype": "function"}, "startAutoPlay": {"description": "Start auto-playing the Carousel.", "public": "", "guessedname": "startAutoPlay", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "Carousel.js", "guessedtype": "function", "shortname": "Carousel", "properties": {"NEXT_PAGE": {"default": "\"yui-carousel-next\"", "description": "The class name of the next navigation link. This variable is\nnot only used for styling, but also for identifying the link\nwithin the Carousel container.", "guessedname": "NEXT_PAGE", "guessedtype": "property"}, "_rows": {"private": "", "description": "Number of rows for a multirow carousel.", "guessedname": "_rows", "guessedtype": "property"}, "_hasFocus": {"private": "", "description": "Does the Carousel element have focus?", "guessedname": "_hasFocus", "guessedtype": "property"}, "_animObj": {"private": "", "description": "The Animation object.", "guessedname": "_animObj", "guessedtype": "property"}, "_itemsTable": {"private": "", "description": "The table of items in the Carousel.\nThe numItems is the number of items in the Carousel, items being the\narray of items in the Carousel.  The size is the size of a single\nitem in the Carousel.  It is cached here for efficiency (to avoid\ncomputing the size multiple times).", "guessedname": "_itemsTable", "guessedtype": "property"}, "VERT_MIN_WIDTH": {"default": "155", "description": "The minimum width of the vertical Carousel container to support\nthe navigation buttons.", "guessedname": "VERT_MIN_WIDTH", "guessedtype": "property"}, "instances": {"guessedname": "instances", "static": "", "description": "The internal table of Carousel instances.", "private": "", "guessedtype": "property"}, "MULTI_ROW": {"default": "\"yui-carousel-multi-row\"", "description": "The class name of a multirow Carousel.", "guessedname": "MULTI_ROW", "guessedtype": "property"}, "_isAutoPlayInProgress": {"private": "", "description": "Is the auto-scrolling of Carousel in progress?", "guessedname": "_isAutoPlayInProgress", "guessedtype": "property"}, "MIN_WIDTH": {"default": "\"yui-carousel-min-width\"", "description": "The class name that will be set if the Carousel adjusts itself\nfor a minimum width.", "guessedname": "MIN_WIDTH", "guessedtype": "property"}, "HORIZONTAL": {"default": "\"yui-carousel-horizontal\"", "description": "The class name of a horizontally oriented Carousel.", "guessedname": "HORIZONTAL", "guessedtype": "property"}, "_isAnimationInProgress": {"private": "", "description": "Is the animation still in progress?", "guessedname": "_isAnimationInProgress", "guessedtype": "property"}, "_prevEnabled": {"private": "", "description": "Status of the previous navigation item.", "guessedname": "_prevEnabled", "guessedtype": "property"}, "NEXT_BUTTON_TEXT": {"default": "\"Next Page\"", "description": "The next navigation button name/text.", "guessedname": "NEXT_BUTTON_TEXT", "guessedtype": "property"}, "_hasRendered": {"private": "", "description": "Is the Carousel rendered already?", "guessedname": "_hasRendered", "guessedtype": "property"}, "VERTICAL_CONTAINER": {"default": "\"yui-carousel-vertical-container\"", "description": "The class name of a vertical Carousel's container element.", "guessedname": "VERTICAL_CONTAINER", "guessedtype": "property"}, "PREVIOUS_BUTTON_TEXT": {"default": "\"Previous Page\"", "description": "The previous navigation button name/text.", "guessedname": "PREVIOUS_BUTTON_TEXT", "guessedtype": "property"}, "PREV_PAGE": {"default": "\"yui-carousel-prev\"", "description": "The class name of the previous navigation link. This variable\nis not only used for styling, but also for identifying the link\nwithin the Carousel container.", "guessedname": "PREV_PAGE", "guessedtype": "property"}, "_pagination": {"private": "", "description": "The Carousel pagination structure.", "guessedname": "_pagination", "guessedtype": "property"}, "FIRST_NAV_DISABLED": {"default": "\"yui-carousel-first-button-disabled\"", "description": "The class name of a first disabled navigation button.", "guessedname": "FIRST_NAV_DISABLED", "guessedtype": "property"}, "FIRST_PAGE": {"default": "\"yui-carousel-nav-first-page\"", "description": "The class name of a first page element.", "guessedname": "FIRST_PAGE", "guessedtype": "property"}, "_navBtns": {"private": "", "description": "The Carousel navigation buttons.", "guessedname": "_navBtns", "guessedtype": "property"}, "CAROUSEL": {"default": "\"yui-carousel\"", "description": "The class name of the Carousel element.", "guessedname": "CAROUSEL", "guessedtype": "property"}, "_nextEnabled": {"private": "", "description": "Status of the next navigation item.", "guessedname": "_nextEnabled", "guessedtype": "property"}, "CAROUSEL_EL": {"default": "\"yui-carousel-element\"", "description": "The class name of the container of the items in the Carousel.", "guessedname": "CAROUSEL_EL", "guessedtype": "property"}, "_pages": {"private": "", "description": "The Carousel pages structure.\nThis is an object of the total number of pages and the current page.", "guessedname": "_pages", "guessedtype": "property"}, "NAVIGATION": {"default": "\"yui-carousel-nav\"", "description": "The navigation element container class name.", "guessedname": "NAVIGATION", "guessedtype": "property"}, "_carouselEl": {"private": "", "description": "The Carousel element.", "guessedname": "_carouselEl", "guessedtype": "property"}, "ROW": {"default": "\"yui-carousel-new-row\"", "description": "The class name of a row in a multirow Carousel.", "guessedname": "ROW", "guessedtype": "property"}, "NUM_VISIBLE": {"default": "3", "description": "The number of visible items in the Carousel.", "guessedname": "NUM_VISIBLE", "guessedtype": "property"}, "PAGER_ITEM": {"default": "\"yui-carousel-pager-item\"", "description": "The class name for an item in the pager UL or dropdown menu.", "guessedname": "PAGER_ITEM", "guessedtype": "property"}, "CONTAINER": {"default": "\"yui-carousel-container\"", "description": "The class name of the Carousel's container element.", "guessedname": "CONTAINER", "guessedtype": "property"}, "VERTICAL": {"default": "\"yui-carousel-vertical\"", "description": "The class name of a vertically oriented Carousel.", "guessedname": "VERTICAL", "guessedtype": "property"}, "WidgetName": {"guessedname": "WidgetName", "static": "", "description": "The widget name.", "private": "", "guessedtype": "property"}, "ITEM_LOADING": {"default": "The progress indicator (spinner) image CSS class", "description": "The element to be used as the progress indicator when the item\nis still being loaded.", "guessedname": "ITEM_LOADING", "guessedtype": "property"}, "VISIBLE": {"default": "\"yui-carousel-visible\"", "description": "The class name of a visible Carousel.", "guessedname": "VISIBLE", "guessedtype": "property"}, "_navEl": {"private": "", "description": "The Carousel navigation.", "guessedname": "_navEl", "guessedtype": "property"}, "_cols": {"private": "", "description": "Number of cols for a multirow carousel.", "guessedname": "_cols", "guessedtype": "property"}, "CONTENT": {"default": "\"yui-carousel-content\"", "description": "The class name of the Carousel's container element.", "guessedname": "CONTENT", "guessedtype": "property"}, "SELECTED_NAV": {"default": "\"yui-carousel-nav-page-selected\"", "description": "The class name of the selected paging navigation.", "guessedname": "SELECTED_NAV", "guessedtype": "property"}, "MAX_PAGER_BUTTONS": {"default": "5", "description": "The maximum number of pager buttons allowed beyond which the UI\nof the pager would be a drop-down of pages instead of buttons.", "guessedname": "MAX_PAGER_BUTTONS", "guessedtype": "property"}, "DISABLED": {"default": "\"yui-carousel-button-disabled\"", "description": "The class name of a disabled navigation button.", "guessedname": "DISABLED", "guessedtype": "property"}, "SELECTED_ITEM": {"default": "\"yui-carousel-item-selected\"", "description": "The class name of the selected item.", "guessedname": "SELECTED_ITEM", "guessedtype": "property"}, "ITEM_LOADING_CONTENT": {"default": "\"Loading\"", "description": "The content to be used as the progress indicator when the item\nis still being loaded.", "guessedname": "ITEM_LOADING_CONTENT", "guessedtype": "property"}, "FIRST_VISIBLE": {"default": "0", "description": "The offset of the first visible item in the Carousel.", "guessedname": "FIRST_VISIBLE", "guessedtype": "property"}, "_itemAttrCache": {"private": "", "description": "Cache the Carousel item attributes.", "guessedname": "_itemAttrCache", "guessedtype": "property"}, "PAGINATION": {"default": "\"yui-carousel-pagination\"", "description": "The class name for the pagination container", "guessedname": "PAGINATION", "guessedtype": "property"}, "PAGER_PREFIX_TEXT": {"default": "\"Go to page \"", "description": "The prefix text for the pager in case the UI is a drop-down.", "guessedname": "PAGER_PREFIX_TEXT", "guessedtype": "property"}, "PAGE_FOCUS": {"default": "\"yui-carousel-nav-page-focus\"", "description": "The class name of the focussed page navigation.  This class is\nspecifically used for the ugly focus handling in Opera.", "guessedname": "PAGE_FOCUS", "guessedtype": "property"}, "_clipEl": {"private": "", "description": "The Carousel clipping container element.", "guessedname": "_clipEl", "guessedtype": "property"}, "BUTTON": {"default": "\"yui-carousel-button\"", "description": "The class name of the Carousel navigation buttons.", "guessedname": "BUTTON", "guessedtype": "property"}, "_firstItem": {"private": "", "description": "The current first index of the Carousel.", "guessedname": "_firstItem", "guessedtype": "property"}, "_recomputeSize": {"private": "", "description": "Whether the Carousel size needs to be recomputed or not?", "guessedname": "_recomputeSize", "guessedtype": "property"}, "FIRST_NAV": {"default": "\" yui-carousel-first-button\"", "description": "The class name of the first Carousel navigation button.", "guessedname": "FIRST_NAV", "guessedtype": "property"}, "NAV_CONTAINER": {"default": "\"yui-carousel-buttons\"", "description": "The class name for the navigation container for prev/next.", "guessedname": "NAV_CONTAINER", "guessedtype": "property"}, "FOCUSSED_BUTTON": {"default": "\"yui-carousel-button-focus\"", "description": "The class name of the Carousel navigation button that has focus.", "guessedname": "FOCUSSED_BUTTON", "guessedtype": "property"}, "NEXT_NAV": {"default": "\" yui-carousel-next-button\"", "description": "The class name of the next Carousel navigation button.", "guessedname": "NEXT_NAV", "guessedtype": "property"}, "HORZ_MIN_WIDTH": {"default": "180", "description": "The minimum width of the horizontal Carousel container to support\nthe navigation buttons.", "guessedname": "HORZ_MIN_WIDTH", "guessedtype": "property"}}, "description": "The Carousel widget."}, "YAHOO.widget.TreeView": {"name": "YAHOO.widget.TreeView", "constructors": [{"params": [{"type": "string|HTMLElement", "name": "id", "description": " The id of the element, or the element itself that the tree will be inserted into.  \nExisting markup in this element, if valid, will be used to build the tree"}, {"type": "Array|Object|String", "name": "oConfig", "description": " (optional)  If present, it will be used to build the tree via method <a href=\"#method_buildTreeFromObject\">buildTreeFromObject</a>"}], "description": "Contains the tree view state data and the root node."}], "namespace": "YAHOO.widget", "module": "treeview", "events": {"enterKeyPressed": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that has the focus"}], "description": "Fires when the Enter key is pressed on a node that has the focus"}, "labelClick": {"deprecated": "use clickEvent or dblClickEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node clicked"}], "description": "Custom event that is fired when the text node label is clicked. \nThe node clicked is  provided as an argument", "type": "CustomEvent"}, "editorSaveEvent": {"type": "CustomEvent", "params": [{"type": "mixed", "name": "oArgs.newValue", "description": "  the new value just entered"}, {"type": "mixed", "name": "oArgs.oldValue", "description": "  the value originally in the tree"}, {"type": "YAHOO.widget.Node", "name": "oArgs.node", "description": "  the node that has the focus"}], "description": "Fires when the user clicks on the ok button of a node editor"}, "collapse": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is collapsing"}], "description": "Fires when a node is going to be collapsed.  Return false to stop\nthe collapse."}, "highlightEvent": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": "  the node that started the change in highlighting state"}], "description": "Custom event fired when the highlight of a node changes.\nThe node that triggered the change is provided as an argument:\nThe status of the highlight can be checked in \n<a href=\"YAHOO.widget.Node.html#property_highlightState\">nodeRef.highlightState</a>.\nDepending on <a href=\"YAHOO.widget.Node.html#property_propagateHighlight\">nodeRef.propagateHighlight</a>, other nodes might have changed"}, "dblClickEvent": {"type": "CustomEvent", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "   The event object"}, {"type": "YAHOO.widget.Node", "name": "oArgs.node", "description": "  node the node that was clicked"}], "description": "Fires when the label in a TextNode or MenuNode or content in an HTMLNode receives a double Click", "guessedname": "self", "guessedtype": "property"}, "focusChanged": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "oArgs.oldNode", "description": "   Node that had the focus or null if none"}, {"type": "YAHOO.widget.Node", "name": "oArgs.newNode", "description": "  Node that receives the focus or null if none"}], "description": "Fires when the focus receives the focus, when it changes from a Node \nto another Node or when it is completely lost (blurred)"}, "collapseComplete": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that was collapsed"}], "description": "Fires after a node is successfully collapsed.  This event will not fire\nif the \"collapse\" event was cancelled."}, "editorCancelEvent": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that has the focus"}], "description": "Fires when the user clicks on the cancel button of a node editor"}, "animComplete": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "oArgs.node", "description": " the node that is expanding/collapsing"}, {"type": "String", "name": "oArgs.type", "description": " the type of animation (\"expand\" or \"collapse\")"}], "description": "When animation is enabled, this event fires when the animation\ncompletes"}, "expandComplete": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that was expanded"}], "description": "Fires after a node is successfully expanded.  This event will not fire\nif the \"expand\" event was cancelled."}, "animStart": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "oArgs.node", "description": " the node that is expanding/collapsing"}, {"type": "String", "name": "oArgs.type", "description": " the type of animation (\"expand\" or \"collapse\")"}], "description": "When animation is enabled, this event fires when the animation\nstarts"}, "clickEvent": {"type": "CustomEvent", "params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "   The event object"}, {"type": "YAHOO.widget.Node", "name": "oArgs.node", "description": "  node the node that was clicked"}], "description": "Fires when the label in a TextNode or MenuNode or content in an HTMLNode receives a Click.\nThe listener may return false to cancel toggling and focusing on the node."}, "expand": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding"}], "description": "Fires when a node is going to be expanded.  Return false to stop\nthe collapse."}}, "guessedname": "TreeView", "methods": {"animateExpand": {"return": {"type": "boolean", "description": "true if animation could be invoked, false otherwise"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "YAHOO.util.Node", "name": "node", "description": "  the node that was expanded"}], "description": "Perform the expand animation if configured, or just show the\nelement if not configured or too many animations are in progress", "guessedname": "animateExpand", "guessedtype": "function"}, "setDynamicLoad": {"params": [{"type": "function", "name": "fnDataLoader", "description": " the function that will be called to get the data"}, {"type": "int", "name": "iconMode", "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."}], "description": "Configures this tree to dynamically load all child data", "guessedname": "setDynamicLoad", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the tree"}, "description": "TreeView instance toString", "guessedname": "toString", "guessedtype": "function"}, "render": {"description": "Renders the tree boilerplate and visible nodes", "guessedname": "render", "guessedtype": "function"}, "getNodeByIndex": {"return": {"type": "Node", "description": "the node with index=nodeIndex, null if no match"}, "params": [{"type": "int", "name": "nodeIndex", "description": " the index of the node wanted"}], "description": "Returns a node in the tree that has the specified index (this index\nis created internally, so this function probably will only be used\nin html generated for a given node.)", "guessedname": "getNodeByIndex", "guessedtype": "function"}, "_onMouseOverEvent": {"private": "", "description": "Event listener for mouse over events", "guessedname": "_onMouseOverEvent", "guessedtype": "function"}, "collapseComplete": {"description": "Function executed when the collapse animation completes", "guessedname": "collapseComplete", "guessedtype": "function"}, "setNodesProperty": {"params": [{"type": "string", "name": "name", "description": "  Name of the property to be set"}, {"type": "any", "name": "value", "description": "  value to be set"}, {"type": "boolean", "name": "refresh", "description": "  if present and true, it does a refresh"}], "description": "Sets the value of a property for all loaded nodes in the tree.", "guessedname": "setNodesProperty", "guessedtype": "function"}, "_onDblClickEvent": {"private": "", "description": "Event listener for double-click events", "guessedname": "_onDblClickEvent", "guessedtype": "function"}, "regNode": {"guessedname": "regNode", "params": [{"type": "Node", "name": "node", "description": "  the node to register"}], "description": "Nodes register themselves with the tree instance when they are created.", "private": "", "guessedtype": "function"}, "onEventToggleHighlight": {"return": {"type": "false", "description": "Always cancels the default action for the event"}, "params": [{"type": "any", "name": "oArgs", "description": "  it takes the arguments of any of the events mentioned above"}], "description": "Event listener to toggle node highlight.\nCan be assigned as listener to clickEvent, dblClickEvent and enterKeyPressed.\nIt returns false to prevent the default action.", "guessedname": "onEventToggleHighlight", "guessedtype": "function"}, "onExpand": {"deprecated": "use treeobj.subscribe(\"expand\") instead", "params": [{"type": "Node", "name": "node", "description": "  the node that was expanded"}], "description": "Abstract method that is executed when a node is expanded", "guessedname": "onExpand", "guessedtype": "function"}, "_initEditor": {"guessedname": "_initEditor", "description": "Entry point for initializing the editing plug-in.  \nTreeView will call this method on initializing if it exists", "private": "", "guessedtype": "function"}, "setExpandAnim": {"params": [{"type": "string", "name": "type", "description": " the type of animation (acceptable values defined \nin YAHOO.widget.TVAnim)"}], "description": "Sets up the animation for expanding children", "guessedname": "setExpandAnim", "guessedtype": "function"}, "YAHOO.widget.TreeView.getTree": {"return": {"type": "TreeView", "description": "the tree instance requested, null if not found."}, "description": "Global method for getting a tree by its id.  Used in the generated\ntree html.", "static": "", "guessedname": "getTree", "guessedtype": "function", "params": [{"type": "String", "name": "treeId", "description": "  the id of the tree instance"}]}, "_onMouseOutEvent": {"private": "", "description": "Event listener for mouse out events", "guessedname": "_onMouseOutEvent", "guessedtype": "function"}, "removeNode": {"return": {"type": "boolean", "description": "False is there was a problem, true otherwise."}, "params": [{"type": "Node", "name": "node", "description": " to remove"}, {"type": "boolean", "name": "autoRefresh", "description": " automatically refreshes branch if true"}], "description": "Removes the node and its children, and optionally refreshes the \nbranch of the tree that was affected.", "guessedname": "removeNode", "guessedtype": "function"}, "_getEventTargetTdEl": {"private": "", "description": "Returns the TD element where the event has occurred", "guessedname": "_getEventTargetTdEl", "guessedtype": "function"}, "popNode": {"params": [{"type": "Node", "name": "node", "description": " to remove"}], "description": "Removes the node from the tree, preserving the child collection \nto make it possible to insert the branch into another part of the \ntree, or another tree.", "guessedname": "popNode", "guessedtype": "function"}, "onCollapse": {"deprecated": "use treeobj.subscribe(\"collapse\") instead", "params": [{"type": "Node", "name": "node", "description": "  the node that was collapsed."}], "description": "Abstract method that is executed when a node is collapsed.", "guessedname": "onCollapse", "guessedtype": "function"}, "init": {"guessedname": "init", "parm": "{string|HTMLElement} id the id of the element that will hold the tree", "description": "Initializes the tree", "private": "", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the host element"}, "description": "Returns the tree's host element", "guessedname": "getEl", "guessedtype": "function"}, "removeChildren": {"params": [{"type": "Node", "name": "node", "description": " the node to purge"}], "description": "Deletes this nodes child collection, recursively.  Also collapses\nthe node, and resets the dynamic load flag.  The primary use for\nthis method is to purge a node and allow it to fetch its data\ndynamically again.", "guessedname": "removeChildren", "guessedtype": "function"}, "_onKeyDownEvent": {"private": "", "description": "Event listener for key down events", "guessedname": "_onKeyDownEvent", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire TreeView instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "animateCollapse": {"return": {"type": "boolean", "description": "true if animation could be invoked, false otherwise"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "YAHOO.util.Node", "name": "node", "description": "  the node that was expanded"}], "description": "Perform the collapse animation if configured, or just show the\nelement if not configured or too many animations are in progress", "guessedname": "animateCollapse", "guessedtype": "function"}, "getHighlightedNode": {"return": {"type": "YAHOO.widget.Node", "description": "a node reference or null"}, "description": "When in singleNodeHighlight it returns the node highlighted\nor null if none.  Returns null if singleNodeHighlight is false.", "guessedname": "getHighlightedNode", "guessedtype": "function"}, "expandAll": {"description": "Expands all child nodes.  Note: this conflicts with the \"multiExpand\"\nnode property.  If expand all is called in a tree with nodes that\ndo not allow multiple siblings to be displayed, only the last sibling\nwill be expanded.", "guessedname": "expandAll", "guessedtype": "function"}, "getNodeCount": {"return": {"type": "int", "description": "number of nodes in the tree"}, "description": "Count of nodes in tree", "guessedname": "getNodeCount", "guessedtype": "function"}, "draw": {"deprecated": "Use render instead", "description": "Renders the tree boilerplate and visible nodes.\nAlias for render", "guessedname": "draw", "guessedtype": "property"}, "getTreeDefinition": {"return": {"type": "Object | false", "description": "definition of the tree or false if any node is defined as dynamic"}, "description": "Returns an object which could be used to rebuild the tree.\nIt can be passed to the tree constructor to reproduce the same tree.\nIt will return false if any node loads dynamically, regardless of whether it is loaded or not.", "guessedname": "getTreeDefinition", "guessedtype": "function"}, "YAHOO.widget.TreeView.getNode": {"return": {"type": "Node", "description": "the node instance requested, null if not found"}, "description": "Global method for getting a node by its id.  Used in the generated\ntree html.", "static": "", "guessedname": "getNode", "guessedtype": "function", "params": [{"type": "String", "name": "treeId", "description": "  the id of the tree instance"}, {"type": "String", "name": "nodeIndex", "description": "  the index of the node to return"}]}, "getNodeByProperty": {"return": {"type": "Node", "description": "the matching node, null if no match"}, "params": [{"type": "object", "name": "property", "description": " the property to search (usually a string)"}, {"type": "object", "name": "value", "description": " the value we want to find (usuall an int or string)"}], "description": "Returns a node that has a matching property and value in the data\nobject that was passed into its constructor.", "guessedname": "getNodeByProperty", "guessedtype": "function"}, "getNodesBy": {"return": {"type": "Array", "description": "the matching collection of nodes, null if no match"}, "params": [{"type": "function", "name": "a", "description": " boolean function that receives a Node instance and returns true to add the node to the results list"}], "description": "Returns a collection of nodes that have passed the test function\npassed as its only argument.  \nThe function will receive a reference to each node to be tested.", "guessedname": "getNodesBy", "guessedtype": "function"}, "_removeChildren_animComplete": {"guessedname": "_removeChildren_animComplete", "params": [{"type": "", "name": "o", "description": " the custom event payload"}], "description": "wait until the animation is complete before deleting \nto avoid javascript errors", "private": "", "guessedtype": "function"}, "_closeEditor": {"guessedname": "_closeEditor", "params": [{"type": "Boolean", "name": "save", "description": "  true if the edited value is to be saved, false if discarded"}], "description": "Method to be called when the inline editing is finished and the editor is to be closed", "private": "", "guessedtype": "function"}, "getNodesByProperty": {"return": {"type": "Array", "description": "the matching collection of nodes, null if no match"}, "params": [{"type": "object", "name": "property", "description": " the property to search (usually a string)"}, {"type": "object", "name": "value", "description": " the value we want to find (usuall an int or string)"}], "description": "Returns a collection of nodes that have a matching property \nand value in the data object that was passed into its constructor.", "guessedname": "getNodesByProperty", "guessedtype": "function"}, "onEventEditNode": {"params": [{"type": "object", "name": "oArgs", "description": "  Object passed as arguments to TreeView event listeners"}], "description": "Method to be associated with an event (clickEvent, dblClickEvent or enterKeyPressed) to pop up the contents editor\nIt calls the corresponding node editNode method.", "guessedname": "onEventEditNode", "guessedtype": "function"}, "_deleteNode": {"private": "", "description": "Deletes the node and recurses children", "guessedname": "_deleteNode", "guessedtype": "function"}, "getRoot": {"return": {"type": "Node", "description": "the root node"}, "description": "Returns the root node of this tree", "guessedname": "getRoot", "guessedtype": "function"}, "_onClickEvent": {"private": "", "description": "Event listener for click events", "guessedname": "_onClickEvent", "guessedtype": "function"}, "getNodeByElement": {"return": {"type": "YAHOO.widget.Node", "description": "a node reference or null"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to test"}], "description": "Returns the treeview node reference for an ancestor element\nof the node, or null if it is not contained within any node\nin this tree.", "guessedname": "getNodeByElement", "guessedtype": "function"}, "setCollapseAnim": {"params": [{"type": "string", "name": "type", "description": " of animation (acceptable values defined in \nYAHOO.widget.TVAnim)"}], "description": "Sets up the animation for collapsing children", "guessedname": "setCollapseAnim", "guessedtype": "function"}, "buildTreeFromObject": {"params": [{"type": "Array|Object|String", "name": "oConfig", "description": "   array containing a full description of the tree.\nAn object or a string will be turned into an array with the given object or string as its only element."}], "description": "Builds the TreeView from an object.  \nThis is the method called by the constructor to build the tree when it has a second argument.\nA tree can be described by an array of objects, each object corresponding to a node.\nNode descriptions may contain values for any property of a node plus the following extra properties: <ul>\n<li>type:  can be one of the following:<ul>\n<li> A shortname for a node type (<code>'text','menu','html'</code>) </li>\n<li>The name of a Node class under YAHOO.widget (<code>'TextNode', 'MenuNode', 'DateNode'</code>, etc) </li>\n<li>a reference to an actual class: <code>YAHOO.widget.DateNode</code></li>\n</ul></li>\n<li>children: an array containing further node definitions</li></ul>\nA string instead of an object will produce a node of type 'text' with the given string as its label.", "guessedname": "buildTreeFromObject", "guessedtype": "function"}, "buildTreeFromMarkup": {"params": [{"type": "string|HTMLElement", "name": "id", "description": "  The id of the element that contains the markup or a reference to it."}], "description": "Builds the TreeView from existing markup.   Markup should consist of &lt;UL&gt; or &lt;OL&gt; elements containing &lt;LI&gt; elements.  \nEach &lt;LI&gt; can have one element used as label and a second optional element which is to be a &lt;UL&gt; or &lt;OL&gt;\ncontaining nested nodes.\nDepending on what the first element of the &lt;LI&gt; element is, the following Nodes will be created: <ul>\n<li>plain text:  a regular TextNode</li>\n<li>anchor &lt;A&gt;: a TextNode with its <code>href</code> and <code>target</code> taken from the anchor</li>\n<li>anything else: an HTMLNode</li></ul>\nOnly the first  outermost (un-)ordered list in the markup and its children will be parsed.\nNodes will be collapsed unless  an  &lt;LI&gt;  tag has a className called 'expanded'.\nAll other className attributes will be copied over to the Node className property.\nIf the &lt;LI&gt; element contains an attribute called <code>yuiConfig</code>, its contents should be a JSON-encoded object\nas the one used in method <a href=\"#method_buildTreeFromObject\">buildTreeFromObject</a>.", "guessedname": "buildTreeFromMarkup", "guessedtype": "function"}, "_nodeEditing": {"return": {"type": "Boolean", "description": "true to indicate that the node is editable and prevent any further bubbling of the click."}, "description": "Entry point of the editing plug-in.  \nTreeView will call this method if it exists when a node label is clicked", "private": "", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": "  the node to be edited"}], "guessedname": "_nodeEditing", "guessedtype": "function"}, "expandComplete": {"description": "Function executed when the expand animation completes", "guessedname": "expandComplete", "guessedtype": "function"}, "collapseAll": {"description": "Collapses all expanded child nodes in the entire tree.", "guessedname": "collapseAll", "guessedtype": "function"}, "_destroyEditor": {"guessedname": "_destroyEditor", "description": "Entry point for TreeView's destroy method to destroy whatever the editing plug-in has created", "private": "", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "TreeView.js", "guessedtype": "function", "shortname": "TreeView", "properties": {"_dblClickTimer": {"guessedname": "_dblClickTimer", "type": "window.timer object", "description": "Stores the timer used to check for double clicks", "private": "", "guessedtype": "property"}, "_currentlyHighlighted": {"description": "A reference to the Node that is currently highlighted.\nIt is only meaningful if singleNodeHighlight is enabled", "default": "null", "private": "", "guessedname": "_currentlyHighlighted", "guessedtype": "property", "type": "YAHOO.widget.Node"}, "locked": {"type": "boolean", "description": "We lock the tree control while waiting for the dynamic loader to return", "guessedname": "locked", "guessedtype": "property"}, "YAHOO.widget.TreeView.nodeCount": {"type": "int", "static": "", "description": "Running count of all nodes created in all trees.  This is \nused to provide unique identifies for all nodes.  Deleting\nnodes does not change the nodeCount.", "guessedname": "nodeCount", "guessedtype": "property"}, "_expandAnim": {"guessedname": "_expandAnim", "type": "string", "description": "The animation to use for expanding children, if any", "private": "", "guessedtype": "property"}, "_collapseAnim": {"guessedname": "_collapseAnim", "type": "string", "description": "The animation to use for collapsing children, if any", "private": "", "guessedtype": "property"}, "editorData": {"static": "", "description": "An object to store information used for in-line editing\nfor all Nodes of all TreeViews. It contains:\n<ul>\n<li>active {boolean}, whether there is an active cell editor </li>\n<li>whoHasIt {YAHOO.widget.TreeView} TreeView instance that is currently using the editor</li>\n<li>nodeType {string} value of static Node._type property, allows reuse of input element if node is of the same type.</li>\n<li>editorPanel {HTMLelement (&lt;div&gt;)} element holding the in-line editor</li>\n<li>inputContainer {HTMLelement (&lt;div&gt;)} element which will hold the type-specific input element(s) to be filled by the fillEditorContainer method</li>\n<li>buttonsContainer {HTMLelement (&lt;div&gt;)} element which holds the &lt;button&gt; elements for Ok/Cancel.  If you don't want any of the buttons, hide it via CSS styles, don't destroy it</li>\n<li>node {YAHOO.widget.Node} reference to the Node being edited</li>\n<li>saveOnEnter {boolean}, whether the Enter key should be accepted as a Save command (Esc. is always taken as Cancel), disable for multi-line input elements </li>\n<li>oldValue {any}  value before editing</li>\n</ul>\nEditors are free to use this object to store additional data.", "guessedname": "editorData", "guessedtype": "property"}, "_el": {"guessedname": "_el", "type": "HTMLelement", "description": "The host element for this tree", "private": "", "guessedtype": "property"}, "currentFocus": {"type": "YAHOO.widget.Node", "description": "A reference to the Node currently having the focus or null if none.", "guessedname": "currentFocus", "guessedtype": "property"}, "YAHOO.widget.TreeView.trees": {"description": "Global cache of tree instances", "private": "", "static": "", "guessedname": "trees", "guessedtype": "property", "type": "Array"}, "_nodes": {"guessedname": "_nodes", "type": "Node[]", "description": "Flat collection of all nodes in this tree.  This is a sparse\narray, so the length property can't be relied upon for a\nnode count for the tree.", "private": "", "guessedtype": "property"}, "_animCount": {"guessedname": "_animCount", "type": "int", "description": "The current number of animations that are executing", "private": "", "guessedtype": "property"}, "validator": {"default": "null", "type": "function", "description": "Validator function for edited data, called from the TreeView instance scope, \nreceives the arguments (newValue, oldValue, nodeInstance) \nand returns either the validated (or type-converted) value or undefined. \nAn undefined return will prevent the editor from closing", "guessedname": "validator", "guessedtype": "property"}, "_hasDblClickSubscriber": {"guessedname": "_hasDblClickSubscriber", "type": "boolean", "description": "Whether there is any subscriber to dblClickEvent", "private": "", "guessedtype": "property"}, "maxAnim": {"type": "int", "description": "The maximum number of animations to run at one time.", "guessedname": "maxAnim", "guessedtype": "property"}, "singleNodeHighlight": {"default": "false", "type": "boolean", "description": "If true, only one Node can be highlighted at a time", "guessedname": "singleNodeHighlight", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of tree container element", "guessedname": "id", "guessedtype": "property"}, "TreeView.FOCUS_CLASS_NAME": {"description": "Class name assigned to elements that have the focus", "default": "\"ygtvfocus\"", "static": "", "guessedname": "FOCUS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Contains the tree view state data and the root node."}, "YAHOO.util.ScriptNodeDataSource": {"name": "YAHOO.util.ScriptNodeDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "ScriptNodeDataSource class for accessing remote data via the YUI Get Utility."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "ScriptNodeDataSource", "methods": {"doBeforeGetScriptNode": {"return": {"type": "String", "description": "URI to the script"}, "params": [{"type": "String", "name": "URI", "description": " to the script"}], "description": "Overridable method gives implementers access to modify the URI before the dynamic\nscript node gets inserted. Implementers should take care not to return an\ninvalid URI.", "guessedname": "doBeforeGetScriptNode", "guessedtype": "function"}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overriding method passes query to Get Utility. The returned\nresponse is then forwarded to the handleResponse function.", "guessedname": "makeConnection", "guessedtype": "function"}, "generateRequestCallback": {"return": {"type": "String", "description": "String fragment that gets appended to script URI that \nspecifies the callback function"}, "description": "Creates a request callback that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax.", "guessedname": "generateRequestCallback", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "DataSource.js", "guessedtype": "function", "shortname": "ScriptNodeDataSource", "properties": {"_nPending": {"description": "Counter for pending requests. When this is 0, it is safe to purge callbacks\narray.", "private": "", "static": "", "guessedname": "_nPending", "guessedtype": "property", "type": "Number"}, "scriptCallbackParam": {"default": "\"callback\"", "type": "String", "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callback", "guessedname": "scriptCallbackParam", "guessedtype": "property"}, "getUtility": {"default": "YAHOO.util.Get", "type": "Object", "description": "Alias to YUI Get Utility, to allow implementers to use a custom class.", "guessedname": "getUtility", "guessedtype": "property"}, "_nId": {"description": "Unique ID to track requests.", "private": "", "static": "", "guessedname": "_nId", "guessedtype": "property", "type": "Number"}, "callbacks": {"type": "Function[]", "static": "", "description": "Global array of callback functions, one for each request sent.", "guessedname": "callbacks", "guessedtype": "property"}, "asyncMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request/response management in the following manner:\n<dl>\n<!--<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is returned before sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before sending the next request.</dd>-->\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most recently sent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>", "guessedname": "asyncMode", "guessedtype": "property"}}, "description": "ScriptNodeDataSource class for accessing remote data via the YUI Get Utility."}, "YAHOO.util.Anim": {"name": "YAHOO.util.Anim", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</p>"}], "namespace": "YAHOO.util", "module": "animation", "events": {"onComplete": {"description": "Custom event that fires when animation ends\nListen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)", "guessedname": "onComplete", "guessedtype": "property"}, "onStart": {"description": "Custom event that fires when animation begins\nListen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)", "guessedname": "onStart", "guessedtype": "property"}, "onTween": {"description": "Custom event that fires between each frame\nListen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)", "guessedname": "onTween", "guessedtype": "property"}}, "guessedname": "Anim", "methods": {"isAnimated": {"return": {"type": "Boolean", "description": "current value of isAnimated."}, "description": "Checks whether the element is currently animated.", "guessedname": "isAnimated", "guessedtype": "function"}, "setEl": {"description": "Changes the animated element", "guessedname": "setEl", "guessedtype": "function"}, "getAttribute": {"return": {"type": "Number", "description": "val The current value of the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}], "description": "Returns current value of the attribute.", "guessedname": "getAttribute", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "val", "description": " The value to be applied to the attribute."}, {"type": "String", "name": "unit", "description": " The unit ('px', '%', etc.) of the value."}], "description": "Applies a value to an attribute.", "guessedname": "setAttribute", "guessedtype": "function"}, "onTween": {"private": "", "description": "Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s).", "guessedname": "onTween", "guessedtype": "function"}, "doMethod": {"return": {"type": "Number", "description": "The Value to be applied to the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "start", "description": " The value this attribute should start from for this animation."}, {"type": "Number", "name": "end", "description": "  The value this attribute should end at for this animation."}], "description": "Returns the value computed by the animation's \"method\".", "guessedname": "doMethod", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": ""}, "description": "Returns a reference to the animated element.", "guessedname": "getEl", "guessedtype": "function"}, "setRuntimeAttribute": {"guessedname": "setRuntimeAttribute", "params": [{"type": "Object", "name": "attr", "description": " The attribute object"}], "description": "Sets the actual values to be used during the animation.  Should only be needed for subclass use.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "Boolean", "name": "finish", "description": " (optional) If true, animation will jump to final frame."}], "description": "Stops the animation.  Normally called by AnimMgr when animation completes.", "guessedname": "stop", "guessedtype": "function"}, "init": {"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Constructor for Anim instance.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Provides a readable name for the Anim instance.", "guessedname": "toString", "guessedtype": "function"}, "getDefaultUnit": {"return": {"type": "String", "description": "The default unit to be used."}, "params": [{"type": "attr", "name": "attr", "description": " The name of the attribute."}], "description": "Returns the unit to use when none is supplied.", "guessedname": "getDefaultUnit", "guessedtype": "function"}, "animate": {"description": "Starts the animation by registering it with the animation manager.", "guessedname": "animate", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "current value of startTime."}, "description": "Returns the animation start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "file": "Anim.js", "guessedtype": "function", "shortname": "Anim", "requires": "YAHOO.util.AnimMgr", "properties": {"isAnimated": {"guessedname": "isAnimated", "type": "Boolean", "description": "Whether or not the animation is running.", "private": "", "guessedtype": "property"}, "_onTween": {"private": "", "description": "Custom event that fires after onTween", "guessedname": "_onTween", "guessedtype": "property"}, "el": {"guessedname": "el", "type": "HTMLElement", "description": "The element to be animated.", "private": "", "guessedtype": "property"}, "actualFrames": {"guessedname": "actualFrames", "type": "Int", "description": "The number of frames this animation was able to execute.", "private": "", "guessedtype": "property"}, "useSeconds": {"type": "Boolean", "description": "Whether or not the duration should be treated as seconds.\nDefaults to true.", "guessedname": "useSeconds", "guessedtype": "property"}, "totalFrames": {"type": "Int", "description": "The total number of frames to be executed.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "totalFrames", "guessedtype": "property"}, "_onStart": {"private": "", "description": "Custom event that fires after onStart, useful in subclassing", "guessedname": "_onStart", "guessedtype": "property"}, "_onComplete": {"private": "", "description": "Custom event that fires after onComplete", "guessedname": "_onComplete", "guessedtype": "property"}, "startTime": {"guessedname": "startTime", "type": "Date", "description": "A Date object that is created when the animation begins.", "private": "", "guessedtype": "property"}, "duration": {"type": "Number", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "attributes": {"type": "Object", "description": "The collection of attributes to be animated.  \nEach attribute must have at least a \"to\" or \"by\" defined in order to animate.  \nIf \"to\" is supplied, the animation will end with the attribute at that value.  \nIf \"by\" is supplied, the animation will end at that value plus its starting value. \nIf both are supplied, \"to\" is used, and \"by\" is ignored. \nOptional additional member include \"from\" (the value the attribute should start animating from, defaults to current value), and \"unit\" (the units to apply to the values).", "guessedname": "attributes", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"YAHOO.util.Easing.easeNone\".", "guessedname": "method", "guessedtype": "property"}, "currentFrame": {"type": "Int", "description": "The location of the current animation on the timeline.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "currentFrame", "guessedtype": "property"}}, "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</p>"}, "YAHOO.util.Sort": {"name": "YAHOO.util.Sort", "namespace": "YAHOO.util", "module": "datatable", "guessedname": "Sort", "methods": {"compare": {"params": [{"type": "Object", "name": "a", "description": "  First sort argument."}, {"type": "Object", "name": "b", "description": "  Second sort argument."}, {"type": "Boolean", "name": "desc", "description": "  True if sort direction is descending, false if\nsort direction is ascending."}], "description": "Comparator function for simple case-insensitive string sorting.", "guessedname": "compare", "guessedtype": "function"}}, "static": "", "file": "ColumnSet.js", "guessedtype": "property", "shortname": "Sort", "description": "Sort static utility to support Column sorting."}, "YAHOO.util.UserAction": {"name": "YAHOO.util.UserAction", "namespace": "YAHOO.util", "module": "event-simulate", "guessedname": "UserAction", "methods": {"fireKeyEvent": {"description": "Fires an event that normally would be fired by the keyboard (keyup,\nkeydown, keypress). Make sure to specify either keyCode or charCode as\nan option.", "private": "", "static": "", "guessedname": "fireKeyEvent", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " The type of event (\"keyup\", \"keydown\" or \"keypress\")."}, {"type": "HTMLElement", "name": "target", "description": " The target of the event."}, {"type": "Object", "name": "options", "description": " Options for the event. Either keyCode or charCode\nare required."}]}, "mouseEvent": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to click on."}, {"type": "String", "name": "type", "description": " The type of event to fire. This can be any one of\nthe following: click, dblclick, mousedown, mouseup, mouseout,\nmouseover, and mousemove."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouse event on a particular element.", "guessedname": "fireMouseEvent", "guessedtype": "function"}, "keypress": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keypress on a particular element.", "guessedname": "keypress", "guessedtype": "function"}, "keyup": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keyup event on a particular element.", "guessedname": "keyup", "guessedtype": "function"}, "mouseup": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseup on a particular element.", "guessedname": "mouseup", "guessedtype": "function"}, "keydown": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keydown event on a particular element.", "guessedname": "keydown", "guessedtype": "function"}, "mousemove": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mousemove on a particular element.", "guessedname": "mousemove", "guessedtype": "function"}, "simulateMouseEvent": {"description": "Simulates a mouse event using the given event information to populate\nthe generated event object. This method does browser-equalizing\ncalculations to account for differences in the DOM and IE event models\nas well as different browser quirks.", "private": "", "static": "", "guessedname": "simulateMouseEvent", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The target of the given event."}, {"type": "String", "name": "type", "description": " The type of event to fire. This can be any one of\nthe following: click, dblclick, mousedown, mouseup, mouseout,\nmouseover, and mousemove."}, {"type": "Boolean", "name": "bubbles", "description": " (Optional) Indicates if the event can be\nbubbled up. DOM Level 2 specifies that all mouse events bubble by\ndefault. The default is true."}, {"type": "Boolean", "name": "cancelable", "description": " (Optional) Indicates if the event can be\ncanceled using preventDefault(). DOM Level 2 specifies that all\nmouse events except mousemove can be cancelled. The default \nis true for all events except mousemove, for which the default \nis false."}, {"type": "Window", "name": "view", "description": " (Optional) The view containing the target. This is\ntypically the window object. The default is window."}, {"type": "int", "name": "detail", "description": " (Optional) The number of times the mouse button has\nbeen used. The default value is 1."}, {"type": "int", "name": "screenX", "description": " (Optional) The x-coordinate on the screen at which\npoint the event occured. The default is 0."}, {"type": "int", "name": "screenY", "description": " (Optional) The y-coordinate on the screen at which\npoint the event occured. The default is 0."}, {"type": "int", "name": "clientX", "description": " (Optional) The x-coordinate on the client at which\npoint the event occured. The default is 0."}, {"type": "int", "name": "clientY", "description": " (Optional) The y-coordinate on the client at which\npoint the event occured. The default is 0."}, {"type": "Boolean", "name": "ctrlKey", "description": " (Optional) Indicates if one of the CTRL keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "altKey", "description": " (Optional) Indicates if one of the ALT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "shiftKey", "description": " (Optional) Indicates if one of the SHIFT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "metaKey", "description": " (Optional) Indicates if one of the META keys\nis pressed while the event is firing. The default is false."}, {"type": "int", "name": "button", "description": " (Optional) The button being pressed while the event\nis executing. The value should be 0 for the primary mouse button\n(typically the left button), 1 for the terciary mouse button\n(typically the middle button), and 2 for the secondary mouse button\n(typically the right button). The default is 0."}, {"type": "HTMLElement", "name": "relatedTarget", "description": " (Optional) For mouseout events,\nthis is the element that the mouse has moved to. For mouseover\nevents, this is the element that the mouse has moved from. This\nargument is ignored for all other events. The default is null."}]}, "mousedown": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mousedown on a particular element.", "guessedname": "mousedown", "guessedtype": "function"}, "mouseout": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseout event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved to.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\ntoElement is assigned in its place. IE doesn't allow toElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers.", "guessedname": "mouseout", "guessedtype": "function"}, "simulateKeyEvent": {"description": "Simulates a key event using the given event information to populate\nthe generated event object. This method does browser-equalizing\ncalculations to account for differences in the DOM and IE event models\nas well as different browser quirks. Note: keydown causes Safari 2.x to\ncrash.", "private": "", "static": "", "guessedname": "simulateKeyEvent", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The target of the given event."}, {"type": "String", "name": "type", "description": " The type of event to fire. This can be any one of\nthe following: keyup, keydown, and keypress."}, {"type": "Boolean", "name": "bubbles", "description": " (Optional) Indicates if the event can be\nbubbled up. DOM Level 3 specifies that all key events bubble by\ndefault. The default is true."}, {"type": "Boolean", "name": "cancelable", "description": " (Optional) Indicates if the event can be\ncanceled using preventDefault(). DOM Level 3 specifies that all\nkey events can be cancelled. The default \nis true."}, {"type": "Window", "name": "view", "description": " (Optional) The view containing the target. This is\ntypically the window object. The default is window."}, {"type": "Boolean", "name": "ctrlKey", "description": " (Optional) Indicates if one of the CTRL keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "altKey", "description": " (Optional) Indicates if one of the ALT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "shiftKey", "description": " (Optional) Indicates if one of the SHIFT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "metaKey", "description": " (Optional) Indicates if one of the META keys\nis pressed while the event is firing. The default is false."}, {"type": "int", "name": "keyCode", "description": " (Optional) The code for the key that is in use. \nThe default is 0."}, {"type": "int", "name": "charCode", "description": " (Optional) The Unicode code for the character\nassociated with the key being used. The default is 0."}]}, "mouseover": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseover event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved from.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\nfromElement is assigned in its place. IE doesn't allow fromElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers.", "guessedname": "mouseover", "guessedtype": "function"}, "click": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to click on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a click on a particular element.", "guessedname": "click", "guessedtype": "function"}, "dblclick": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to double click on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a double click on a particular element.", "guessedname": "dblclick", "guessedtype": "function"}}, "static": "", "file": "UserAction.js", "guessedtype": "property", "shortname": "UserAction", "description": "The UserAction object provides functions that simulate events occurring in\nthe browser. Since these are simulated events, they do not behave exactly\nas regular, user-initiated events do, but can be used to test simple\nuser interactions safely."}, "YAHOO.widget.Tab": {"name": "YAHOO.widget.Tab", "configs": {"disabled": {"type": "Boolean", "description": "Whether or not the tab is disabled."}, "dataTimeout": {"default": "null", "type": "Number", "description": "Number if milliseconds before aborting and calling failure handler."}, "contentEl": {"type": "HTMLElement", "description": "The HTMLElement that contains the tab's content."}, "postData": {"default": "null", "description": "Arguments to pass when POST method is used"}, "href": {"default": "'#'", "type": "String", "description": "The href of the tab's anchor element."}, "cacheData": {"default": "false", "type": "Boolean", "description": "Whether or not content should be reloaded for every view."}, "dataSrc": {"type": "String", "description": "The tab's data source, used for loading content dynamically."}, "label": {"type": "String", "description": "The tab's label text (or innerHTML)."}, "content": {"type": "String", "description": "The tab's content."}, "loadMethod": {"default": "\"GET\"", "type": "String", "description": "The method to use for the data request."}, "contentVisible": {"default": "false", "type": "Boolean", "description": "The Whether or not the tab's content is visible."}, "activationEvent": {"type": "String", "description": "The event that triggers the tab's activation."}, "active": {"type": "Boolean", "description": "Whether or not the tab is currently active.\nIf a dataSrc is set for the tab, the content will be loaded from\nthe given source."}, "labelEl": {"type": "HTMLElement", "description": "The element that contains the tab's label."}, "dataLoaded": {"type": "Boolean", "description": "Whether or not any data has been loaded from the server."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "element", "description": "  (optional) The html element that \nrepresents the Tab. An element will be created if none provided."}, {"type": "Object", "name": "properties", "description": " A key map of initial properties"}], "description": "A representation of a Tab's label and content."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"contentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' changes."}, "beforeContentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContentChange", "description": "Fires before the value for the configuration attribute 'content' changes. Return false to cancel the attribute change."}, "beforeDisabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDisabledChange", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "dataTimeoutChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataTimeoutChange", "description": "Fires when the value for the configuration attribute 'dataTimeout' changes."}, "beforeDataTimeoutChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataTimeoutChange", "description": "Fires before the value for the configuration attribute 'dataTimeout' changes. Return false to cancel the attribute change."}, "beforeHrefChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHrefChange", "description": "Fires before the value for the configuration attribute 'href' changes. Return false to cancel the attribute change."}, "beforeCacheDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCacheDataChange", "description": "Fires before the value for the configuration attribute 'cacheData' changes. Return false to cancel the attribute change."}, "activationEventChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "activationEventChange", "description": "Fires when the value for the configuration attribute 'activationEvent' changes."}, "hrefChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hrefChange", "description": "Fires when the value for the configuration attribute 'href' changes."}, "beforeDataSrcChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataSrcChange", "description": "Fires before the value for the configuration attribute 'dataSrc' changes. Return false to cancel the attribute change."}, "loadMethodChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "loadMethodChange", "description": "Fires when the value for the configuration attribute 'loadMethod' changes."}, "dataSrcChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataSrcChange", "description": "Fires when the value for the configuration attribute 'dataSrc' changes."}, "postDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "postDataChange", "description": "Fires when the value for the configuration attribute 'postData' changes."}, "beforeLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLabelChange", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}, "beforeContentElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContentElChange", "description": "Fires before the value for the configuration attribute 'contentEl' changes. Return false to cancel the attribute change."}, "labelElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "labelElChange", "description": "Fires when the value for the configuration attribute 'labelEl' changes."}, "beforeActivationEventChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeActivationEventChange", "description": "Fires before the value for the configuration attribute 'activationEvent' changes. Return false to cancel the attribute change."}, "beforePostDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePostDataChange", "description": "Fires before the value for the configuration attribute 'postData' changes. Return false to cancel the attribute change."}, "labelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' changes."}, "disabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "cacheDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "cacheDataChange", "description": "Fires when the value for the configuration attribute 'cacheData' changes."}, "contentElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "contentElChange", "description": "Fires when the value for the configuration attribute 'contentEl' changes."}, "beforeContentVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContentVisibleChange", "description": "Fires before the value for the configuration attribute 'contentVisible' changes. Return false to cancel the attribute change."}, "activeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "activeChange", "description": "Fires when the value for the configuration attribute 'active' changes."}, "beforeLabelElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLabelElChange", "description": "Fires before the value for the configuration attribute 'labelEl' changes. Return false to cancel the attribute change."}, "beforeLoadMethodChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLoadMethodChange", "description": "Fires before the value for the configuration attribute 'loadMethod' changes. Return false to cancel the attribute change."}, "beforeActiveChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeActiveChange", "description": "Fires before the value for the configuration attribute 'active' changes. Return false to cancel the attribute change."}, "remove": {"type": "CustomEvent", "params": [{"type": "Event", "name": "An", "description": " event object with fields for \"type\" (\"remove\")\nand \"tabview\" (the tabview instance it was removed from)"}], "description": "Fires when a tab is removed from the tabview", "guessedname": "Tab", "guessedtype": "property"}, "beforeDataLoadedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataLoadedChange", "description": "Fires before the value for the configuration attribute 'dataLoaded' changes. Return false to cancel the attribute change."}, "contentVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "contentVisibleChange", "description": "Fires when the value for the configuration attribute 'contentVisible' changes."}, "dataLoadedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataLoadedChange", "description": "Fires when the value for the configuration attribute 'dataLoaded' changes."}}, "guessedname": "Tab", "methods": {"initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "setAttributeConfigs Tab specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the tab.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "Tab.js", "guessedtype": "function", "shortname": "Tab", "properties": {"HIDDEN_CLASSNAME": {"default": "\"yui-hidden\"", "type": "String", "description": "The class name applied to active tabs.", "guessedname": "HIDDEN_CLASSNAME", "guessedtype": "property"}, "ACTIVE_TITLE": {"default": "\"active\"", "type": "String", "description": "The title applied to active tabs.", "guessedname": "ACTIVE_TITLE", "guessedtype": "property"}, "DISABLED_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to disabled tabs.", "guessedname": "DISABLED_CLASSNAME", "guessedtype": "property"}, "LOADING_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to dynamic tabs while loading.", "guessedname": "LOADING_CLASSNAME", "guessedtype": "property"}, "LABEL_INNER_TAGNAME": {"default": "\"em\"", "type": "String", "description": "The default tag name for a Tab's inner element.", "guessedname": "LABEL_TAGNAME", "guessedtype": "property"}, "dataConnection": {"type": "Object", "description": "Provides a reference to the connection request object when data is\nloaded dynamically.", "guessedname": "dataConnection", "guessedtype": "property"}, "loadHandler": {"type": "object", "description": "Object containing success and failure callbacks for loading data.", "guessedname": "loadHandler", "guessedtype": "property"}, "ACTIVE_CLASSNAME": {"default": "\"selected\"", "type": "String", "description": "The class name applied to active tabs.", "guessedname": "ACTIVE_CLASSNAME", "guessedtype": "property"}}, "description": "A representation of a Tab's label and content."}, "YAHOO.widget.Menu": {"name": "YAHOO.widget.Menu", "configs": {"constraintoviewport": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu will try to remain inside \nthe boundaries of the size of viewport.  This property is only applied \nwhen the \"position\" configuration property is set to dynamic and is \nautomatically applied to all submenus."}, "maxheight": {"default": "0", "type": "Number", "description": "Number defining the maximum height (in pixels) for a menu's \nbody element (<code>&#60;div class=\"bd\"&#62;</code>).  Once a menu's body \nexceeds this height, the contents of the body are scrolled to maintain \nthis value.  This value cannot be set lower than the value of the \n\"minscrollheight\" configuration property."}, "classname": {"default": "null", "type": "String", "description": "String representing the CSS class to be applied to the \nmenu's root <code>&#60;div&#62;</code> element.  The specified class(es)  \nare appended in addition to the default class as specified by the menu's\nCSS_CLASS_NAME constant. When set this property is automatically \napplied to all submenus."}, "visible": {"default": "false", "type": "Boolean", "description": "Boolean indicating whether or not the menu is visible.  If \nthe menu's \"position\" configuration property is set to \"dynamic\" (the \ndefault), this property toggles the menu's <code>&#60;div&#62;</code> \nelement's \"visibility\" style property between \"visible\" (true) or \n\"hidden\" (false).  If the menu's \"position\" configuration property is \nset to \"static\" this property toggles the menu's \n<code>&#60;div&#62;</code> element's \"display\" style property \nbetween \"block\" (true) or \"none\" (false)."}, "xy": {"default": "null", "type": "Number[]", "description": "Array of the absolute x and y positions of the Menu.  This \nproperty is only applied when the \"position\" configuration property is \nset to dynamic."}, "container": {"default": "document.body", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the menu's markup should be \nrendered into."}, "scrollincrement": {"default": "1", "type": "Number", "description": "Number used to control the scroll speed of a menu.  Used to \nincrement the \"scrollTop\" property of the menu's body by when a menu's \ncontent is scrolling.  When set this property is automatically applied \nto all submenus."}, "minscrollheight": {"default": "90", "type": "Number", "description": "Number defining the minimum threshold for the \"maxheight\" \nconfiguration property.  When set this property is automatically applied \nto all submenus."}, "fixedcenter": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the Menu should be anchored to the \ncenter of the viewport.  This property is only applied when the \n\"position\" configuration property is set to dynamic."}, "autosubmenudisplay": {"default": "true", "type": "Boolean", "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu's items."}, "context": {"default": "null", "type": "Array", "description": "Array of context arguments for context-sensitive positioning.  \nThe format is: [id or element, element corner, context corner]. \nFor example, setting this property to [\"img1\", \"tl\", \"bl\"] would \nalign the Menu's top left corner to the context element's \nbottom left corner.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."}, "keepopen": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu should remain open when clicked."}, "clicktohide": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu will automatically be \nhidden if the user clicks outside of it.  This property is only \napplied when the \"position\" configuration property is set to dynamic \nand is automatically applied to all submenus."}, "submenualignment": {"default": "[\"tl\",\"tr\"]", "type": "Array", "description": "Array defining how submenus should be aligned to their \nparent menu item. The format is: [itemCorner, submenuCorner]. By default\na submenu's top left corner is aligned to its parent menu item's top \nright corner."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu should be disabled.  \nDisabling a menu disables each of its items.  (Disabled menu items are \ndimmed and will not respond to user input or fire events.)  Disabled\nmenus have a corresponding \"disabled\" CSS class applied to their root\n<code>&#60;div&#62;</code> element."}, "effect": {"default": "null", "type": "Object", "description": "Object or array of objects representing the ContainerEffect \nclasses that are active for animating the container.  When set this \nproperty is automatically applied to all submenus."}, "showdelay": {"default": "250", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is made visible when the user mouses over \nthe menu's items.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic and is automatically applied \nto all submenus."}, "preventcontextoverlap": {"default": "true", "type": "Boolean", "description": "Boolean indicating whether or not a submenu should overlap its parent MenuItem \nwhen the \"constraintoviewport\" configuration property is set to \"true\"."}, "x": {"default": "null", "type": "Number", "description": "Number representing the absolute x-coordinate position of \nthe Menu.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."}, "shadow": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu should have a shadow."}, "hidedelay": {"default": "0", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before the menu is hidden.  This property is only applied when \nthe \"position\" configuration property is set to dynamic and is \nautomatically applied to all submenus."}, "submenuhidedelay": {"default": "250", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is hidden when the user mouses out of a menu item \nheading in the direction of a submenu.  The value must be greater than or \nequal to the value specified for the \"showdelay\" configuration property.\nThis property is only applied when the \"position\" configuration property \nis set to dynamic and is automatically applied to all submenus."}, "iframe": {"default": "true for IE6 and below, false for all other browsers.", "type": "Boolean", "description": "Boolean indicating whether or not the Menu should \nhave an IFRAME shim; used to prevent SELECT elements from \npoking through an Overlay instance in IE6.  When set to \"true\", \nthe iframe shim is created when the Menu instance is intially\nmade visible.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic and is automatically applied \nto all submenus."}, "y": {"default": "null", "type": "Number", "description": "Number representing the absolute y-coordinate position of \nthe Menu.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."}, "position": {"default": "dynamic", "type": "String", "description": "String indicating how a menu should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menus are \nvisible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menus are hidden by default, reside \nout of the normal flow of the document (CSS position: absolute), and \ncan overlay other elements on the screen."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source \nfor the menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement</a>", "name": "p_oElement", "description": " \nObject specifying the <code>&#60;select&#62;</code> element to be used as \nthe data source for the menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."}], "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"mouseOutEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has left the menu.  Passes back the DOM \nEvent object as an argument."}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a mouse button while the mouse is \nover the menu.  Passes back the DOM Event object as an argument."}, "keyUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument."}, "keyPressEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses an alphanumeric key when one of the\nmenu's items has focus.  Passes back the DOM Event object as an argument."}, "itemAddedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item is added to the menu."}, "mouseOverEvent": {"description": "Fires when the mouse has entered the menu.  Passes back \nthe DOM Event object as an argument."}, "itemRemovedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item is removed to the menu."}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user mouses down on the menu.  Passes back the \nDOM Event object as an argument."}, "clickEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user clicks the on the menu.  Passes back the \nDOM Event object as an argument."}, "keyDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument."}}, "guessedname": "Menu", "methods": {"_onRender": {"guessedname": "_onRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"render\" event handler for the menu.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu.", "guessedname": "toString", "guessedtype": "function"}, "configMaxHeight": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired\nthe event."}], "description": "Event handler for when the \"maxheight\" configuration property of \na Menu changes.", "guessedname": "configMaxHeight", "guessedtype": "function"}, "configDisabled": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired the event."}], "description": "Event handler for when the \"disabled\" configuration property of \na menu changes.", "guessedname": "configDisabled", "guessedtype": "function"}, "getSubmenus": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of all of the submenus that are immediate \nchildren of the menu.", "guessedname": "getSubmenus", "guessedtype": "function"}, "_onVisibleChange": {"guessedname": "_onVisibleChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "Change event handler for the the menu's \"visible\" configuration\nproperty.", "private": "", "guessedtype": "function"}, "positionOffScreen": {"description": "Positions the menu outside of the boundaries of the browser's \nviewport.  Called automatically when a menu is hidden to ensure that \nit doesn't force the browser to render uncessary scrollbars.", "guessedname": "positionOffScreen", "guessedtype": "function"}, "_onMenuItemDestroy": {"guessedname": "_onMenuItemDestroy", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"destroy\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "getItemGroups": {"return": {"type": "Array", "description": ""}, "description": "Multi-dimensional Array representing the menu items as they \nare grouped in the menu.", "guessedname": "getItemGroups", "guessedtype": "function"}, "destroy": {"description": "Removes the menu's <code>&#60;div&#62;</code> element \n(and accompanying child nodes) from the document.", "guessedname": "destroy", "guessedtype": "function"}, "_onBeforeRender": {"guessedname": "_onBeforeRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforerender\" event handler for the menu.  Appends all of the \n<code>&#60;ul&#62;</code>, <code>&#60;li&#62;</code> and their accompanying \ntitle elements to the body element of the menu.", "private": "", "guessedtype": "function"}, "_cancelShowDelay": {"description": "Cancels the call to the \"showMenu.\"", "private": "", "guessedname": "_cancelShowDelay", "guessedtype": "function"}, "_getItemGroup": {"return": {"type": "Array", "description": ""}, "description": "Returns the menu item group at the specified index.", "private": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the menu item group \nto be retrieved."}], "guessedname": "_getItemGroup", "guessedtype": "function"}, "setInitialSelection": {"description": "Sets the \"selected\" configuration property of the menu's first \nenabled item to \"true.\"", "guessedname": "setInitialSelection", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"click\" event handler for the menu.", "guessedname": "_onClick", "guessedtype": "function"}, "_onInit": {"guessedname": "_onInit", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"init\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_updateItemProperties": {"guessedname": "_updateItemProperties", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group of items to update."}], "description": "Updates the \"index,\" \"groupindex,\" and \"className\" properties \nof the menu items in the specified group.", "private": "", "guessedtype": "function"}, "_onItemAdded": {"guessedname": "_onItemAdded", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"itemadded\" event handler for a Menu instance.", "private": "", "guessedtype": "function"}, "_onHide": {"guessedname": "_onHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"hide\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_setScrollHeight": {"guessedname": "_setScrollHeight", "params": [{"type": "String", "name": "p_nScrollHeight", "description": " Number representing the scrolling height of the Menu."}], "description": "", "private": "", "guessedtype": "function"}, "_removeItemFromGroupByValue": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Removes a menu item from a group by reference.  Returns the \nmenu item that was removed.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the\nmenu item belongs."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be removed."}], "guessedname": "_removeItemFromGroupByValue", "guessedtype": "function"}, "_onMenuItemConfigChange": {"guessedname": "_onMenuItemConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"configchange\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "clearActiveItem": {"params": [{"type": "Boolean", "name": "p_bBlur", "description": " Boolean indicating if the menu's active item \nshould be blurred."}], "description": "Sets the \"selected\" configuration property of the menu's active\nitem to \"false\" and hides the item's submenu.", "guessedname": "clearActiveItem", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"mouseover\" event handler for the menu.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_onParentMenuRender": {"guessedname": "_onParentMenuRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"render\" event handler for a submenu.  Renders a  \nsubmenu in response to the firing of its parent's \"render\" event.", "private": "", "guessedtype": "function"}, "_enableScrollFooter": {"protected": "", "description": "Enables the footer used for scrolling the body of the menu.", "guessedname": "_enableScrollFooter", "guessedtype": "function"}, "_onBeforeShow": {"guessedname": "_onBeforeShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforeshow\" event handler for the menu.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source \nfor the menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement</a>", "name": "p_oElement", "description": " \nObject specifying the <code>&#60;select&#62;</code> element to be used as \nthe data source for the menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."}], "description": "The Menu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "_addItemToGroup": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Adds a menu item to a group.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the \nitem belongs."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nItemIndex", "description": " Optional. Number indicating the index at \nwhich the menu item should be added."}], "guessedname": "_addItemToGroup", "guessedtype": "function"}, "_onParentMenuConfigChange": {"guessedname": "_onParentMenuConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"configchange\" event handler for a submenu.", "private": "", "guessedtype": "function"}, "_cancelHideDelay": {"description": "Cancels the call to \"hideMenu.\"", "private": "", "guessedname": "_cancelHideDelay", "guessedtype": "function"}, "blur": {"description": "Causes the menu to lose focus and fires the \"blur\" event.", "guessedname": "blur", "guessedtype": "function"}, "configHideDelay": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"hidedelay\" configuration property \nof the menu changes.", "guessedname": "configHideDelay", "guessedtype": "function"}, "addItems": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Array", "name": "p_aItems", "description": " Array of items to be added to the menu.  The array \ncan contain strings specifying the text for each item to be created, object\nliterals specifying each of the menu item configuration properties, \nor MenuItem instances."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to \nwhich the items belongs."}], "description": "Adds an array of items to the menu.", "guessedname": "addItems", "guessedtype": "function"}, "_onBeforeHide": {"guessedname": "_onBeforeHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforehide\" event handler for the menu.", "private": "", "guessedtype": "function"}, "setInitialFocus": {"description": "Sets focus to the menu's first enabled item.", "guessedname": "setInitialFocus", "guessedtype": "function"}, "_getFirstEnabledItem": {"guessedname": "_getFirstEnabledItem", "return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Returns the first enabled item in the menu.", "private": "", "guessedtype": "function"}, "_createItemGroup": {"return": {"type": "Array", "description": ""}, "description": "Creates a new menu item group (array) and its associated \n<code>&#60;ul&#62;</code> element. Returns an aray of menu item groups.", "private": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the group to create."}], "guessedname": "_createItemGroup", "guessedtype": "function"}, "getItems": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of all of the items in the menu.", "guessedname": "getItems", "guessedtype": "function"}, "focus": {"description": "Causes the menu to receive focus and fires the \"focus\" event.", "guessedname": "focus", "guessedtype": "function"}, "insertItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the ordinal position at which\nthe item should be added."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to which \nthe item belongs."}], "description": "Inserts an item into the menu at the specified index.", "guessedname": "insertItem", "guessedtype": "function"}, "_configureSubmenu": {"guessedname": "_configureSubmenu", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance with the submenu to be configured."}], "description": "Subscribes the menu item's submenu to its parent menu's events.", "private": "", "guessedtype": "function"}, "addItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to\nwhich the item belongs."}], "description": "Appends an item to the menu.", "guessedname": "addItem", "guessedtype": "function"}, "_onScrollTargetMouseOut": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"mouseout\" event handler for the menu's \"header\" and \"footer\" \nelements.  Used to stop scrolling the body of the menu up and down when the \nmenu's \"maxheight\" configuration property is set to a value greater than 0.", "guessedname": "_onScrollTargetMouseOut", "guessedtype": "function"}, "_disableScrollHeader": {"protected": "", "description": "Disables the header used for scrolling the body of the menu.", "guessedname": "_disableScrollHeader", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"visible\" configuration property \nthe menu changes.", "guessedname": "configVisible", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"container\" configuration property \nof the menu changes.", "guessedname": "configContainer", "guessedtype": "function"}, "_clearSetWidthFlag": {"description": "Change event listener for the \"width\" configuration property.  This listener is \nadded when a Menu's \"width\" configuration property is set by the \"_setScrollHeight\" method, and \nis used to set the \"_widthSetForScroll\" property to \"false\" if the \"width\" configuration property \nis changed after it was set by the \"_setScrollHeight\" method.  If the \"_widthSetForScroll\" \nproperty is set to \"false\", and the \"_setScrollHeight\" method is in the process of tearing down \nscrolling functionality, it will maintain the Menu's new width rather than reseting it.", "private": "", "guessedname": "_clearSetWidthFlag", "guessedtype": "function"}, "clearContent": {"description": "Removes all of the content from the menu, including the menu \nitems, group titles, header and footer.", "guessedname": "clearContent", "guessedtype": "function"}, "getItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the ordinal position of the \nitem to be retrieved."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to which \nthe item belongs."}], "description": "Returns the item at the specified index.", "guessedname": "getItem", "guessedtype": "function"}, "removeItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oObject", "description": " Object reference for the MenuItem \ninstance to be removed from the menu."}, {"type": "Number", "name": "p_oObject", "description": " Number specifying the index of the item \nto be removed."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to \nwhich the item belongs."}], "description": "Removes the specified item from the menu.", "guessedname": "removeItem", "guessedtype": "function"}, "_enableScrollHeader": {"protected": "", "description": "Enables the header used for scrolling the body of the menu.", "guessedname": "_enableScrollHeader", "guessedtype": "function"}, "_removeItemFromGroupByIndex": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Removes a menu item from a group by index.  Returns the menu \nitem that was removed.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the menu \nitem belongs."}, {"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the index of the menu item \nto be removed."}], "guessedname": "_removeItemFromGroupByIndex", "guessedtype": "function"}, "_onShow": {"guessedname": "_onShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"show\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_disableScrollFooter": {"protected": "", "description": "Disables the footer used for scrolling the body of the menu.", "guessedname": "_disableScrollFooter", "guessedtype": "function"}, "hasFocus": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the menu has focus.", "guessedname": "hasFocus", "guessedtype": "function"}, "setItemGroupTitle": {"params": [{"type": "String", "name": "p_sGroupTitle", "description": " String specifying the title of the group."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to which\nthe title belongs."}], "description": "Sets the title of a group of menu items.", "guessedname": "setItemGroupTitle", "guessedtype": "function"}, "_onMouseMove": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"click\" event handler for the menu.", "guessedname": "_onMouseMove", "guessedtype": "function"}, "getRoot": {"description": "Finds the menu's root menu.", "guessedname": "getRoot", "guessedtype": "function"}, "configShadow": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired the event."}], "description": "Event handler for when the \"shadow\" configuration property of \na menu changes.", "guessedname": "configShadow", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "p_type", "description": "        the type, or name of the event"}, {"type": "function", "name": "p_fn", "description": "        the function to exectute when the event fires"}, {"type": "Object", "name": "p_obj", "description": "         An object to be passed along when the event \nfires"}, {"type": "boolean", "name": "p_override", "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"}], "description": "Adds the specified CustomEvent subscriber to the menu and each of \nits submenus.", "guessedname": "subscribe", "guessedtype": "function"}, "_setMaxHeight": {"guessedname": "_setMaxHeight", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}, {"type": "Number", "name": "p_nMaxHeight", "description": " Number representing the value to set for the \n\"maxheight\" configuration property."}], "description": "\"renderEvent\" handler used to defer the setting of the \n\"maxheight\" configuration property until the menu is rendered in lazy \nload scenarios.", "private": "", "guessedtype": "function"}, "_subscribeToItemEvents": {"guessedname": "_subscribeToItemEvents", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance whose events should be subscribed to."}], "description": "Subscribes a menu to a menu item's event.", "private": "", "guessedtype": "function"}, "_onYChange": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"y\" event handler for a Menu instance.", "guessedname": "_onYChange", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"mouseout\" event handler for the menu.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "_initSubTree": {"description": "Iterates the childNodes of the source element to find nodes \nused to instantiate menu and menu items.", "private": "", "guessedname": "_initSubTree", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"iframe\" configuration property of \nthe menu changes.", "guessedname": "configIframe", "guessedtype": "function"}, "_onScrollTargetMouseOver": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"mouseover\" event handler for the menu's \"header\" and \"footer\" \nelements.  Used to scroll the body of the menu up and down when the \nmenu's \"maxheight\" configuration property is set to a value greater than 0.", "guessedname": "_onScrollTargetMouseOver", "guessedtype": "function"}, "configClassName": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired the event."}], "description": "Event handler for when the \"classname\" configuration property of \na menu changes.", "guessedname": "configClassName", "guessedtype": "function"}, "_onKeyPress": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"keypress\" event handler for a Menu instance.", "guessedname": "_onKeyPress", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for the menu.", "guessedname": "initEvents", "guessedtype": "function"}, "checkPosition": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "p_sPosition", "description": " String specifying the position of the menu."}], "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.", "private": ""}, "_execSubmenuHideDelay": {"guessedname": "_execSubmenuHideDelay", "params": [{"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object specifying the submenu that  \nshould be hidden."}, {"type": "Number", "name": "p_nMouseX", "description": " The x coordinate of the mouse when it left \nthe specified submenu's parent menu item."}, {"type": "Number", "name": "p_nHideDelay", "description": " The number of milliseconds that should ellapse\nbefore the submenu is hidden."}], "description": "Hides a submenu after the number of milliseconds specified by \nthe \"submenuhidedelay\" configuration property have ellapsed.", "private": "", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"keydown\" event handler for the menu.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "_onBlur": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"blur\" event handler for a Menu instance.", "guessedname": "_onBlur", "guessedtype": "function"}, "configPosition": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"position\" configuration property \nof the menu changes.", "guessedname": "configPosition", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be\nchanged using the menu's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "_execHideDelay": {"description": "Hides the menu after the number of milliseconds specified by \nthe \"hidedelay\" configuration property.", "private": "", "guessedname": "_execHideDelay", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "menu.js", "guessedtype": "function", "shortname": "Menu", "properties": {"activeItem": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the item in the menu that has is selected.", "guessedname": "activeItem", "guessedtype": "property"}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu's <code>&#60;div&#62;</code> element.", "default": "\"yuimenu\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "lazyLoad": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu's \"lazy load\" feature is \nenabled.  If set to \"true,\" initialization and rendering of the menu's \nitems will be deferred until the first time it is made visible.  This \nproperty should be set via the constructor using the configuration \nobject literal.", "guessedname": "lazyLoad", "guessedtype": "property"}, "parent": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the menu's parent menu or menu item.  \nThis property can be set via the constructor using the configuration \nobject literal.", "guessedname": "parent", "guessedtype": "property"}, "_bStopMouseEventHandlers": {"description": "Stops \"mouseover,\" \"mouseout,\" and \"mousemove\" event handlers \nfrom executing.", "default": "false", "private": "", "guessedname": "_bStopMouseEventHandlers", "guessedtype": "property", "type": "Boolean"}, "_bHandledMouseOverEvent": {"description": "Boolean indicating the current state of the menu's \n\"mouseover\" event.", "default": "false", "private": "", "guessedname": "_bHandledMouseOverEvent", "guessedtype": "property", "type": "Boolean"}, "srcElement": {"default": "null", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement</a>|<a \nhref=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.\nhtml#ID-22445964\">HTMLDivElement</a>", "description": "Object reference to the HTML element (either \n<code>&#60;select&#62;</code> or <code>&#60;div&#62;</code>) used to \ncreate the menu.", "guessedname": "srcElement", "guessedtype": "property"}, "_bHandledMouseOutEvent": {"description": "Boolean indicating the current state of the menu's\n\"mouseout\" event.", "default": "false", "private": "", "guessedname": "_bHandledMouseOutEvent", "guessedtype": "property", "type": "Boolean"}, "_sClassName": {"description": "The current value of the \"classname\" configuration attribute.", "default": "null", "private": "", "guessedname": "_sClassName", "guessedtype": "property", "type": "String"}, "ITEM_TYPE": {"description": "Object representing the type of menu item to instantiate and \nadd when parsing the child nodes (either <code>&#60;li&#62;</code> element, \n<code>&#60;optgroup&#62;</code> element or <code>&#60;option&#62;</code>) \nof the menu's source HTML element.", "default": "YAHOO.widget.MenuItem", "guessedname": "ITEM_TYPE", "guessedtype": "property", "type": "YAHOO.widget.MenuItem", "final": ""}, "itemData": {"default": "null", "type": "Array", "description": "Array of items to be added to the menu.  The array can contain \nstrings representing the text for each item to be created, object literals \nrepresenting the menu item configuration properties, or MenuItem instances.  \nThis property should be set via the constructor using the configuration \nobject literal.", "guessedname": "itemData", "guessedtype": "property"}, "GROUP_TITLE_TAG_NAME": {"description": "String representing the tagname of the HTML element used to \ntitle the menu's item groups.", "default": "H6", "guessedname": "GROUP_TITLE_TAG_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_aGroupTitleElements": {"description": "Array of HTML element used to title groups of menu items.", "default": "[]", "private": "", "guessedname": "_aGroupTitleElements", "guessedtype": "property", "type": "Array"}, "_aListElements": {"description": "Array of <code>&#60;ul&#62;</code> elements, each of which is \nthe parent node for each item's <code>&#60;li&#62;</code> element.", "default": "[]", "private": "", "guessedname": "_aListElements", "guessedtype": "property", "type": "Array"}, "_useHideDelay": {"description": "Boolean indicating if the \"mouseover\" and \"mouseout\" event \nhandlers used for hiding the menu via a call to \"YAHOO.lang.later\" have \nalready been assigned.", "default": "false", "private": "", "guessedname": "_useHideDelay", "guessedtype": "property", "type": "Boolean"}, "_nCurrentMouseX": {"description": "The current x coordinate of the mouse inside the area of \nthe menu.", "default": "0", "private": "", "guessedname": "_nCurrentMouseX", "guessedtype": "property", "type": "Number"}, "_aItemGroups": {"description": "Multi-dimensional Array representing the menu items as they\nare grouped in the menu.", "default": "[]", "private": "", "guessedname": "_aItemGroups", "guessedtype": "property", "type": "Array"}, "OFF_SCREEN_POSITION": {"description": "Array representing the default x and y position that a menu \nshould have when it is positioned outside the viewport by the \n\"poistionOffScreen\" method.", "default": "\"-999em\"", "guessedname": "OFF_SCREEN_POSITION", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers."}, "YAHOO.util.Number": {"name": "YAHOO.util.Number", "namespace": "YAHOO.util", "module": "datasource", "guessedname": "Number", "methods": {"format": {"return": {"type": "String", "description": "Formatted number for display. Note, the following values\nreturn as \"\": null, undefined, NaN, \"\"."}, "params": [{"type": "Number", "name": "nData", "description": "  Number."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}</dd>\n<dd>String prepended before each number, like a currency designator \"$\"</dd>\n<dt>decimalPlaces {Number}</dd>\n<dd>Number of decimal places to round.</dd>\n<dt>decimalSeparator {String}</dd>\n<dd>Decimal separator</dd>\n<dt>thousandsSeparator {String}</dd>\n<dd>Thousands separator</dd>\n<dt>suffix {String", "name": "oConfig", "description": " </dd>\n<dd>String appended after each number, like \" items\" (note the space)</dd>\n<dt>negativeFormat</dt>\n<dd>String used as a guide for how to indicate negative numbers.  The first '#' character in the string will be replaced by the number.  Default '-#'.</dd>\n</dl>"}], "description": "Takes a native JavaScript Number and formats to string for display to user.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "Type.js", "guessedtype": "property", "shortname": "Number", "requires": "yahoo", "description": "The static Number class provides helper functions to deal with data of type\nNumber."}, "YAHOO.widget.Calendar2up": {"name": "YAHOO.widget.Calendar2up", "deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "Calendar2up", "extends": "YAHOO.widget.CalendarGroup", "superclass": "YAHOO.widget.CalendarGroup", "file": "CalendarGroup.js", "guessedtype": "function", "shortname": "Calendar2up", "properties": {"Cal2up": {"deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.", "guessedname": "Cal2up", "guessedtype": "property"}}}, "YAHOO.widget.Slider": {"name": "YAHOO.widget.Slider", "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked.", "constructors": [{"params": [{"type": "String", "name": "id", "description": "     The id of the element linked to this instance"}, {"type": "String", "name": "sGroup", "description": " The group of related DragDrop items"}, {"type": "SliderThumb", "name": "oThumb", "description": " The thumb for this slider"}, {"type": "String", "name": "sType", "description": "  The type of slider (horiz, vert, region)"}], "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked."}], "namespace": "YAHOO.widget", "module": "slider", "events": {"slideEnd": {"description": "Event that fires at the end of a slider thumb move"}, "change": {"params": [{"type": "int", "name": "newOffset|x", "description": " the new offset for normal sliders, or the new\nx offset for region sliders"}, {"type": "int", "name": "y", "description": " the number of pixels the thumb has moved on the y axis\n(region sliders only)"}], "description": "Event the fires when the value of the control changes.  If \nthe control is animated the event will fire every point\nalong the way."}, "slideStart": {"description": "Event that fires at the beginning of a slider thumb move."}}, "uses": ["YAHOO.util.EventProvider"], "superclass": "YAHOO.util.DragDrop", "file": "Slider.js", "extends": "YAHOO.util.DragDrop", "shortname": "Slider", "properties": {"keyIncrement": {"type": "int", "description": "Specifies the number of pixels the arrow keys will move the slider.\nDefault is 20.", "guessedname": "keyIncrement", "guessedtype": "property"}, "_silent": {"guessedname": "_silent", "type": "boolean", "description": "Indicates whether or not events will be supressed for the current\nslide operation", "private": "", "guessedtype": "property"}, "backgroundEnabled": {"type": "boolean", "description": "Set to false to disable a background click thumb move", "guessedname": "backgroundEnabled", "guessedtype": "property"}, "animationDuration": {"default": "0.2", "type": "int", "description": "If animation is configured, specifies the length of the animation\nin seconds.", "guessedname": "animationDuration", "guessedtype": "property"}, "animate": {"type": "boolean", "description": "Flag that determines if the thumb will animate when moved", "guessedname": "animate", "guessedtype": "property"}, "moveComplete": {"deprecated": "use the slideEnd event instead", "type": "Boolean", "description": "moveComplete is set to true when the slider has moved to its final\ndestination.  For animated slider, this value can be checked in \nthe onChange handler to make it possible to execute logic only\nwhen the move is complete rather than at all points along the way.\nDeprecated because this flag is only useful when the background is\nclicked and the slider is animated.  If the user drags the thumb,\nthe flag is updated when the drag is over ... the final onDrag event\nfires before the mouseup the ends the drag, so the implementer will\nnever see it.", "guessedname": "moveComplete", "guessedtype": "property"}, "thumb": {"type": "YAHOO.widget.SliderThumb", "description": "A YAHOO.widget.SliderThumb instance that we will use to \nreposition the thumb when the background is clicked", "guessedname": "thumb", "guessedtype": "property"}, "SOURCE_SET_VALUE": {"description": "Constant for valueChangeSource, indicating that the value was altered\nby a programmatic call to setValue/setRegionValue.", "default": "2", "deprecated": "use static Slider.SOURCE_SET_VALUE", "guessedname": "SOURCE_SET_VALUE", "guessedtype": "property", "final": ""}, "SOURCE_UI_EVENT": {"description": "Constant for valueChangeSource, indicating that the user clicked or\ndragged the slider to change the value.", "default": "1", "deprecated": "use static Slider.SOURCE_UI_EVENT", "guessedname": "SOURCE_UI_EVENT", "guessedtype": "property", "final": ""}, "_mouseDown": {"description": "Tracks the state of the mouse button to aid in when events are fired.", "default": "false", "private": "", "guessedname": "_mouseDown", "guessedtype": "property", "type": "boolean"}, "Slider.ANIM_AVAIL": {"type": "boolean", "static": "", "description": "By default, animation is available if the animation utility is detected.", "guessedname": "ANIM_AVAIL", "guessedtype": "property"}, "Slider.SOURCE_UI_EVENT": {"description": "Constant for valueChangeSource, indicating that the user clicked or\ndragged the slider to change the value.", "default": "1", "static": "", "guessedname": "SOURCE_UI_EVENT", "guessedtype": "property", "final": ""}, "type": {"type": "string", "description": "The type of the slider (horiz, vert, region)", "guessedname": "type", "guessedtype": "property"}, "enableKeys": {"type": "boolean", "description": "Enables the arrow, home and end keys, defaults to true.", "guessedname": "enableKeys", "guessedtype": "property"}, "isTarget": {"private": "", "description": "Overrides the isTarget property in YAHOO.util.DragDrop", "guessedname": "isTarget", "guessedtype": "property"}, "baselinePos": {"type": "[int, int]", "description": "The basline position of the background element, used\nto determine if the background has moved since the last\noperation.", "guessedname": "baselinePos", "guessedtype": "property"}, "dragOnly": {"default": "true", "type": "boolean", "description": "Override the default setting of dragOnly to true.", "guessedname": "dragOnly", "guessedtype": "property"}, "lastOffset": {"type": "[int, int]", "description": "Saved offset used to protect against NaN problems when slider is\nset to display:none", "guessedname": "lastOffset", "guessedtype": "property"}, "thumbCenterPoint": {"type": "{\"x\": int, \"y\": int}", "description": "The center of the slider element is stored so we can \nplace it in the correct position when the background is clicked.", "guessedname": "thumbCenterPoint", "guessedtype": "property"}, "Slider.SOURCE_SET_VALUE": {"description": "Constant for valueChangeSource, indicating that the value was altered\nby a programmatic call to setValue/setRegionValue.", "default": "2", "static": "", "guessedname": "SOURCE_SET_VALUE", "guessedtype": "property", "final": ""}, "Slider.SOURCE_KEY_EVENT": {"description": "Constant for valueChangeSource, indicating that the value was altered\nby hitting any of the supported keyboard characters.", "default": "2", "static": "", "guessedname": "SOURCE_KEY_EVENT", "guessedtype": "property", "final": ""}, "valueChangeSource": {"since": "2.3.0", "type": "int", "description": "When the slider value changes, this property is set to identify where\nthe update came from.  This will be either 1, meaning the slider was\nclicked or dragged, or 2, meaning that it was set via a setValue() call.\nThis can be used within event handlers to apply some of the logic only\nwhen dealing with one source or another.", "guessedname": "valueChangeSource", "guessedtype": "property"}, "tickPause": {"type": "int", "description": "Adjustment factor for tick animation, the more ticks, the\nfaster the animation (by default)", "guessedname": "tickPause", "guessedtype": "property"}}, "methods": {"YAHOO.widget.Slider.getHorizDualSlider": {"return": {"type": "DualSlider", "description": "a horizontal dual-thumb slider control"}, "description": "Factory method for creating a horizontal dual-thumb slider", "static": "", "guessedname": "getHorizDualSlider", "guessedtype": "property", "params": [{"type": "String", "name": "bg", "description": " the id of the slider's background element"}, {"type": "String", "name": "minthumb", "description": " the id of the min thumb"}, {"type": "String", "name": "maxthumb", "description": " the id of the thumb thumb"}, {"type": "int", "name": "range", "description": " the number of pixels the thumbs can move within"}, {"type": "int", "name": "iTickSize", "description": " (optional) the element should move this many pixels\nat a time"}, {"type": "Array", "name": "initVals", "description": " (optional) [min,max] Initial thumb placement"}]}, "fireEvents": {"guessedname": "fireEvents", "params": [{"type": "boolean", "name": "thumbEvent", "description": " set to true if this event is fired from an event\nthat occurred on the thumb.  If it is, the state of the\nthumb dd object should be correct.  Otherwise, the event\noriginated on the background, so the thumb state needs to\nbe refreshed before proceeding."}], "description": "Fires the change event if the value has been changed.  Ignored if we are in\nthe middle of an animation as the event will fire when the animation is\ncomplete", "private": "", "guessedtype": "function"}, "lock": {"description": "Locks the slider, overrides YAHOO.util.DragDrop", "guessedname": "lock", "guessedtype": "function"}, "YAHOO.widget.Slider.getHorizSlider": {"return": {"type": "Slider", "description": "a horizontal slider control"}, "description": "Factory method for creating a horizontal slider", "static": "", "guessedname": "getHorizSlider", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "focus": {"private": "", "description": "Try to focus the element when clicked so we can add\naccessibility features", "guessedname": "focus", "guessedtype": "function"}, "onMouseDown": {"private": "", "description": "Handles the mousedown event for the slider background", "guessedname": "onMouseDown", "guessedtype": "function"}, "_setValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "description": "Worker function to execute the value set operation.  Accepts type of\nset operation in addition to the usual setValue params.", "protected": "", "params": [{"type": "int", "name": "source", "description": "  what triggered the set (e.g. Slider.SOURCE_SET_VALUE)"}, {"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}, {"type": "boolean", "name": "silent", "description": " when true, do not fire events"}], "guessedname": "_setValue", "guessedtype": "function"}, "handleKeyDown": {"params": [{"type": "Event", "name": "e", "description": " the keydown event"}], "description": "Executed when a keydown event happens with the control focused.\nUpdates the slider value and display when the keypress is an\narrow key, home, or end as long as enableKeys is set to true.", "guessedname": "handleKeyDown", "guessedtype": "function"}, "resetThumbConstraints": {"protected": "", "description": "Resets the X and Y contraints for the thumb.  Used in lieu of the thumb\ninstance's inherited resetConstraints because some logic was not\napplicable.", "guessedname": "resetThumbConstraints", "guessedtype": "function"}, "getXValue": {"return": {"type": "int", "description": "the current horizontal offset"}, "description": "Returns the slider's thumb X offset from the start position", "guessedname": "getXValue", "guessedtype": "function"}, "moveThumb": {"guessedname": "moveThumb", "params": [{"type": "int", "name": "x", "description": " the X coordinate of the click"}, {"type": "int", "name": "y", "description": " the Y coordinate of the click"}, {"type": "boolean", "name": "skipAnim", "description": " don't animate if the move happend onDrag"}, {"type": "boolean", "name": "midMove", "description": " set to true if this is not terminating\nthe slider movement"}], "description": "Move the associated slider moved to a timeout to try to get around the \nmousedown stealing moz does when I move the slider element between the \ncursor and the background during the mouseup event", "private": "", "guessedtype": "function"}, "setRegionValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "params": [{"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (x axis for region)"}, {"type": "int", "name": "newOffset2", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (y axis for region)"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}, {"type": "boolean", "name": "silent", "description": " when true, do not fire events"}], "description": "Provides a way to set the value of the region slider in code.", "guessedname": "setRegionValue", "guessedtype": "function"}, "onSliderEnd": {"deprecated": "use instance.subscribe(\"slideEnd\") instead", "description": "Event that fires at the end of a slider thumb move", "guessedname": "onSlideEnd", "guessedtype": "function"}, "thumbMouseUp": {"private": "", "description": "Handles mouseup event on the thumb", "guessedname": "thumbMouseUp", "guessedtype": "function"}, "YAHOO.widget.Slider.getSliderRegion": {"return": {"type": "Slider", "description": "a slider region control"}, "description": "Factory method for creating a slider region like the one in the color\npicker example", "static": "", "guessedname": "getSliderRegion", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "verifyOffset": {"return": {"type": "boolean", "description": "True if the offset is the same as the baseline."}, "description": "Checks the background position element position.  If it has moved from the\nbaseline position, the constraints for the thumb are reset", "guessedname": "verifyOffset", "guessedtype": "function"}, "initThumb": {"params": [{"type": "YAHOO.widget.SliderThumb", "name": "t", "description": " the slider thumb"}], "description": "Initializes the slider's thumb. Executed in the constructor.", "guessedname": "initThumb", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the instance"}, "description": "Slider toString", "guessedname": "toString", "guessedtype": "function"}, "moveOneTick": {"guessedname": "moveOneTick", "params": [{"type": "int[]", "name": "the", "description": " destination coordinate"}], "description": "Move the slider one tick mark towards its final coordinate.  Used\nfor the animation when tick marks are defined", "private": "", "guessedtype": "function"}, "onChange": {"deprecated": "use instance.subscribe(\"change\") instead", "params": [{"type": "int", "name": "firstOffset", "description": " the number of pixels the thumb has moved\nfrom its start position. Normal horizontal and vertical sliders will only\nhave the firstOffset.  Regions will have both, the first is the horizontal\noffset, the second the vertical."}, {"type": "int", "name": "secondOffset", "description": " the y offset for region sliders"}], "description": "Event that fires when the value of the slider has changed", "guessedname": "onChange", "guessedtype": "function"}, "initSlider": {"params": [{"type": "string", "name": "sType", "description": " the type of slider (horiz, vert, region)"}], "description": "Initializes the slider.  Executed in the constructor", "guessedname": "initSlider", "guessedtype": "function"}, "setValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "params": [{"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}, {"type": "boolean", "name": "silent", "description": " when true, do not fire events"}], "description": "Provides a way to set the value of the slider in code.", "guessedname": "setValue", "guessedtype": "function"}, "setThumbCenterPoint": {"description": "When the thumb is available, we cache the centerpoint of the element so\nwe can position the element correctly when the background is clicked", "guessedname": "setThumbCenterPoint", "guessedtype": "function"}, "_bindKeyEvents": {"protected": "", "description": "Sets up the listeners for keydown and key press events.", "guessedname": "_bindKeyEvents", "guessedtype": "function"}, "endMove": {"private": "", "description": "Fired when the slider movement ends", "guessedname": "endMove", "guessedtype": "function"}, "_setRegionValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "description": "Worker function to execute the value set operation.  Accepts type of\nset operation in addition to the usual setValue params.", "protected": "", "params": [{"type": "int", "name": "source", "description": "  what triggered the set (e.g. Slider.SOURCE_SET_VALUE)"}, {"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (x axis for region)"}, {"type": "int", "name": "newOffset2", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (y axis for region)"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}, {"type": "boolean", "name": "silent", "description": " when true, do not fire events"}], "guessedname": "_setRegionValue", "guessedtype": "function"}, "getYValue": {"return": {"type": "int", "description": "the current vertical offset"}, "description": "Returns the slider's thumb Y offset from the start position", "guessedname": "getYValue", "guessedtype": "function"}, "onAvailable": {"description": "Executed when the slider element is available", "guessedname": "onAvailable", "guessedtype": "function"}, "onSlideStart": {"deprecated": "use instance.subscribe(\"slideStart\") instead", "description": "Event that fires when the at the beginning of the slider thumb move", "guessedname": "onSlideStart", "guessedtype": "function"}, "onDrag": {"private": "", "description": "Handles the onDrag event for the slider background", "guessedname": "onDrag", "guessedtype": "function"}, "getThumb": {"return": {"type": "SliderThumb", "description": "this slider's thumb"}, "description": "Returns a reference to this slider's thumb", "guessedname": "getThumb", "guessedtype": "function"}, "YAHOO.widget.Slider.getVertSlider": {"return": {"type": "Slider", "description": "a vertical slider control"}, "description": "Factory method for creating a vertical slider", "static": "", "guessedname": "getVertSlider", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "handleKeyPress": {"params": [{"type": "Event", "name": "e", "description": " the keypress event"}], "description": "Executed when a keypress event happens with the control focused.\nPrevents the default behavior for navigation keys.  The actual\nlogic for moving the slider thumb in response to a key event\nhappens in handleKeyDown.", "guessedname": "handleKeyPress", "guessedtype": "function"}, "setStartSliderState": {"description": "Initialization that sets up the value offsets once the elements are ready", "guessedname": "setStartSliderState", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "the current value"}, "description": "Returns the slider's thumb offset from the start position", "guessedname": "getValue", "guessedtype": "function"}, "b4MouseDown": {"private": "", "description": "Resets the constraints before moving the thumb.", "guessedname": "b4MouseDown", "guessedtype": "function"}, "unlock": {"description": "Unlocks the slider, overrides YAHOO.util.DragDrop", "guessedname": "unlock", "guessedtype": "function"}, "YAHOO.widget.Slider.getVertDualSlider": {"return": {"type": "DualSlider", "description": "a vertical dual-thumb slider control"}, "description": "Factory method for creating a vertical dual-thumb slider.", "static": "", "guessedname": "getVertDualSlider", "guessedtype": "property", "params": [{"type": "String", "name": "bg", "description": " the id of the slider's background element"}, {"type": "String", "name": "minthumb", "description": " the id of the min thumb"}, {"type": "String", "name": "maxthumb", "description": " the id of the thumb thumb"}, {"type": "int", "name": "range", "description": " the number of pixels the thumbs can move within"}, {"type": "int", "name": "iTickSize", "description": " (optional) the element should move this many pixels\nat a time"}, {"type": "Array", "name": "initVals", "description": " (optional) [min,max] Initial thumb placement"}]}, "_getNextY": {"private": "", "description": "Returns the next Y tick value based on the current coord and the target coord.", "guessedname": "_getNextY", "guessedtype": "function"}, "_getNextX": {"private": "", "description": "Returns the next X tick value based on the current coord and the target coord.", "guessedname": "_getNextX", "guessedtype": "function"}}}, "YAHOO.util.ImageLoader.bgImgObj": {"name": "YAHOO.util.ImageLoader.bgImgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Background image object. A background image is one whose URL is specified by \"background-image\" in the element's style"}], "namespace": "YAHOO.util.ImageLoader", "module": "imageloader", "guessedname": "bgImgObj", "methods": {"_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nSets style.backgroundImage", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.ImageLoader.imgObj", "superclass": "YAHOO.util.ImageLoader.imgObj", "file": "ImageLoader.js", "guessedtype": "function", "shortname": "bgImgObj", "description": "Background image object. A background image is one whose URL is specified by \"background-image\" in the element's style"}, "YAHOO.widget.LayoutUnit": {"name": "YAHOO.widget.LayoutUnit", "configs": {"dataTimeout": {"default": "null", "type": "Number", "description": "Number if milliseconds before aborting and calling failure handler."}, "grids": {"type": "Boolean", "description": "Set this option to true if you want the LayoutUnit to fix the first layer of YUI CSS Grids (margins)"}, "height": {"type": "Number", "description": "The height of the Unit"}, "header": {"description": "The text to use as the Header of the Unit"}, "wrap": {"type": "HTMLElement", "description": "A reference to the wrap element", "private": ""}, "close": {"description": "Adds a close icon to the unit"}, "animate": {"type": "Boolean", "description": "Use animation to collapse/expand the unit"}, "collapseSize": {"type": "Number", "description": "The pixel size of the Clip that we will collapse to"}, "top": {"type": "Number", "description": "The current top positioning of the Unit", "private": ""}, "minWidth": {"type": "Number", "description": "The minWidth parameter passed to the Resize Utility"}, "width": {"type": "Number", "description": "The width of the Unit"}, "maxWidth": {"type": "Number", "description": "The maxWidth parameter passed to the Resize Utility"}, "body": {"description": "The content for the body. If we find an element in the page with an id that matches the passed option we will move that element into the body of this unit."}, "hover": {"description": "Config option to pass to the Resize Utility"}, "collapse": {"description": "Adds a collapse icon to the unit"}, "parent": {"type": "{Object} YAHOO.widget.Layout", "description": "The parent Layout that we are assigned to"}, "duration": {"description": "The duration to give the Animation Utility when animating the opening and closing of Units"}, "minHeight": {"type": "Number", "description": "The minHeight parameter passed to the Resize Utility"}, "dataSrc": {"type": "String", "description": "The unit data source, used for loading content dynamically."}, "zIndex": {"type": "{Number}", "description": "The CSS zIndex to give to the unit, so you can have overlapping elements such as menus in a unit."}, "proxy": {"type": "Boolean", "description": "Use the proxy config setting for the Resize Utility"}, "position": {"type": "{String}", "description": "The position (top, right, bottom, left or center) of the Unit in the Layout"}, "dataLoaded": {"type": "Boolean", "description": "Whether or not any data has been loaded from the server."}, "resize": {"description": "Should a Resize instance be added to this unit"}, "gutter": {"type": "String", "description": "The gutter that we should apply to the parent Layout around this Unit. Supports standard CSS markup: (2 4 0 5) or (2) or (2 5)"}, "footer": {"description": "The content for the footer. If we find an element in the page with an id that matches the passed option we will move that element into the footer of this unit."}, "useShim": {"description": "Config option to pass to the Resize Utility"}, "loadMethod": {"default": "\"GET\"", "type": "String", "description": "The method to use for the data request."}, "maxHeight": {"type": "Number", "description": "The maxHeight parameter passed to the Resize Utility"}, "easing": {"description": "The Animation Easing to apply to the Animation instance for this unit."}, "scroll": {"type": "Boolean/Null", "description": "Adds a class to the unit to allow for overflow: auto (yui-layout-scroll), default is overflow: hidden (yui-layout-noscroll). If true scroll bars will be placed on the element when the content exceeds the given area, false will put overflow hidden to hide the content. Passing null will render the content as usual overflow."}, "left": {"type": "Number", "description": "The current left position of the Unit", "private": ""}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The element to make a unit."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</p>"}], "namespace": "YAHOO.widget", "module": "layout", "events": {"load": {"type": "YAHOO.util.CustomEvent", "description": "Fired when data is loaded via the dataSrc config."}, "contentChange": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the content in the header, body or footer is changed via the API"}, "proxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' changes."}, "heightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' changes."}, "beforeGutterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeGutterChange", "description": "Fires before the value for the configuration attribute 'gutter' changes. Return false to cancel the attribute change."}, "beforeExpand": {"type": "YAHOO.util.CustomEvent", "description": "Fired before the unit is exanded. If you return false, the collapse is cancelled."}, "zIndexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' changes."}, "beforeMaxHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxHeightChange", "description": "Fires before the value for the configuration attribute 'maxHeight' changes. Return false to cancel the attribute change."}, "beforeLeftChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLeftChange", "description": "Fires before the value for the configuration attribute 'left' changes. Return false to cancel the attribute change."}, "maxWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' changes."}, "close": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the unit is closed"}, "gridsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "gridsChange", "description": "Fires when the value for the configuration attribute 'grids' changes."}, "beforeDataTimeoutChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataTimeoutChange", "description": "Fires before the value for the configuration attribute 'dataTimeout' changes. Return false to cancel the attribute change."}, "beforeParentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeParentChange", "description": "Fires before the value for the configuration attribute 'parent' changes. Return false to cancel the attribute change."}, "resizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "resizeChange", "description": "Fires when the value for the configuration attribute 'resize' changes."}, "beforeTopChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTopChange", "description": "Fires before the value for the configuration attribute 'top' changes. Return false to cancel the attribute change."}, "beforeHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeightChange", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "beforeResizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeResizeChange", "description": "Fires before the value for the configuration attribute 'resize' changes. Return false to cancel the attribute change."}, "beforeHeaderChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeaderChange", "description": "Fires before the value for the configuration attribute 'header' changes. Return false to cancel the attribute change."}, "leftChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "leftChange", "description": "Fires when the value for the configuration attribute 'left' changes."}, "easingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' changes."}, "beforeMinWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinWidthChange", "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change."}, "scrollChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "scrollChange", "description": "Fires when the value for the configuration attribute 'scroll' changes."}, "beforeDataSrcChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataSrcChange", "description": "Fires before the value for the configuration attribute 'dataSrc' changes. Return false to cancel the attribute change."}, "startResize": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the Resize Utility fires it's startResize Event."}, "collapseSizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "collapseSizeChange", "description": "Fires when the value for the configuration attribute 'collapseSize' changes."}, "beforeGridsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeGridsChange", "description": "Fires before the value for the configuration attribute 'grids' changes. Return false to cancel the attribute change."}, "beforeMinHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinHeightChange", "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change."}, "maxHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' changes."}, "beforeResize": {"type": "YAHOO.util.CustomEvent", "description": "Fired at the beginning of the resize method. If you return false, the resize is cancelled."}, "dataSrcChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataSrcChange", "description": "Fires when the value for the configuration attribute 'dataSrc' changes."}, "beforePositionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePositionChange", "description": "Fires before the value for the configuration attribute 'position' changes. Return false to cancel the attribute change."}, "expand": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the unit is exanded"}, "beforeWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWidthChange", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "useShimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' changes."}, "hoverChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hoverChange", "description": "Fires when the value for the configuration attribute 'hover' changes."}, "beforeFooterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFooterChange", "description": "Fires before the value for the configuration attribute 'footer' changes. Return false to cancel the attribute change."}, "beforeCollapseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCollapseChange", "description": "Fires before the value for the configuration attribute 'collapse' changes. Return false to cancel the attribute change."}, "minWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' changes."}, "beforeScrollChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeScrollChange", "description": "Fires before the value for the configuration attribute 'scroll' changes. Return false to cancel the attribute change."}, "beforeCollapseSizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCollapseSizeChange", "description": "Fires before the value for the configuration attribute 'collapseSize' changes. Return false to cancel the attribute change."}, "bodyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "bodyChange", "description": "Fires when the value for the configuration attribute 'body' changes."}, "gutterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' changes."}, "durationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' changes."}, "beforeZIndexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeZIndexChange", "description": "Fires before the value for the configuration attribute 'zIndex' changes. Return false to cancel the attribute change."}, "animateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animateChange", "description": "Fires when the value for the configuration attribute 'animate' changes."}, "beforeDurationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDurationChange", "description": "Fires before the value for the configuration attribute 'duration' changes. Return false to cancel the attribute change."}, "beforeProxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeProxyChange", "description": "Fires before the value for the configuration attribute 'proxy' changes. Return false to cancel the attribute change."}, "footerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "footerChange", "description": "Fires when the value for the configuration attribute 'footer' changes."}, "headerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "headerChange", "description": "Fires when the value for the configuration attribute 'header' changes."}, "beforeHoverChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHoverChange", "description": "Fires before the value for the configuration attribute 'hover' changes. Return false to cancel the attribute change."}, "beforeWrapChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWrapChange", "description": "Fires before the value for the configuration attribute 'wrap' changes. Return false to cancel the attribute change."}, "loadMethodChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "loadMethodChange", "description": "Fires when the value for the configuration attribute 'loadMethod' changes."}, "beforeCloseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCloseChange", "description": "Fires before the value for the configuration attribute 'close' changes. Return false to cancel the attribute change."}, "beforeDataLoadedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataLoadedChange", "description": "Fires before the value for the configuration attribute 'dataLoaded' changes. Return false to cancel the attribute change."}, "resize": {"type": "YAHOO.util.CustomEvent", "description": "Fired when this.resize is called"}, "endResize": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the Resize Utility fires it's endResize Event."}, "positionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "positionChange", "description": "Fires when the value for the configuration attribute 'position' changes."}, "beforeAnimateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimateChange", "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change."}, "minHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' changes."}, "loadError": {"type": "YAHOO.util.CustomEvent", "description": "Fired when an error occurs loading data via the dataSrc config. Error message is passed as argument to this event."}, "dataLoadedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataLoadedChange", "description": "Fires when the value for the configuration attribute 'dataLoaded' changes."}, "beforeEasingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeEasingChange", "description": "Fires before the value for the configuration attribute 'easing' changes. Return false to cancel the attribute change."}, "beforeMaxWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxWidthChange", "description": "Fires before the value for the configuration attribute 'maxWidth' changes. Return false to cancel the attribute change."}, "topChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "topChange", "description": "Fires when the value for the configuration attribute 'top' changes."}, "collapse": {"type": "YAHOO.util.CustomEvent", "description": "Fired when the unit is collapsed"}, "beforeBodyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBodyChange", "description": "Fires before the value for the configuration attribute 'body' changes. Return false to cancel the attribute change."}, "beforeLoadMethodChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLoadMethodChange", "description": "Fires before the value for the configuration attribute 'loadMethod' changes. Return false to cancel the attribute change."}, "beforeUseShimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUseShimChange", "description": "Fires before the value for the configuration attribute 'useShim' changes. Return false to cancel the attribute change."}, "parentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "parentChange", "description": "Fires when the value for the configuration attribute 'parent' changes."}, "beforeCollapse": {"type": "YAHOO.util.CustomEvent", "description": "Fired before the unit is collapsed. If you return false, the collapse is cancelled."}, "wrapChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' changes."}, "closeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "closeChange", "description": "Fires when the value for the configuration attribute 'close' changes."}, "dataTimeoutChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataTimeoutChange", "description": "Fires when the value for the configuration attribute 'dataTimeout' changes."}, "collapseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "collapseChange", "description": "Fires when the value for the configuration attribute 'collapse' changes."}, "widthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' changes."}}, "guessedname": "LayoutUnit", "methods": {"_getBoxSize": {"return": {"type": "Array", "description": "An array of height and width"}, "description": "Get's the elements clientHeight and clientWidth plus the size of the borders", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The HTMLElement to get the size of"}], "guessedname": "_getBoxSize", "guessedtype": "function"}, "toggle": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "description": "Toggles the Unit, replacing it with a clipped version.", "guessedname": "toggle", "guessedtype": "function"}, "init": {"description": "The initalization method inherited from Element.", "private": "", "guessedname": "init", "guessedtype": "function"}, "_getBorderSizes": {"return": {"type": "Array", "description": "An array of the top, right, bottom, left borders."}, "description": "Get the CSS border size of the element passed.", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to get the border size of"}], "guessedname": "_getBorderSizes", "guessedtype": "function"}, "_setHeight": {"return": {"type": "Number", "description": "The new height, fixed for borders and IE QuirksMode"}, "description": "Sets the height of the element based on the border size of the element.", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The HTMLElement to have it's height set"}, {"type": "Number", "name": "h", "description": " The height that you want it the element set to"}], "guessedname": "_setHeight", "guessedtype": "function"}, "_setWidth": {"return": {"type": "Number", "description": "The new width, fixed for borders and IE QuirksMode"}, "description": "Sets the width of the element based on the border size of the element.", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The HTMLElement to have it's width set"}, {"type": "Number", "name": "w", "description": " The width that you want it the element set to"}], "guessedname": "_setWidth", "guessedtype": "function"}, "_toggleClip": {"description": "Toggle th current state of the Clip element and set it's height, width and position", "private": "", "guessedname": "_toggleClip", "guessedtype": "function"}, "getLayoutUnitById": {"static": "", "return": {"type": "Object", "description": "The Layout Object"}, "description": "Get's a layout unit object by the HTML id of the element associated with the Layout Unit object.", "guessedname": "getLayoutUnitById", "guessedtype": "function"}, "_fixQuirks": {"return": {"type": "Number", "description": "The fixed dimension"}, "description": "Fixes the box calculations for IE in QuirksMode", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The HTMLElement to set the dimension on"}, {"type": "Number", "name": "dim", "description": " The number of the dimension to fix"}, {"type": "String", "name": "side", "description": " The dimension (h or w) to fix. Defaults to h"}], "guessedname": "_fixQuirks", "guessedtype": "function"}, "loadContent": {"return": {"type": "object", "description": "YUI Connection Manager handler"}, "description": "Loading the content of the unit using the connection manager", "guessedname": "loadContent", "guessedtype": "function"}, "_createClip": {"description": "Create the clip element used when the Unit is collapsed", "private": "", "guessedname": "_createClip", "guessedtype": "function"}, "initAttributes": {"description": "Processes the config", "private": "", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the LayoutUnit.", "guessedname": "toString", "guessedtype": "function"}, "getSizes": {"return": {"type": "Object", "description": "An object of the sizes used for calculations"}, "description": "Get a reference to the internal sizes object for this unit", "guessedname": "getSizes", "guessedtype": "function"}, "_cleanGrids": {"description": "This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation.", "private": "", "guessedname": "_cleanGrids", "guessedtype": "function"}, "destroy": {"return": {"type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>", "description": "The parent Layout instance"}, "params": [{"type": "Boolean", "name": "force", "description": " Don't report to the parent, because we are being called from the parent."}], "description": "Removes this unit from the parent and cleans up after itself.", "guessedname": "destroy", "guessedtype": "function"}, "expand": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "description": "Expand the Unit if it is collapsed.", "guessedname": "expand", "guessedtype": "function"}, "close": {"return": {"type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>", "description": "The parent Layout instance"}, "description": "Close the unit, removing it from the parent Layout.", "guessedname": "close", "guessedtype": "function"}, "_createHeader": {"guessedname": "_createHeader", "return": {"type": "HTMLElement", "description": "The new HTMLElement"}, "description": "Creates the HTMLElement for the header", "private": "", "guessedtype": "function"}, "resize": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "params": [{"type": "Boolean", "name": "force", "description": " This will force full calculations even when the unit is collapsed"}], "description": "Resize either the unit or it's clipped state, also updating the box inside", "guessedname": "resize", "guessedtype": "function"}, "collapse": {"return": {"type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>", "description": "The LayoutUnit instance"}, "description": "Collapse the Unit if it is not collapsed.", "guessedname": "collapse", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "layoutunit.js", "guessedtype": "function", "shortname": "LayoutUnit", "properties": {"_lastWidth": {"guessedname": "_lastWidth", "type": "Number", "description": "A holder for the last known width of the unit", "private": "", "guessedtype": "property"}, "LOADING_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to dynamic tabs while loading.", "guessedname": "LOADING_CLASSNAME", "guessedtype": "property"}, "header": {"type": "HTMLELement", "description": "A reference to the HTML element used for the Header", "guessedname": "header", "guessedtype": "property"}, "_anim": {"guessedname": "_anim", "type": "YAHOO.util.Anim", "description": "A reference to the Animation instance used by this LayouUnit", "private": "", "guessedtype": "property"}, "STR_COLLAPSE": {"type": "{String}", "description": "String used for collapse button title", "guessedname": "STR_COLLAPSE", "guessedtype": "property"}, "_collapsed": {"guessedname": "_collapsed", "type": "Boolean", "description": "Flag to determine if the unit is collapsed or not.", "private": "", "guessedtype": "property"}, "_lastScroll": {"guessedname": "_lastScroll", "type": "Boolean", "description": "A holder for the last known scroll state of the unit", "private": "", "guessedtype": "property"}, "_lastLeft": {"guessedname": "_lastLeft", "type": "Number", "description": "A holder for the last known left of the unit", "private": "", "guessedtype": "property"}, "_instances": {"description": "Internal hash table for all layout unit instances", "private": "", "static": "", "guessedname": "_instances", "guessedtype": "property", "type": "Object"}, "_lastHeight": {"guessedname": "_lastHeight", "type": "Number", "description": "A holder for the last known height of the unit", "private": "", "guessedtype": "property"}, "_loading": {"guessedname": "_loading", "type": "Number", "description": "During the loading process this variable will be true", "private": "", "guessedtype": "property"}, "body": {"type": "HTMLElement", "description": "A reference to the HTML element used for the body", "guessedname": "body", "guessedtype": "property"}, "_lastCenetrScroll": {"guessedname": "_lastCenterScroll", "type": "Boolean", "description": "A holder for the last known scroll state of the center unit", "private": "", "guessedtype": "property"}, "_resize": {"guessedname": "_resize", "type": "YAHOO.util.Resize", "description": "A reference to the Resize instance used by this LayoutUnit", "private": "", "guessedtype": "property"}, "_sizes": {"guessedname": "_sizes", "type": "Object", "description": "A collection of the current sizes of the contents of this Layout Unit", "private": "", "guessedtype": "property"}, "STR_CLOSE": {"type": "{String}", "description": "String used for close button title", "guessedname": "STR_CLOSE", "guessedtype": "property"}, "_lastTop": {"guessedname": "_lastTop", "type": "Number", "description": "A holder for the last known top of the unit", "private": "", "guessedtype": "property"}, "loadHandler": {"type": "Object", "description": "Callback method for the YUI Connection Manager used for load the body using AJAX", "guessedname": "loadHandler", "guessedtype": "property"}, "_collapsing": {"guessedname": "_collapsing", "type": "Boolean", "description": "A flag set while the unit is being collapsed, used so we don't fire events while animating the size", "private": "", "guessedtype": "property"}, "footer": {"type": "HTMLElement", "description": "A reference to the HTML element used for the footer", "guessedname": "footer", "guessedtype": "property"}, "_gutter": {"guessedname": "_gutter", "type": "Object", "description": "A simple hash table used to store the gutter to apply to the Unit", "private": "", "guessedtype": "property"}, "_lastScrollTop": {"guessedname": "_lastScrollTop", "type": "Number", "description": "A holder for the last known scrollTop state of the unit", "private": "", "guessedtype": "property"}, "STR_EXPAND": {"type": "{String}", "description": "String used for expand button title", "guessedname": "STR_EXPAND", "guessedtype": "property"}, "_clip": {"guessedname": "_clip", "type": "HTMLElement", "description": "A reference to the clip element used when collapsing the unit", "private": "", "guessedtype": "property"}, "dataConnection": {"type": "Object", "description": "YUI Connection Manager handler", "guessedname": "dataConnection", "guessedtype": "property"}, "browser": {"type": "Object", "description": "A modified version of the YAHOO.env.ua object", "guessedname": "browser", "guessedtype": "property"}}, "description": "<p>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</p>"}, "YAHOO.widget.NumericAxis": {"name": "YAHOO.widget.NumericAxis", "constructors": [{"description": "A type of axis whose units are measured in numeric values."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "NumericAxis", "extends": "YAHOO.widget.Axis", "superclass": "YAHOO.widget.Axis", "file": "NumericAxis.js", "guessedtype": "function", "shortname": "NumericAxis", "properties": {"scale": {"type": "String", "description": "The scaling algorithm to use on this axis. May be \"linear\" or \"logarithmic\".", "guessedname": "scale", "guessedtype": "property"}, "stackingEnabled": {"type": "Boolean", "description": "Series that are stackable will only stack when this value is set to true.", "guessedname": "stackingEnabled", "guessedtype": "property"}, "calculateByLabelSize": {"type": "Boolean", "description": "Indicates whether to factor in the size of the labels when calculating a major unit.", "guessedname": "calculateByLabelSize", "guessedtype": "property"}, "maximum": {"type": "Number", "description": "The maximum value drawn by the axis. If not set explicitly, the axis maximum\nwill be calculated automatically.", "guessedname": "maximum", "guessedtype": "property"}, "adjustMaximumByMajorUnit": {"type": "Boolean", "description": "Indicates whether to extend maximum beyond data's maximum to the nearest \nmajorUnit.", "guessedname": "adjustMaximumByMajorUnit", "guessedtype": "property"}, "minorUnit": {"type": "Number", "description": "The spacing between minor intervals on this axis.", "guessedname": "minorUnit", "guessedtype": "property"}, "minimum": {"type": "Number", "description": "The minimum value drawn by the axis. If not set explicitly, the axis minimum\nwill be calculated automatically.", "guessedname": "minimum", "guessedtype": "property"}, "majorUnit": {"type": "Number", "description": "The spacing between major intervals on this axis.", "guessedname": "majorUnit", "guessedtype": "property"}, "adjustMinimumByMajorUnit": {"type": "Boolean", "description": "Indicates whether to extend the minimum beyond data's minimum to the nearest\nmajorUnit.", "guessedname": "adjustMinimumByMajorUnit", "guessedtype": "property"}, "snapToUnits": {"type": "Boolean", "description": "If true, the labels, ticks, gridlines, and other objects will snap to\nthe nearest major or minor unit. If false, their position will be based\non the minimum value.", "guessedname": "snapToUnits", "guessedtype": "property"}, "position": {"type": "String", "description": "Indicates the position of the axis relative to the chart", "guessedname": "position", "guessedtype": "property"}, "roundMajorUnit": {"type": "Boolean", "description": "Indicates whether to round the major unit.", "guessedname": "roundMajorUnit", "guessedtype": "property"}, "alwaysShowZero": {"type": "Boolean", "description": "If true, and the bounds are calculated automatically, either the minimum or\nmaximum will be set to zero.", "guessedname": "alwaysShowZero", "guessedtype": "property"}}, "description": "A type of axis whose units are measured in numeric values."}, "YAHOO.widget.Uploader": {"name": "YAHOO.widget.Uploader", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "String", "name": "buttonSkin", "description": "  [optional]. If defined, the uploader is \nrendered as a button. This parameter must provide the URL of a button\nskin sprite image. Acceptable types are: jpg, gif, png and swf. The \nsprite is divided evenly into four sections along its height (e.g., if\nthe sprite is 200 px tall, it's divided into four sections 50px each).\nEach section is used as a skin for a specific state of the button: top\nsection is \"up\", second section is \"over\", third section is \"down\", and\nfourth section is \"disabled\". \nIf the parameter is not supplied, the uploader is rendered transparent,\nand it's the developer's responsibility to create a visible UI below it."}, {"type": "Boolean", "name": "forceTransparent", "description": "  This parameter, if true, forces the Flash\nUI to be rendered with wmode set to \"transparent\". This behavior is useful \nin conjunction with non-rectangular button skins with PNG transparency. \nThe parameter is false by default, and ignored if no buttonSkin is defined."}], "description": "Uploader class for the YUI Uploader component."}], "namespace": "YAHOO.widget", "module": "uploader", "properties": {"Chart.SWFURL": {"description": "Location of the Uploader SWF", "default": "\"assets/uploader.swf\"", "private": "", "static": "", "guessedname": "SWFURL", "guessedtype": "property", "final": ""}}, "guessedname": "Uploader", "methods": {"uploadAll": {"params": [{"type": "String", "name": "uploadScriptPath", "description": "  The URL of the upload location."}, {"type": "String", "name": "method", "description": "  Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default."}, {"type": "Object", "name": "vars", "description": "  The object containing variables to be sent in the same request as the file upload."}, {"type": "String", "name": "fieldName", "description": "  The name of the variable in the POST request containing the file data. \"Filedata\" by default.\n</code>"}], "description": "Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed.", "guessedname": "uploadAll", "guessedtype": "function"}, "enable": {"description": "Enables the mouse events on the Uploader.\nIf the uploader is being rendered as a button,\nthen the button's skin is set to \"up\"\n(first section of the button skin sprite).", "guessedname": "enable", "guessedtype": "function"}, "setAllowLogging": {"params": [{"type": "Boolean", "name": "allowLogging", "description": "  If true, logs are output; otherwise, no logs are produced."}], "description": "Turns the logging functionality on.\nUses Flash internal trace logging, as well as YUI Logger, if available.", "guessedname": "setAllowLogging", "guessedtype": "function"}, "clearFileList": {"description": "Clears the list of files queued for upload.", "guessedname": "clearFileList", "guessedtype": "function"}, "upload": {"params": [{"type": "String", "name": "fileID", "description": "  The id of the file to start uploading."}, {"type": "String", "name": "uploadScriptPath", "description": "  The URL of the upload location."}, {"type": "String", "name": "method", "description": "  Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default."}, {"type": "Object", "name": "vars", "description": "  The object containing variables to be sent in the same request as the file upload."}, {"type": "String", "name": "fieldName", "description": "  The name of the variable in the POST request containing the file data. \"Filedata\" by default.\n</code>"}], "description": "Starts the upload of the file specified by fileID to the location specified by uploadScriptPath.", "guessedname": "upload", "guessedtype": "function"}, "removeFile": {"params": [{"type": "String", "name": "fileID", "description": "  The id of the file to remove from the upload queue."}], "description": "Removes the specified file from the upload queue.", "guessedname": "removeFile", "guessedtype": "function"}, "setSimUploadLimit": {"params": [{"type": "int", "name": "simUploadLimit", "description": "  Number of simultaneous uploads, between 1 and 5."}], "description": "Sets the number of simultaneous uploads when using uploadAll()\nThe minimum value is 1, and maximum value is 5. The default value is 2.", "guessedname": "setSimUploadLimit", "guessedtype": "function"}, "disable": {"description": "Disables the mouse events on the Uploader.\nIf the uploader is being rendered as a button,\nthen the button's skin is set to \"disabled\"\n(fourth section of the button skin sprite).", "guessedname": "disable", "guessedtype": "function"}, "setAllowMultipleFiles": {"params": [{"type": "Boolean", "name": "allowMultipleFiles", "description": "  If true, multiple files can be selected. False by default."}], "description": "Sets the flag allowing users to select multiple files for the upload.", "guessedname": "setAllowMultipleFiles", "guessedtype": "function"}, "uploadThese": {"params": [{"type": "Array", "name": "fileIDs", "description": "  The ids of the files to start uploading."}, {"type": "String", "name": "uploadScriptPath", "description": "  The URL of the upload location."}, {"type": "String", "name": "method", "description": "  Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default."}, {"type": "Object", "name": "vars", "description": "  The object containing variables to be sent in the same request as the file upload."}, {"type": "String", "name": "fieldName", "description": "  The name of the variable in the POST request containing the file data. \"Filedata\" by default.\n</code>"}], "description": "Starts the upload of the files specified by fileIDs, or adds them to a currently running queue. The upload queue is automatically managed.", "guessedname": "uploadThese", "guessedtype": "function"}, "cancel": {"params": [{"type": "String", "name": "fileID", "description": "  The ID of the file whose upload should be cancelled."}], "description": "Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled.", "guessedname": "cancel", "guessedtype": "function"}, "setFileFilters": {"params": [{"type": "extensions: extensionString, description: descriptionString, [optional]macType: macTypeString", "name": "newFilterArray", "description": " An array of sets of key-value pairs of the form\n\nThe extensions string is a semicolon-delimited list of elements of the form \"*.xxx\", \ne.g. \"*.jpg;*.gif;*.png\"."}], "description": "Sets the file filters for the \"Browse\" dialog.", "guessedname": "setFileFilters", "guessedtype": "function"}}, "uses": ["YAHOO.widget.FlashAdapter"], "file": "Uploader.js", "guessedtype": "function", "shortname": "Uploader", "events": {"uploadProgress": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.id", "description": "  The id of the file with which the upload progress data is associated"}, {"type": "Number", "name": "bytesLoaded", "description": "  The number of bytes of the file uploaded so far"}, {"type": "Number", "name": "bytesTotal", "description": "  The total size of the file"}], "description": "Fires when new information about the upload progress for a specific file is available."}, "uploadCompleteData": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.id", "description": "  The id of the file for which the upload has been completed."}, {"type": "String", "name": "event.data", "description": "  The raw data returned by the server in response to the upload."}], "description": "Fires when the server sends data in response to a completed upload."}, "uploadStart": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.id", "description": "  The id of the file that's started to upload"}], "description": "Fires when an upload of a specific file has started."}, "uploadComplete": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.id", "description": "  The id of the file for which the upload has been completed."}], "description": "Fires when an upload for a specific file is complete."}, "mouseUp": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when the mouse is released over the Uploader.\nOnly fires when the Uploader UI is enabled and\nthe render type is 'transparent'."}, "fileSelect": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.fileList", "description": "  A dictionary of objects with file information"}, {"type": "Number", "name": "event.fileList[].size", "description": "  File size in bytes for a specific file in fileList"}, {"type": "Date", "name": "event.fileList[].cDate", "description": "  Creation date for a specific file in fileList"}, {"type": "Date", "name": "event.fileList[].mDate", "description": "  Modification date for a specific file in fileList"}, {"type": "String", "name": "event.fileList[].name", "description": "  File name for a specific file in fileList"}, {"type": "String", "name": "event.fileList[].id", "description": "  Unique file id of a specific file in fileList"}], "description": "Fires when the user has finished selecting files in the \"Open File\" dialog."}, "mouseDown": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when the mouse is pressed over the Uploader.\nOnly fires when the Uploader UI is enabled and\nthe render type is 'transparent'."}, "rollOut": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when the mouse rolls out of the Uploader."}, "uploadCancel": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.id", "description": "  The id of the file with which the upload has been cancelled."}], "description": "Fires when an upload for a specific file is cancelled."}, "rollOver": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when the mouse rolls over the Uploader."}, "uploadError": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "String", "name": "event.id", "description": "  The id of the file that was being uploaded when the error has occurred."}, {"type": "String", "name": "event.status", "description": "  The status message associated with the error."}], "description": "Fires when an upload error occurs."}, "click": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}], "description": "Fires when the uploader is clicked."}}, "description": "Uploader class for the YUI Uploader component."}, "YAHOO.util.ShouldError": {"name": "YAHOO.util.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of AssertionError that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ShouldError", "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ShouldError is subclass of AssertionError that is thrown whenever\na test is expected to throw an error but doesn't."}, "YAHOO.util.ComparisonFailure": {"name": "YAHOO.util.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of AssertionError that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value."}, "actual": {"type": "Object", "description": "The actual value."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ComparisonFailure is subclass of AssertionError that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "YAHOO.widget.ContextMenu": {"name": "YAHOO.widget.ContextMenu", "configs": {"trigger": {"default": "null", "type": "String|<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|Array", "description": "The HTML element(s) whose \"contextmenu\" event (\"mousedown\" \nfor Opera) trigger the display of the context menu.  Can be a string \nrepresenting the id attribute of the HTML element, an object reference \nfor the HTML element, or an array of strings or HTML element references."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the context menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for the \ncontext menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object specifying the \n<code>&#60;div&#62;</code> element of the context menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement</a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;select&#62;</code> element to be used as the data source for \nthe context menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."}], "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera)."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"triggerContextMenuEvent": {"description": "Custom Event wrapper for the \"contextmenu\" DOM event \n(\"mousedown\" for Opera) fired by the element(s) that trigger the display of \nthe context menu.", "guessedname": "triggerContextMenuEvent", "guessedtype": "property"}}, "guessedname": "ContextMenu", "methods": {"initEvents": {"description": "Initializes the custom events for the context menu.", "guessedname": "initEvents", "guessedtype": "function"}, "_onTriggerClick": {"guessedname": "_onTriggerClick", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that is handling the event."}], "description": "\"click\" event handler for the HTML element(s) identified as the \n\"trigger\" for the context menu.  Used to cancel default behaviors in Opera.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the context menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for \nthe context menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object specifying the \n<code>&#60;div&#62;</code> element of the context menu."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement</a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;select&#62;</code> element to be used as the data source for \nthe context menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."}], "description": "The ContextMenu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the context menu.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be \nchanged using the context menu's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "destroy": {"description": "Removes the context menu's <code>&#60;div&#62;</code> element \n(and accompanying child nodes) from the document.", "guessedname": "destroy", "guessedtype": "function"}, "cancel": {"description": "Cancels the display of the context menu.", "guessedname": "cancel", "guessedtype": "function"}, "position": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "Array", "name": "p_aPos", "description": " Array representing the xy position for the context menu."}], "description": "\"beforeShow\" event handler used to position the contextmenu.", "private": ""}, "_onTriggerContextMenu": {"guessedname": "_onTriggerContextMenu", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that is handling the event."}], "description": "\"contextmenu\" event handler (\"mousedown\" for Opera) for the HTML \nelement(s) that trigger the display of the context menu.", "private": "", "guessedtype": "function"}, "_removeEventHandlers": {"description": "Removes all of the DOM event handlers from the HTML element(s) \nwhose \"context menu\" event (\"click\" for Opera) trigger the display of \nthe context menu.", "private": "", "guessedname": "_removeEventHandlers", "guessedtype": "function"}, "configTrigger": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that fired the event."}], "description": "Event handler for when the value of the \"trigger\" configuration \nproperty changes.", "guessedname": "configTrigger", "guessedtype": "function"}}, "extends": "YAHOO.widget.Menu", "superclass": "YAHOO.widget.Menu", "file": "contextmenu.js", "guessedtype": "function", "shortname": "ContextMenu", "properties": {"_oTrigger": {"description": "Object reference to the current value of the \"trigger\" \nconfiguration property.", "default": "null", "private": "", "guessedname": "_oTrigger", "guessedtype": "property", "type": "String|<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/leve\nl-one-html.html#ID-58190037\">HTMLElement</a>|Array"}, "contextEventTarget": {"default": "null", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-58190037\">HTMLElement</a>", "description": "Object reference for the HTML element that was the target of the\n\"contextmenu\" DOM event (\"mousedown\" for Opera) that triggered the display of \nthe context menu.", "guessedname": "contextEventTarget", "guessedtype": "property"}, "EVENT_TYPES": {"description": "Constant representing the name of the ContextMenu's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the ContextMenu's configuration properties", "private": "", "guessedname": "TRIGGER_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "_bCancelled": {"description": "Boolean indicating if the display of the context menu should \nbe cancelled.", "default": "false", "private": "", "guessedname": "_bCancelled", "guessedtype": "property", "type": "Boolean"}}, "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera)."}, "YAHOO.widget.TVAnim": {"name": "YAHOO.widget.TVAnim", "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVAnim", "methods": {"isValid": {"return": {"type": "boolean", "description": "true if valid, false if not"}, "description": "Returns true if the specified animation class is available", "static": "", "guessedname": "isValid", "guessedtype": "function", "params": [{"type": "string", "name": "type", "description": "  the type of animation"}]}, "getAnim": {"return": {"type": "YAHOO.util.Animation", "description": "the animation instance"}, "description": "Returns a ygAnim instance of the given type", "static": "", "guessedname": "getAnim", "guessedtype": "function", "params": [{"type": "string", "name": "type", "description": "  the type of animation"}, {"type": "HTMLElement", "name": "el", "description": "  the element to element (probably the children div)"}, {"type": "function", "name": "callback", "description": "  function to invoke when the animation is done."}]}}, "static": "", "file": "TVAnim.js", "guessedtype": "function", "shortname": "TVAnim", "properties": {"FADE_OUT": {"type": "string", "static": "", "description": "Constant for the fade out animation", "guessedname": "FADE_OUT", "guessedtype": "property"}, "FADE_IN": {"type": "string", "static": "", "description": "Constant for the fade in animation", "guessedname": "FADE_IN", "guessedtype": "property"}}, "description": "A static factory class for tree view expand/collapse animations"}, "YAHOO.util.Easing": {"name": "YAHOO.util.Easing", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end.", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end.", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end.", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end.", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "Easing.js", "guessedtype": "property", "shortname": "Easing", "description": "Singleton that determines how an animation proceeds from start to end."}, "YAHOO.util.DragDropMgr": {"name": "YAHOO.util.DragDropMgr", "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DragDropMgr", "methods": {"removeDDFromGroup": {"guessedname": "removeDDFromGroup", "static": "", "description": "Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.", "private": "", "guessedtype": "function"}, "startDrag": {"static": "", "params": [{"type": "int", "name": "x", "description": "  the X position of the original mousedown"}, {"type": "int", "name": "y", "description": "  the Y position of the original mousedown"}], "description": "Fired when either the drag pixel threshold or the mousedown hold \ntime threshold has been met.", "guessedname": "startDrag", "guessedtype": "function"}, "getDDById": {"return": {"type": "DragDrop", "description": "the drag drop object, null if it is not found"}, "description": "Returns the DragDrop instance for a given id", "static": "", "guessedname": "getDDById", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the DragDrop object"}]}, "unregAll": {"guessedname": "unregAll", "static": "", "description": "Cleans up the drag and drop events and objects.", "private": "", "guessedtype": "function"}, "getScrollTop": {"static": "", "return": {"type": "int", "description": "the document's scrollTop"}, "description": "Gets the scrollTop", "guessedname": "getScrollTop", "guessedtype": "function"}, "lock": {"static": "", "description": "Lock all drag and drop functionality", "guessedname": "lock", "guessedtype": "function"}, "getPosX": {"return": {"type": "int", "description": "the X coordinate"}, "description": "Returns the X position of an html element", "deprecated": "use YAHOO.util.Dom.getX instead", "static": "", "guessedname": "getPosX", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element for which to get the position"}]}, "getClientWidth": {"return": {"type": "int", "description": "client width in px"}, "description": "Gets the client width", "deprecated": "use YAHOO.util.Dom.getViewportWidth instead", "static": "", "guessedname": "getClientWidth", "guessedtype": "function"}, "unlock": {"static": "", "description": "Unlock all drag and drop functionality", "guessedname": "unlock", "guessedtype": "function"}, "stopDrag": {"static": "", "params": [{"type": "Event", "name": "e", "description": " the mouseup event, another event (or a fake event) \nwith pageX and pageY defined, or nothing if the \nsilent parameter is true"}, {"type": "boolean", "name": "silent", "description": " skips the enddrag and mouseup events if true"}], "description": "Ends the current drag, cleans up the state, and fires the endDrag\nand mouseUp events.  Called internally when a mouseup is detected\nduring the drag.  Can be fired manually during the drag by passing\neither another event (such as the mousemove event received in onDrag)\nor a fake event with pageX and pageY defined (so that endDrag and\nonMouseUp have usable position data.).  Alternatively, pass true\nfor the silent parameter so that the endDrag and onMouseUp events\nare skipped (so no event data is needed.)", "guessedname": "stopDrag", "guessedtype": "function"}, "_deactivateShim": {"guessedname": "_deactivateShim", "static": "", "description": "This method will hide the shim element and set the _shimActive property to false", "private": "", "guessedtype": "function"}, "_onResize": {"guessedname": "_onResize", "static": "", "description": "Reset constraints on all drag and drop objs", "private": "", "guessedtype": "function"}, "_onLoad": {"guessedname": "_onLoad", "static": "", "description": "Drag and drop initialization.  Sets up the global event handlers", "private": "", "guessedtype": "function"}, "fireEvents": {"description": "Iterates over all of the DragDrop elements to find ones we are \nhovering over or dropping on", "private": "", "static": "", "guessedname": "fireEvents", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}, {"type": "boolean", "name": "isDrop", "description": " is this a drop op or a mouseover op?"}]}, "handleMouseDown": {"description": "Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged", "private": "", "static": "", "guessedname": "handleMouseDown", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}, {"type": "", "name": "oDD", "description": " the DragDrop object being dragged"}]}, "regDragDrop": {"static": "", "params": [{"type": "DragDrop", "name": "oDD", "description": " the DragDrop object to register"}, {"type": "String", "name": "sGroup", "description": " the name of the group this element belongs to"}], "description": "Each DragDrop instance must be registered with the DragDropMgr.  \nThis is executed in DragDrop.init()", "guessedname": "regDragDrop", "guessedtype": "function"}, "handleMouseMove": {"description": "Internal function to handle the mousemove event.  Will be invoked \nfrom the context of the html element.", "private": "", "static": "", "guessedname": "handleMouseMove", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}], "todo": "figure out what we can do about mouse events lost when the \nuser drags objects beyond the window boundary.  Currently we can \ndetect this in internet explorer by verifying that the mouse is \ndown during the mousemove event.  Firefox doesn't give us the \nbutton state on the mousemove event."}, "getElement": {"return": {"type": "Object", "description": "The element"}, "description": "Returns the actual DOM element", "deprecated": "use YAHOO.util.Dom.get instead", "static": "", "guessedname": "getElement", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the elment to get"}]}, "init": {"guessedname": "init", "static": "", "description": "Called the first time an element is registered.", "private": "", "guessedtype": "function"}, "_execOnAll": {"guessedname": "_execOnAll", "static": "", "description": "Runs method on all drag and drop objects", "private": "", "guessedtype": "function"}, "getCss": {"return": {"type": "Object", "description": "The style property of the element"}, "description": "Returns the style property for the DOM element (i.e., \ndocument.getElById(id).style)", "deprecated": "use YAHOO.util.Dom instead", "static": "", "guessedname": "getCss", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the elment to get"}]}, "_remove": {"guessedname": "_remove", "static": "", "description": "Unregisters a drag and drop item.  This is executed in \nDragDrop.unreg, use that method instead of calling this directly.", "private": "", "guessedtype": "function"}, "isTypeOfDD": {"return": {"type": "boolean", "description": "true if typeof oDD = DragDrop"}, "description": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof \nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.", "static": "", "guessedname": "isTypeOfDD", "guessedtype": "function", "params": [{"type": "Object", "name": "the", "description": " object to evaluate"}]}, "isLocked": {"static": "", "return": {"type": "boolean", "description": "True if drag and drop is locked, false otherwise."}, "description": "Is drag and drop locked?", "guessedname": "isLocked", "guessedtype": "function"}, "getClientHeight": {"return": {"type": "int", "description": "client height in px"}, "description": "Gets the client height", "deprecated": "use YAHOO.util.Dom.getViewportHeight instead", "static": "", "guessedname": "getClientHeight", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "DragDrop", "description": "The best single match"}, "description": "Helper function for getting the best match from the list of drag \nand drop objects returned by the drag and drop events when we are \nin INTERSECT mode.  It returns either the first object that the \ncursor is over, or the object that has the greatest overlap with \nthe dragged element.", "static": "", "guessedname": "getBestMatch", "guessedtype": "function", "params": [{"type": "DragDrop[]", "name": "dds", "description": " The array of drag and drop objects \ntargeted"}]}, "_activateShim": {"guessedname": "_activateShim", "static": "", "description": "This method will create the shim element if needed, then show the shim element, size the element and set the _shimActive property to true", "private": "", "guessedtype": "function"}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "e", "description": " the event as returned by this.getEvent()"}], "description": "Utility to stop event propagation and event default, if these \nfeatures are turned on.", "guessedname": "stopEvent", "guessedtype": "function"}, "numericSort": {"static": "", "description": "Numeric array sort function", "guessedname": "numericSort", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "boolean", "description": "true if the mouse is over the target"}, "description": "Checks the cursor location to see if it over the target", "private": "", "static": "", "guessedname": "isOverTarget", "guessedtype": "function", "params": [{"type": "YAHOO.util.Point", "name": "pt", "description": " The point to evaluate"}, {"type": "DragDrop", "name": "oTarget", "description": " the DragDrop object we are inspecting"}, {"type": "boolean", "name": "intersect", "description": " true if we are in intersect mode"}, {"type": "YAHOO.util.Region", "name": "pre-cached", "description": " location of the dragged element"}]}, "_sizeShim": {"guessedname": "_createShim", "static": "", "description": "This method will create a shim element (giving it the id of yui-ddm-shim), it also attaches the mousemove and mouseup listeners to it and attaches a scroll listener on the window", "private": "", "guessedtype": "function"}, "isDragDrop": {"return": {"type": "boolean", "description": "true if this element is a DragDrop item, \nfalse otherwise"}, "description": "Utility function to determine if a given element has been \nregistered as a drag drop item.", "static": "", "guessedname": "isDragDrop", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the element id to check"}]}, "_onUnload": {"guessedname": "_onUnload", "static": "", "description": "unload event handler", "private": "", "guessedtype": "function"}, "getLocation": {"return": {"type": "YAHOO.util.Region", "description": "a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for."}, "description": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it", "static": "", "guessedname": "getLocation", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "oDD", "description": " the drag and drop object to get the \nlocation for"}]}, "regHandle": {"static": "", "params": [{"type": "String", "name": "sDDId", "description": " the DragDrop id this element is a handle for"}, {"type": "String", "name": "sHandleId", "description": " the id of the element that is the drag \nhandle"}], "description": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()", "guessedname": "regHandle", "guessedtype": "function"}, "getRelated": {"return": {"type": "DragDrop[]", "description": "the related instances"}, "description": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.", "static": "", "guessedname": "getRelated", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "p_oDD", "description": " the obj to get related data for"}, {"type": "boolean", "name": "bTargetsOnly", "description": " if true, only return targetable objs"}]}, "handleWasClicked": {"static": "", "params": [{"type": "", "name": "node", "description": " the html element to inspect"}], "description": "Recursively searches the immediate parent and all child nodes for \nthe handle element in order to determine wheter or not it was \nclicked.", "guessedname": "handleWasClicked", "guessedtype": "function"}, "swapNode": {"static": "", "params": [{"type": "", "name": "n1", "description": " the first node to swap"}, {"type": "", "name": "n2", "description": " the other node to swap"}], "description": "Swap two nodes.  In IE, we use the native method, for others we \nemulate the IE behavior", "guessedname": "swapNode", "guessedtype": "function"}, "getScrollLeft": {"static": "", "return": {"type": "int", "description": "the document's scrollTop"}, "description": "Gets the scrollLeft", "guessedname": "getScrollLeft", "guessedtype": "function"}, "getElWrapper": {"return": {"type": "YAHOO.util.DDM.ElementWrapper", "description": "the wrapped element"}, "description": "Get the wrapper for the DOM element specified", "deprecated": "This wrapper isn't that useful", "private": "", "static": "", "guessedname": "getElWrapper", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the element to get"}]}, "_addListeners": {"guessedname": "_addListeners", "static": "", "description": "Trying to make the load order less important.  Without this we get\nan error if this file is loaded before the Event Utility.", "private": "", "guessedtype": "function"}, "getStyle": {"return": {"type": "string", "description": "The value of the style property"}, "description": "Returns the specified element style property", "deprecated": "use YAHOO.util.Dom.getStyle", "static": "", "guessedname": "getStyle", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "          the element"}, {"type": "string", "name": "styleProp", "description": "   the style property"}]}, "getPosY": {"return": {"type": "int", "description": "the Y coordinate"}, "description": "Returns the Y position of an html element", "deprecated": "use YAHOO.util.Dom.getY instead", "static": "", "guessedname": "getPosY", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element for which to get the position"}]}, "isLegalTarget": {"return": {"type": "boolean", "description": "true if the target is a legal target for the \ndd obj"}, "description": "Returns true if the specified dd target is a legal target for \nthe specifice drag obj", "static": "", "guessedname": "isLegalTarget", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "the", "description": " drag obj"}, {"type": "DragDrop", "name": "the", "description": " target"}]}, "refreshCache": {"description": "Refreshes the cache of the top-left and bottom-right points of the \ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical \nusage is:\n<code>\nYAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);\n</code>\nAlternatively:\n<code>\nYAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});\n</code>", "static": "", "guessedname": "refreshCache", "guessedtype": "function", "params": [{"type": "Object", "name": "groups", "description": " an associative array of groups to refresh"}], "todo": "this really should be an indexed array.  Alternatively this\nmethod could accept both."}, "isHandle": {"return": {"type": "boolean", "description": "true if this element is a DragDrop handle, false \notherwise"}, "description": "Utility function to determine if a given element has been \nregistered as a drag drop handle for the given Drag Drop object.", "static": "", "guessedname": "isHandle", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the element id to check"}]}, "handleMouseUp": {"description": "Internal function to handle the mouseup event.  Will be invoked \nfrom the context of the document.", "private": "", "static": "", "guessedname": "handleMouseUp", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}]}, "verifyEl": {"return": {"type": "boolean", "description": "true if the element looks usable"}, "description": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element", "static": "", "guessedname": "verifyEl", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to check"}]}, "getScroll": {"guessedname": "getScroll", "static": "", "description": "Returns the current scroll position", "private": "", "guessedtype": "function"}, "moveToEl": {"static": "", "params": [{"type": "HTMLElement", "name": "moveEl", "description": "      The element to move"}, {"type": "HTMLElement", "name": "targetEl", "description": "    The position reference element"}], "description": "Sets the x/y position of an element to the location of the\ntarget element.", "guessedname": "moveToEl", "guessedtype": "function"}}, "static": "", "file": "DragDropMgr.js", "guessedtype": "function", "shortname": "DragDropMgr", "properties": {"dragThreshMet": {"description": "Flag that indicates that either the drag pixel threshold or the \nmousdown time threshold has been met", "private": "", "static": "", "guessedname": "dragThreshMet", "guessedtype": "property", "type": "boolean"}, "clickPixelThresh": {"type": "int", "static": "", "description": "The number of pixels that the mouse needs to move after the \nmousedown before the drag is initiated.  Default=3;", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "_timeoutCount": {"guessedname": "_timeoutCount", "static": "", "description": "Internal counter", "private": "", "guessedtype": "property"}, "initialized": {"guessedname": "initialized", "static": "", "description": "Internal flag that is set to true when drag and drop has been\ninitialized", "private": "", "guessedtype": "property"}, "elementCache": {"description": "A cache of DOM elements", "deprecated": "elements are not cached now", "private": "", "static": "", "guessedname": "elementCache", "guessedtype": "property"}, "stopPropagation": {"type": "boolean", "static": "", "description": "Flag to determine if we should stop the propagation of the events \nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click.", "guessedname": "stopPropagation", "guessedtype": "property"}, "clickTimeout": {"description": "Timeout used for the click time threshold", "private": "", "static": "", "guessedname": "clickTimeout", "guessedtype": "property", "type": "Object"}, "handleIds": {"description": "Array of element ids defined as drag handles.  Used to determine \nif the element that generated the mousedown event is actually the \nhandle and not the html element itself.", "private": "", "static": "", "guessedname": "handleIds", "guessedtype": "property", "type": "{string: string}"}, "POINT": {"description": "In point mode, drag and drop interaction is defined by the \nlocation of the cursor during the drag/drop", "static": "", "guessedname": "POINT", "guessedtype": "property", "type": "int", "final": ""}, "deltaX": {"description": "the X distance between the cursor and the object being dragged", "private": "", "static": "", "guessedname": "deltaX", "guessedtype": "property", "type": "int"}, "deltaY": {"description": "the Y distance between the cursor and the object being dragged", "private": "", "static": "", "guessedname": "deltaY", "guessedtype": "property", "type": "int"}, "dragOvers": {"description": "the DragDrop object(s) that are being hovered over", "private": "", "static": "", "guessedname": "dragOvers", "guessedtype": "property", "type": "Array"}, "useCache": {"type": "boolean", "static": "", "description": "Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.", "guessedname": "useCache", "guessedtype": "property"}, "fromTimeout": {"description": "Flag to determine if the drag event was fired from the click timeout and\nnot the mouse move threshold.", "private": "", "static": "", "guessedname": "fromTimeout", "guessedtype": "property", "type": "boolean"}, "clickTimeThresh": {"type": "int", "static": "", "description": "The number of milliseconds after the mousedown event to initiate the\ndrag if we don't get a mouseup event. Default=1000", "guessedname": "clickTimeThresh", "guessedtype": "property"}, "mode": {"type": "int", "static": "", "description": "The current drag and drop mode.  Default: POINT", "guessedname": "mode", "guessedtype": "property"}, "startX": {"description": "The X position of the mousedown event stored for later use when a \ndrag threshold is met.", "private": "", "static": "", "guessedname": "startX", "guessedtype": "property", "type": "int"}, "startY": {"description": "The Y position of the mousedown event stored for later use when a \ndrag threshold is met.", "private": "", "static": "", "guessedname": "startY", "guessedtype": "property", "type": "int"}, "_shim": {"description": "The HTML element created to use as a shim over the document to track mouse movements", "private": "", "static": "", "guessedname": "_shim", "guessedtype": "property", "type": "HTMLElement"}, "_debugShim": {"description": "This property is used when useShim is set to true, it will set the opacity on the shim to .5 for debugging. Use: (YAHOO.util.DDM._debugShim = true;)", "private": "", "static": "", "guessedname": "_debugShim", "guessedtype": "property", "type": "Boolean"}, "STRICT_INTERSECT": {"description": "In intersect mode, drag and drop interaction is defined only by the \noverlap of two or more drag and drop objects.", "static": "", "guessedname": "STRICT_INTERSECT", "guessedtype": "property", "type": "int", "final": ""}, "interactionInfo": {"type": "object", "static": "", "description": "Provides additional information about the the current set of\ninteractions.  Can be accessed from the event handlers. It\ncontains the following properties:\nout:       onDragOut interactions\nenter:     onDragEnter interactions\nover:      onDragOver interactions\ndrop:      onDragDrop interactions\npoint:     The location of the cursor\ndraggedRegion: The location of dragged element at the time\nof the interaction\nsourceRegion: The location of the source elemtn at the time\nof the interaction\nvalidDrop: boolean", "guessedname": "interactionInfo", "guessedtype": "property"}, "locationCache": {"guessedname": "locationCache", "static": "", "description": "Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.", "private": "", "guessedtype": "property"}, "INTERSECT": {"description": "In intersect mode, drag and drop interaction is defined by the \ncursor position or the amount of overlap of two or more drag and \ndrop objects.", "static": "", "guessedname": "INTERSECT", "guessedtype": "property", "type": "int", "final": ""}, "_shimState": {"description": "This property is used when useShim is set on a DragDrop object to store the current state of DDM.useShim so it can be reset when a drag operation is done.", "private": "", "static": "", "guessedname": "_shimState", "guessedtype": "property", "type": "Boolean"}, "locked": {"guessedname": "locked", "static": "", "description": "All drag and drop can be disabled.", "private": "", "guessedtype": "property"}, "useShim": {"type": "Boolean", "static": "", "description": "This property is used to turn on global use of the shim element on all DragDrop instances, defaults to false for backcompat. (Use: YAHOO.util.DDM.useShim = true)", "guessedname": "useShim", "guessedtype": "property"}, "dragCurrent": {"description": "the DragDrop object that is currently being dragged", "private": "", "static": "", "guessedname": "dragCurrent", "guessedtype": "property", "type": "DragDrop"}, "preventDefault": {"type": "boolean", "static": "", "description": "Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to \nfalse if you need the default behavior (not recommended)", "guessedname": "preventDefault", "guessedtype": "property"}, "ids": {"description": "Two dimensional Array of registered DragDrop objects.  The first \ndimension is the DragDrop item group, the second the DragDrop \nobject.", "private": "", "static": "", "guessedname": "ids", "guessedtype": "property", "type": "{string: string}"}, "_shimActive": {"description": "This property is used to determine if the shim is active over the screen, default false.", "private": "", "static": "", "guessedname": "_shimActive", "guessedtype": "property", "type": "Boolean"}}, "description": "DragDropMgr is a singleton that tracks the element interaction for \nall DragDrop items in the window.  Generally, you will not call \nthis class directly, but it does have helper methods that could \nbe useful in your DragDrop implementations."}, "YAHOO.util.Chain": {"name": "YAHOO.util.Chain", "constructors": [{"params": [{"type": "Function|Object", "name": "callback*", "description": "  Any number of callbacks to initialize the queue"}], "description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:\n<ul>\n<li><code>method</code> - {Function} REQUIRED the callback function.</li>\n<li><code>scope</code> - {Object} the scope from which to execute the callback.  Default is the global window scope.</li>\n<li><code>argument</code> - {Array} parameters to be passed to method as individual arguments.</li>\n<li><code>timeout</code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.</li>\n<li><code>until</code> - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.</li>\n<li><code>iterations</code> - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with <code>until</code>.</li>\n</ul>"}], "namespace": "YAHOO.util", "module": "datatable", "events": {"end": {"description": "Event fired when the callback queue is emptied via execution (not via\na call to chain.stop()."}}, "guessedname": "Chain", "methods": {"stop": {"return": {"type": "Chain", "description": "the Chain instance"}, "description": "Stop and clear the Chain's queue after the current execution of the\ncurrent callback completes.", "guessedname": "stop", "guessedtype": "function"}, "add": {"return": {"type": "Chain", "description": "the Chain instance"}, "params": [{"type": "Function|Object", "name": "c", "description": "  the callback function ref or object literal"}], "description": "Add a callback to the end of the queue", "guessedname": "add", "guessedtype": "function"}, "pause": {"return": {"type": "Chain", "description": "the Chain instance"}, "description": "Pause the execution of the Chain after the current execution of the\ncurrent callback completes.  If called interstitially, clears the\ntimeout for the pending callback. Paused Chains can be restarted with\nchain.run()", "guessedname": "pause", "guessedtype": "function"}, "run": {"return": {"type": "Chain", "description": "the Chain instance"}, "description": "Begin executing the chain, or resume execution from the last paused position.", "guessedname": "run", "guessedtype": "function"}}, "file": "Chain.js", "guessedtype": "function", "shortname": "Chain", "properties": {"q": {"guessedname": "q", "type": "{Array}", "description": "The callback queue", "private": "", "guessedtype": "property"}, "id": {"guessedname": "id", "type": "{number}", "description": "Timeout id used to pause or stop execution and indicate the execution state of the Chain.  0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution.", "private": "", "guessedtype": "property"}}, "description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:\n<ul>\n<li><code>method</code> - {Function} REQUIRED the callback function.</li>\n<li><code>scope</code> - {Object} the scope from which to execute the callback.  Default is the global window scope.</li>\n<li><code>argument</code> - {Array} parameters to be passed to method as individual arguments.</li>\n<li><code>timeout</code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.</li>\n<li><code>until</code> - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.</li>\n<li><code>iterations</code> - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with <code>until</code>.</li>\n</ul>"}, "YAHOO.widget.ProgressBar": {"name": "YAHOO.widget.ProgressBar", "configs": {"direction": {"default": "'ltr'", "type": "String (any of \"ltr\", \"rtl\", \"ttb\" or \"btt\")", "description": "Direction of movement of the bar.  \nIt can be any of 'ltr' (left to right), 'rtl' (the reverse) , 'ttb' (top to bottom) or 'btt'.\nCan only be set once and only before rendering."}, "anim": {"default": "null", "type": "{boolean} or {instance of YAHOO.util.Anim}", "description": "it accepts either a boolean (recommended) or an instance of <a href=\"YAHOO.util.Anim.html\">YAHOO.util.Anim</a>.\nIf a boolean, it will enable/disable animation creating its own instance of the animation utility.  \nIf given an instance of <a href=\"YAHOO.util.Anim.html\">YAHOO.util.Anim</a> it will use that instance.\nThe <a href=\"YAHOO.util.Anim.html\">animation</a> utility needs to be loaded.\nWhen read, it returns the instance of the animation utility in use or null if none.  \nIt can be used to set the animation parameters such as easing methods or duration."}, "ariaTextTemplate": {"default": "\"{value}\"", "type": "String", "description": "Text to be voiced by screen readers.\nThe text is processed by <a href=\"YAHOO.lang.html#method_substitute\">YAHOO.lang.substitute</a>.  \nIt can use the placeholders {value}, {minValue} and {maxValue}"}, "maxValue": {"default": "100", "type": "Number", "description": "Represents the top value for the bar. \nThe bar will be fully extended when reaching this value.  \nValues higher than this will be ignored."}, "value": {"default": "0", "type": "Number", "description": "The value for the bar.  \nValid values are in between the minValue and maxValue attributes."}, "minValue": {"default": "0", "type": "Number", "description": "Represents the lowest value for the bar. \nThe bar will be totally collapsed when reaching this value.  \nValues lower than this will be ignored."}, "width": {"default": "\"200px\"", "type": "Number or String", "description": "Width of the ProgressBar.\nIf a number, it will be assumed to be in pixels.  \nIf a string it should be a valid setting for the CSS width attribute.  \nIt will always be returned as a string including units."}, "barEl": {"readonly": "", "type": "HTMLElement (div)", "description": "Reference to the HTML object that makes the moving bar (read-only)"}, "height": {"default": "\"20px\"", "type": "Number or String", "description": "Height of the ProgressBar.\nIf a number, it will be assumed to be in pixels.  \nIf a string it should be a valid setting for the CSS height attribute.  \nIt will always be returned as a string including units."}, "maskEl": {"readonly": "", "type": "HTMLElement (table)", "description": "Reference to the HTML object that overlays the bar providing the mask. (read-only)"}}, "constructors": [{"params": [{"type": "object", "name": "oConfigs", "description": "  An object containing any configuration attributes to be set"}], "description": "The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,\na level meter, rating or any such simple linear measure.\nIt allows for highly customized styles including animation, vertical or horizontal and forward or reverse."}], "namespace": "YAHOO.widget", "module": "progressbar", "events": {"beforeAriaTextTemplateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAriaTextTemplateChange", "description": "Fires before the value for the configuration attribute 'ariaTextTemplate' changes. Return false to cancel the attribute change."}, "ariaTextTemplateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "ariaTextTemplateChange", "description": "Fires when the value for the configuration attribute 'ariaTextTemplate' changes."}, "heightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' changes."}, "minValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "minValueChange", "description": "Fires when the value for the configuration attribute 'minValue' changes."}, "barElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "barElChange", "description": "Fires when the value for the configuration attribute 'barEl' changes."}, "beforeHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHeightChange", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "beforeAnimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAnimChange", "description": "Fires before the value for the configuration attribute 'anim' changes. Return false to cancel the attribute change."}, "beforeMaxValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxValueChange", "description": "Fires before the value for the configuration attribute 'maxValue' changes. Return false to cancel the attribute change."}, "start": {"type": "CustomEvent", "params": [{"type": "Number", "name": "value", "description": "  the current (initial) value"}], "description": "Fires when the value is about to change.  It reports the starting value"}, "beforeWidthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWidthChange", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "progress": {"type": "CustomEvent", "params": [{"type": "Number", "name": "value", "description": " the current, changing value"}], "description": "If animation is active, it will trigger several times during the animation providing intermediate values\nIf animation is not active, it will fire only once providing the end value"}, "beforeMaskElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaskElChange", "description": "Fires before the value for the configuration attribute 'maskEl' changes. Return false to cancel the attribute change."}, "complete": {"type": "CustomEvent", "params": [{"type": "Number", "name": "value", "description": "  the current (final)  value"}], "description": "Fires at the end of the animation or immediately upon changing values if animation is not loaded"}, "maskElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maskElChange", "description": "Fires when the value for the configuration attribute 'maskEl' changes."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "animChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' changes."}, "beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "beforeBarElChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBarElChange", "description": "Fires before the value for the configuration attribute 'barEl' changes. Return false to cancel the attribute change."}, "maxValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxValueChange", "description": "Fires when the value for the configuration attribute 'maxValue' changes."}, "beforeDirectionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDirectionChange", "description": "Fires before the value for the configuration attribute 'direction' changes. Return false to cancel the attribute change."}, "directionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' changes."}, "beforeMinValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMinValueChange", "description": "Fires before the value for the configuration attribute 'minValue' changes. Return false to cancel the attribute change."}, "widthChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' changes."}}, "guessedname": "Prog", "methods": {"render": {"return": {"type": "YAHOO.widget.ProgressBar", "description": ""}, "description": "Renders the ProgressBar into the given container.  \nIf the container has other content, the ProgressBar will be appended to it.\nIf the second argument is provided, the ProgressBar will be inserted before the given child.\nThe method is chainable since it returns a reference to this instance.", "chainable": "", "params": [{"type": "HTML Element", "name": "el", "description": "   HTML element that will contain the ProgressBar"}, {"type": "HTML Element", "name": "before", "description": "   (optional) If present, the ProgressBar will be inserted before this element."}], "guessedname": "render", "guessedtype": "function"}, "_init": {"protected": "", "params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal definition of configuration values."}], "description": "Initialization code for the widget, separate from the constructor to allow for overriding/patching.\nIt is called after <a href=\"#method_initAttributes\">initAttributes</a>", "guessedname": "_init", "guessedtype": "function"}, "_valueChange": {"guessedname": "_valueChange", "return": {"type": "", "description": "void"}, "description": "Called in response to a change in the <a href=\"#config_value\">value</a> attribute.\nMoves the bar to reflect the new value", "private": "", "guessedtype": "function"}, "_fixEdges": {"guessedname": "_fixEdges", "return": {"type": "", "description": "void"}, "description": "Due to rounding differences, some browsers fail to cover the whole area \nwith the mask quadrants when the width or height is odd.  This method\nstretches the lower and/or right quadrants to make the difference.", "private": "", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal definition of configuration values."}], "description": "Implementation of Element's abstract method. Sets up config values.", "private": "", "guessedtype": "function"}, "_heightChange": {"return": {"type": "", "description": "void"}, "description": "Method called when the height attribute is changed", "private": "", "params": [{"type": "int or string", "name": "value", "description": " New height, in pixels if int or string including units"}], "guessedname": "_heightChange", "guessedtype": "function"}, "_setAriaText": {"guessedname": "_setAriaText", "return": {"type": "", "description": "void"}, "description": "Utility method to set the ARIA value attributes", "private": "", "guessedtype": "function"}, "destroy": {"return": {"type": "", "description": "void"}, "description": "Destroys the ProgressBar, related objects and unsubscribes from all events", "guessedname": "destroy", "guessedtype": "function"}, "_animSetter": {"guessedname": "_animSetter", "return": {"type": "", "description": "void"}, "description": "Called in response to a change in the <a href=\"#config_anim\">anim</a> attribute.\nIt creates and sets up or destroys the instance of the animation utility that will move the bar", "private": "", "guessedtype": "function"}, "redraw": {"return": {"type": "", "description": "void"}, "description": "Recalculates the bar size and position and redraws it", "guessedname": "redraw", "guessedtype": "function"}, "_widthChange": {"return": {"type": "", "description": "void"}, "description": "Method called when the height attribute is changed", "private": "", "params": [{"type": "int or string", "name": "value", "description": " New width, in pixels if int or string including units"}], "guessedname": "_widthChange", "guessedtype": "function"}, "_recalculateConstants": {"guessedname": "_recalculateConstants", "return": {"type": "", "description": "void"}, "description": "Calculates some auxiliary values to make the rendering faster", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "ProgressBar.js", "guessedtype": "function", "shortname": "ProgressBar", "properties": {"ProgressBar.MARKUP": {"description": "String containing the HTML string which is the basis for the Progress Bar.", "default": "(too long)", "static": "", "guessedname": "MARKUP", "guessedtype": "property", "type": "String", "final": ""}, "_previousValue": {"description": "The previous value setting for the bar.  Used mostly as information to event listeners", "default": "0", "private": "", "guessedname": "_previousValue", "guessedtype": "property", "type": "Number"}, "_barSizeFunction": {"description": "Function to be used to calculate bar size.  \nIt is picked from <a href=\"#property_barSizeFunctions\">_barSizeFunctions</a>\ndepending on direction and whether animation is active.", "default": "null", "private": "", "guessedname": "_barSizeFunction", "guessedtype": "property", "type": "{function}"}, "_rendered": {"description": "A flag to signal that rendering has already happened", "default": "false", "private": "", "guessedname": "_rendered", "guessedtype": "property", "type": "boolean"}, "_barSpace": {"description": "The actual space (in pixels) available for the bar within the mask (excludes margins)", "default": "100", "private": "", "guessedname": "_barSpace", "guessedtype": "property", "type": "Number"}, "_barSizeFunctions": {"guessedname": "b", "type": "{collection of functions}", "description": "Collection of functions used by to calculate the size of the bar.\nOne of this will be used depending on direction and whether animation is active.", "private": "", "guessedtype": "property"}}, "description": "The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,\na level meter, rating or any such simple linear measure.\nIt allows for highly customized styles including animation, vertical or horizontal and forward or reverse."}, "YAHOO.widget.MenuItem": {"name": "YAHOO.widget.MenuItem", "configs": {"submenu": {"default": "null", "type": "Menu|String|Object|<a href=\"http://www.w3.org/TR/2000/\nWD-DOM-Level-1-20000929/level-one-html.html#ID-58190037\">\nHTMLElement</a>", "description": "Object specifying the submenu to be appended to the \nmenu item.  The value can be one of the following: <ul><li>Object \nspecifying a Menu instance.</li><li>Object literal specifying the\nmenu to be created.  Format: <code>{ id: [menu id], itemdata: \n[<a href=\"YAHOO.widget.Menu.html#itemData\">array of values for \nitems</a>] }</code>.</li><li>String specifying the id attribute \nof the <code>&#60;div&#62;</code> element of the menu.</li><li>\nObject specifying the <code>&#60;div&#62;</code> element of the \nmenu.</li></ul>"}, "classname": {"default": "null", "type": "String", "description": "CSS class to be applied to the menu item's root \n<code>&#60;li&#62;</code> element.  The specified class(es) are \nappended in addition to the default class as specified by the menu \nitem's CSS_CLASS_NAME constant."}, "checked": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should be rendered \nwith a checkmark."}, "target": {"default": "null", "type": "String", "description": "String specifying the value for the \"target\" attribute \nof the menu item's anchor element. <strong>Specifying a target will \nrequire the user to click directly on the menu item's anchor node in\norder to cause the browser to navigate to the specified URL.</strong> \nWhen building a menu from existing HTML the value of this property \nwill be interpreted from the menu's markup."}, "url": {"default": "\"#\"", "type": "String", "description": "String specifying the URL for the menu item's anchor's \n\"href\" attribute.  When building a menu from existing HTML the value \nof this property will be interpreted from the menu's markup."}, "text": {"default": "\"\"", "type": "String", "description": "String specifying the text label for the menu item.  \nWhen building a menu from existing HTML the value of this property\nwill be interpreted from the menu's markup."}, "selected": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should \nbe highlighted."}, "strongemphasis": {"default": "false", "deprecated": "Use the \"text\" configuration property to add strong emphasis.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"&#60;strong&#62; \nSome Text&#60;/strong&#62;\");</code>", "type": "Boolean", "description": "Boolean indicating if the text of the menu item will be \nrendered with strong emphasis."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should be disabled.  \n(Disabled menu items are  dimmed and will not respond to user input \nor fire events.)"}, "emphasis": {"default": "false", "deprecated": "Use the \"text\" configuration property to add emphasis.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"&#60;em&#62;Some \nText&#60;/em&#62;\");</code>", "type": "Boolean", "description": "Boolean indicating if the text of the menu item will be \nrendered with emphasis."}, "helptext": {"default": "null", "deprecated": "Use \"text\" configuration property to add help text markup.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"Copy &#60;em \nclass=\\\"helptext\\\"&#62;Ctrl + C&#60;/em&#62;\");</code>", "type": "String|<a href=\"http://www.w3.org/TR/\n2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-58190037\">\nHTMLElement</a>", "description": "String specifying additional instructional text to \naccompany the text for the menu item."}, "onclick": {"default": "null", "type": "Object", "description": "Object literal representing the code to be executed when \nthe item is clicked.  Format:<br> <code> {<br> \n<strong>fn:</strong> Function,   &#47;&#47; The handler to call when \nthe event fires.<br> <strong>obj:</strong> Object, &#47;&#47; An \nobject to  pass back to the handler.<br> <strong>scope:</strong> \nObject &#47;&#47; The object to use for the scope of the handler.\n<br> } </code>"}, "keylistener": {"default": "null", "type": "Object", "description": "Object literal representing the key(s) that can be used \nto trigger the MenuItem's \"click\" event.  Possible attributes are \nshift (boolean), alt (boolean), ctrl (boolean) and keys (either an int \nor an array of ints representing keycodes)."}}, "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;li&#62;</code> element of the menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;option&#62;</code> element of the menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."}], "description": "Creates an item for a menu."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"mouseOutEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has left the menu item.  Passes back \nthe DOM Event object as an argument."}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a mouse button while the mouse \nis over the menu item.  Passes back the DOM Event object as an argument."}, "keyUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument."}, "focusEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item receives focus."}, "keyPressEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses an alphanumeric key when the \nmenu item has focus.  Passes back the DOM Event object as an argument."}, "mouseOverEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has entered the menu item.  Passes \nback the DOM Event object as an argument."}, "blurEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item loses the input focus."}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user mouses down on the menu item.  Passes \nback the DOM Event object as an argument."}, "clickEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user clicks the on the menu item.  Passes \nback the DOM Event object as an argument."}, "destroyEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item's <code>&#60;li&#62;</code> \nelement is removed from its parent <code>&#60;ul&#62;</code> element."}, "keyDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument."}}, "guessedname": "MenuItem", "methods": {"_createRootNodeStructure": {"description": "Creates the core DOM structure for the menu item.", "private": "", "guessedname": "_createRootNodeStructure", "guessedtype": "function"}, "hasFocus": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the menu item\nhas focus.", "guessedname": "hasFocus", "guessedtype": "function"}, "configURL": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"url\" configuration property of \nthe menu item changes.", "guessedname": "configURL", "guessedtype": "function"}, "focus": {"description": "Causes the menu item to receive the focus and fires the \nfocus event.", "guessedname": "focus", "guessedtype": "function"}, "configEmphasis": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"emphasis\" configuration property\nof the menu item changes.", "guessedname": "configEmphasis", "guessedtype": "function"}, "_dispatchClickEvent": {"description": "Dispatches a DOM \"click\" event to the anchor element of a \nMenuItem instance.", "private": "", "guessedname": "_dispatchClickEvent", "guessedtype": "function"}, "configTarget": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"target\" configuration property \nof the menu item changes.", "guessedname": "configTarget", "guessedtype": "function"}, "addClassNameForState": {"guessedname": "addClassNameForState", "params": [{"type": "String", "name": "state", "description": " String representing a state - \"disabled,\" \"checked,\" etc."}], "description": "Applies a class name to a MenuItem instance's &#60;LI&#62; and &#60;A&#62; elements\nthat represents a MenuItem's state - \"disabled,\" \"checked,\" etc.", "private": "", "guessedtype": "function"}, "getClassNameForState": {"guessedname": "getClassNameForState", "params": [{"type": "String", "name": "prefix", "description": " String representing the prefix for the class name"}, {"type": "String", "name": "state", "description": " String representing a state - \"disabled,\" \"checked,\" etc."}], "description": "Returns a class name for the specified prefix and state.  If the class name does not \nyet exist, it is created and stored in the CLASS_NAMES object to increase performance.", "private": "", "guessedtype": "function"}, "configStrongEmphasis": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"strongemphasis\" configuration \nproperty of the menu item changes.", "guessedname": "configStrongEmphasis", "guessedtype": "function"}, "_createKeyListener": {"guessedname": "_createKeyListener", "params": [{"type": "String", "name": "type", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "args", "description": " Array of arguments sent when the event was fired."}, {"type": "Array", "name": "keyData", "description": " Array of arguments sent when the event was fired."}], "description": "\"show\" event handler for a Menu instance - responsible for \nsetting up the KeyListener instance for a MenuItem.", "private": "", "guessedtype": "function"}, "configSubmenu": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"submenu\" configuration property \nof the menu item changes.", "guessedname": "configSubmenu", "guessedtype": "function"}, "getNextSibling": {"return": {"type": "", "description": "YAHOO.widget.MenuItem"}, "description": "Finds the menu item's next sibling.", "guessedname": "getNextSibling", "guessedtype": "function"}, "configOnClick": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"onclick\" configuration property \nof the menu item changes.", "guessedname": "configOnClick", "guessedtype": "function"}, "getPreviousEnabledSibling": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Finds the menu item's previous enabled sibling.", "guessedname": "getPreviousEnabledSibling", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;li&#62;</code> element of the menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu item."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;option&#62;</code> element of the menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."}], "description": "The MenuItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu item.", "guessedname": "toString", "guessedtype": "function"}, "removeClassNameForState": {"guessedname": "removeClassNameForState", "params": [{"type": "String", "name": "state", "description": " String representing a state - \"disabled,\" \"checked,\" etc."}], "description": "Removes a class name from a MenuItem instance's &#60;LI&#62; and &#60;A&#62; elements\nthat represents a MenuItem's state - \"disabled,\" \"checked,\" etc.", "private": "", "guessedtype": "function"}, "_onSubmenuBeforeHide": {"guessedname": "_onSubmenuBeforeHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforehide\" Custom Event handler for a submenu.", "private": "", "guessedtype": "function"}, "blur": {"description": "Causes the menu item to lose focus and fires the \nblur event.", "guessedname": "blur", "guessedtype": "function"}, "configHelpText": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"helptext\" configuration property \nof the menu item changes.", "guessedname": "configHelpText", "guessedtype": "function"}, "destroy": {"description": "Removes the menu item's <code>&#60;li&#62;</code> element \nfrom its parent <code>&#60;ul&#62;</code> element.", "guessedname": "destroy", "guessedtype": "function"}, "getNextEnabledSibling": {"return": {"type": "", "description": "YAHOO.widget.MenuItem"}, "description": "Finds the menu item's next enabled sibling.", "guessedname": "getNextEnabledSibling", "guessedtype": "function"}, "configChecked": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"checked\" configuration property \nof the menu item changes.", "guessedname": "configChecked", "guessedtype": "function"}, "configKeyListener": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "Event handler for when the \"keylistener\" configuration \nproperty of a menu item changes.", "guessedname": "configKeyListener", "guessedtype": "function"}, "configDisabled": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"disabled\" configuration property \nof the menu item changes.", "guessedname": "configDisabled", "guessedtype": "function"}, "configSelected": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"selected\" configuration property \nof the menu item changes.", "guessedname": "configSelected", "guessedtype": "function"}, "getPreviousSibling": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Finds the menu item's previous sibling.", "guessedname": "getPreviousSibling", "guessedtype": "function"}, "_initSubTree": {"description": "Iterates the source element's childNodes collection and uses \nthe child nodes to instantiate other menus.", "private": "", "guessedname": "_initSubTree", "guessedtype": "function"}, "configClassName": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"classname\" configuration \nproperty of a menu item changes.", "guessedname": "configClassName", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"text\" configuration property of \nthe menu item changes.", "guessedname": "configText", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes an item's configurable properties.", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "file": "menuitem.js", "guessedtype": "function", "shortname": "MenuItem", "properties": {"_oSubmenu": {"description": "Object reference to the menu item's submenu.", "default": "null", "private": "", "guessedname": "_oSubmenu", "guessedtype": "property", "type": "YAHOO.widget.Menu"}, "index": {"default": "null", "type": "Number", "description": "Number indicating the ordinal position of the menu item in \nits group.", "guessedname": "index", "guessedtype": "property"}, "CSS_LABEL_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu item's <code>&#60;a&#62;</code> element.", "default": "\"yuimenuitemlabel\"", "guessedname": "CSS_LABEL_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;</code> element of the menu item.", "default": "\"yuimenuitem\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "parent": {"default": "null", "type": "YAHOO.widget.Menu", "description": "Object reference to the menu item's parent menu.", "guessedname": "parent", "guessedtype": "property"}, "SUBMENU_TYPE": {"final": "", "type": "YAHOO.widget.Menu", "description": "Object representing the type of menu to instantiate and \nadd when parsing the child nodes of the menu item's source HTML element.", "guessedname": "SUBMENU_TYPE", "guessedtype": "property"}, "srcElement": {"default": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-74680021\">HTMLLIElement</a>|<a href=\"http://www.\nw3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-38450247\"\n>HTMLOptGroupElement</a>|<a href=\"http://www.w3.org/TR/2000/WD-DOM-\nLevel-1-20000929/level-one-html.html#ID-70901257\">HTMLOptionElement</a>", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>|<a href=\"http://www.w3.\norg/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-38450247\">\nHTMLOptGroupElement</a>|<a href=\"http://www.w3.org/TR/2000/WD-DOM-\nLevel-1-20000929/level-one-html.html#ID-70901257\">HTMLOptionElement</a>", "description": "Object reference to the HTML element (either \n<code>&#60;li&#62;</code>, <code>&#60;optgroup&#62;</code> or \n<code>&#60;option&#62;</code>) used create the menu item.", "guessedname": "srcElement", "guessedtype": "property"}, "value": {"default": "null", "type": "Object", "description": "Object reference to the menu item's value.", "guessedname": "value", "guessedtype": "property"}, "element": {"default": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level\n-one-html.html#ID-74680021\">HTMLLIElement</a>", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>", "description": "Object reference to the menu item's \n<code>&#60;li&#62;</code> element.", "guessedname": "element", "guessedtype": "property"}, "_sClassName": {"description": "The current value of the \"classname\" configuration attribute.", "default": "null", "private": "", "guessedname": "_sClassName", "guessedtype": "property", "type": "String"}, "_oAnchor": {"description": "Object reference to the menu item's \n<code>&#60;a&#62;</code> element.", "default": "null", "private": "", "guessedname": "_oAnchor", "guessedtype": "property", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-48250443\">HTMLAnchorElement</a>"}, "constructor": {"default": "YAHOO.widget.MenuItem", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the menu item's constructor function.", "guessedname": "constructor", "guessedtype": "property"}, "groupIndex": {"default": "null", "type": "Number", "description": "Number indicating the index of the group to which the menu \nitem belongs.", "guessedname": "groupIndex", "guessedtype": "property"}, "browser": {"deprecated": "Use YAHOO.env.ua", "type": "String", "description": "String representing the browser.", "guessedname": "browser", "guessedtype": "property"}, "_oHelpTextEM": {"description": "Object reference to the menu item's help text \n<code>&#60;em&#62;</code> element.", "default": "null", "private": "", "guessedname": "_oHelpTextEM", "guessedtype": "property", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-58190037\">HTMLElement</a>"}, "id": {"default": "null", "type": "String", "description": "Id of the menu item's root <code>&#60;li&#62;</code> \nelement.  This property should be set via the constructor using the \nconfiguration object literal.  If an id is not specified, then one will \nbe created using the \"generateId\" method of the Dom utility.", "guessedname": "id", "guessedtype": "property"}, "_oOnclickAttributeValue": {"description": "Object reference to the menu item's current value for the \n\"onclick\" configuration attribute.", "default": "null", "private": "", "guessedname": "_oOnclickAttributeValue", "guessedtype": "property", "type": "Object"}}, "description": "Creates an item for a menu."}, "YAHOO.widget.CartesianSeries": {"name": "YAHOO.widget.CartesianSeries", "constructors": [{"description": "Functionality common to most series appearing in cartesian charts.\nGenerally, a <code>CartesianSeries</code> object shouldn't be\ninstantiated directly. Instead, a subclass with a concrete implementation\nshould be used."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "CartesianSeries", "uses": ["YAHOO.widget.Series"], "file": "Series.js", "guessedtype": "function", "shortname": "CartesianSeries", "properties": {"yField": {"type": "String", "description": "The field used to access the y-axis value from the items from the data source.", "guessedname": "yField", "guessedtype": "property"}, "xField": {"type": "String", "description": "The field used to access the x-axis value from the items from the data source.", "guessedname": "xField", "guessedtype": "property"}, "showInLegend": {"type": "Boolean", "description": "When a Legend is present, indicates whether the series will show in the legend.", "guessedname": "showInLegend", "guessedtype": "property"}, "axis": {"type": "String", "description": "Indicates which axis the series will bind to", "guessedname": "axis", "guessedtype": "property"}}, "description": "Functionality common to most series appearing in cartesian charts.\nGenerally, a <code>CartesianSeries</code> object shouldn't be\ninstantiated directly. Instead, a subclass with a concrete implementation\nshould be used."}, "YAHOO.util.Scroll": {"name": "YAHOO.util.Scroll", "constructors": [{"params": [{"type": "String or HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "Scroll", "extends": "YAHOO.util.ColorAnim", "superclass": "YAHOO.util.ColorAnim", "file": "Scroll.js", "guessedtype": "function", "shortname": "Scroll", "requires": "YAHOO.util.Anim", "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>"}, "YAHOO.widget.Dialog": {"name": "YAHOO.widget.Dialog", "configs": {"buttons": {"default": "\"none\"", "type": "{Array|String}", "description": "Array of object literals, each containing a set of properties \ndefining a button to be appended into the Dialog's footer.\n<p>Each button object in the buttons array can have three properties:</p>\n<dl>\n<dt>text:</dt>\n<dd>\nThe text that will display on the face of the button. The text can \ninclude HTML, as long as it is compliant with HTML Button specifications.\n</dd>\n<dt>handler:</dt>\n<dd>Can be either:\n<ol>\n<li>A reference to a function that should fire when the \nbutton is clicked.  (In this case scope of this function is \nalways its Dialog instance.)</li>\n<li>An object literal representing the code to be \nexecuted when the button is clicked.\n<p>Format:</p>\n<p>\n<code>{\n<br>\n<strong>fn:</strong> Function, &#47;&#47;\nThe handler to call when  the event fires.\n<br>\n<strong>obj:</strong> Object, &#47;&#47; \nAn  object to pass back to the handler.\n<br>\n<strong>scope:</strong> Object &#47;&#47; \nThe object to use for the scope of the handler.\n<br>\n}</code>\n</p>\n</li>\n</ol>\n</dd>\n<dt>isDefault:</dt>\n<dd>\nAn optional boolean value that specifies that a button \nshould be highlighted and focused by default.\n</dd>\n</dl>\n<em>NOTE:</em>If the YUI Button Widget is included on the page, \nthe buttons created will be instances of YAHOO.widget.Button. \nOtherwise, HTML Buttons (<code>&#60;BUTTON&#62;</code>) will be \ncreated."}, "hideaftersubmit": {"default": "true", "type": "Boolean", "description": "This property is used to configure whether or not the \ndialog should be automatically hidden after submit."}, "postdata": {"default": "null", "type": "String", "description": "Any additional post data which needs to be sent when using the \n<a href=\"#config_postmethod\">async</a> postmethod for dialog POST submissions.\nThe format for the post data string is defined by Connection Manager's \n<a href=\"YAHOO.util.Connect.html#method_asyncRequest\">asyncRequest</a> \nmethod."}, "postmethod": {"default": "async", "type": "String", "description": "The method to use for posting the Dialog's form. Possible values \nare \"async\", \"form\", and \"manual\"."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Dialog <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Dialog. See configuration \ndocumentation for more details."}], "description": "<p>\nDialog is an implementation of Panel that can be used to submit form \ndata.\n</p>\n<p>\nBuilt-in functionality for buttons with event handlers is included. \nIf the optional YUI Button dependancy is included on the page, the buttons\ncreated will be instances of YAHOO.widget.Button, otherwise regular HTML buttons\nwill be created.\n</p>\n<p>\nForms can be processed in 3 ways -- via an asynchronous Connection utility call, \na simple form POST or GET, or manually. The YUI Connection utility should be\nincluded if you're using the default \"async\" postmethod, but is not required if\nyou're using any of the other postmethod values.\n</p>"}], "namespace": "YAHOO.widget", "module": "container", "events": {"beforeSubmitEvent": {"description": "CustomEvent fired prior to submission", "guessedname": "beforeSubmitEvent", "guessedtype": "property"}, "asyncSubmitEvent": {"params": [{"type": "Object", "name": "conn", "description": " The connection object, returned by YAHOO.util.Connect.asyncRequest"}], "description": "CustomEvent fired after asynchronous submission, before the generic submit event is fired", "guessedname": "asyncSubmitEvent", "guessedtype": "property"}, "submitEvent": {"description": "CustomEvent fired after submission", "guessedname": "submitEvent", "guessedtype": "property"}, "manualSubmitEvent": {"description": "CustomEvent fired for manual submission, before the generic submit event is fired", "guessedname": "manualSubmitEvent", "guessedtype": "property"}, "formSubmitEvent": {"description": "CustomEvent fired after form-based submission, before the generic submit event is fired", "guessedname": "formSubmitEvent", "guessedtype": "property"}, "cancelEvent": {"description": "CustomEvent fired after cancel", "guessedname": "cancelEvent", "guessedtype": "property"}}, "guessedname": "Dialog", "methods": {"configButtons": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler for the \"buttons\" configuration property", "guessedname": "configButtons", "guessedtype": "function"}, "getButtons": {"return": {"type": "Array", "description": ""}, "description": "Returns an array containing each of the Dialog's \nbuttons, by default an array of HTML <code>&#60;BUTTON&#62;</code> \nelements.  If the Dialog's buttons were created using the \nYAHOO.widget.Button class (via the inclusion of the optional Button \ndependancy on the page), an array of YAHOO.widget.Button instances \nis returned.", "guessedname": "getButtons", "guessedtype": "function"}, "doSubmit": {"description": "Submits the Dialog's form depending on the value of the \n\"postmethod\" configuration property.  <strong>Please note:\n</strong> As of version 2.3 this method will automatically handle \nasyncronous file uploads should the Dialog instance's form contain \n<code>&#60;input type=\"file\"&#62;</code> elements.  If a Dialog \ninstance will be handling asyncronous file uploads, its \n<code>callback</code> property will need to be setup with a \n<code>upload</code> handler rather than the standard \n<code>success</code> and, or <code>failure</code> handlers.  For more \ninformation, see the <a href=\"http://developer.yahoo.com/yui/\nconnection/#file\">Connection Manager documenation on file uploads</a>.", "guessedname": "doSubmit", "guessedtype": "function"}, "configClose": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"close\" property is \nchanged. The method controls the appending or hiding of the close\nicon at the top right of the Dialog.", "guessedname": "configClose", "guessedtype": "function"}, "_submitHandler": {"protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM Event object"}], "description": "Internal handler for the form submit event", "guessedname": "_submitHandler", "guessedtype": "function"}, "_doClose": {"protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": ""}], "description": "Event handler for the close icon", "guessedname": "_doClose", "guessedtype": "function"}, "cancel": {"description": "Executes the cancel of the Dialog followed by a hide.", "guessedname": "cancel", "guessedtype": "function"}, "configPostMethod": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler for the \"postmethod\" configuration property", "guessedname": "configPostMethod", "guessedtype": "function"}, "focusFirstButton": {"description": "Sets the focus to the first button created via the \"buttons\"\nconfiguration property.", "guessedname": "focusFirstButton", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Dialog which are fired \nautomatically at appropriate times by the Dialog class.", "guessedname": "initEvents", "guessedtype": "function"}, "focusFirst": {"description": "<p>\nSets focus to the first focusable element in the Dialog's form if found, \nelse, the default button if found, else the first button defined via the \n\"buttons\" configuration property.\n</p>\n<p>\nThis method is invoked when the Dialog is made visible.\n</p>", "guessedname": "focusFirst", "guessedtype": "function"}, "submit": {"description": "Executes a submit of the Dialog if validation \nis successful. By default the Dialog is hidden\nafter submission, but you can set the \"hideaftersubmit\"\nconfiguration property to false, to prevent the Dialog\nfrom being hidden.", "guessedname": "submit", "guessedtype": "function"}, "focusLastButton": {"description": "Sets the focus to the last button created via the \"buttons\" \nconfiguration property.", "guessedname": "focusLastButton", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Dialog <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Dialog. \nSee configuration documentation for more details."}], "description": "The Dialog initialization method, which is executed for Dialog and \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Dialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "focusDefaultButton": {"description": "Sets the focus to the button that is designated as the default via \nthe \"buttons\" configuration property. By default, this method is \ncalled when the Dialog is made visible.", "guessedname": "focusDefaultButton", "guessedtype": "function"}, "getData": {"return": {"type": "Object", "description": "A JSON object reprsenting the data of the \ncurrent form."}, "description": "Returns a JSON-compatible data structure representing the data \ncurrently contained in the form.", "guessedname": "getData", "guessedtype": "function"}, "blurButtons": {"description": "Blurs all the buttons defined via the \"buttons\" \nconfiguration property.", "guessedname": "blurButtons", "guessedtype": "function"}, "focusLast": {"description": "Sets focus to the last element in the Dialog's form or the last \nbutton defined via the \"buttons\" configuration property.", "guessedname": "focusLast", "guessedtype": "function"}, "destroy": {"description": "Removes the Panel element from the DOM and sets all child elements \nto null.", "guessedname": "destroy", "guessedtype": "function"}, "validate": {"description": "Built-in function hook for writing a validation function that will \nbe checked for a \"true\" value prior to a submit. This function, as \nimplemented by default, always returns true, so it should be \noverridden if validation is necessary.", "guessedname": "validate", "guessedtype": "function"}, "registerForm": {"description": "Prepares the Dialog's internal FORM object, creating one if one is\nnot currently present.", "guessedname": "registerForm", "guessedtype": "function"}, "setFirstLastFocusable": {"description": "Configures instance properties, pointing to the \nfirst and last focusable elements in the Dialog's form.", "guessedname": "setFirstLastFocusable", "guessedtype": "function"}, "_getFormAttributes": {"return": {"type": "Object", "description": "Object literal, with method and action String properties."}, "description": "Retrieves important attributes (currently method and action) from\nthe form element, accounting for any elements which may have the same name \nas the attributes. Defaults to \"POST\" and \"\" for method and action respectively\nif the attribute cannot be retrieved.", "protected": "", "params": [{"type": "HTMLFormElement", "name": "oForm", "description": " The HTML Form element from which to retrieve the attributes"}], "guessedname": "_getFormAttributes", "guessedtype": "function"}, "setTabLoop": {"params": [{"type": "HTMLElement", "name": "firstElement", "description": ""}, {"type": "HTMLElement", "name": "lastElement", "description": ""}], "description": "Sets up a tab, shift-tab loop between the first and last elements\nprovided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener\ninstance properties, which are reset everytime this method is invoked.", "guessedname": "setTabLoop", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the Dialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "_getButton": {"return": {"type": "YAHOO.widget.Button|HTMLElement", "description": ""}, "description": "Helper method to normalize button references. It either returns the \nYUI Button instance for the given element if found,\nor the passes back the HTMLElement reference if a corresponding YUI Button\nreference is not found or YAHOO.widget.Button does not exist on the page.", "private": "", "params": [{"type": "HTMLElement", "name": "button", "description": ""}], "guessedname": "_getButton", "guessedtype": "function"}}, "extends": "YAHOO.widget.Panel", "superclass": "YAHOO.widget.Panel", "file": "Dialog.js", "guessedtype": "function", "shortname": "Dialog", "properties": {"YAHOO.widget.Dialog.CSS_DIALOG": {"description": "Constant representing the default CSS class used for a Dialog", "static": "", "guessedname": "CSS_DIALOG", "guessedtype": "property", "type": "String", "final": ""}, "form": {"default": "null", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-40002357\">HTMLFormElement</a>", "description": "Object reference to the Dialog's \n<code>&#60;form&#62;</code> element.", "guessedname": "form", "guessedtype": "property"}, "callback.success": {"type": "Function", "description": "The function to execute upon success of the \nConnection submission (when the form does not\ncontain a file input element).", "guessedname": "success", "guessedtype": "property"}, "callback.failure": {"type": "Function", "description": "The function to execute upon failure of the \nConnection submission", "guessedname": "failure", "guessedtype": "property"}, "callback": {"type": "Object", "description": "The internally maintained callback object for use with the \nConnection utility. The format of the callback object is \nsimilar to Connection Manager's callback object and is \nsimply passed through to Connection Manager when the async \nrequest is made.", "guessedname": "callback", "guessedtype": "property"}, "EVENT_TYPES": {"description": "Constant representing the name of the Dialog's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "callback.upload": {"type": "Function", "description": "<p>\nThe function to execute upon success of the \nConnection submission, when the form contains\na file input element.\n</p>\n<p>\n<em>NOTE:</em> Connection manager will not\ninvoke the success or failure handlers for the file\nupload use case. This will be the only callback\nhandler invoked.\n</p>\n<p>\nFor more information, see the <a href=\"http://developer.yahoo.com/yui/connection/#file\">\nConnection Manager documenation on file uploads</a>.\n</p>"}, "DEFAULT_CONFIG": {"description": "Constant representing the Dialog's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "callback.argument": {"type": "Object", "description": "The arbitraty argument or arguments to pass to the Connection \ncallback functions", "guessedname": "argument", "guessedtype": "property"}}, "description": "<p>\nDialog is an implementation of Panel that can be used to submit form \ndata.\n</p>\n<p>\nBuilt-in functionality for buttons with event handlers is included. \nIf the optional YUI Button dependancy is included on the page, the buttons\ncreated will be instances of YAHOO.widget.Button, otherwise regular HTML buttons\nwill be created.\n</p>\n<p>\nForms can be processed in 3 ways -- via an asynchronous Connection utility call, \na simple form POST or GET, or manually. The YUI Connection utility should be\nincluded if you're using the default \"async\" postmethod, but is not required if\nyou're using any of the other postmethod values.\n</p>"}, "YAHOO.util.Color": {"description": "Provides color conversion and validation utils", "namespace": "YAHOO.util", "module": "colorpicker", "guessedname": "Color", "methods": {"hsv2rgb": {"return": {"type": "[int, int, int]", "description": "the red, green, blue values in\ndecimal."}, "params": [{"type": "int|[int, float, float]", "name": "h", "description": "  the hue, or an\narray containing all three parameters"}, {"type": "float", "name": "s", "description": "  the saturation"}, {"type": "float", "name": "v", "description": "  the value/brightness"}], "description": "Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]", "guessedname": "hsv2rgb", "guessedtype": "function"}, "websafe": {"return": {"type": "[int, int, int]", "description": "an array containing the closes\nwebsafe rgb colors."}, "params": [{"type": "int|[int, int, int]", "name": "r", "description": "  the red value, or an\narray containing all three parameters"}, {"type": "int", "name": "g", "description": "  the green value"}, {"type": "int", "name": "b", "description": "  the blue value"}], "description": "Returns the closest websafe color to the supplied rgb value.", "guessedname": "websafe", "guessedtype": "function"}, "rgb2hsv": {"return": {"type": "[int, float, float]", "description": "the value converted to hsv"}, "params": [{"type": "int|[int, int, int]", "name": "r", "description": "  the red value, or an\narray containing all three parameters"}, {"type": "int", "name": "g", "description": "  the green value"}, {"type": "int", "name": "b", "description": "  the blue value"}], "description": "Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]", "guessedname": "rgb2hsv", "guessedtype": "function"}, "hex2dec": {"return": {"type": "int", "description": "the decimal"}, "params": [{"type": "string", "name": "str", "description": "  the hex pair to convert"}], "description": "Converts a hex pair 00...FF to an int 0...255", "guessedname": "hex2dec", "guessedtype": "function"}, "rgb2hex": {"return": {"type": "string", "description": "the hex string"}, "params": [{"type": "int|[int, int, int]", "name": "r", "description": "  the red value, or an\narray containing all three parameters"}, {"type": "int", "name": "g", "description": "  the green value"}, {"type": "int", "name": "b", "description": "  the blue value"}], "description": "Converts decimal rgb values into a hex string\n255,255,255 -> FFFFFF", "guessedname": "rgb2hex", "guessedtype": "function"}, "real2dec": {"return": {"type": "int", "description": "a number 0-255"}, "params": [{"type": "float", "name": "n", "description": "  the number to convert"}], "description": "Converts 0-1 to 0-255", "guessedname": "real2dec", "guessedtype": "function"}, "dec2hex": {"return": {"type": "string", "description": "the hex equivalent"}, "params": [{"type": "int", "name": "n", "description": "  the number to convert"}], "description": "Converts an int 0...255 to hex pair 00...FF", "guessedname": "dec2hex", "guessedtype": "function"}, "hex2rgb": {"return": {"type": "[int, int, int]", "description": "an array containing the rgb values"}, "params": [{"type": "string", "name": "str", "description": "  the hex string"}], "description": "Converts a hex string to rgb", "guessedname": "hex2rgb", "guessedtype": "function"}}, "file": "Color.js", "guessedtype": "function", "shortname": "Color", "name": "YAHOO.util.Color"}, "YAHOO.widget.SimpleDialog": {"name": "YAHOO.widget.SimpleDialog", "configs": {"text": {"default": "\"\"", "type": "String", "description": "Sets the text for the SimpleDialog"}, "icon": {"default": "\"none\"", "type": "String", "description": "Sets the informational icon for the SimpleDialog"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the SimpleDialog \n<em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this SimpleDialog. See \nconfiguration documentation for more details."}], "description": "SimpleDialog is a simple implementation of Dialog that can be used to \nsubmit a single value. Forms can be processed in 3 ways -- via an \nasynchronous Connection utility call, a simple form POST or GET, \nor manually."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "SimpleDialog", "methods": {"configIcon": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Fired when the \"icon\" property is set.", "guessedname": "configIcon", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the SimpleDialog \n<em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this \nSimpleDialog. See configuration documentation for more details."}], "description": "The SimpleDialog initialization method, which is executed for \nSimpleDialog and all of its subclasses. This method is automatically \ncalled by the constructor, and  sets up all DOM references for \npre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "bodyContent", "description": " The HTML used to set the body. \nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the body innerHTML\nset to their default toString implementations.\n<em>OR</em>"}, {"type": "HTMLElement", "name": "bodyContent", "description": " The HTMLElement to add as the first and only child of the body element.\n<em>OR</em>"}, {"type": "DocumentFragment", "name": "bodyContent", "description": " The document fragment \ncontaining elements which are to be added to the body"}], "description": "<p>\nSets the SimpleDialog's body content to the HTML specified. \nIf no body is present, one will be automatically created. \nAn empty string can be passed to the method to clear the contents of the body.\n</p>\n<p><strong>NOTE:</strong> SimpleDialog provides the <a href=\"#config_text\">text</a>\nand <a href=\"#config_icon\">icon</a> configuration properties to set the contents\nof it's body element in accordance with the UI design for a SimpleDialog (an \nicon and message text). Calling setBody on the SimpleDialog will not enforce this \nUI design constraint and will replace the entire contents of the SimpleDialog body. \nIt should only be used if you wish the replace the default icon/text body structure \nof a SimpleDialog with your own custom markup.</p>"}, "toString": {"return": {"type": "String", "description": "The string representation of the SimpleDialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Fired when the \"text\" property is set.", "guessedname": "configText", "guessedtype": "function"}, "registerForm": {"description": "Prepares the SimpleDialog's internal FORM object, creating one if one \nis not currently present, and adding the value hidden field.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the SimpleDialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Dialog", "superclass": "YAHOO.widget.Dialog", "file": "SimpleDialog.js", "guessedtype": "function", "shortname": "SimpleDialog", "properties": {"YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG": {"description": "Constant representing the default CSS class used for a SimpleDialog", "static": "", "guessedname": "CSS_SIMPLEDIALOG", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_INFO": {"description": "Constant for the standard network icon for info", "static": "", "guessedname": "ICON_INFO", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME": {"description": "Constant representing the name of the CSS class applied to the element \ncreated by the \"icon\" configuration property.", "static": "", "guessedname": "ICON_CSS_CLASSNAME", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_BLOCK": {"description": "Constant for the standard network icon for a blocking action", "static": "", "guessedname": "ICON_BLOCK", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_WARN": {"description": "Constant for the standard network icon for warn", "static": "", "guessedname": "ICON_WARN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_ALARM": {"description": "Constant for the standard network icon for alarm", "static": "", "guessedname": "ICON_ALARM", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_TIP": {"description": "Constant for the standard network icon for a tip", "static": "", "guessedname": "ICON_TIP", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_HELP": {"description": "Constant for the standard network icon for help", "static": "", "guessedname": "ICON_HELP", "guessedtype": "property", "type": "String", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the SimpleDialog's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "SimpleDialog is a simple implementation of Dialog that can be used to \nsubmit a single value. Forms can be processed in 3 ways -- via an \nasynchronous Connection utility call, a simple form POST or GET, \nor manually."}, "YAHOO.util.Connect": {"name": "YAHOO.util.Connect", "namespace": "YAHOO.util", "module": "connection", "guessedname": "Connect", "methods": {"asyncRequest": {"return": {"type": "object", "description": "Returns the connection object"}, "description": "Method for initiating an asynchronous request via the XHR object.", "static": "", "guessedname": "asyncRequest", "guessedtype": "function", "params": [{"type": "string", "name": "method", "description": " HTTP transaction method"}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource"}, {"type": "callback", "name": "callback", "description": " User-defined callback function or object"}, {"type": "string", "name": "postData", "description": " POST body"}], "public": ""}, "isCallInProgress": {"return": {"type": "boolean", "description": ""}, "description": "Determines if the transaction is still being processed.", "static": "", "guessedname": "isCallInProgress", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest"}], "public": ""}, "createResponseObject": {"return": {"type": "object", "description": ""}, "description": "This method evaluates the server response, creates and returns the results via\nits properties.  Success and failure cases will differ in the response\nobject's property values.", "private": "", "static": "", "guessedname": "createResponseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}]}, "_xdrStart": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "The", "description": " transaction object."}, {"type": "string", "name": "The", "description": " transaction's callback object."}], "description": "This method fires the global and transaction start\nevents.", "private": ""}, "abort": {"return": {"type": "boolean", "description": ""}, "description": "Method to terminate a transaction, if it has not reached readyState 4.", "static": "", "guessedname": "abort", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest."}, {"type": "object", "name": "callback", "description": "  User-defined callback object."}, {"type": "string", "name": "isTimeout", "description": " boolean to indicate if abort resulted from a callback timeout."}], "public": ""}, "transport": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "URI", "description": " to connection.swf."}], "description": "This method instantiates the Flash transport and\nestablishes a static reference to it, used for all XDR requests.", "public": ""}, "setDefaultXhrHeader": {"return": {"type": "", "description": "void"}, "description": "Member to override the default transaction header..", "static": "", "guessedname": "setDefaultXhrHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "setForm": {"return": {"type": "string", "description": "string of the HTML form field name and value pairs.."}, "static": "", "params": [{"type": "string || object", "name": "form", "description": " id or name attribute, or form object."}, {"type": "boolean", "name": "optional", "description": " enable file upload."}, {"type": "boolean", "name": "optional", "description": " enable file upload over SSL in IE only."}], "description": "This method assembles the form label and value pairs and\nconstructs an encoded string.\nasyncRequest() will automatically initialize the transaction with a\na HTTP header Content-Type of application/x-www-form-urlencoded.", "public": ""}, "uploadFile": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "int", "name": "id", "description": " The transaction id."}, {"type": "object", "name": "callback", "description": " User-defined callback object."}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource."}, {"type": "string", "name": "postData", "description": " POST data to be submitted in addition to HTML form."}], "description": "Uploads HTML form, inclusive of files/attachments, using the\niframe created in createFrame to facilitate the transaction.", "private": ""}, "resetFormState": {"static": "", "return": {"type": "void", "description": ""}, "description": "Resets HTML form properties when an HTML form or HTML form\nwith file upload transaction is sent.", "private": ""}, "getConnectionObject": {"return": {"type": "object", "description": ""}, "description": "This method is called by asyncRequest to create a\nvalid connection object for the transaction.  It also passes a\ntransaction id and increments the transaction id counter.", "private": "", "static": "", "guessedname": "getConnectionObject", "guessedtype": "function"}, "createExceptionObject": {"return": {"type": "object", "description": ""}, "description": "If a transaction cannot be completed due to dropped or closed connections,\nthere may be not be enough information to build a full response object.\nThe failure callback will be fired and this specific condition can be identified\nby a status property value of 0.\nIf an abort was successful, the status property will report a value of -1.", "private": "", "static": "", "guessedname": "createExceptionObject", "guessedtype": "function", "params": [{"type": "int", "name": "tId", "description": " The Transaction Id"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the exception case is caused by a transaction abort"}]}, "handleXdrResponse": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "The", "description": " response object sent from the Flash transport."}], "description": "This method is the initial response handler\nfor XDR transactions.  The Flash transport calls this\nfunction and sends the response payload.", "private": ""}, "resetDefaultHeaders": {"return": {"type": "void", "description": ""}, "description": "Resets the default HTTP headers object", "static": "", "guessedname": "resetDefaultHeaders", "guessedtype": "function", "public": ""}, "xdr": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "The", "description": " transaction object."}, {"type": "string", "name": "HTTP", "description": " request method."}, {"type": "string", "name": "URI", "description": " for the transaction."}, {"type": "object", "name": "The", "description": " transaction's callback object."}, {"type": "object", "name": "The", "description": " JSON object used as HTTP POST data."}], "description": "This method calls the public method on the\nFlash transport to start the XDR transaction.  It is analogous\nto Connection Manager's asyncRequest method.", "private": ""}, "appendPostData": {"return": {"type": "array", "description": "formElements Collection of hidden fields."}, "static": "", "params": [{"type": "string", "name": "postData", "description": " The HTTP POST data"}], "description": "Parses the POST data and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": ""}, "releaseObject": {"return": {"type": "void", "description": ""}, "description": "Dereference the XHR instance and the connection object after the transaction is completed.", "private": "", "static": "", "guessedname": "releaseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}]}, "createXhrObject": {"return": {"type": "", "description": "object"}, "description": "Instantiates a XMLHttpRequest object and returns an object with two properties:\nthe XMLHttpRequest instance and the transaction id.", "private": "", "static": "", "guessedname": "createXhrObject", "guessedtype": "function", "params": [{"type": "int", "name": "transactionId", "description": " Property containing the transaction id for this transaction."}]}, "handleTransactionResponse": {"return": {"type": "void", "description": ""}, "description": "This method attempts to interpret the server response and\ndetermine whether the transaction was successful, or if an error or\nexception was encountered.", "private": "", "static": "", "guessedname": "handleTransactionResponse", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "object", "name": "callback", "description": " The user-defined callback object"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the transaction was terminated via abort()."}]}, "createFrame": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "optional", "description": " qualified path of iframe resource for SSL in IE."}], "description": "Creates an iframe to be used for form file uploads.  It is remove from the\ndocument upon completion of the upload transaction.", "private": ""}, "initCustomEvents": {"return": {"type": "void", "description": ""}, "description": "This method creates and subscribes custom events,\nspecific to each transaction", "private": "", "static": "", "guessedname": "initCustomEvents", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "handleReadyState": {"return": {"type": "void", "description": ""}, "description": "This method serves as a timer that polls the XHR object's readyState\nproperty during a transaction, instead of binding a callback to the\nonreadystatechange event.  Upon readyState 4, handleTransactionResponse\nwill process the response, and the timer will be cleared.", "private": "", "static": "", "guessedname": "handleReadyState", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "setDefaultPostHeader": {"return": {"type": "", "description": "void"}, "description": "Member to override the default POST header.", "static": "", "guessedname": "setDefaultPostHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "initHeader": {"return": {"type": "void", "description": ""}, "description": "Method that initializes the custom HTTP headers for the each transaction.", "static": "", "guessedname": "initHeader", "guessedtype": "function", "params": [{"type": "string", "name": "label", "description": " The HTTP header label"}, {"type": "string", "name": "value", "description": " The HTTP header value"}, {"type": "string", "name": "isDefault", "description": " Determines if the specific header is a default header\nautomatically sent with each transaction."}], "public": ""}, "setProgId": {"return": {"type": "", "description": "void"}, "description": "Member to add an ActiveX id to the existing xml_progid array.\nIn the event(unlikely) a new ActiveX id is introduced, it can be added\nwithout internal code modifications.", "static": "", "guessedname": "setProgId", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": " The ActiveX id to be added to initialize the XHR object."}], "public": ""}, "setPollingInterval": {"return": {"type": "", "description": "void"}, "description": "Member to modify the default polling interval.", "static": "", "guessedname": "setPollingInterval", "guessedtype": "function", "params": [{"type": "int", "name": "i", "description": " The polling interval in milliseconds."}], "public": ""}, "setHeader": {"return": {"type": "void", "description": ""}, "description": "Accessor that sets the HTTP headers for each transaction.", "private": "", "static": "", "guessedname": "setHeader", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object for the transaction."}]}, "_swf": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "URI", "description": " to connection.swf."}], "description": "This method creates and instantiates the Flash transport.", "private": ""}}, "file": "connection_core.js", "guessedtype": "property", "shortname": "Connect", "properties": {"successEvent": {"description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 2xx range.", "private": "", "static": "", "guessedname": "successEvent", "guessedtype": "property", "type": "CustomEvent"}, "_default_xhr_header": {"description": "The default header value for the label\n\"X-Requested-With\".  This is sent with each\ntransaction, by default, to identify the\nrequest as being made by YUI Connection Manager.", "private": "", "static": "", "guessedname": "_default_xhr_header", "guessedtype": "property", "type": "boolean"}, "completeEvent": {"description": "Custom event that fires when a transaction response has completed.", "private": "", "static": "", "guessedname": "completeEvent", "guessedtype": "property", "type": "CustomEvent"}, "_polling_interval": {"description": "The polling frequency, in milliseconds, for HandleReadyState.\nwhen attempting to determine a transaction's XHR readyState.\nThe default is 50 milliseconds.", "private": "", "static": "", "guessedname": "_polling_interval", "guessedtype": "property", "type": "int"}, "_formNode": {"description": "Property modified by setForm() to set a reference to the HTML\nform node if the desired action is file upload.", "private": "", "static": "", "guessedname": "_formNode", "guessedtype": "property", "type": "object"}, "_msxml_progid": {"description": "Array of MSFT ActiveX ids for XMLHttpRequest.", "private": "", "static": "", "guessedname": "_msxml_progid", "guessedtype": "property", "type": "array"}, "_http_header": {"description": "Object literal of HTTP header(s)", "private": "", "static": "", "guessedname": "_http_headers", "guessedtype": "property", "type": "object"}, "failureEvent": {"description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 4xx/5xx range.", "private": "", "static": "", "guessedname": "failureEvent", "guessedtype": "property", "type": "CustomEvent"}, "_default_post_header": {"description": "The default header used for POST transactions.", "private": "", "static": "", "guessedname": "_default_post_header", "guessedtype": "property", "type": "boolean"}, "_isFormSubmit": {"description": "Property modified by setForm() to determine if the data\nshould be submitted as an HTML form.", "private": "", "static": "", "guessedname": "_isFormSubmit", "guessedtype": "property", "type": "boolean"}, "_has_default_header": {"description": "Determines if custom, default headers\nare set for each transaction.", "private": "", "static": "", "guessedname": "_has_default_headers", "guessedtype": "property", "type": "boolean"}, "_hasSubmitListener": {"guessedname": "_hasSubmitListener", "static": "", "description": "Determines whether YAHOO.util.Event is available and returns true or false.\nIf true, an event listener is bound at the document level to trap click events that\nresolve to a target type of \"Submit\".  This listener will enable setForm() to determine\nthe clicked \"Submit\" value in a multi-Submit button, HTML form.", "private": "", "guessedtype": "function"}, "_default_form_header": {"description": "The default header used for transactions involving the\nuse of HTML forms.", "private": "", "static": "", "guessedname": "_default_form_header", "guessedtype": "property", "type": "boolean"}, "_use_default_xhr_header": {"description": "Determines if a default header of\n'X-Requested-With: XMLHttpRequest'\nwill be added to each transaction.", "private": "", "static": "", "guessedname": "_use_default_xhr_header", "guessedtype": "property", "type": "boolean"}, "_poll": {"description": "Collection of polling references to the polling mechanism in handleReadyState.", "private": "", "static": "", "guessedname": "_poll", "guessedtype": "property", "type": "object"}, "_timeOut": {"description": "Queue of timeout values for each transaction callback with a defined timeout value.", "private": "", "static": "", "guessedname": "_timeOut", "guessedtype": "property", "type": "object"}, "abortEvent": {"description": "Custom event that fires when a transaction is successfully aborted.", "private": "", "static": "", "guessedname": "abortEvent", "guessedtype": "property", "type": "CustomEvent"}, "_transaction_id": {"description": "A transaction counter that increments the transaction id for each transaction.", "private": "", "static": "", "guessedname": "_transaction_id", "guessedtype": "property", "type": "int"}, "_sFormData": {"description": "Property modified by setForm() to set the HTML form data\nfor each transaction.", "private": "", "static": "", "guessedname": "_sFormData", "guessedtype": "property", "type": "string"}, "_use_default_post_header": {"description": "Determines if a default header of\nContent-Type of 'application/x-www-form-urlencoded'\nwill be added to any client HTTP headers sent for POST\ntransactions.", "private": "", "static": "", "guessedname": "_use_default_post_header", "guessedtype": "property", "type": "boolean"}, "_customEvents": {"description": "A reference table that maps callback custom events members to its specific\nevent name.", "private": "", "static": "", "guessedname": "_customEvents", "guessedtype": "property", "type": "object"}, "startEvent": {"description": "Custom event that fires at the start of a transaction", "private": "", "static": "", "guessedname": "startEvent", "guessedtype": "property", "type": "CustomEvent"}, "_isFileUpload": {"description": "Property modified by setForm() to determine if a file(s)\nupload is expected.", "private": "", "static": "", "guessedname": "_isFileUpload", "guessedtype": "property", "type": "boolean"}, "_has_http_headers": {"description": "Determines if HTTP headers are set.", "private": "", "static": "", "guessedname": "_has_http_headers", "guessedtype": "property", "type": "boolean"}, "_submitElementValue": {"description": "Tracks the name-value pair of the \"clicked\" submit button if multiple submit\nbuttons are present in an HTML form; and, if YAHOO.util.Event is available.", "private": "", "static": "", "guessedname": "_submitElementValue", "guessedtype": "property", "type": "string"}}, "description": "The Connection Manager singleton provides methods for creating and managing\nasynchronous transactions."}, "YAHOO.widget.LineChart": {"name": "YAHOO.widget.LineChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "LineChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "LineChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "LineChart", "description": "LineChart class for the YUI Charts widget."}, "YAHOO.widget.FlashAdapter": {"name": "YAHOO.widget.FlashAdapter", "configs": {"altText": {"type": "String", "description": "The alternative text to provide for screen readers and other assistive technology."}, "version": {"type": "String", "description": "Minimum required version for the SWF file. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "swfURL": {"type": "String", "description": "Absolute or relative URL to the SWF displayed by the FlashAdapter. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "expressInstall": {"type": "String", "description": "URL pointing to a SWF file that handles Flash Player's express\ninstall feature. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "wmode": {"type": "String", "description": "Sets the window mode of the Flash Player control. May be\n\"window\", \"opaque\", or \"transparent\". Only available in the constructor\nbecause it may not be set after Flash Player has been embedded in the page."}, "backgroundColor": {"type": "String", "description": "The background color of the SWF. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}}, "namespace": "YAHOO.widget", "module": "uploader", "properties": {"_swfURL": {"guessedname": "_swfURL", "type": "String", "description": "The URL of the SWF file.", "private": "", "guessedtype": "property"}, "_initialized": {"guessedname": "_initialized", "type": "Boolean", "description": "Indicates whether the SWF has been initialized and is ready\nto communicate with JavaScript", "private": "", "guessedtype": "property"}, "_attributes": {"guessedname": "_attributes", "type": "Object", "description": "The initializing attributes are stored here until the SWF is ready.", "private": "", "guessedtype": "property"}, "_containerID": {"guessedname": "_containerID", "type": "String", "description": "The ID of the containing DIV.", "private": "", "guessedtype": "property"}, "_swf": {"private": "", "description": "A reference to the embedded SWF file.", "guessedname": "_swf", "guessedtype": "property"}, "_id": {"guessedname": "_id", "type": "String", "description": "The id of this instance.", "private": "", "guessedtype": "property"}, "proxyFunctionCount": {"guessedname": "proxyFunctionCount", "static": "", "description": "The number of proxy functions that have been created.", "private": "", "guessedtype": "property"}}, "guessedname": "FlashAdapter", "methods": {"_loadHandler": {"private": "", "description": "Called when the SWF has been initialized.", "guessedname": "_loadHandler", "guessedtype": "function"}, "YAHOO.widget.FlashAdapter.createProxyFunction": {"guessedname": "createProxyFunction", "static": "", "description": "Creates a globally accessible function that wraps a function reference.\nReturns the proxy function's name as a string for use by the SWF through\nExternalInterface.", "private": "", "guessedtype": "function"}, "YAHOO.widget.FlashAdapter.removeProxyFunction": {"guessedname": "removeProxyFunction", "static": "", "description": "Removes a function created with createProxyFunction()", "private": "", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_getAltText": {"private": "", "description": "Getter for altText attribute.", "guessedname": "_getAltText", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the FlashAdapter instance."}, "description": "Public accessor to the unique name of the FlashAdapter instance.", "guessedname": "toString", "guessedtype": "function"}, "YAHOO.widget.FlashAdapter.eventHandler": {"guessedname": "eventHandler", "static": "", "description": "Receives event messages from SWF and passes them to the correct instance\nof FlashAdapter.", "private": "", "guessedtype": "function"}, "_eventHandler": {"private": "", "description": "Handles or re-dispatches events received from the SWF.", "guessedname": "_eventHandler", "guessedtype": "function"}, "_embedSWF": {"private": "", "description": "Embeds the SWF in the page and associates it with this instance.", "guessedname": "_embedSWF", "guessedtype": "function"}, "_getSWFURL": {"private": "", "description": "Getter for swfURL attribute.", "guessedname": "_getSWFURL", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire FlashAdapter instance and related objects and removes attached\nevent listeners and clears out DOM elements inside the container. After calling\nthis method, the instance reference should be expliclitly nulled by implementer,\nas in myChart = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "_setAltText": {"private": "", "description": "Setter for altText attribute.", "guessedname": "_setAltText", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "FlashAdapter.js", "guessedtype": "function", "shortname": "FlashAdapter", "events": {"contentReady": {"description": "Fires when the SWF is initialized and communication is possible."}, "backgroundColorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "backgroundColorChange", "description": "Fires when the value for the configuration attribute 'backgroundColor' changes."}, "altTextChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "altTextChange", "description": "Fires when the value for the configuration attribute 'altText' changes."}, "swfURLChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "swfURLChange", "description": "Fires when the value for the configuration attribute 'swfURL' changes."}, "beforeBackgroundColorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBackgroundColorChange", "description": "Fires before the value for the configuration attribute 'backgroundColor' changes. Return false to cancel the attribute change."}, "beforeWmodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWmodeChange", "description": "Fires before the value for the configuration attribute 'wmode' changes. Return false to cancel the attribute change."}, "beforeExpressInstallChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeExpressInstallChange", "description": "Fires before the value for the configuration attribute 'expressInstall' changes. Return false to cancel the attribute change."}, "beforeAltTextChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAltTextChange", "description": "Fires before the value for the configuration attribute 'altText' changes. Return false to cancel the attribute change."}, "versionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "versionChange", "description": "Fires when the value for the configuration attribute 'version' changes."}, "wmodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "wmodeChange", "description": "Fires when the value for the configuration attribute 'wmode' changes."}, "beforeVersionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeVersionChange", "description": "Fires before the value for the configuration attribute 'version' changes. Return false to cancel the attribute change."}, "expressInstallChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "expressInstallChange", "description": "Fires when the value for the configuration attribute 'expressInstall' changes."}, "beforeSwfURLChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSwfURLChange", "description": "Fires before the value for the configuration attribute 'swfURL' changes. Return false to cancel the attribute change."}}, "description": "Wraps Flash embedding functionality and allows communication with SWF through\nattributes."}, "YAHOO.util.Date": {"name": "YAHOO.util.Date", "namespace": "YAHOO.util", "module": "datasource", "guessedname": "Dt", "methods": {"format": {"return": {"type": "String", "description": "Formatted date for display."}, "description": "Takes a native JavaScript Date and formats to string for display to user.", "params": [{"type": "Date", "name": "oDate", "description": "  Date."}, {"type": "Object", "name": "oConfig", "description": "  (Optional) Object literal of configuration values:\n<dl>\n<dt>format &lt;String&gt;</dt>\n<dd>\n<p>\nAny strftime string is supported, such as \"%I:%M:%S %p\". strftime has several format specifiers defined by the Open group at \n<a href=\"http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>\n</p>\n<p>   \nPHP added a few of its own, defined at <a href=\"http://www.php.net/strftime\">http://www.php.net/strftime</a>\n</p>\n<p>\nThis javascript implementation supports all the PHP specifiers and a few more.  The full list is below:\n</p>\n<dl>\n<dt>%a</dt> <dd>abbreviated weekday name according to the current locale</dd>\n<dt>%A</dt> <dd>full weekday name according to the current locale</dd>\n<dt>%b</dt> <dd>abbreviated month name according to the current locale</dd>\n<dt>%B</dt> <dd>full month name according to the current locale</dd>\n<dt>%c</dt> <dd>preferred date and time representation for the current locale</dd>\n<dt>%C</dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)</dd>\n<dt>%d</dt> <dd>day of the month as a decimal number (range 01 to 31)</dd>\n<dt>%D</dt> <dd>same as %m/%d/%y</dd>\n<dt>%e</dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range ' 1' to '31')</dd>\n<dt>%F</dt> <dd>same as %Y-%m-%d (ISO 8601 date format)</dd>\n<dt>%g</dt> <dd>like %G, but without the century</dd>\n<dt>%G</dt> <dd>The 4-digit year corresponding to the ISO week number</dd>\n<dt>%h</dt> <dd>same as %b</dd>\n<dt>%H</dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)</dd>\n<dt>%I</dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)</dd>\n<dt>%j</dt> <dd>day of the year as a decimal number (range 001 to 366)</dd>\n<dt>%k</dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</dd>\n<dt>%l</dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </dd>\n<dt>%m</dt> <dd>month as a decimal number (range 01 to 12)</dd>\n<dt>%M</dt> <dd>minute as a decimal number</dd>\n<dt>%n</dt> <dd>newline character</dd>\n<dt>%p</dt> <dd>either `AM' or `PM' according to the given time value, or the corresponding strings for the current locale</dd>\n<dt>%P</dt> <dd>like %p, but lower case</dd>\n<dt>%r</dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p</dd>\n<dt>%R</dt> <dd>time in 24 hour notation equal to %H:%M</dd>\n<dt>%s</dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</dd>\n<dt>%S</dt> <dd>second as a decimal number</dd>\n<dt>%t</dt> <dd>tab character</dd>\n<dt>%T</dt> <dd>current time, equal to %H:%M:%S</dd>\n<dt>%u</dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday</dd>\n<dt>%U</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Sunday as the first day of the first week</dd>\n<dt>%V</dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,\nrange 01 to 53, where week 1 is the first week that has at least 4 days\nin the current year, and with Monday as the first day of the week.</dd>\n<dt>%w</dt> <dd>day of the week as a decimal, Sunday being 0</dd>\n<dt>%W</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Monday as the first day of the first week</dd>\n<dt>%x</dt> <dd>preferred date representation for the current locale without the time</dd>\n<dt>%X</dt> <dd>preferred time representation for the current locale without the date</dd>\n<dt>%y</dt> <dd>year as a decimal number without a century (range 00 to 99)</dd>\n<dt>%Y</dt> <dd>year as a decimal number including the century</dd>\n<dt>%z</dt> <dd>numerical time zone representation</dd>\n<dt>%Z</dt> <dd>time zone name or abbreviation</dd>\n<dt>%%</dt> <dd>a literal `%' character</dd>\n</dl>\n</dd>\n</dl>"}, {"type": "String", "name": "sLocale", "description": "  (Optional) The locale to use when displaying days of week,\nmonths of the year, and other locale specific strings.  The following locales are\nbuilt in:\n<dl>\n<dt>en</dt>\n<dd>English</dd>\n<dt>en-US</dt>\n<dd>US English</dd>\n<dt>en-GB</dt>\n<dd>British English</dd>\n<dt>en-AU</dt>\n<dd>Australian English (identical to British English)</dd>\n</dl>\nMore locales may be added by subclassing of YAHOO.util.DateLocale.\nSee YAHOO.util.DateLocale for more information."}], "guessedname": "format", "guessedtype": "function", "sa": "YAHOO.util.DateLocale"}}, "static": "", "file": "Type.js", "guessedtype": "property", "shortname": "Date", "requires": "yahoo", "description": "The static Date class provides helper functions to deal with data of type Date."}, "YAHOO.widget.StackedColumnSeries": {"name": "YAHOO.widget.StackedColumnSeries", "constructors": [{"description": "StackedColumnSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "StackedColumnSeries", "uses": ["YAHOO.widget.CartesianSeries"], "file": "Series.js", "guessedtype": "function", "shortname": "StackedColumnSeries", "description": "StackedColumnSeries class for the YUI Charts widget."}, "YAHOO.util.SWFDetect": {"name": "YAHOO.util.SWFDetect", "namespace": "YAHOO.util", "module": "swfdetect", "static": "", "file": "swfdetect.js", "shortname": "SWFDetect", "description": "Flafh detection utility."}, "LogWriter": {"name": "LogWriter", "constructors": [{"params": [{"type": "String", "name": "sSource", "description": "  Source of LogWriter instance."}], "description": "The LogWriter class provides a mechanism to log messages through\nYAHOO.widget.Logger from a named source."}], "namespace": "", "module": "logger", "guessedname": "LogWriter", "methods": {"getSource": {"return": {"type": "String", "description": "The LogWriter source."}, "description": "Public accessor to get the source name.", "guessedname": "getSource", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the LogWriter instance."}, "description": "Public accessor to the unique name of the LogWriter instance.", "guessedname": "toString", "guessedtype": "function"}, "log": {"params": [{"type": "String", "name": "sMsg", "description": "  The log message."}, {"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Logs a message attached to the source of the LogWriter.", "guessedname": "log", "guessedtype": "function"}, "setSource": {"params": [{"type": "String", "name": "sSource", "description": "  Source of LogWriter instance."}], "description": "Public accessor to set the source name.", "guessedname": "setSource", "guessedtype": "function"}}, "file": "LogWriter.js", "guessedtype": "function", "shortname": "LogWriter", "properties": {"_source": {"guessedname": "_source", "type": "String", "description": "Source of the LogWriter instance.", "private": "", "guessedtype": "property"}}, "description": "The LogWriter class provides a mechanism to log messages through\nYAHOO.widget.Logger from a named source."}, "YAHOO.widget.ColorPicker": {"name": "YAHOO.widget.ColorPicker", "configs": {"blue": {"type": "int", "description": "The current blue value 0-255"}, "hue": {"type": "int", "description": "The current hue value 0-360"}, "saturation": {"type": "int", "description": "The current saturation value 0-100"}, "pickersize": {"default": "180", "type": "int", "description": "The size of the picker. Trying to change this is not recommended."}, "container": {"type": "YAHOO.widget.Panel", "description": "If the color picker will live inside of a container object,\nset, provide a reference to it so the control can use the\ncontainer's events."}, "showrgbcontrols": {"default": "true", "type": "boolean", "description": "Hide/show the rgb controls"}, "showhsvcontrols": {"default": "false", "type": "boolean", "description": "Hide/show the hsv controls"}, "hex": {"readonly": "", "type": "string", "description": "The current hex value #000000-#FFFFFF, without the #"}, "ids": {"type": "{referenceid: realid}", "description": "A list of element ids and/or element references used by the \ncontrol.  The default is the this.ID list, and can be customized\nby passing a list in the contructor", "writeonce": ""}, "value": {"type": "int", "description": "The current value/brightness value 0-100"}, "showwebsafe": {"default": "true", "type": "boolean", "description": "Hide/show the websafe swatch"}, "showhexsummary": {"default": "true", "type": "boolean", "description": "Hide/show the hex summary"}, "elements": {"readonly": "", "type": "{id: HTMLElement}", "description": "The element refs used by this control.  Set at initialization"}, "green": {"type": "int", "description": "The current green value 0-255"}, "websafe": {"type": "int", "description": "The closest current websafe value"}, "images": {"type": "{key: image}", "description": "The img src default list\nis this.IMAGES", "writeonce": ""}, "txt": {"type": "{key: txt}", "description": "A list of txt strings for internationalization.  Default\nis this.TXT", "writeonce": ""}, "showcontrols": {"default": "true", "type": "boolean", "description": "Hide/show the entire set of controls"}, "red": {"type": "int", "description": "The current red value 0-255"}, "showhexcontrols": {"default": "true", "type": "boolean", "description": "Hide/show the hex controls"}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el(optional)", "description": " The html \nelement that represents the colorpicker, or the attribute object to use. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the colorpicker's \ninitial attributes.  Ignored if first arg is attributes object."}], "description": "A widget to select colors"}], "namespace": "YAHOO.widget", "module": "colorpicker", "events": {"websafeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "websafeChange", "description": "Fires when the value for the configuration attribute 'websafe' changes."}, "beforeShowcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowcontrolsChange", "description": "Fires before the value for the configuration attribute 'showcontrols' changes. Return false to cancel the attribute change."}, "beforeShowhsvcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowhsvcontrolsChange", "description": "Fires before the value for the configuration attribute 'showhsvcontrols' changes. Return false to cancel the attribute change."}, "saturationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "saturationChange", "description": "Fires when the value for the configuration attribute 'saturation' changes."}, "showhexsummaryChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showhexsummaryChange", "description": "Fires when the value for the configuration attribute 'showhexsummary' changes."}, "beforeSaturationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSaturationChange", "description": "Fires before the value for the configuration attribute 'saturation' changes. Return false to cancel the attribute change."}, "beforeShowwebsafeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowwebsafeChange", "description": "Fires before the value for the configuration attribute 'showwebsafe' changes. Return false to cancel the attribute change."}, "showhexcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showhexcontrolsChange", "description": "Fires when the value for the configuration attribute 'showhexcontrols' changes."}, "containerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' changes."}, "beforeImagesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeImagesChange", "description": "Fires before the value for the configuration attribute 'images' changes. Return false to cancel the attribute change."}, "imagesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "imagesChange", "description": "Fires when the value for the configuration attribute 'images' changes."}, "showrgbcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showrgbcontrolsChange", "description": "Fires when the value for the configuration attribute 'showrgbcontrols' changes."}, "redChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "redChange", "description": "Fires when the value for the configuration attribute 'red' changes."}, "beforeBlueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBlueChange", "description": "Fires before the value for the configuration attribute 'blue' changes. Return false to cancel the attribute change."}, "idsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "idsChange", "description": "Fires when the value for the configuration attribute 'ids' changes."}, "beforeRedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRedChange", "description": "Fires before the value for the configuration attribute 'red' changes. Return false to cancel the attribute change."}, "beforeIdsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeIdsChange", "description": "Fires before the value for the configuration attribute 'ids' changes. Return false to cancel the attribute change."}, "beforeGreenChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeGreenChange", "description": "Fires before the value for the configuration attribute 'green' changes. Return false to cancel the attribute change."}, "showcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showcontrolsChange", "description": "Fires when the value for the configuration attribute 'showcontrols' changes."}, "beforeShowhexcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowhexcontrolsChange", "description": "Fires before the value for the configuration attribute 'showhexcontrols' changes. Return false to cancel the attribute change."}, "beforeHueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHueChange", "description": "Fires before the value for the configuration attribute 'hue' changes. Return false to cancel the attribute change."}, "beforeTxtChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTxtChange", "description": "Fires before the value for the configuration attribute 'txt' changes. Return false to cancel the attribute change."}, "beforePickersizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePickersizeChange", "description": "Fires before the value for the configuration attribute 'pickersize' changes. Return false to cancel the attribute change."}, "beforeShowhexsummaryChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowhexsummaryChange", "description": "Fires before the value for the configuration attribute 'showhexsummary' changes. Return false to cancel the attribute change."}, "hexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hexChange", "description": "Fires when the value for the configuration attribute 'hex' changes."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "beforeHexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHexChange", "description": "Fires before the value for the configuration attribute 'hex' changes. Return false to cancel the attribute change."}, "pickersizeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pickersizeChange", "description": "Fires when the value for the configuration attribute 'pickersize' changes."}, "txtChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "txtChange", "description": "Fires when the value for the configuration attribute 'txt' changes."}, "hueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hueChange", "description": "Fires when the value for the configuration attribute 'hue' changes."}, "beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "greenChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "greenChange", "description": "Fires when the value for the configuration attribute 'green' changes."}, "beforeElementsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeElementsChange", "description": "Fires before the value for the configuration attribute 'elements' changes. Return false to cancel the attribute change."}, "beforeWebsafeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWebsafeChange", "description": "Fires before the value for the configuration attribute 'websafe' changes. Return false to cancel the attribute change."}, "blueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "blueChange", "description": "Fires when the value for the configuration attribute 'blue' changes."}, "showhsvcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showhsvcontrolsChange", "description": "Fires when the value for the configuration attribute 'showhsvcontrols' changes."}, "beforeContainerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContainerChange", "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change."}, "elementsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "elementsChange", "description": "Fires when the value for the configuration attribute 'elements' changes."}, "showwebsafeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showwebsafeChange", "description": "Fires when the value for the configuration attribute 'showwebsafe' changes."}, "beforeShowrgbcontrolsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowrgbcontrolsChange", "description": "Fires before the value for the configuration attribute 'showrgbcontrols' changes. Return false to cancel the attribute change."}}, "methods": {"_hexFieldKeypress": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the keypress event"}, {"type": "HTMLElement", "name": "el", "description": "  the field"}, {"type": "string", "name": "prop", "description": "  the key to the linked property"}], "description": "Handle keydown on the hex field", "guessedname": "_hexFieldKeypress", "guessedtype": "function"}, "_updateRGBFromHSV": {"protected": "", "description": "Updates the RGB values from the current state of the HSV\nvalues.  Executed when the one of the HSV form fields are\nupdated\n_updateRGBFromHSV", "guessedname": "_updateRGBFromHSV", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "", "name": "attr", "description": " An object containing default attribute values"}], "description": "Sets up the config attributes and the change listeners for this\nproperties", "guessedname": "initAttributes", "guessedtype": "function"}, "_initSliders": {"protected": "", "description": "Creates the Hue and Value/Saturation Sliders.", "guessedname": "_initSliders", "guessedtype": "function"}, "_onHueSliderChange": {"protected": "", "params": [{"type": "int", "name": "newOffset", "description": "  pixels from the start position"}], "description": "Event handler for the hue slider.", "guessedname": "_onHueSliderChange", "guessedtype": "function"}, "initPicker": {"description": "Sets the initial state of the sliders", "guessedname": "initPicker", "guessedtype": "function"}, "_updateRGB": {"protected": "", "description": "Updates the rgb attribute with the current state of the r,g,b\nfields.  This is invoked from change listeners on these\nattributes to facilitate updating these values from the\nindividual form fields", "guessedname": "_updateRGB", "guessedtype": "function"}, "_useFieldValue": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  an event"}, {"type": "HTMLElement", "name": "el", "description": "  the field"}, {"type": "string", "name": "prop", "description": "  the key to the linked property"}], "description": "Use the value of the text field to update the control", "guessedname": "_useFieldValue", "guessedtype": "function"}, "getElement": {"return": {"type": "HTMLElement", "description": "a reference to the element"}, "params": [{"type": "string", "name": "id", "description": "  the element id, or key"}], "description": "Returns the element reference that is saved.  The id can be either\nthe element id, or the key for this id in the \"id\" config attribute.\nFor instance, the host element id can be obtained by passing its\nid (default: \"yui_picker\") or by its key \"YUI_PICKER\".", "guessedname": "getElement", "guessedtype": "function"}, "_bindUI": {"protected": "", "description": "Adds event listeners to Sliders and UI elements.  Wires everything\nup.", "guessedname": "_bindUI", "guessedtype": "function"}, "_updateSwatch": {"protected": "", "description": "Updates the background of the swatch with the current rbg value.\nAlso updates the websafe swatch to the closest websafe color", "guessedname": "_updateSwatch", "guessedtype": "function"}, "_initElements": {"protected": "", "description": "Creates any missing DOM structure.", "guessedname": "_initElements", "guessedtype": "function"}, "_updateSliders": {"protected": "", "description": "Moves the sliders into the position dictated by the current state\nof the control", "guessedname": "_updateSliders", "guessedtype": "function"}, "_updateHex": {"protected": "", "description": "Parses the hex string to normalize shorthand values, converts\nthe hex value to rgb and updates the rgb attribute (which\nupdates the state for all of the other values)\nmethod _updateHex", "guessedname": "_updateHex", "guessedtype": "function"}, "_onPickerSliderChange": {"protected": "", "params": [{"type": "{x: int, y: int}", "name": "newOffset", "description": "  x/y pixels from the start position"}], "description": "Event handler for the picker slider, which controls the\nsaturation and value/brightness.", "guessedname": "_onPickerSliderChange", "guessedtype": "function"}, "_getCommand": {"return": {"type": "int", "description": "a command code\n<ul>\n<li>0 = not a number, letter in range, or special key</li>\n<li>1 = number</li>\n<li>2 = a-fA-F</li>\n<li>3 = increment (up arrow)</li>\n<li>4 = decrement (down arrow)</li>\n<li>5 = special key (tab, delete, return, escape, left, right)</li> \n<li>6 = return</li>\n</ul>"}, "description": "Key map to well-known commands for txt field input", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the keypress or keydown event"}], "guessedname": "_getCommand", "guessedtype": "function"}, "setValue": {"params": [{"type": "[int, int, int]", "name": "rgb", "description": "  the rgb value"}, {"type": "boolean", "name": "silent", "description": "  whether or not to fire the change event"}], "description": "Sets the control to the specified rgb value and\nmoves the sliders to the proper positions", "guessedname": "setValue", "guessedtype": "function"}, "_createHostElement": {"protected": "", "description": "Creates the host element if it doesn't exist", "guessedname": "_createHostElement", "guessedtype": "function"}, "_updateFormFields": {"protected": "", "description": "Updates the form field controls with the state data contained\nin the control.", "guessedname": "_updateFormFields", "guessedtype": "function"}, "_hexOnly": {"return": {"type": "boolean", "description": "false if we are canceling the event"}, "description": "Allows numbers and special chars, and by default allows a-f.  \nUsed for the hex field keypress handler.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event"}, {"type": "", "name": "numbersOnly", "description": " omits a-f if set to true"}], "guessedname": "_hexOnly", "guessedtype": "function"}, "_updatePickerSlider": {"protected": "", "description": "Moves the picker slider into the position dictated by the current state\nof the control", "guessedname": "_updatePickerSlider", "guessedtype": "function"}, "_hideShowEl": {"protected": "", "params": [{"type": "string|HTMLElement", "name": "id", "description": "  the element key, id, or ref"}, {"type": "boolean", "name": "on", "description": "  hide or show.  If true, show"}], "description": "Returns the cached element reference.  If the id is not a string, it\nis assumed that it is an element and this is returned.", "guessedname": "_hideShowEl", "guessedtype": "function"}, "_updateHueSlider": {"protected": "", "description": "Moves the hue slider into the position dictated by the current state\nof the control", "guessedname": "_updateHueSlider", "guessedtype": "function"}, "_numbersOnly": {"return": {"type": "boolean", "description": "false if we are canceling the event"}, "description": "Allows numbers and special chars only.  Used for the\nrgb and hsv fields keypress handler.", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event"}], "guessedname": "_numbersOnly", "guessedtype": "function"}, "syncUI": {"params": [{"type": "Boolean", "name": "skipAnim", "description": "  Omit Slider animation for this action"}], "description": "Wrapper for _updateRGB, but allows setting", "guessedname": "syncUI", "guessedtype": "function"}, "_getS": {"protected": "", "return": {"type": "int", "description": "the saturation from 0 to 1"}, "description": "Translates the slider value into saturation, int[0,1], left to right", "guessedname": "_getS", "guessedtype": "function"}, "_getValuesFromSliders": {"protected": "", "description": "Reads the sliders and converts the values to RGB, updating the\ninternal state for all the individual form fields", "guessedname": "_getValuesFromSliders", "guessedtype": "function"}, "_getV": {"protected": "", "return": {"type": "int", "description": "the value from 0 to 1"}, "description": "Translates the slider value into value/brightness, int[0,1], top\nto bottom", "guessedname": "_getV", "guessedtype": "function"}, "_getH": {"protected": "", "return": {"type": "int", "description": "the hue from 0 to 359"}, "description": "Translates the slider value into hue, int[0,359]", "guessedname": "_getH", "guessedtype": "function"}, "_rgbFieldKeypress": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the keypress event"}, {"type": "HTMLElement", "name": "el", "description": "  the field"}, {"type": "string", "name": "prop", "description": "  the key to the linked property"}], "description": "Handle keypress on one of the rgb or hsv fields.", "guessedname": "_rgbFieldKeypress", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "ColorPicker.js", "shortname": "ColorPicker", "properties": {"DEFAULT": {"final": "", "description": "Constants for the control's default default values", "guessedname": "DEFAULT", "guessedtype": "property"}, "pickerSlider": {"type": "YAHOO.widget.Slider", "description": "The picker region", "guessedname": "pickerSlider", "guessedtype": "property"}, "ID.PICKER_BG": {"description": "The id for the picker region slider", "default": "yui-picker-bg", "guessedname": "PICKER_BG", "guessedtype": "property", "type": "String", "final": ""}, "skipAnim": {"default": "true", "type": "Boolean", "description": "Flag to allow individual UI updates to forego animation if available.\nTrue during construction for initial thumb placement.  Set to false\nafter that.", "guessedname": "skipAnim", "guessedtype": "property"}, "ID.G": {"description": "The id for the \"green\" form field", "default": "yui-picker-g", "guessedname": "G", "guessedtype": "property", "type": "String", "final": ""}, "ID.G_HEX": {"description": "The id for the \"green\" hex pair output", "default": "yui-picker-ghex", "guessedname": "G_HEX", "guessedtype": "property", "type": "String", "final": ""}, "ID.HSV_CONTROLS": {"default": "yui-picker-hsv-controls", "final": "", "description": "The id for the hsv controls", "guessedname": "HSV_CONTROLS", "guessedtype": "property"}, "ID.SWATCH": {"description": "The id for the color swatch", "default": "yui-picker-swatch", "guessedname": "SWATCH", "guessedtype": "property", "type": "String", "final": ""}, "ID.HEX_CONTROLS": {"default": "yui-picker-hex-controls", "final": "", "description": "The id for the hsv controls", "guessedname": "HEX_CONTROLS", "guessedtype": "property"}, "IMAGE": {"final": "", "description": "Constants for the default image locations for img tags that are\ngenerated by the control.  They can be modified by passing the\ncomplete list to the contructor for the \"images\" attribute", "guessedname": "IMAGE", "guessedtype": "property"}, "ID.B_HEX": {"description": "The id for the \"blue\" hex pair output", "default": "yui-picker-bhex", "guessedname": "B_HEX", "guessedtype": "property", "type": "String", "final": ""}, "TXT": {"final": "", "description": "Constants for any script-generated messages.  The values here\nare the default messages.  They can be updated by providing\nthe complete list to the constructor for the \"txt\" attribute.", "guessedname": "TXT", "guessedtype": "property"}, "ID.HEX": {"description": "The id for the hex value form field", "default": "yui-picker-hex", "guessedname": "HEX", "guessedtype": "property", "type": "String", "final": ""}, "ID.HUE_BG": {"description": "The id for the hue slider", "default": "yui-picker-hue-bg", "guessedname": "HUE_BG", "guessedtype": "property", "type": "String", "final": ""}, "ID.CONTROLS": {"default": "yui-picker-controls", "final": "", "description": "The id for the control details", "guessedname": "CONTROLS", "guessedtype": "property"}, "ID.V": {"description": "The id for the \"value\" form field", "default": "yui-picker-v", "guessedname": "V", "guessedtype": "property", "type": "String", "final": ""}, "ID.S": {"description": "The id for the \"saturation\" form field", "default": "yui-picker-s", "guessedname": "S", "guessedtype": "property", "type": "String", "final": ""}, "ID.R": {"description": "The id for the \"red\" form field", "default": "yui-picker-r", "guessedname": "R", "guessedtype": "property", "type": "String", "final": ""}, "ID.H": {"description": "The id for the \"hue\" form field", "default": "yui-picker-h", "guessedname": "H", "guessedtype": "property", "type": "String", "final": ""}, "ID.WEBSAFE_SWATCH": {"description": "The id for the websafe color swatch", "default": "yui-picker-websafe-swatch", "guessedname": "WEBSAFE_SWATCH", "guessedtype": "property", "type": "String", "final": ""}, "ID": {"final": "", "description": "The element ids used by this control", "guessedname": "ID", "guessedtype": "property"}, "ID.B": {"description": "The id for the \"blue\" form field", "default": "yui-picker-b", "guessedname": "B", "guessedtype": "property", "type": "String", "final": ""}, "OPT": {"final": "", "description": "Constants for the control's configuration attributes", "guessedname": "OPT", "guessedtype": "property"}, "ID.HUE_THUMB": {"description": "The id for the hue thumb", "default": "yui-picker-hue-thumb", "guessedname": "HUE_THUMB", "guessedtype": "property", "type": "String", "final": ""}, "ID.R_HEX": {"description": "The id for the \"red\" hex pair output", "default": "yui-picker-rhex", "guessedname": "R_HEX", "guessedtype": "property", "type": "String", "final": ""}, "ID.RGB_CONTROLS": {"default": "yui-picker-rgb-controls", "final": "", "description": "The id for the rgb controls", "guessedname": "RGB_CONTROLS", "guessedtype": "property"}, "ID.PICKER_THUMB": {"description": "The id for the picker region thumb", "default": "yui-picker-thumb", "guessedname": "PICKER_THUMB", "guessedtype": "property", "type": "String", "final": ""}, "hueSlider": {"type": "YAHOO.widget.Slider", "description": "The hue slider", "guessedname": "hueSlider", "guessedtype": "property"}, "ID.HEX_SUMMARY": {"default": "yui-picker-hex-summary", "final": "", "description": "The id for the hex summary", "guessedname": "HEX_SUMMARY", "guessedtype": "property"}, "ID.CONTROLS_LABEL": {"default": "yui-picker-controls-label", "final": "", "description": "The id for the controls section header", "guessedname": "CONTROLS_LABEL", "guessedtype": "property"}}, "description": "A widget to select colors"}, "YAHOO.widget.ToolbarButton": {"name": "YAHOO.widget.ToolbarButton", "configs": {"container": {"type": "String", "description": "The container that the button is rendered to, handled by Toolbar"}, "title": {"type": "String", "description": "The title of the button"}, "menu": {"type": "Object", "description": "The menu attribute, see YAHOO.widget.Button"}, "value": {"type": "String", "description": "The value of the button"}, "label": {"type": "String", "description": "The text label for the button"}, "disabled": {"type": "String", "description": "Set the button into a disabled state"}, "type": {"type": "String", "description": "The type of button to create: push, menu, color, select, spin"}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The element to turn into a button."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p><p>Provides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</p>"}], "namespace": "YAHOO.widget", "module": "editor", "events": {"beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "beforeMenuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMenuChange", "description": "Fires before the value for the configuration attribute 'menu' changes. Return false to cancel the attribute change."}, "titleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' changes."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "beforeDisabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDisabledChange", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "labelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' changes."}, "beforeTitleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTitleChange", "description": "Fires before the value for the configuration attribute 'title' changes. Return false to cancel the attribute change."}, "typeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' changes."}, "menuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "menuChange", "description": "Fires when the value for the configuration attribute 'menu' changes."}, "beforeLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLabelChange", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}, "beforeTypeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTypeChange", "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change."}, "disabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' changes."}}, "guessedname": "ToolbarButton", "methods": {"_handleSelect": {"guessedname": "_handleSelect", "params": [{"type": "Event", "name": "ev", "description": " The change event."}], "description": "The event fired when a change event gets fired on a select element", "private": "", "guessedtype": "function"}, "getMenu": {"description": "A stub function to mimic YAHOO.widget.Button's getMenu method", "guessedname": "getMenu", "guessedtype": "function"}, "_handleMouseOut": {"description": "Removes classes from the button elements on mouseout (hover)", "private": "", "guessedname": "_handleMouseOut", "guessedtype": "function"}, "init": {"description": "The ToolbarButton class's initialization method", "guessedname": "init", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the toolbar."}], "description": "Initializes all of the configuration attributes used to create \nthe toolbar.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the toolbar.", "guessedname": "toString", "guessedtype": "function"}, "checkValue": {"params": [{"type": "String", "name": "value", "description": " The value of the option that we want to mark as selected"}], "description": "Select an option by value", "guessedname": "checkValue", "guessedtype": "function"}, "destroy": {"description": "Destroy the button", "guessedname": "destroy", "guessedtype": "function"}, "_handleMouseOver": {"description": "Adds classes to the button elements on mouseover (hover)", "private": "", "guessedname": "_handleMouseOver", "guessedtype": "function"}, "fireEvent": {"description": "Overridden fireEvent method to prevent DOM events from firing if the button is disabled.", "guessedname": "fireEvent", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "toolbar-button.js", "guessedtype": "function", "shortname": "ToolbarButton", "requires": "yahoo, dom, element, event", "properties": {"buttonType": {"private": "", "description": "Tells if the Button is a Rich Button or a Simple Button", "guessedname": "buttonType", "guessedtype": "property"}}, "description": "<p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p><p>Provides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</p>"}, "YAHOO.util.Attribute": {"name": "YAHOO.util.Attribute", "constructors": [{"params": [{"type": "Object", "name": "hash", "description": "  The intial Attribute."}, {"type": "YAHOO.util.AttributeProvider", "name": "The", "description": " owner of the Attribute instance."}], "description": "Provides Attribute configurations."}], "namespace": "YAHOO.util", "module": "element", "guessedname": "Attribute", "methods": {"setValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "Any", "name": "value", "description": " The value to apply to the attribute."}, {"type": "Boolean", "name": "silent", "description": " If true the change events will not be fired."}], "description": "Sets the value of the attribute and fires beforeChange and change events.", "guessedname": "setValue", "guessedtype": "function"}, "configure": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of Attribute properties."}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the initial config."}], "description": "Allows for configuring the Attribute's properties.", "guessedname": "configure", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the initial config value.", "guessedname": "resetValue", "guessedtype": "function"}, "refresh": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the current value.\nUseful when values may have gotten out of sync with actual properties.", "guessedname": "refresh", "guessedtype": "function"}, "getValue": {"return": {"type": "any", "description": "The current value of the attribute."}, "description": "Retrieves the current value of the attribute.", "guessedname": "getValue", "guessedtype": "function"}, "resetConfig": {"description": "Resets the attribute config to the initial config state.", "guessedname": "resetConfig", "guessedtype": "function"}}, "file": "Attribute.js", "guessedtype": "function", "shortname": "Attribute", "properties": {"_written": {"guessedname": "_written", "type": "Boolean", "description": "Whether or not the attribute's value has been set.", "private": "", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the attribute.", "guessedname": "name", "guessedtype": "property"}, "writeOnce": {"type": "Boolean", "description": "Whether or not the attribute can only be written once.", "guessedname": "writeOnce", "guessedtype": "property"}, "_initialConfig": {"guessedname": "_initialConfig", "type": "Object", "description": "The attribute's initial configuration.", "private": "", "guessedtype": "property"}, "value": {"type": "String", "description": "The value of the attribute.", "guessedname": "value", "guessedtype": "property"}, "validator": {"type": "Function", "return": "Boolean", "description": "The validator to use when setting the attribute's value.", "guessedname": "validator", "guessedtype": "property"}, "readOnly": {"type": "Boolean", "description": "Whether or not the attribute is read only.", "guessedname": "readOnly", "guessedtype": "property"}, "getter": {"type": "Function", "description": "The function to use when getting the attribute's value.\nThe getter receives the new value as the first arg and the attribute name as the 2nd\nThe return value of the getter will be used as the return from get().", "guessedname": "getter", "guessedtype": "property"}, "owner": {"type": "YAHOO.util.AttributeProvider", "description": "The owner of the attribute.", "guessedname": "owner", "guessedtype": "property"}, "method": {"type": "Function", "description": "A function to call when setting the attribute's value.\nThe method receives the new value as the first arg and the attribute name as the 2nd", "guessedname": "method", "guessedtype": "property"}, "setter": {"type": "Function", "description": "The function to use when setting the attribute's value.\nThe setter receives the new value as the first arg and the attribute name as the 2nd\nThe return value of the setter replaces the value passed to set().", "guessedname": "setter", "guessedtype": "property"}}, "description": "Provides Attribute configurations."}, "YAHOO.util.DateAssert": {"name": "YAHOO.util.DateAssert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "DateAssert", "methods": {"datesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's month, day, and year are equal to another date's.", "guessedname": "datesAreEqual", "guessedtype": "function"}, "timesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.", "guessedname": "timesAreEqual", "guessedtype": "function"}}, "static": "", "file": "DateAssert.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "YAHOO.widget.Editor": {"name": "YAHOO.widget.Editor", "configs": {"hiddencss": {"default": "<code><pre>\n.yui-hidden font, .yui-hidden strong, .yui-hidden b, .yui-hidden em, .yui-hidden i, .yui-hidden u,\n.yui-hidden div, .yui-hidden p, .yui-hidden span, .yui-hidden img, .yui-hidden ul, .yui-hidden ol,\n.yui-hidden li, .yui-hidden table {\nborder: 1px dotted #ccc;\n}\n.yui-hidden .yui-non {\nborder: none;\n}\n.yui-hidden img {\npadding: 2px;\n}</pre></code>", "type": "String", "description": "The CSS used to show/hide hidden elements on the page, these rules must be prefixed with the class provided in <code>this.CLASS_HIDDEN</code>"}, "localFileWarning": {"default": "true", "type": "Boolean", "description": "Should we throw the warning if we detect a file that is local to their machine?"}}, "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The textarea element to turn into an editor."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}], "namespace": "YAHOO.widget", "module": "editor", "events": {"hiddencssChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hiddencssChange", "description": "Fires when the value for the configuration attribute 'hiddencss' changes."}, "beforeLocalFileWarningChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLocalFileWarningChange", "description": "Fires before the value for the configuration attribute 'localFileWarning' changes. Return false to cancel the attribute change."}, "afterOpenWindow": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Event fires after an Editor Window is opened. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "windowCreateLinkRender": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}, {"type": "HTMLElement", "name": "body", "description": " The HTML element used as the body of the window.."}], "description": "Event fired when the pre render of the Create Link window has finished."}, "windowInsertImageRender": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}, {"type": "HTMLElement", "name": "body", "description": " The HTML element used as the body of the window.."}, {"type": "Toolbar", "name": "toolbar", "description": " A reference to the toolbar object used inside this window."}], "description": "Event fired when the pre render of the Insert Image window has finished."}, "beforeHiddencssChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHiddencssChange", "description": "Fires before the value for the configuration attribute 'hiddencss' changes. Return false to cancel the attribute change."}, "closeWindow": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>", "name": "win", "description": " The EditorWindow object"}], "description": "Event fires after an Editor Window is closed. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "windowRender": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Event fired when the initial Overlay is rendered. Can be used to manipulate the content of the panel."}, "windowCMDOpen": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Dynamic event fired when an <a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a> is opened.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkOpen event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "beforeOpenWindow": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Event fires before an Editor Window is opened. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "windowCMDClose": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Dynamic event fired when an <a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a> is closed.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkClose event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."}, "localFileWarningChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "localFileWarningChange", "description": "Fires when the value for the configuration attribute 'localFileWarning' changes."}}, "guessedname": "Editor", "methods": {"_handleWindowInputs": {"params": [{"type": "Boolean", "name": "disable", "description": " The state to set all inputs in all Editor windows to. Defaults to: false."}], "description": "Disables/Enables all fields inside Editor windows. Used in show/hide events to keep window fields from submitting when the parent form is submitted.", "guessedname": "_handleWindowInputs", "guessedtype": "function"}, "_fixNodes": {"description": "Fix href and imgs as well as remove invalid HTML.", "private": "", "guessedname": "_fixNodes", "guessedtype": "function"}, "cmd_justifyright": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('justifyright') is used.", "guessedname": "cmd_justifyright", "guessedtype": "function"}, "_defaultImageToolbar": {"description": "A reference to the Toolbar Object inside Image Editor Window.", "private": "", "guessedname": "_defaultImageToolbar", "guessedtype": "property"}, "moveWindow": {"params": [{"type": "Boolean", "name": "force", "description": " Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)"}], "description": "Realign the window with the currentElement and reposition the knob above the panel.", "guessedname": "moveWindow", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the editor."}], "description": "Initializes all of the configuration attributes used to create \nthe editor.", "guessedname": "initAttributes", "guessedtype": "function"}, "openWindow": {"params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow</a>", "name": "win", "description": " A <a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow</a> instance"}], "description": "Opens a new \"window/panel\"", "guessedname": "openWindow", "guessedtype": "function"}, "cmd_superscript": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('superscript') is used.", "guessedname": "cmd_superscript", "guessedtype": "function"}, "_renderCreateLinkWindow": {"description": "Pre renders the CreateLink window so we get faster window opening.", "private": "", "guessedname": "_renderCreateLinkWindow", "guessedtype": "function"}, "_hasUndoLevel": {"guessedname": "_hasUndoLevel", "return": {"type": "", "description": "Boolean"}, "description": "Checks to see if we have an undo level available", "private": "", "guessedtype": "function"}, "_defaultImageToolbarConfig": {"description": "Config to be used for the default Image Editor Window.", "private": "", "guessedname": "_defaultImageToolbarConfig", "guessedtype": "property"}, "cmd_justifycenter": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('justifycenter') is used.", "guessedname": "cmd_justifycenter", "guessedtype": "function"}, "cmd_heading": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('heading') is used.", "guessedname": "cmd_heading", "guessedtype": "function"}, "_renderPanel": {"guessedname": "_renderPanel", "return": {"type": "<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>", "description": ""}, "description": "Renders the panel used for Editor Windows to the document so we can start using it..", "private": "", "guessedtype": "function"}, "cmd_justifyleft": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('justifyleft') is used.", "guessedname": "cmd_justifyleft", "guessedtype": "function"}, "init": {"description": "The Editor class' initialization method", "guessedname": "init", "guessedtype": "function"}, "closeWindow": {"description": "Close the currently open EditorWindow.", "guessedname": "closeWindow", "guessedtype": "function"}, "cmd_script": {"params": [{"type": "", "name": "action", "description": " action passed from the execCommand method"}, {"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods.", "guessedname": "cmd_script", "guessedtype": "function"}, "cmd_justify": {"params": [{"type": "", "name": "dir", "description": " The direction to justify"}], "description": "This is a factory method for the justify family of commands.", "guessedname": "cmd_justify", "guessedtype": "function"}, "_renderInsertImageWindow": {"description": "Pre renders the InsertImage window so we get faster window opening.", "private": "", "guessedname": "_renderInsertImageWindow", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the editor.", "guessedname": "toString", "guessedtype": "function"}, "cmd_hiddenelements": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('hiddenelements') is used.", "guessedname": "cmd_hiddenelements", "guessedtype": "function"}, "_handleCreateLinkWindowClose": {"description": "Handles the closing of the Link Properties Window.", "private": "", "guessedname": "_handleCreateLinkWindowClose", "guessedtype": "function"}, "_handleInsertImageWindowClose": {"description": "Handles the closing of the Image Properties Window.", "private": "", "guessedname": "_handleInsertImageWindowClose", "guessedtype": "function"}, "_storeUndo": {"description": "Method to call when you want to store an undo state. Currently called from nodeChange and _handleKeyUp", "private": "", "guessedname": "_storeUndo", "guessedtype": "function"}, "_checkUndo": {"description": "Prunes the undo cache when it reaches the maxUndo config", "private": "", "guessedname": "_checkUndo", "guessedtype": "function"}, "cmd_subscript": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('subscript') is used.", "guessedname": "cmd_subscript", "guessedtype": "function"}, "_getUndo": {"return": {"type": "String", "description": ""}, "description": "Get's a level from the undo cache.", "private": "", "params": [{"type": "Number", "name": "index", "description": " The index of the undo level we want to get."}], "guessedname": "_getUndo", "guessedtype": "function"}, "_handleInsertImageClick": {"description": "Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.", "private": "", "guessedname": "_handleInsertImageClick", "guessedtype": "function"}, "_windows": {"description": "A reference to the HTML elements used for the body of Editor Windows.", "private": "", "guessedname": "_windows", "guessedtype": "property"}, "cmd_redo": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "Pulls an item from the Undo stack and updates the Editor", "guessedname": "cmd_redo", "guessedtype": "function"}, "_putUndo": {"guessedname": "_putUndo", "params": [{"type": "String", "name": "str", "description": " The content of the Editor"}], "description": "Puts the content of the Editor into the _undoCache.\n//TODO Convert the hash to a series of TEXTAREAS to store state in.", "private": "", "guessedtype": "function"}, "cmd_indent": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('indent') is used.", "guessedname": "cmd_indent", "guessedtype": "function"}, "cmd_undo": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "Pulls an item from the Undo stack and updates the Editor", "guessedname": "cmd_undo", "guessedtype": "function"}, "_undoNodeChange": {"description": "nodeChange listener for undo processing", "private": "", "guessedname": "_undoNodeChange", "guessedtype": "function"}, "_handleKeyDown": {"guessedname": "_handleKeyDown", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Override method that handles some new keydown events inside the iFrame document.", "private": "", "guessedtype": "function"}, "cmd_outdent": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('outdent') is used.", "guessedname": "cmd_outdent", "guessedtype": "function"}, "_closeWindow": {"guessedname": "_closeWindow", "params": [{"type": "Event", "name": "ev", "description": " The keypress Event that we are trapping"}], "description": "Close the currently open EditorWindow with the Escape key.", "private": "", "guessedtype": "function"}, "cmd_removeformat": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('removeformat') is used.", "guessedname": "cmd_removeformat", "guessedtype": "function"}}, "extends": "YAHOO.widget.SimpleEditor", "superclass": "YAHOO.widget.SimpleEditor", "file": "editor.js", "guessedtype": "function", "shortname": "Editor", "properties": {"_alwaysDisabled": {"guessedname": "_alwaysDisabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_LOCAL_FILE_WARNING": {"type": "String", "description": "The label string for the local file warning.", "guessedname": "STR_LOCAL_FILE_WARNING", "guessedtype": "property"}, "STR_CLOSE_WINDOW_NOTE": {"type": "String", "description": "A note appearing in the Editor Window to tell the user that the Escape key will close the window", "guessedname": "STR_CLOSE_WINDOW_NOTE", "guessedtype": "property"}, "STR_NONE": {"type": "String", "description": "The string for the word none.", "guessedname": "STR_NONE", "guessedtype": "property"}, "CLASS_HIDDEN": {"protected": "", "type": "String", "description": "CSS class applied to the body when the hiddenelements button is pressed.", "guessedname": "CLASS_HIDDEN", "guessedtype": "property"}, "STR_IMAGE_SIZE": {"type": "String", "description": "The label string for Image Size", "guessedname": "STR_IMAGE_SIZE", "guessedtype": "property"}, "STR_IMAGE_COPY": {"type": "String", "description": "The label string for the image copy and paste message for Opera and Safari", "guessedname": "STR_IMAGE_COPY", "guessedtype": "property"}, "STR_LINK_NEW_WINDOW": {"type": "String", "description": "The string for the open in a new window label.", "guessedname": "STR_LINK_NEW_WINDOW", "guessedtype": "property"}, "STR_CLOSE_WINDOW": {"type": "String", "description": "The Title of the close button in the Editor Window", "guessedname": "STR_CLOSE_WINDOW", "guessedtype": "property"}, "_undoCache": {"guessedname": "_undoCache", "type": "Array", "description": "An Array hash of the Undo Levels.", "private": "", "guessedtype": "property"}, "STR_BEFORE_EDITOR": {"type": "String", "description": "The accessibility string for the element before the iFrame", "guessedname": "STR_BEFORE_EDITOR", "guessedtype": "property"}, "_undoLevel": {"guessedname": "_undoLevel", "type": "Number", "description": "The index of the current undo state.", "private": "", "guessedtype": "property"}, "STR_IMAGE_BORDER": {"type": "String", "description": "The label string for the image border.", "guessedname": "STR_IMAGE_BORDER", "guessedtype": "property"}, "STR_IMAGE_TITLE": {"type": "String", "description": "The label string for Image Description", "guessedname": "STR_IMAGE_TITLE", "guessedtype": "property"}, "_alwaysEnabled": {"guessedname": "_alwaysEnabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_LINK_TITLE": {"type": "String", "description": "The string for the link description.", "guessedname": "STR_LINK_TITLE", "guessedtype": "property"}, "_disabled": {"guessedname": "_disabled", "type": "Array", "description": "The Toolbar items that should be disabled if there is no selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_IMAGE_TEXTFLOW": {"type": "String", "description": "The label string for the image text flow.", "guessedname": "STR_IMAGE_TEXTFLOW", "guessedtype": "property"}, "STR_LINK_PROP_TITLE": {"type": "String", "description": "The label string for the Link Property Editor Window.", "guessedname": "STR_LINK_PROP_TITLE", "guessedtype": "property"}, "STR_IMAGE_BORDER_TYPE": {"type": "String", "description": "The label string for the image border type.", "guessedname": "STR_IMAGE_BORDER_TYPE", "guessedtype": "property"}, "EDITOR_PANEL_ID": {"type": "String", "description": "HTML id to give the properties window in the DOM.", "guessedname": "EDITOR_PANEL_ID", "guessedtype": "property"}, "STR_IMAGE_ORIG_SIZE": {"type": "String", "description": "The label string for Original Image Size", "guessedname": "STR_IMAGE_ORIG_SIZE", "guessedtype": "property"}, "STR_IMAGE_PADDING": {"type": "String", "description": "The label string for the image padding.", "guessedname": "STR_IMAGE_PADDING", "guessedtype": "property"}, "STR_IMAGE_PROP_TITLE": {"type": "String", "description": "The title for the Image Property Editor Window", "guessedname": "STR_IMAGE_PROP_TITLE", "guessedtype": "property"}, "CLASS_LOCAL_FILE": {"protected": "", "type": "String", "description": "CSS class applied to an element when it's found to have a local url.", "guessedname": "CLASS_LOCAL_FILE", "guessedtype": "property"}, "STR_LINK_PROP_REMOVE": {"type": "String", "description": "The label string for the Remove link from text link inside the property editor.", "guessedname": "STR_LINK_PROP_REMOVE", "guessedtype": "property"}, "STR_IMAGE_BORDER_SIZE": {"type": "String", "description": "The label string for the image border size.", "guessedname": "STR_IMAGE_BORDER_SIZE", "guessedtype": "property"}}, "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}, "YAHOO.widget.Paginator.ui.RowsPerPageDropdown": {"properties": {"all": {"protected": "", "type": "HTMLElement", "description": "option node for the optional All value", "guessedname": "all", "guessedtype": "property"}, "select": {"guessedname": "select", "type": "HTMLElement", "description": "select node", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.RowsPerPageDropdown", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the rows-per-page dropdown"}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"rowsPerPageDropdownClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "rowsPerPageDropdownClassChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageDropdownClass' changes."}, "rowsPerPageOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "rowsPerPageOptionsChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' changes."}, "beforeRowsPerPageOptionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRowsPerPageOptionsChange", "description": "Fires before the value for the configuration attribute 'rowsPerPageOptions' changes. Return false to cancel the attribute change."}, "beforeRowsPerPageDropdownClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRowsPerPageDropdownClassChange", "description": "Fires before the value for the configuration attribute 'rowsPerPageDropdownClass' changes. Return false to cancel the attribute change."}}, "guessedname": "RowsPerPageDropdown", "methods": {"render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the select and option nodes and returns the select node.", "guessedname": "render", "guessedtype": "function"}, "rebuild": {"description": "(Re)generate the select options.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Select the appropriate option if changed.", "guessedname": "update", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the select node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "onChange": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The change event"}], "description": "Listener for the select's onchange event.  Sent to setRowsPerPage method.", "guessedname": "onChange", "guessedtype": "function"}, "_handleTotalRecordsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  attribute change event"}], "description": "Updates the all option value (and Paginator's rowsPerPage attribute if\nnecessary) in response to a change in the Paginator's totalRecords.", "guessedname": "_handleTotalRecordsChange", "guessedtype": "function"}}, "file": "RowsPerPageDropDown.js", "guessedtype": "function", "shortname": "RowsPerPageDropdown", "configs": {"rowsPerPageDropdownClass": {"default": "'yui-pg-rpp-options'", "description": "CSS class assigned to the select node"}, "rowsPerPageOptions": {"default": "[]", "description": "Array of available rows-per-page sizes.  Converted into select options.\nArray values may be positive integers or object literals in the form<br>\n{ value : NUMBER, text : STRING }"}}, "description": "ui Component to generate the rows-per-page dropdown"}, "YAHOO.util.StyleSheet": {"name": "YAHOO.util.StyleSheet", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "seed", "description": "  a style or link node, its id, or a name or\nyuiSSID of a StyleSheet, or a string of css text (see above)"}, {"type": "String", "name": "name", "description": "  OPTIONAL name to register instance for future static\naccess"}], "description": "Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = YAHOO.util.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new YAHOO.util.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing YAHOO.util.StyleSheet instance</li>\n<li>The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}], "namespace": "YAHOO.util", "module": "stylesheet", "methods": {"enable": {"chainable": "", "return": {"type": "StyleSheet", "description": "the instance"}, "description": "Enable all the rules in the sheet"}, "StyleSheet.isValidSelector": {"return": {"type": "Boolean", "description": ""}, "description": "<p>Determines if a selector string is safe to use.  Used internally\nin set to prevent IE from locking up when attempting to add a rule for a\n&quot;bad selector&quot;.</p>\n<p>Bad selectors are considered to be any string containing unescaped\n`~!@$%^&()+=|{}[];'\"?< or space. Also forbidden are . or # followed by\nanything other than an alphanumeric.  Additionally -abc or .-abc or\n#_abc or '# ' all fail.  There are likely more failure cases, so\nplease file a bug if you encounter one.</p>", "static": "", "guessedname": "isValidSelector", "guessedtype": "function", "params": [{"type": "String", "name": "sel", "description": "  the selector string"}]}, "getCssText": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "sel", "description": "  Selector string"}], "description": "Get the current cssText for a rule or the entire sheet.  If the\nselector param is supplied, only the cssText for that rule will be\nreturned, if found.  If the selector string targets multiple\nselectors separated by commas, the cssText of the first rule only\nwill be returned.  If no selector string, the stylesheet's full\ncssText will be returned.", "guessedname": "getCssText", "guessedtype": "function"}, "isEnabled": {"return": {"type": "Boolean", "description": "is it enabled?"}, "description": "Returns boolean indicating whether the StyleSheet is enabled", "guessedname": "isEnabled", "guessedtype": "function"}, "disable": {"chainable": "", "return": {"type": "StyleSheet", "description": "the instance"}, "description": "Disable all the rules in the sheet.  Rules may be changed while the\nStyleSheet is disabled.", "guessedname": "disable", "guessedtype": "function"}, "set": {"return": {"type": "StyleSheet", "description": "the StyleSheet instance"}, "description": "<p>Set style properties for a provided selector string.\nIf the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If the selector string does not\nhave a corresponding rule in the sheet, it will be added.</p>\n<p>The second parameter can be either a string of CSS text,\nformatted as CSS (\"font-size: 10px;\"), or an object collection of\nproperties and their new values.  Object properties must be in\nJavaScript format ({ fontSize: \"10px\" }).</p>\n<p>The float style property will be set by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot; if passed in the\nobject map.  Use \"float: left;\" format when passing a CSS text\nstring.</p>", "chainable": "", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "Object|String", "name": "css", "description": "  Object literal of style properties and\nnew values, or a string of cssText"}], "guessedname": "set", "guessedtype": "function"}, "getId": {"return": {"type": "Number", "description": "the static id"}, "description": "Get the unique yuiSSID for this StyleSheet instance", "guessedname": "getId", "guessedtype": "function"}, "StyleSheet.register": {"return": {"type": "Boolean", "description": "false if no name or sheet is not a StyleSheet\ninstance. true otherwise."}, "description": "Registers a StyleSheet instance in the static registry by the given name", "static": "", "guessedname": "register", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": "  the name to assign the StyleSheet in the registry"}, {"type": "StyleSheet", "name": "sheet", "description": "  The StyleSheet instance"}]}, "unset": {"return": {"type": "StyleSheet", "description": "the StyleSheet instance"}, "description": "<p>Unset style properties for a provided selector string, removing\ntheir effect from the style cascade.</p>\n<p>If the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If there are no properties\nremaining in the rule after unsetting, the rule is removed.</p>\n<p>The style property or properties in the second parameter must be the\n<p>JavaScript style property names. E.g. fontSize rather than font-size.</p>\n<p>The float style property will be unset by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "String|Array", "name": "css", "description": "  style property name or Array of names"}], "guessedname": "unset", "guessedtype": "function"}, "StyleSheet.toCssText": {"return": {"type": "String", "description": "the resulting cssText string"}, "description": "<p>Converts an object literal of style properties and values into a string\nof css text.  This can then be assigned to el.style.cssText.</p>\n<p>The optional second parameter is a cssText string representing the\nstarting state of the style prior to alterations.  This is most often\nextracted from the eventual target's current el.style.cssText.</p>", "static": "", "guessedname": "toCssText", "guessedtype": "property", "params": [{"type": "Object", "name": "css", "description": "  object literal of style properties and values"}, {"type": "String", "name": "cssText", "description": "  OPTIONAL starting cssText value"}]}}, "file": "stylesheet.js", "shortname": "StyleSheet", "properties": {"node": {"type": "HTMLElement", "description": "The HTMLElement that this instance encapsulates", "guessedname": "node", "guessedtype": "property"}}, "description": "Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = YAHOO.util.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new YAHOO.util.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing YAHOO.util.StyleSheet instance</li>\n<li>The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}, "YAHOO.widget.Calendar": {"name": "YAHOO.widget.Calendar", "configs": {"MY_LABEL_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEKDAYS": {"default": "true", "type": "Boolean", "description": "True if the Calendar should show weekday labels. True by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month/day/year date string", "guessedname": "value", "guessedtype": "property"}, "MY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month/year date string", "guessedname": "value", "guessedtype": "property"}, "MONTHS_SHORT": {"default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]", "type": "String[]", "description": "The short month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MULTI_SELECT": {"default": "false", "type": "Boolean", "description": "True if the Calendar should allow multiple selections. False by default.", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_YEAR_SUFFIX": {"default": "\"\"", "type": "String", "description": "The suffix used after the year when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "DATE_FIELD_DELIMITER": {"default": "\"/\"", "type": "String", "description": "The value used to delimit date fields in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "MY_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in a month/year date string", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "false", "type": "Boolean", "description": "Whether or not a close button should be displayed for this Calendar", "guessedname": "value", "guessedtype": "property"}, "MONTHS_LONG": {"default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"", "type": "String[]", "description": "The long month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_MEDIUM": {"default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]", "type": "String[]", "description": "The medium weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "YEAR_OFFSET": {"default": "0", "type": "Number", "description": "The positive or negative year offset from the Gregorian calendar year (assuming a January 1st rollover) to \nbe used when displaying and parsing dates. NOTE: All JS Date objects returned by methods, or expected as input by\nmethods will always represent the Gregorian year, in order to maintain date/month/week values.", "guessedname": "value", "guessedtype": "property"}, "navigator": {"default": "null", "type": "{Object|Boolean}", "description": "Configuration for the Month/Year CalendarNavigator UI which allows the user to jump directly to a \nspecific Month/Year without having to scroll sequentially through months.\n<p>\nSetting this property to null (default value) or false, will disable the CalendarNavigator UI.\n</p>\n<p>\nSetting this property to true will enable the CalendarNavigatior UI with the default CalendarNavigator configuration values.\n</p>\n<p>\nThis property can also be set to an object literal containing configuration properties for the CalendarNavigator UI.\nThe configuration object expects the the following case-sensitive properties, with the \"strings\" property being a nested object.\nAny properties which are not provided will use the default values (defined in the CalendarNavigator class).\n</p>\n<dl>\n<dt>strings</dt>\n<dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI\n<dl>\n<dt>month</dt><dd><em>String</em> : The string to use for the month label. Defaults to \"Month\".</dd>\n<dt>year</dt><dd><em>String</em> : The string to use for the year label. Defaults to \"Year\".</dd>\n<dt>submit</dt><dd><em>String</em> : The string to use for the submit button label. Defaults to \"Okay\".</dd>\n<dt>cancel</dt><dd><em>String</em> : The string to use for the cancel button label. Defaults to \"Cancel\".</dd>\n<dt>invalidYear</dt><dd><em>String</em> : The string to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>\n</dl>\n</dd>\n<dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>\n<dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>\n</dl>\n<p>E.g.</p>\n<pre>\nvar navConfig = {\nstrings: {\nmonth:\"Calendar Month\",\nyear:\"Calendar Year\",\nsubmit: \"Submit\",\ncancel: \"Cancel\",\ninvalidYear: \"Please enter a valid year\"\n},\nmonthFormat: YAHOO.widget.Calendar.SHORT,\ninitialFocus: \"month\"\n}\n</pre>", "guessedname": "value", "guessedtype": "property"}, "DATE_RANGE_DELIMITER": {"default": "\"-\"", "type": "String", "description": "The value used to delimit date ranges in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_HEADER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row headers. False by default.", "guessedname": "value", "guessedtype": "property"}, "title": {"default": "\"\"", "type": "String", "description": "The title to display above the Calendar's month header", "guessedname": "value", "guessedtype": "property"}, "maxdate": {"default": "null", "type": "String | Date", "description": "The maximum selectable date in the current Calendar (mm/dd/yyyy)", "guessedname": "value", "guessedtype": "property"}, "selected": {"default": "[]", "type": "String", "description": "The date or range of dates representing the current Calendar selection", "guessedname": "value", "guessedtype": "property"}, "LOCALE_WEEKDAYS": {"default": "\"short\"", "type": "String", "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_RIGHT": {"description": "The image that should be used for the right navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "HIDE_BLANK_WEEKS": {"default": "false", "type": "Boolean", "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default.", "guessedname": "value", "guessedtype": "property"}, "today": {"default": "The client side date (new Date()) when the Calendar is instantiated.", "type": "Date", "description": "The date to use to represent \"Today\".", "guessedname": "value", "guessedtype": "property"}, "mindate": {"default": "null", "type": "String | Date", "description": "The minimum selectable date in the current Calendar (mm/dd/yyyy)", "guessedname": "value", "guessedtype": "property"}, "START_WEEKDAY": {"default": "0", "type": "number", "description": "The weekday the week begins on. Default is 0 (Sunday = 0, Monday = 1 ... Saturday = 6).", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_FOOTER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row footers. False by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_YEAR_POSITION": {"default": "3", "type": "Number", "description": "The position of the year in a month/day/year date string", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_LONG": {"default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]", "type": "String[]", "description": "The long weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MDY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month/day/year date string", "guessedname": "value", "guessedtype": "property"}, "pagedate": {"default": "Today's date", "type": "String | Date", "description": "The month/year representing the current visible Calendar date (mm/yyyy)", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_MONTH_SUFFIX": {"default": "\" \"", "type": "String", "description": "The suffix used after the month when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "MD_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month/year date string", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_LEFT": {"description": "The image that should be used for the left navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "MD_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month/day date string", "guessedname": "value", "guessedtype": "property"}, "DATE_DELIMITER": {"default": "\",\"", "type": "String", "description": "The value used to delimit individual dates in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_MONTHS": {"default": "\"long\"", "type": "String", "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".", "guessedname": "value", "guessedtype": "property"}, "iframe": {"default": "true for IE6 and below, false for all other browsers", "type": "Boolean", "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.\nThis property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be \nenabled if required.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_1CHAR": {"default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]", "type": "String[]", "description": "The 1-character weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_SHORT": {"default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]", "type": "String[]", "description": "The short weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "strings": {"default": "An object with the properties shown below:\n<dl>\n<dt>previousMonth</dt><dd><em>String</em> : The string to use for the \"Previous Month\" navigation UI. Defaults to \"Previous Month\".</dd>\n<dt>nextMonth</dt><dd><em>String</em> : The string to use for the \"Next Month\" navigation UI. Defaults to \"Next Month\".</dd>\n<dt>close</dt><dd><em>String</em> : The string to use for the close button label. Defaults to \"Close\".</dd>\n</dl>", "type": "{Object}", "description": "The map of UI strings which the Calendar UI uses."}}, "constructors": [{"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the Calendar."}], "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"calContainer\"></div>\n</xmp>\n</p>\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe Calendar can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.Calendar(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".\n</p>"}], "namespace": "YAHOO.widget", "module": "calendar", "events": {"showNavEvent": {"description": "Fired after the CalendarNavigator is shown", "guessedname": "showNavEvent", "guessedtype": "property"}, "beforeDeselectEvent": {"description": "Fired before a date or set of dates is deselected", "guessedname": "beforeDeselectEvent", "guessedtype": "property"}, "beforeRenderNavEvent": {"description": "Fired just before the CalendarNavigator is to be rendered", "guessedname": "beforeRenderNavEvent", "guessedtype": "property"}, "beforeHideNavEvent": {"description": "Fired just before the CalendarNavigator is to be hidden", "guessedname": "beforeHideNavEvent", "guessedtype": "property"}, "hideEvent": {"description": "Fired after the Calendar is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "hideNavEvent": {"description": "Fired after the CalendarNavigator is hidden", "guessedname": "hideNavEvent", "guessedtype": "property"}, "renderNavEvent": {"description": "Fired after the CalendarNavigator is rendered", "guessedname": "renderNavEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "Fired before the Calendar is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "Fired just before the Calendar is to be shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "beforeSelectEvent": {"description": "Fired before a date selection is made", "guessedname": "beforeSelectEvent", "guessedtype": "property"}, "renderEvent": {"description": "Fired when the Calendar is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "changePageEvent": {"params": [{"type": "Date", "name": "prevDate", "description": " The date before the page was changed"}, {"type": "Date", "name": "newDate", "description": " The date after the page was changed"}], "description": "Fired when the Calendar page is changed", "guessedname": "changePageEvent", "guessedtype": "property"}, "destroyEvent": {"description": "Fired after the Calendar is destroyed. This event should be used\nfor notification only. When this event is fired, important Calendar instance\nproperties, dom references and event listeners have already been \nremoved/dereferenced, and hence the Calendar instance is not in a usable \nstate.", "guessedname": "destroyEvent", "guessedtype": "property"}, "clearEvent": {"description": "Fired when the Calendar is cleared", "guessedname": "clearEvent", "guessedtype": "property"}, "showEvent": {"description": "Fired after the Calendar is shown", "guessedname": "showEvent", "guessedtype": "property"}, "beforeDestroyEvent": {"description": "Fired just before the Calendar is to be destroyed", "guessedname": "beforeDestroyEvent", "guessedtype": "property"}, "selectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a date selection is made", "guessedname": "selectEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "Fired just before the Calendar is to be hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "beforeShowNavEvent": {"description": "Fired just before the CalendarNavigator is to be shown", "guessedname": "beforeShowNavEvent", "guessedtype": "property"}, "deselectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a date or set of dates is deselected", "guessedname": "deselectEvent", "guessedtype": "property"}, "resetEvent": {"description": "Fired when the Calendar is reset", "guessedname": "resetEvent", "guessedtype": "property"}}, "methods": {"show": {"description": "Shows the Calendar's outer container.", "guessedname": "show", "guessedtype": "function"}, "nextYear": {"description": "Navigates to the next year in the currently selected month in the calendar widget.", "guessedname": "nextYear", "guessedtype": "function"}, "configLocale": {"description": "The default handler for all configuration locale properties", "guessedname": "configLocale", "guessedtype": "function"}, "subtractYears": {"params": [{"type": "Number", "name": "count", "description": " The number of years to subtract from the current calendar"}], "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractYears", "guessedtype": "function"}, "buildWeekdays": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": " The current working HTML array"}], "description": "Renders the Calendar's weekday headers.", "guessedname": "buildWeekdays", "guessedtype": "function"}, "_parseArgs": {"return": {"type": "Object", "description": "Object with id, container, config properties containing\nthe reconciled argument values."}, "description": "Protected helper used to parse Calendar constructor/init arguments.\nAs of 2.4.0, Calendar supports a simpler constructor \nsignature. This method reconciles arguments\nreceived in the pre 2.4.0 and 2.4.0 formats.", "protected": "", "params": [{"type": "Array", "name": "Function", "description": " \"arguments\" array"}], "guessedname": "_parseArgs", "guessedtype": "function"}, "previousMonth": {"description": "Navigates to the previous month page in the calendar widget.", "guessedname": "previousMonth", "guessedtype": "function"}, "getSelectedDates": {"return": {"type": "Date[]", "description": "An array of currently selected JavaScript Date objects."}, "description": "Gets the list of currently selected dates from the calendar.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "renderOutOfBoundsDate": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders a cell that falls before the minimum date or after the maximum date.\nwidget class.", "guessedname": "renderOutOfBoundsDate", "guessedtype": "function"}, "previousYear": {"description": "Navigates to the previous year in the currently selected month in the calendar widget.", "guessedname": "previousYear", "guessedtype": "function"}, "addMonths": {"params": [{"type": "Number", "name": "count", "description": " The number of months to add to the current calendar"}], "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "addMonths", "guessedtype": "function"}, "renderBody": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Date", "name": "workingDate", "description": " The current working Date being used for the render process"}, {"type": "Array", "name": "html", "description": " The current working HTML array"}], "description": "Renders the calendar body.", "guessedname": "renderBody", "guessedtype": "function"}, "addMonthRenderer": {"params": [{"type": "Number", "name": "month", "description": "  The month (1-12) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.", "guessedname": "addMonthRenderer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the Calendar."}], "description": "Initializes the Calendar widget.", "guessedname": "init", "guessedtype": "function"}, "addRenderer": {"params": [{"type": "String", "name": "sDates", "description": "  A date string to associate with the specified renderer. Valid formats\ninclude date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)"}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.", "guessedname": "addRenderer", "guessedtype": "function"}, "applyListeners": {"description": "Applies the Calendar's DOM listeners to applicable elements.", "guessedname": "applyListeners", "guessedtype": "function"}, "clearAllBodyCellStyles": {"params": [{"type": "style", "name": "style", "description": " The CSS class name to remove from all calendar body cells"}], "description": "Removes all styles from all body cells in the current calendar table.", "guessedname": "clearAllBodyCellStyles", "guessedtype": "function"}, "_parsePageDate": {"return": {"type": "Date", "description": "The Date object representing the pagedate"}, "description": "Parses a pagedate configuration property value. The value can either be specified as a string of form \"mm/yyyy\" or a Date object \nand is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object", "private": "", "params": [{"type": "Date|String", "name": "date", "description": " Pagedate value which needs to be parsed"}], "guessedname": "_parsePageDate", "guessedtype": "function"}, "getIndexFromId": {"return": {"type": "Number", "description": "The index of the cell, or -1 if id does not contain an index number"}, "params": [{"type": "String", "name": "strId", "description": " The cell id"}], "description": "Given the id used to mark each Calendar cell, this method\nextracts the index number from the id.", "guessedname": "getIndexFromId", "guessedtype": "function"}, "createTitleBar": {"return": {"type": "", "description": "The title bar element"}, "params": [{"type": "String", "name": "strTitle", "description": " The title to display in the title bar"}], "description": "Creates the title bar element and adds it to Calendar container DIV", "guessedname": "createTitleBar", "guessedtype": "function"}, "onBeforeSelect": {"deprecated": "Event handlers for this event should be susbcribed to beforeSelectEvent.", "description": "Event executed before a date is selected in the calendar widget.", "guessedname": "onBeforeSelect", "guessedtype": "function"}, "removeCloseButton": {"description": "Removes the close button HTML element from the DOM", "guessedname": "removeCloseButton", "guessedtype": "function"}, "renderCellStyleHighlight2": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight2 style", "guessedname": "renderCellStyleHighlight2", "guessedtype": "function"}, "renderCellStyleHighlight3": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight3 style", "guessedname": "renderCellStyleHighlight3", "guessedtype": "function"}, "renderCellStyleHighlight1": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight1 style", "guessedname": "renderCellStyleHighlight1", "guessedtype": "function"}, "renderCellStyleHighlight4": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight4 style", "guessedname": "renderCellStyleHighlight4", "guessedtype": "function"}, "renderHeader": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": " The current working HTML array"}], "description": "Renders the calendar header.", "guessedname": "renderHeader", "guessedtype": "function"}, "addYears": {"params": [{"type": "Number", "name": "count", "description": " The number of years to add to the current calendar"}], "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "addYears", "guessedtype": "function"}, "deselectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": " The index of the cell to deselect in the current calendar."}], "description": "Deselects a date on the current calendar by referencing the index of the cell that should be deselected.\nThis method is used to easily deselect a single cell (usually with a mouse click) without having to do\na full render. The selected style is removed from the cell directly.\nIf the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month \nor out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and \ndeselect events will not be fired.", "guessedname": "deselectCell", "guessedtype": "function"}, "removeRenderers": {"description": "Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and \naddWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers \nto re-render the Calendar without custom renderers applied.", "guessedname": "removeRenderers", "guessedtype": "function"}, "configOptions": {"description": "The default handler for all configuration options properties", "guessedname": "configOptions", "guessedtype": "function"}, "deselect": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String/Date/Date[]", "name": "date", "description": " The date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.\nThe method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable) \nand the array of deselected dates passed to the deselectEvent will not contain any OOB dates.\nIf all dates are OOB, beforeDeselect and deselect events will not be fired.", "guessedname": "deselect", "guessedtype": "function"}, "_indexOfSelectedFieldArray": {"return": {"type": "Number", "description": "The index of the date field array within the collection of selected dates.\n-1 will be returned if the date is not found."}, "description": "Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.", "private": "", "params": [{"type": "Number[]", "name": "find", "description": " The date field array to search for"}], "guessedname": "_indexOfSelectedFieldArray", "guessedtype": "function"}, "_parseRange": {"return": {"type": "", "description": "An array of date field arrays"}, "description": "Converts a date range to the full list of included dates", "private": "", "params": [{"type": "Number[]", "name": "startDate", "description": " Date field array representing the first date in the range"}, {"type": "Number[]", "name": "endDate", "description": "  Date field array representing the last date in the range"}], "guessedname": "_parseRange", "guessedtype": "function", "type": "Array[](Number[])"}, "toString": {"return": {"type": "String", "description": "A string representation of the Calendar object."}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "renderCellNotThisMonth": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Applies the default style used for rendering dates that are not a part of the current\nmonth (preceding or trailing the cells for the current month)", "guessedname": "renderCellNotThisMonth", "guessedtype": "function"}, "configLocaleValues": {"description": "The default handler for all configuration locale field length properties", "guessedname": "configLocaleValues", "guessedtype": "function"}, "buildMonthLabel": {"return": {"type": "String", "description": "The formatted calendar month label"}, "description": "Builds the date label that will be displayed in the calendar header or\nfooter, depending on configuration.", "guessedname": "buildMonthLabel", "guessedtype": "function"}, "_parseDates": {"return": {"type": "", "description": "An array of date field arrays"}, "description": "Converts a multi or single-date string to an array of date field arrays", "private": "", "params": [{"type": "String", "name": "sDates", "description": "  Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy"}], "guessedname": "_parseDates", "guessedtype": "function", "type": "Array[](Number[])"}, "getDateFieldsByCellId": {"return": {"type": "Array", "description": "The array of Date fields for the specified Calendar cell"}, "params": [{"type": "String", "name": "id", "description": " The id of the cell"}], "description": "Retrieves the Date object for the specified Calendar cell", "guessedname": "getDateFieldsByCellId", "guessedtype": "function"}, "configMaxDate": {"description": "The default handler for the \"maxdate\" property", "guessedname": "configMaxDate", "guessedtype": "function"}, "_addRenderer": {"guessedname": "_addRenderer", "params": [{"type": "String", "name": "type", "description": "  The type string that indicates the type of date renderer being added.\nValues are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,\nYAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH"}, {"type": "Array", "name": "aDates", "description": "  An array of dates used to construct the renderer. The format varies based\non the renderer type"}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "The private method used for adding cell renderers to the local render stack.\nThis method is called by other methods that set the renderer type prior to the method call.", "private": "", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "month", "description": "  The numeric month, from 0 (January) to 11 (December)"}], "description": "Sets the calendar's month explicitly", "guessedname": "setMonth", "guessedtype": "function"}, "_fieldArraysAreEqual": {"return": {"type": "Boolean", "description": "The boolean that represents the equality of the two arrays"}, "description": "Determines if 2 field arrays are equal.", "private": "", "params": [{"type": "Number[]", "name": "array1", "description": " The first date field array to compare"}, {"type": "Number[]", "name": "array2", "description": " The first date field array to compare"}], "guessedname": "_fieldArraysAreEqual", "guessedtype": "function"}, "styleCellDefault": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Styles a selectable cell.", "guessedname": "styleCellDefault", "guessedtype": "function"}, "_parseDate": {"return": {"type": "", "description": "A date field array representing the string passed to the method"}, "description": "Converts a date string to a date field array", "private": "", "params": [{"type": "String", "name": "sDate", "description": "   Date string. Valid formats are mm/dd and mm/dd/yyyy."}], "guessedname": "_parseDate", "guessedtype": "function", "type": "Array[](Number[])"}, "doCellMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": " The event"}, {"type": "Calendar", "name": "cal", "description": " A reference to the calendar passed by the Event utility"}], "description": "The event that is executed when the user hovers over a cell", "guessedname": "doCellMouseOver", "guessedtype": "function"}, "doCellMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": " The event"}, {"type": "Calendar", "name": "cal", "description": " A reference to the calendar passed by the Event utility"}], "description": "The event that is executed when the user moves the mouse out of a cell", "guessedname": "doCellMouseOut", "guessedtype": "function"}, "onClear": {"deprecated": "Event handlers for this event should be susbcribed to clearEvent.", "description": "Event executed when the calendar widget is completely cleared to the current month with no selections.", "guessedname": "onClear", "guessedtype": "function"}, "onDeselect": {"deprecated": "Event handlers for this event should be susbcribed to deselectEvent.", "params": [{"type": "Array", "name": "selected", "description": " An array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"}], "description": "Event executed when a date is deselected in the calendar widget.", "guessedname": "onDeselect", "guessedtype": "function"}, "configNavigator": {"description": "The default handler for the \"navigator\" property", "guessedname": "configNavigator", "guessedtype": "function"}, "configClose": {"description": "Default handler for the \"close\" property", "guessedname": "configClose", "guessedtype": "function"}, "render": {"description": "Renders the calendar after it has been configured. The render() method has a specific call chain that will execute\nwhen the method is called: renderHeader, renderBody, renderFooter.\nRefer to the documentation for those methods for information on \nindividual render tasks.", "guessedname": "render", "guessedtype": "function"}, "_buildMonthLabel": {"return": {"type": "String", "description": "Formated month, year string"}, "description": "Helper method, to format a Month Year string, given a JavaScript Date, based on the \nCalendar localization settings", "private": "", "params": [{"type": "Date", "name": "date", "description": ""}], "guessedname": "_buildMonthLabel", "guessedtype": "function"}, "initStyles": {"description": "Defines the style constants for the Calendar", "guessedname": "initStyles", "guessedtype": "function"}, "resetRenderers": {"description": "Resets the render stack of the current calendar to its original pre-render value.", "guessedname": "resetRenderers", "guessedtype": "function"}, "select": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String/Date/Date[]", "name": "date", "description": " The date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.\nAny dates which are OOB (out of bounds, not selectable) will not be selected and the array of \nselected dates passed to the selectEvent will not contain OOB dates.\nIf all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.", "guessedname": "select", "guessedtype": "function"}, "refreshLocale": {"private": "", "description": "Refreshes the locale values used to build the Calendar.", "guessedname": "refreshLocale", "guessedtype": "function"}, "initEvents": {"description": "Initializes Calendar's built-in CustomEvents", "guessedname": "initEvents", "guessedtype": "function"}, "nextMonth": {"description": "Navigates to the next month page in the calendar widget.", "guessedname": "nextMonth", "guessedtype": "function"}, "onReset": {"deprecated": "Event handlers for this event should be susbcribed to resetEvemt.", "description": "Event executed when the calendar widget is reset to its original state.", "guessedname": "onReset", "guessedtype": "function"}, "addWeekdayRenderer": {"params": [{"type": "Number", "name": "weekday", "description": "  The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": " The function executed to render cells that match the render rules for this renderer."}], "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.", "guessedname": "addWeekdayRenderer", "guessedtype": "function"}, "isDateOOM": {"return": {"type": "Boolean", "description": "true if the date is OOM"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date object for which to check the OOM status"}], "description": "Determines whether a given date is OOM (out of month).", "guessedname": "isDateOOM", "guessedtype": "function"}, "getCellIndex": {"return": {"type": "Number", "description": "The index of the date in Calendars cellDates/cells arrays, or -1 if the date \nis not on the curently rendered Calendar page."}, "params": [{"type": "Date", "name": "date", "description": " JavaScript Date object, for which to find a cell index."}], "description": "Find the Calendar's cell index for a given date.\nIf the date is not found, the method returns -1.\n<p>\nThe returned index can be used to lookup the cell HTMLElement  \nusing the Calendar's cells array or passed to selectCell to select \ncells by index. \n</p>\nSee <a href=\"#cells\">cells</a>, <a href=\"#selectCell\">selectCell</a>.", "guessedname": "getCellIndex", "guessedtype": "function"}, "isDateOOB": {"return": {"type": "Boolean", "description": "true if the date is OOB"}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date object for which to check the OOB status"}], "description": "Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).", "guessedname": "isDateOOB", "guessedtype": "function"}, "doSelectCell": {"params": [{"type": "DOMEvent", "name": "e", "description": " The DOM event"}, {"type": "Calendar", "name": "cal", "description": " A reference to the calendar"}], "description": "The default event handler for date cell selection. Currently attached to \nthe Calendar's bounding box, referenced by it's <a href=\"#property_oDomContainer\">oDomContainer</a> property.", "guessedname": "doSelectCell", "guessedtype": "function"}, "configStrings": {"description": "The default handler for the \"strings\" property", "guessedname": "configStrings", "guessedtype": "function"}, "onRender": {"deprecated": "Event handlers for this event should be susbcribed to renderEvent.", "description": "Event executed when the calendar widget is rendered.", "guessedname": "onRender", "guessedtype": "function"}, "renderRowHeader": {"params": [{"type": "Number", "name": "weekNum", "description": " The week number of the current row"}, {"type": "Array", "name": "cell", "description": " The current working HTML array"}], "description": "Renders the row header for a week.", "guessedname": "renderRowHeader", "guessedtype": "function"}, "renderFooter": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": " The current working HTML array"}], "description": "Renders the calendar footer. In the default implementation, there is\nno footer.", "guessedname": "renderFooter", "guessedtype": "function"}, "configSelected": {"description": "The default handler for the \"selected\" property", "guessedname": "configSelected", "guessedtype": "function"}, "renderRowFooter": {"params": [{"type": "Number", "name": "weekNum", "description": " The week number of the current row"}, {"type": "Array", "name": "cell", "description": " The current working HTML array"}], "description": "Renders the row footer for a week.", "guessedname": "renderRowFooter", "guessedtype": "function"}, "reset": {"description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s).", "guessedname": "reset", "guessedtype": "function"}, "deselectAll": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."}, "description": "Deselects all dates on the current calendar.", "guessedname": "deselectAll", "guessedtype": "function"}, "renderBodyCellRestricted": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders the current calendar cell as a non-selectable \"black-out\" date using the default\nrestricted style.", "guessedname": "renderBodyCellRestricted", "guessedtype": "function"}, "onBeforeDeselect": {"deprecated": "Event handlers for this event should be susbcribed to beforeDeselectEvent.", "description": "Event executed before a date is deselected in the calendar widget.", "guessedname": "onBeforeDeselect", "guessedtype": "function"}, "onChangePage": {"deprecated": "Event handlers for this event should be susbcribed to changePageEvent.", "description": "Event executed when the user navigates to a different calendar page.", "guessedname": "onChangePage", "guessedtype": "function"}, "_toFieldArray": {"return": {"type": "Array[](Number[])", "description": "Array of date field arrays"}, "description": "Converts a date (either a JavaScript Date object, or a date string) to the internal data structure\nused to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].", "private": "", "params": [{"type": "String/Date/Date[]", "name": "date", "description": " The date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "guessedname": "_toFieldArray", "guessedtype": "function"}, "renderCellStyleSelected": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Applies the default style used for rendering selected dates to the current calendar cell", "guessedname": "renderCellStyleSelected", "guessedtype": "function"}, "configToday": {"description": "The default handler for the \"today\" property", "guessedname": "configToday", "guessedtype": "function"}, "clearElement": {"params": [{"type": "HTMLTableCellElement", "name": "cell", "description": " The cell to clear"}], "description": "Clears the inner HTML, CSS class and style information from the specified cell.", "guessedname": "clearElement", "guessedtype": "function"}, "renderCellDefault": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Renders a single standard calendar cell in the calendar widget table.\nAll logic for determining how a standard default cell will be rendered is \nencapsulated in this method, and must be accounted for when extending the\nwidget class.", "guessedname": "renderCellDefault", "guessedtype": "function"}, "subtractMonths": {"params": [{"type": "Number", "name": "count", "description": " The number of months to subtract from the current calendar"}], "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractMonths", "guessedtype": "function"}, "buildDayLabel": {"return": {"type": "String", "description": "The formatted day label"}, "params": [{"type": "Date", "name": "workingDate", "description": " The current working date"}], "description": "Builds the date digit that will be displayed in calendar cells", "guessedname": "buildDayLabel", "guessedtype": "function"}, "toDate": {"return": {"type": "Date", "description": "JavaScript Date object representing the date field array."}, "params": [{"type": "Number[]", "name": "dateFieldArray", "description": " The date field array to convert to a JavaScript Date."}], "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array\nis the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.", "guessedname": "toDate", "guessedtype": "function"}, "configPageDate": {"description": "The default handler for the \"pagedate\" property", "guessedname": "configPageDate", "guessedtype": "function"}, "createCloseButton": {"return": {"type": "", "description": "The close HTML element created"}, "description": "Creates the close button HTML element and adds it to Calendar container DIV", "guessedname": "createCloseButton", "guessedtype": "function"}, "destroy": {"description": "Destroys the Calendar instance. The method will remove references\nto HTML elements, remove any event listeners added by the Calendar,\nand destroy the Config and CalendarNavigator instances it has created.", "guessedname": "destroy", "guessedtype": "function"}, "configTitle": {"description": "Default handler for the \"title\" property", "guessedname": "configTitle", "guessedtype": "function"}, "selectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": " The index of the cell to select in the current calendar."}], "description": "Selects a date on the current calendar by referencing the index of the cell that should be selected.\nThis method is used to easily select a single cell (usually with a mouse click) without having to do\na full render. The selected style is applied to the cell directly.\nIf the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month \nor out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.", "guessedname": "selectCell", "guessedtype": "function"}, "doPreviousMonthNav": {"params": [{"type": "DOMEvent", "name": "e", "description": " The DOM event"}, {"type": "Calendar", "name": "cal", "description": " A reference to the calendar"}], "description": "The default event handler for clicks on the \"Previous Month\" navigation UI", "guessedname": "doPreviousMonthNav", "guessedtype": "function"}, "removeTitleBar": {"description": "Removes the title bar element from the DOM", "guessedname": "removeTitleBar", "guessedtype": "function"}, "configMinDate": {"description": "The default handler for the \"mindate\" property", "guessedname": "configMinDate", "guessedtype": "function"}, "hide": {"description": "Hides the Calendar's outer container from view.", "guessedname": "hide", "guessedtype": "function"}, "validate": {"type": "Boolean", "return": {"type": "", "description": "Should return true if the widget validates, and false if\nit doesn't."}, "description": "Validates the calendar widget. This method has no default implementation\nand must be extended by subclassing the widget.", "guessedname": "validate", "guessedtype": "function"}, "getDateByCellId": {"return": {"type": "Date", "description": "The Date object for the specified Calendar cell"}, "params": [{"type": "String", "name": "id", "description": " The id of the cell"}], "description": "Retrieves the Date object for the specified Calendar cell", "guessedname": "getDateByCellId", "guessedtype": "function"}, "clear": {"description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year.", "guessedname": "clear", "guessedtype": "function"}, "configIframe": {"description": "Default Config listener for the iframe property. If the iframe config property is set to true, \nrenders the built-in IFRAME shim if the container is relatively or absolutely positioned.", "guessedname": "configIframe", "guessedtype": "function"}, "_toDate": {"return": {"type": "Date", "description": "JavaScript Date object representing the date field array"}, "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.", "deprecated": "Made public, toDate", "private": "", "params": [{"type": "Number[]", "name": "dateFieldArray", "description": " The date field array to convert to a JavaScript Date."}], "guessedname": "_toDate", "guessedtype": "function"}, "onSelect": {"deprecated": "Event handlers for this event should be susbcribed to selectEvent.", "params": [{"type": "Array", "name": "selected", "description": " An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"}], "description": "Event executed when a date is selected in the calendar widget.", "guessedname": "onSelect", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "year", "description": "  The numeric 4-digit year"}], "description": "Sets the calendar's year explicitly.", "guessedname": "setYear", "guessedtype": "function"}, "renderCellStyleToday": {"params": [{"type": "Date", "name": "workingDate", "description": "  The current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "   The current working cell in the calendar"}], "description": "Applies the default style used for rendering today's date to the current calendar cell", "guessedname": "renderCellStyleToday", "guessedtype": "function"}, "doNextMonthNav": {"params": [{"type": "DOMEvent", "name": "e", "description": " The DOM event"}, {"type": "Calendar", "name": "cal", "description": " A reference to the calendar"}], "description": "The default event handler for clicks on the \"Next Month\" navigation UI", "guessedname": "doNextMonthNav", "guessedtype": "function"}}, "file": "Calendar.js", "shortname": "Calendar", "properties": {"Style.CSS_HEADER_TEXT": {"guessedname": "CSS_HEADER_TEXT", "guessedtype": "property"}, "Style.CSS_CELL_RIGHT": {"guessedname": "CSS_CELL_RIGHT", "guessedtype": "property"}, "Style.CSS_CELL_BOTTOM": {"guessedname": "CSS_CELL_BOTTOM", "guessedtype": "property"}, "YAHOO.widget.Calendar.WEEKDAY": {"description": "Type constant used for renderers to represent a weekday", "static": "", "guessedname": "WEEKDAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.LONG": {"description": "Constant used to represent long date field string formats (e.g. Monday or February)", "static": "", "guessedname": "LONG", "guessedtype": "property", "type": "String", "final": ""}, "cfg": {"type": "YAHOO.util.Config", "description": "The Config object used to hold the configuration variables for the Calendar", "guessedname": "cfg", "guessedtype": "property"}, "Style.CSS_HEADER": {"guessedname": "CSS_HEADER", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT4": {"guessedname": "CSS_CELL_HIGHLIGHT4", "guessedtype": "property"}, "Style.CSS_CONTAINER": {"guessedname": "CSS_CONTAINER", "guessedtype": "property"}, "YAHOO.widget.Calendar.MONTH_DAY": {"description": "Type constant used for renderers to represent an individual date across any year (M/D)", "static": "", "guessedname": "MONTH_DAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.IMG_ROOT": {"description": "The path to be used for images loaded for the Calendar", "deprecated": "You can now customize images by overriding the calclose, calnavleft and calnavright default CSS classes for the close icon, left arrow and right arrow respectively", "static": "", "guessedname": "IMG_ROOT", "guessedtype": "property", "type": "String"}, "Style.CSS_NAV_RIGHT": {"guessedname": "CSS_NAV_RIGHT", "guessedtype": "property"}, "Config": {"description": "The configuration object used to set up the calendars various locale and style options.", "deprecated": "Configuration properties should be set by calling Calendar.cfg.setProperty.", "private": "", "guessedname": "Config", "guessedtype": "property", "type": "Object"}, "id": {"type": "String", "description": "The id that uniquely identifies this Calendar.", "guessedname": "id", "guessedtype": "property"}, "_selectedDates": {"guessedname": "_selectedDates", "type": "Array", "description": "The private list of initially selected dates.", "private": "", "guessedtype": "property"}, "index": {"type": "Number", "description": "The index of this item in the parent group", "guessedname": "index", "guessedtype": "property"}, "YAHOO.widget.Calendar.ONE_CHAR": {"description": "Constant used to represent single character date field string formats (e.g. M, T, W)", "static": "", "guessedname": "ONE_CHAR", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.STOP_RENDER": {"description": "Constant used for halting the execution of the remainder of the render stack", "static": "", "guessedname": "STOP_RENDER", "guessedtype": "property", "type": "String", "final": ""}, "oNavigator": {"type": "CalendarNavigator", "description": "A reference to the CalendarNavigator instance created for this Calendar.\nWill be null if the \"navigator\" configuration property has not been set", "guessedname": "oNavigator", "guessedtype": "property"}, "YAHOO.widget.Calendar.MONTH": {"description": "Type constant used for renderers to represent a month across any year", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_LINK_CLOSE": {"guessedname": "CSS_LINK_CLOSE", "guessedtype": "property"}, "Style.CSS_CELL": {"guessedname": "CSS_CELL", "guessedtype": "property"}, "renderStack": {"type": "Array[]", "description": "The list of render functions, along with required parameters, used to render cells.", "guessedname": "renderStack", "guessedtype": "property"}, "Style.CSS_CELL_LEFT": {"guessedname": "CSS_CELL_LEFT", "guessedtype": "property"}, "Style.CSS_BODY": {"guessedname": "CSS_BODY", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT1": {"guessedname": "CSS_CELL_HIGHLIGHT1", "guessedtype": "property"}, "Style.CSS_SINGLE": {"guessedname": "CSS_SINGLE", "guessedtype": "property"}, "_renderStack": {"guessedname": "_renderStack", "type": "Array", "description": "A copy of the initial render functions created before rendering.", "private": "", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT3": {"guessedname": "CSS_CELL_HIGHLIGHT3", "guessedtype": "property"}, "Style.CSS_FIXED_SIZE": {"guessedname": "CSS_FIXED_SIZE", "guessedtype": "property"}, "today": {"deprecated": "Use the \"today\" configuration property", "type": "Date", "description": "A Date object representing today's date.", "guessedname": "today", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT2": {"guessedname": "CSS_CELL_HIGHLIGHT2", "guessedtype": "property"}, "Style.CSS_WITH_TITLE": {"guessedname": "CSS_WITH_TITLE", "guessedtype": "property"}, "Style.CSS_WEEKDAY_CELL": {"guessedname": "CSS_WEEKDAY_CELL", "guessedtype": "property"}, "YAHOO.widget.Calendar.STYLES": {"type": "Object An object with name/value pairs for the class name identifier/value.", "static": "", "description": "The set of default style constants for the Calendar", "guessedname": "STYLES", "guessedtype": "property"}, "browser": {"description": "Returns a string representing the current browser.", "deprecated": "As of 2.3.0, environment information is available in YAHOO.env.ua", "see": "YAHOO.env.ua", "guessedname": "browser", "guessedtype": "function", "type": "String"}, "containerId": {"type": "String", "description": "The unique id associated with the Calendar's container", "guessedname": "containerId", "guessedtype": "property"}, "parent": {"type": "CalendarGroup", "description": "The parent CalendarGroup, only to be set explicitly by the parent group", "guessedname": "parent", "guessedtype": "property"}, "Style.CSS_CELL_OOM": {"guessedname": "CSS_CELL_OOM", "guessedtype": "property"}, "Style.CSS_CELL_OOB": {"guessedname": "CSS_CELL_OOB", "guessedtype": "property"}, "YAHOO.widget.Calendar._EVENT_TYPES": {"description": "The set of Custom Event types supported by the Calendar", "private": "", "static": "", "guessedname": "_EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "Style.CSS_CLOSE": {"guessedname": "CSS_CLOSE", "guessedtype": "property"}, "Style.CSS_CALENDAR": {"guessedname": "CSS_CALENDAR", "guessedtype": "property"}, "Style.CSS_CELL_TODAY": {"guessedname": "CSS_CELL_TODAY", "guessedtype": "property"}, "Style.CSS_FOOTER": {"guessedname": "CSS_FOOTER", "guessedtype": "property"}, "YAHOO.widget.Calendar._DEFAULT_CONFIG": {"description": "The set of default Config property keys and values for the Calendar", "deprecated": "Made public. See the public DEFAULT_CONFIG property for details", "private": "", "static": "", "guessedname": "_DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Calendar.MEDIUM": {"description": "Constant used to represent medium date field string formats (e.g. Mon)", "static": "", "guessedname": "MEDIUM", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL_SELECTABLE": {"guessedname": "CSS_CELL_SELECTABLE", "guessedtype": "property"}, "YAHOO.widget.Calendar.RANGE": {"description": "Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)", "static": "", "guessedname": "RANGE", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL_HOVER": {"guessedname": "CSS_CELL_HOVER", "guessedtype": "property"}, "Style.CSS_CELL_SELECTOR": {"guessedname": "CSS_CELL_SELECTOR", "guessedtype": "property"}, "YAHOO.widget.Calendar.DEFAULT_CONFIG": {"type": "Object", "static": "", "description": "The set of default Config property keys and values for the Calendar.\n<p>\nNOTE: This property is made public in order to allow users to change \nthe default values of configuration properties. Users should not \nmodify the key string, unless they are overriding the Calendar implementation\n</p>\n<p>\nThe property is an object with key/value pairs, the key being the \nuppercase configuration property name and the value being an object \nliteral with a key string property, and a value property, specifying the \ndefault value of the property. To override a default value, you can set\nthe value property, for example, <code>YAHOO.widget.Calendar.DEFAULT_CONFIG.MULTI_SELECT.value = true;</code>", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property"}, "Options": {"type": "Object", "description": "The local object which contains the Calendar's options", "guessedname": "Options", "guessedtype": "property"}, "Style.CSS_WEEKDAY_ROW": {"guessedname": "CSS_WEEKDAY_ROW", "guessedtype": "property"}, "Style.CSS_CELL_RESTRICTED": {"guessedname": "CSS_CELL_RESTRICTED", "guessedtype": "property"}, "cellDates": {"type": "Array[](Number[])", "description": "The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].", "guessedname": "cellDates", "guessedtype": "property"}, "Style.CSS_ROW_HEADER": {"guessedname": "CSS_ROW_HEADER", "guessedtype": "property"}, "Style.CSS_ROW_FOOTER": {"guessedname": "CSS_ROW_FOOTER", "guessedtype": "property"}, "Style.CSS_CELL_TOP": {"guessedname": "CSS_CELL_TOP", "guessedtype": "property"}, "Locale": {"type": "Object", "description": "The local object which contains the Calendar's locale settings", "guessedname": "Locale", "guessedtype": "property"}, "cells": {"type": "HTMLTableCellElement[]", "description": "The collection of calendar table cells", "guessedname": "cells", "guessedtype": "property"}, "Style.CSS_CELL_SELECTED": {"guessedname": "CSS_CELL_SELECTED", "guessedtype": "property"}, "YAHOO.widget.Calendar.DATE": {"description": "Type constant used for renderers to represent an individual date (M/D/Y)", "static": "", "guessedname": "DATE", "guessedtype": "property", "type": "String", "final": ""}, "domEventMap": {"type": "Object", "description": "A map of DOM event handlers to attach to cells associated with specific CSS class names", "guessedname": "domEventMap", "guessedtype": "property"}, "YAHOO.widget.Calendar.DISPLAY_DAYS": {"description": "Constant that represents the total number of date cells that are displayed in a given month", "static": "", "guessedname": "DISPLAY_DAYS", "guessedtype": "property", "type": "Number", "final": ""}, "oDomContainer": {"type": "HTMLElement", "description": "The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.", "guessedname": "oDomContainer", "guessedtype": "property"}, "YAHOO.widget.Calendar._STYLES": {"description": "The set of default style constants for the Calendar", "deprecated": "Made public. See the public STYLES property for details", "private": "", "static": "", "guessedname": "_STYLES", "guessedtype": "property", "type": "Object", "final": ""}, "Style.CSS_NAV_LEFT": {"guessedname": "CSS_NAV_LEFT", "guessedtype": "property"}, "Style.CSS_NAV": {"guessedname": "CSS_NAV", "guessedtype": "property"}, "YAHOO.widget.Calendar.SHORT": {"description": "Constant used to represent short date field string formats (e.g. Tu or Feb)", "static": "", "guessedname": "SHORT", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"calContainer\"></div>\n</xmp>\n</p>\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe Calendar can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.Calendar(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".\n</p>"}, "YAHOO.widget.StackedBarSeries": {"name": "YAHOO.widget.StackedBarSeries", "constructors": [{"description": "StackedBarSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "StackedBarSeries", "uses": ["YAHOO.widget.CartesianSeries"], "file": "Series.js", "guessedtype": "function", "shortname": "StackedBarSeries", "description": "StackedBarSeries class for the YUI Charts widget."}, "YAHOO.widget.Axis": {"name": "YAHOO.widget.Axis", "constructors": [{"description": "Defines a CartesianChart's vertical or horizontal axis."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "Axis", "file": "Axis.js", "guessedtype": "function", "shortname": "Axis", "properties": {"title": {"type": "String", "description": "The text that will appear next to the axis to indicate information about the data that it displays.", "guessedname": "title", "guessedtype": "property"}, "labelFunction": {"type": "String", "description": "A string reference to the globally-accessible function that may be called to\ndetermine each of the label values for this axis. Also accepts function references.", "guessedname": "labelFunction", "guessedtype": "property"}, "type": {"type": "String", "description": "The type of axis.", "guessedname": "type", "guessedtype": "property"}, "reverse": {"type": "Boolean", "description": "If true, the items on the axis will be drawn in opposite direction.", "guessedname": "reverse", "guessedtype": "property"}, "labelSpacing": {"type": "Number", "description": "The space, in pixels, between labels on an axis.", "guessedname": "labelSpacing", "guessedtype": "property"}}, "description": "Defines a CartesianChart's vertical or horizontal axis."}, "YAHOO.util.Cookie": {"name": "YAHOO.util.Cookie", "namespace": "YAHOO.util", "module": "cookie", "guessedname": "Cookie", "methods": {"setSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a sub cookie with a given name to a particular value.", "static": "", "guessedname": "setSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "_parseCookieHash": {"return": {"type": "Object", "description": "An object containing entries for each cookie value."}, "description": "Parses a cookie hash string into an object.", "private": "", "static": "", "guessedname": "_parseCookieHash", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie hash string to parse. The string should already be URL-decoded."}]}, "set": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name and value.", "static": "", "guessedname": "set", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set for the cookie."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nraw (true/false), and secure (true/false)."}]}, "setSubs": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name to contain a hash of name-value pairs.", "static": "", "guessedname": "setSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Object", "name": "value", "description": " An object containing name-value pairs."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "exists": {"return": {"type": "Boolean", "description": "True if the cookie exists, false if not."}, "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).", "static": "", "guessedname": "exists", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to check."}]}, "get": {"return": {"type": "Variant", "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."}, "description": "Returns the cookie value for the given name.", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "Object|Function", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: raw (true/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility."}]}, "_parseCookieString": {"return": {"type": "Object", "description": "An object containing entries for each accessible cookie."}, "description": "Parses a cookie string into an object representing all accessible cookies.", "private": "", "static": "", "guessedname": "_parseCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie string to parse."}, {"type": "Boolean", "name": "decode", "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."}]}, "remove": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.", "static": "", "guessedname": "remove", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string),\nand secure (true/false). The expires option will be overwritten\nby the method."}]}, "removeSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a subcookie with a given name. Removing the last subcookie\nwon't remove the entire cookie unless options.removeIfEmpty is true.", "static": "", "guessedname": "removeSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie in which the subcookie exists."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true/false), and secure (true/false). This must be the same\nsettings as the original subcookie."}]}, "_createCookieHashString": {"return": {"type": "String", "description": "A string suitable for use as a cookie value."}, "description": "Formats a cookie value for an object containing multiple values.", "private": "", "static": "", "guessedname": "_createCookieHashString", "guessedtype": "function", "params": [{"type": "Object", "name": "hash", "description": " An object of key-value pairs to create a string for."}]}, "getSubs": {"return": {"type": "Object", "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."}, "description": "Returns an object containing name-value pairs stored in the cookie with the given name.", "static": "", "guessedname": "getSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}]}, "getSub": {"return": {"type": "Variant", "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."}, "description": "Returns the value of a subcookie.", "static": "", "guessedname": "getSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_createCookieString": {"return": {"type": "String", "description": "The formatted cookie string."}, "description": "Creates a cookie string that can be assigned into document.cookie.", "private": "", "static": "", "guessedname": "_createCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie."}, {"type": "String", "name": "value", "description": " The value of the cookie."}, {"type": "Boolean", "name": "encodeValue", "description": " True to encode the value, false to leave as-is."}, {"type": "Object", "name": "options", "description": " (Optional) Options for the cookie."}]}}, "static": "", "file": "Cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Cookie utility."}, "YAHOO.widget.EditorInfo": {"name": "YAHOO.widget.EditorInfo", "namespace": "YAHOO.widget", "module": "editor", "guessedname": "EditorInfo", "methods": {"saveAll": {"params": [{"type": "HTMLElement", "name": "form", "description": " The form to check if this Editor instance belongs to"}], "description": "Saves all Editor instances on the page. If a form reference is passed, only Editor's bound to this form will be saved.", "guessedname": "saveAll", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the EditorInfo.", "guessedname": "toString", "guessedtype": "function"}, "getEditorById": {"return": {"type": "", "description": "Object <a href=\"YAHOO.widget.Editor.html\">YAHOO.widget.Editor</a>"}, "params": [{"type": "String/HTMLElement", "name": "id", "description": " The id or reference of the textarea to return the Editor instance of"}], "description": "Returns a reference to the Editor object associated with the given textarea", "guessedname": "getEditorById", "guessedtype": "function"}}, "static": "", "file": "simple-editor.js", "guessedtype": "property", "shortname": "EditorInfo", "properties": {"blankImage": {"guessedname": "blankImage", "type": "String", "description": "A reference to the blankImage url", "private": "", "guessedtype": "property"}, "_instances": {"guessedname": "_instances", "type": "Object", "description": "A reference to all editors on the page.", "private": "", "guessedtype": "property"}, "window": {"guessedname": "window", "type": "Object <a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow</a>", "description": "A reference to the currently open window object in any editor on the page.", "private": "", "guessedtype": "property"}, "panel": {"guessedname": "panel", "type": "Object <a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>", "description": "A reference to the currently open panel in any editor on the page.", "private": "", "guessedtype": "property"}}, "description": "Singleton object used to track the open window objects and panels across the various open editors"}, "YAHOO.widget.HTMLNode": {"name": "YAHOO.widget.HTMLNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node.  \nProviding a string is the same as providing an object with a single property named html.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions.\nAll other attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"}, {"type": "boolean", "name": "hasIcon", "description": "  specifies whether or not leaf nodes should\nbe rendered with or without a horizontal line line and/or toggle icon. If the icon\nis not displayed, the content fills the space it would have occupied.\nThis option operates independently of the leaf node presentation logic\nfor dynamic nodes.\n(deprecated; use oData.hasIcon)"}], "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, it will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object,it looks for a parameter called \"html\" that will be\nused for this node's display."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "HTMLNode", "methods": {"getNodeDefinition": {"return": {"type": "Object | false", "description": "definition of the tree or false if any node is defined as dynamic"}, "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if any node loads dynamically, regardless of whether it is loaded or not.", "guessedname": "getNodeDefinition", "guessedtype": "function"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "HTMLNode.js", "guessedtype": "function", "shortname": "HTMLNode", "properties": {"setHtml": {"param": "o {object} An html string or object containing an html property", "description": "Synchronizes the node.html, and the node's content", "guessedname": "setHtml", "guessedtype": "function"}, "_type": {"description": "The node type", "default": "\"HTMLNode\"", "private": "", "guessedname": "_type", "guessedtype": "property", "type": "string"}, "html": {"type": "string", "description": "The HTML content to use for this node's display", "guessedname": "html", "guessedtype": "property"}, "initContent": {"param": "oData {object} An html string or object containing an html property", "description": "Sets up the node label", "guessedname": "initContent", "guessedtype": "function"}, "contentStyle": {"type": "string", "description": "The CSS class for the html content container.  Defaults to ygtvhtml, but \ncan be overridden to provide a custom presentation for a specific node.", "guessedname": "contentStyle", "guessedtype": "property"}}, "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, it will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object,it looks for a parameter called \"html\" that will be\nused for this node's display."}, "YAHOO.util.ArrayAssert": {"name": "YAHOO.util.ArrayAssert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "guessedname": "containsMatch", "guessedtype": "function"}, "doesNotContain": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "doesNotContain", "guessedtype": "function"}, "indexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "indexOf", "guessedtype": "function"}, "itemsAreSame": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreSame", "guessedtype": "function"}, "contains": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "contains", "guessedtype": "function"}, "containsItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "guessedname": "containsItems", "guessedtype": "function"}, "doesNotContainItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "guessedname": "doesNotContainItems", "guessedtype": "function"}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreEqual", "guessedtype": "function"}, "isEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is empty.", "guessedname": "isEmpty", "guessedtype": "function"}, "lastIndexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "lastIndexOf", "guessedtype": "function"}, "isNotEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is not empty.", "guessedname": "isNotEmpty", "guessedtype": "function"}, "doesNotContainMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "guessedname": "doesNotContainMatch", "guessedtype": "function"}}, "static": "", "file": "ArrayAssert.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "YAHOO.widget.StackedColumnChart": {"name": "YAHOO.widget.StackedColumnChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "StackedColumnChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "StackedColumnChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "StackedColumnChart", "description": "StackedColumnChart class for the YUI Charts widget."}, "YAHOO.util.DataSourceBase": {"name": "YAHOO.util.DataSourceBase", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "Base class for the YUI DataSource utility."}], "namespace": "YAHOO.util", "module": "datasource", "properties": {"TYPE_HTMLTABLE": {"description": "Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements.", "default": "6", "guessedname": "TYPE_HTMLTABLE", "guessedtype": "property", "type": "Number", "final": ""}, "maxCacheEntries": {"default": "0", "type": "Number", "description": "Max size of the local cache.  Set to 0 to turn off caching.  Caching is\nuseful to reduce the number of server connections.  Recommended only for data\nsources that return comprehensive results for queries or when stale data is\nnot an issue.", "guessedname": "maxCacheEntries", "guessedtype": "property"}, "_oQueue": {"guessedname": "_oQueue", "type": "Object", "description": "Local queue of request connections, enabled if queue needs to be managed.", "private": "", "guessedtype": "property"}, "TYPE_SCRIPTNODE": {"description": "Type is hosted on a server via a dynamic script node.", "default": "7", "guessedname": "TYPE_SCRIPTNODE", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_TEXT": {"description": "Type is plain text.", "default": "5", "guessedname": "TYPE_TEXT", "guessedtype": "property", "type": "Number", "final": ""}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of DataSource instance.", "private": "", "guessedtype": "property"}, "DataSourceBase._nTransactionId": {"description": "Internal class variable to assign unique transaction IDs.", "private": "", "static": "", "guessedname": "_nTransactionId", "guessedtype": "property", "type": "Number"}, "responseType": {"default": "YAHOO.util.DataSourceBase.TYPE_UNKNOWN", "type": "Number", "description": "Format of response:\n<dl>  \n<dt>TYPE_UNKNOWN</dt>\n<dt>TYPE_JSARRAY</dt>\n<dt>TYPE_JSON</dt>\n<dt>TYPE_XML</dt>\n<dt>TYPE_TEXT</dt>\n<dt>TYPE_HTMLTABLE</dt> \n</dl>", "guessedname": "responseType", "guessedtype": "property"}, "DataSourceBase._nIndex": {"description": "Internal class variable to index multiple DataSource instances.", "private": "", "static": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "TYPE_XHR": {"description": "Type is hosted on a server via an XHR connection.", "default": "2", "guessedname": "TYPE_XHR", "guessedtype": "property", "type": "Number", "final": ""}, "useXPath": {"default": "false", "type": "Boolean", "description": "When working with XML data, setting this property to true enables support for\nXPath-syntaxed locators in schema definitions.", "guessedname": "useXPath", "guessedtype": "property"}, "TYPE_JSON": {"description": "Type is JSON.", "default": "3", "guessedname": "TYPE_JSON", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_UNKNOWN": {"description": "Type is unknown.", "default": "-1", "guessedname": "TYPE_UNKNOWN", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_JSFUNCTION": {"description": "Type is a JavaScript Function.", "default": "1", "guessedname": "TYPE_JSFUNCTION", "guessedtype": "property", "type": "Number", "final": ""}, "dataType": {"default": "YAHOO.util.DataSourceBase.TYPE_UNKNOWN", "type": "Number", "description": "Where the live data is held:\n<dl>  \n<dt>TYPE_UNKNOWN</dt>\n<dt>TYPE_LOCAL</dt>\n<dt>TYPE_XHR</dt>\n<dt>TYPE_SCRIPTNODE</dt>\n<dt>TYPE_JSFUNCTION</dt>\n</dl>", "guessedname": "dataType", "guessedtype": "property"}, "_aCache": {"guessedname": "_aCache", "type": "Object[]", "description": "Local cache of data result object literals indexed chronologically.", "private": "", "guessedtype": "property"}, "liveData": {"type": "Object", "description": "Pointer to live database.", "guessedname": "liveData", "guessedtype": "property"}, "TYPE_LOCAL": {"description": "Type is local.", "default": "8", "guessedname": "TYPE_LOCAL", "guessedtype": "property", "type": "Number", "final": ""}, "ERROR_DATAINVALID": {"description": "Error message for invalid dataresponses.", "default": "\"Invalid data\"", "guessedname": "ERROR_DATAINVALID", "guessedtype": "property", "type": "String", "final": ""}, "responseSchema": {"type": "Object", "description": "Response schema object literal takes a combination of the following properties:\n<dl>\n<dt>resultsList</dt> <dd>Pointer to array of tabular data</dd>\n<dt>resultNode</dt> <dd>Pointer to node name of row data (XML data only)</dd>\n<dt>recordDelim</dt> <dd>Record delimiter (text data only)</dd>\n<dt>fieldDelim</dt> <dd>Field delimiter (text data only)</dd>\n<dt>fields</dt> <dd>Array of field names (aka keys), or array of object literals\nsuch as: {key:\"fieldname\",parser:YAHOO.util.DataSourceBase.parseDate}</dd>\n<dt>metaFields</dt> <dd>Object literal of keys to include in the oParsedResponse.meta collection</dd>\n<dt>metaNode</dt> <dd>Name of the node under which to search for meta information in XML response data</dd>\n</dl>", "guessedname": "responseSchema", "guessedtype": "property"}, "TYPE_JSARRAY": {"description": "Type is a JavaScript Array.", "default": "0", "guessedname": "TYPE_JSARRAY", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_XML": {"description": "Type is XML.", "default": "4", "guessedname": "TYPE_XML", "guessedtype": "property", "type": "Number", "final": ""}, "ERROR_DATANULL": {"description": "Error message for null data responses.", "default": "\"Null data\"", "guessedname": "ERROR_DATANULL", "guessedtype": "property", "type": "String", "final": ""}, "parseJSONArgs": {"type": "{MIXED|Array} If an Array, contents are used as individual arguments.\nOtherwise, value is used as an additional argument.", "description": "Additional arguments passed to the JSON parse routine.  The JSON string\nis the assumed first argument (where applicable).  This property is not\nset by default, but the parse methods will use it if present."}, "DataSource.Parser": {"type": "Object", "static": "", "description": "Data parsing functions.", "guessedname": "Parser", "guessedtype": "property"}, "_aIntervals": {"guessedname": "_aIntervals", "type": "Array", "description": "Array of polling interval IDs that have been enabled, needed to clear all intervals.", "private": "", "guessedtype": "property"}}, "guessedname": "DataSourceBase", "methods": {"flushCache": {"description": "Flushes cache.", "guessedname": "flushCache", "guessedtype": "function"}, "getCachedResponse": {"return": {"type": "Object", "description": "Cached response object or null."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use callback object."}], "description": "Overridable method passes request to cache and returns cached response if any,\nrefreshing the hit in the cache as the newest item. Returns null if there is\nno cache hit.", "guessedname": "getCachedResponse", "guessedtype": "function"}, "parseArrayData": {"return": {"type": "Object", "description": "Parsed response object with the following properties:<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full Array from the live database."}], "description": "Overridable method parses Array data into a response object.", "guessedname": "parseArrayData", "guessedtype": "function"}, "sendRequest": {"return": {"type": "Number", "description": "Transaction ID, or null if response found in cache."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>scope</code></dt>\n<dd>The object to serve as the scope for the success and failure handlers.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data that will be passed back to the success and failure handlers.</dd>\n</dl>"}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "First looks for cached response, then sends request to live data. The\nfollowing arguments are passed to the callback function:\n<dl>\n<dt><code>oRequest</code></dt>\n<dd>The same value that was passed in as the first argument to sendRequest.</dd>\n<dt><code>oParsedResponse</code></dt>\n<dd>An object literal containing the following properties:\n<dl>\n<dt><code>tId</code></dt>\n<dd>Unique transaction ID number.</dd>\n<dt><code>results</code></dt>\n<dd>Schema-parsed data results.</dd>\n<dt><code>error</code></dt>\n<dd>True in cases of data error.</dd>\n<dt><code>cached</code></dt>\n<dd>True when response is returned from DataSource cache.</dd> \n<dt><code>meta</code></dt>\n<dd>Schema-parsed meta data.</dd>\n</dl>\n<dt><code>oPayload</code></dt>\n<dd>The same value as was passed in as <code>argument</code> in the oCallback object literal.</dd>\n</dl>", "guessedname": "sendRequest", "guessedtype": "function"}, "issueCallback": {"static": "", "params": [{"type": "Function|Object", "name": "callback", "description": "  the callback to execute"}, {"type": "Array", "name": "params", "description": "  params to be passed to the callback method"}, {"type": "Boolean", "name": "error", "description": "  whether an error occurred"}, {"type": "Object", "name": "scope", "description": "  the scope from which to execute the callback\n(deprecated - use an object literal callback)"}], "description": "Executes a configured callback.  For object literal callbacks, the third\nparam determines whether to execute the success handler or failure handler.", "guessedname": "issueCallback", "guessedtype": "function"}, "parseData": {"return": {"type": "Object} Parsed response object with the following properties:<br>\n- results {Array} Array of parsed data results<br>\n- meta {Object} Object literal of meta values<br>\n- error {Boolean", "description": "(optional) True if there was an error<br>"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full Array from the live database."}], "description": "Overridable method parses data of generic RESPONSE_TYPE into a response object.", "guessedname": "parseData", "guessedtype": "function"}, "parseTextData": {"return": {"type": "Object", "description": "Parsed response object with the following properties:<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full text response from the live database."}], "description": "Overridable method parses plain text data into a response object.", "guessedname": "parseTextData", "guessedtype": "function"}, "parseHTMLTableData": {"return": {"type": "Object", "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full HTML element reference from the live database."}], "description": "Overridable method parses an HTML TABLE element reference into a response object.\nData is parsed out of TR elements from all TBODY elements.", "guessedname": "parseHTMLTableData", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance."}, "description": "Public accessor to the unique name of the DataSource instance.", "guessedname": "toString", "guessedtype": "function"}, "parseJSONData": {"return": {"type": "Object", "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full JSON from the live database."}], "description": "Overridable method parses JSON data into a response object.", "guessedname": "parseJSONData", "guessedtype": "function"}, "doBeforeCallback": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full response from the live database."}, {"type": "Object", "name": "oParsedResponse", "description": "  The parsed response to return to calling object."}, {"type": "Object", "name": "oCallback", "description": "  The callback object."}], "description": "Overridable method gives implementers access to the original full response and\nthe parsed response (parsed against the given schema) before the data\nis added to the cache (if applicable) and then sent back to callback function.\nThis is your chance to access the raw response and/or populate the parsed\nresponse with any custom data.", "guessedname": "doBeforeCallback", "guessedtype": "function"}, "addToCache": {"params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oResponse", "description": "  Response object to cache."}], "description": "Adds a new item to the cache. If cache is full, evicts the stalest item\nbefore adding the new item.", "guessedname": "addToCache", "guessedtype": "function"}, "DataSourceBase.parseNumber": {"return": {"type": "Number", "description": "A number, or null."}, "description": "Converts data to type Number.", "static": "", "guessedname": "parseNumber", "guessedtype": "function", "params": [{"type": "String | Number | Boolean", "name": "oData", "description": "  Data to convert. Note, the following\nvalues return as null: null, undefined, NaN, \"\"."}]}, "setInterval": {"return": {"type": "Number", "description": "Interval ID."}, "params": [{"type": "Number", "name": "nMsec", "description": "  Length of interval in milliseconds."}, {"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Sets up a polling mechanism to send requests at set intervals and forward\nresponses to given callback.", "guessedname": "setInterval", "guessedtype": "function"}, "parseXMLResult": {"return": {"type": "Object", "description": "Object literal of data for one result."}, "params": [{"type": "XML", "name": "result", "description": "  XML for one result."}], "description": "Overridable method parses XML data for one result into an object literal.", "guessedname": "parseXMLResult", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "Object", "name": "oRequest", "description": "  Request object"}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}, {"type": "Number", "name": "tId", "description": "  Transaction ID."}], "description": "Receives raw data response and type converts to XML, JSON, etc as necessary.\nForwards oFullResponse to appropriate parsing function to get turned into\noParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to \nthe cache when appropriate before calling issueCallback().\nThe oParsedResponse object literal has the following properties:\n<dl>\n<dd><dt>tId {Number}</dt> Unique transaction ID</dd>\n<dd><dt>results {Array}</dt> Array of parsed data results</dd>\n<dd><dt>meta {Object}</dt> Object literal of meta values</dd> \n<dd><dt>error {Boolean}</dt> (optional) True if there was an error</dd>\n<dd><dt>cached {Boolean}</dt> (optional) True if response was cached</dd>\n</dl>", "guessedname": "handleResponse", "guessedtype": "function"}, "clearInterval": {"params": [{"type": "Number", "name": "nId", "description": "  Interval ID."}], "description": "Disables polling mechanism associated with the given interval ID.", "guessedname": "clearInterval", "guessedtype": "function"}, "parseXMLData": {"return": {"type": "Object", "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full XML response from the live database."}], "description": "Overridable method parses XML data into a response object.", "guessedname": "parseXMLData", "guessedtype": "function"}, "DataSourceBase.parseDate": {"return": {"type": "Date", "description": "A Date instance."}, "description": "Converts data to type Date.", "static": "", "guessedname": "parseDate", "guessedtype": "function", "params": [{"type": "Date | String | Number", "name": "oData", "description": "  Data to convert."}]}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overridable default method generates a unique transaction ID and passes \nthe live data reference directly to the  handleResponse function. This\nmethod should be implemented by subclasses to achieve more complex behavior\nor to access remote data.", "guessedname": "makeConnection", "guessedtype": "function"}, "doBeforeParseData": {"return": {"type": "Object", "description": "Full response for parsing."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full response from the live database."}, {"type": "Object", "name": "oCallback", "description": "  The callback object."}], "description": "Overridable method gives implementers access to the original full response\nbefore the data gets parsed. Implementers should take care not to return an\nunparsable or otherwise invalid response.", "guessedname": "doBeforeParseData", "guessedtype": "function"}, "DataSourceBase.parseString": {"return": {"type": "String", "description": "A string, or null."}, "description": "Converts data to type String.", "static": "", "guessedname": "parseString", "guessedtype": "function", "params": [{"type": "String | Number | Boolean | Date | Array | Object", "name": "oData", "description": "  Data to parse.\nThe special values null and undefined will return null."}]}, "_getLocationValue": {"return": {"type": "Object", "description": "Data value or null."}, "description": "Get an XPath-specified value for a given field from an XML node or document.", "private": "", "static": "", "guessedname": "_getLocationValue", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Field definition."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}]}, "isCacheHit": {"return": {"type": "Boolean", "description": "True if given request matches cached request, false otherwise."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCachedRequest", "description": "  Cached request object."}], "description": "Default overridable method matches given request to given cached request.\nReturns true if is a hit, returns false otherwise.  Implementers should\noverride this method to customize the cache-matching algorithm.", "guessedname": "isCacheHit", "guessedtype": "function"}, "clearAllIntervals": {"description": "Disables all known polling intervals.", "guessedname": "clearAllIntervals", "guessedtype": "function"}}, "file": "DataSource.js", "guessedtype": "function", "shortname": "DataSourceBase", "events": {"dataErrorEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "String", "name": "oArgs.response", "description": "  The response object (if available)."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}, {"type": "String", "name": "oArgs.message", "description": "  The error message."}], "description": "Fired when an error is encountered with the live data source."}, "responseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The raw response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Number", "name": "oArgs.tId", "description": "  Transaction ID."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when live data source sends response."}, "responseCacheEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The parsed response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when response is cached."}, "cacheFlushEvent": {"description": "Fired when the local cache is flushed."}, "requestEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Number", "name": "oArgs.tId", "description": "  Transaction ID."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when a request is sent to the live data source."}, "cacheRequestEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when a request is made to the local cache."}, "responseParseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The parsed response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when response is parsed."}, "cacheResponseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when data is retrieved from the local cache."}}, "description": "Base class for the YUI DataSource utility."}, "YAHOO.util.UnexpectedError": {"name": "YAHOO.util.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of AssertionError that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "UnexpectedError", "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred."}, "name": {"type": "String", "description": "The name of the error that occurred."}, "stack": {"type": "String", "description": "Stack information for the error (if provided)."}}, "description": "UnexpectedError is subclass of AssertionError that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "YAHOO.util.DataSource": {"name": "YAHOO.util.DataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "Factory class for creating a BaseDataSource subclass instance. The sublcass is\ndetermined by oLiveData's type, unless the dataType config is explicitly passed in."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DataSource", "description": "Factory class for creating a BaseDataSource subclass instance. The sublcass is\ndetermined by oLiveData's type, unless the dataType config is explicitly passed in."}, "YAHOO.tool.TestRunner": {"name": "YAHOO.tool.TestRunner", "namespace": "YAHOO.tool", "module": "yuitest", "events": {"testcasebegin": {"description": "Fires when a test case is opened but before the first \ntest is executed."}, "testcasecomplete": {"description": "Fires when all tests in a test case have been executed."}, "begin": {"description": "Fires when the run() method is called."}, "ignore": {"description": "Fires when a test has been ignored."}, "testsuitebegin": {"description": "Fires when a test suite is opened but before the first \ntest is executed."}, "testsuitecomplete": {"description": "Fires when all test cases in a test suite have been\ncompleted."}, "pass": {"description": "Fires when a test has passed."}, "fail": {"description": "Fires when a test has failed."}, "complete": {"description": "Fires when all test suites and test cases have been completed."}}, "methods": {"_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "YAHOO.tool.TestCase|YAHOO.tool.TestSuite", "name": "testObject", "description": " The test case or test suite to run."}]}, "run": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "guessedname": "run", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "_handleTestObjectComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.", "private": "", "static": "", "guessedname": "_handleTestObjectComplete", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test object."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "YAHOO.tool.TestCase", "name": "testCase", "description": " The test case to add."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "YAHOO.tool.TestSuite", "name": "testSuite", "description": " The test suite to add."}]}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "fireEvent": {"description": "Fires events for the TestRunner. This overrides the default fireEvent()\nmethod from EventProvider to add the type property to the data that is\npassed through on each event call.", "protected": "", "static": "", "guessedname": "fireEvent", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " The type of event to fire."}, {"type": "Object", "name": "data", "description": " (Optional) Data for the event."}]}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}], "name": "_runTest"}}, "static": "", "file": "TestRunner.js", "shortname": "TestRunner", "properties": {"_root": {"description": "Pointer to the root node in the test tree.", "private": "", "static": "", "guessedname": "_root", "guessedtype": "property", "type": "TestNode"}, "_cur": {"description": "Pointer to the current node in the test tree.", "private": "", "static": "", "guessedname": "_cur", "guessedtype": "property", "type": "TestNode"}, "masterSuite": {"type": "YAHOO.tool.TestSuite", "static": "", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}}, "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "YAHOO.widget.Series": {"name": "YAHOO.widget.Series", "constructors": [{"description": "Functionality common to most series. Generally, a <code>Series</code> \nobject shouldn't be instantiated directly. Instead, a subclass with a \nconcrete implementation should be used."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "Series", "file": "Series.js", "guessedtype": "function", "shortname": "Series", "properties": {"displayName": {"type": "String", "description": "The human-readable name of the series.", "guessedname": "displayName", "guessedtype": "property"}, "type": {"type": "String", "description": "The type of series.", "guessedname": "type", "guessedtype": "property"}}, "description": "Functionality common to most series. Generally, a <code>Series</code> \nobject shouldn't be instantiated directly. Instead, a subclass with a \nconcrete implementation should be used."}, "YAHOO.util.Dom.Color": {"name": "YAHOO.util.Dom.Color", "namespace": "YAHOO.util.Dom", "module": "dom", "guessedname": "TO_STRING", "methods": {"toRGB": {"returns": "{String} The converted string", "params": [{"type": "String", "name": "val", "description": " The string to convert to RGB notation."}], "description": "Converts a hex or color string to an rgb string: rgb(0,0,0)", "guessedname": "toRGB", "guessedtype": "function"}, "toHex": {"returns": "{String} The converted string", "params": [{"type": "String", "name": "val", "description": " The string to convert to hex notation."}], "description": "Converts an rgb or color string to a hex string: #123456", "guessedname": "toHex", "guessedtype": "function"}}, "file": "Color.js", "guessedtype": "property", "shortname": "Color", "properties": {"KEYWORDS": {"type": "Object", "description": "Color keywords used when converting to Hex", "guessedname": "KEYWORDS", "guessedtype": "property"}, "re_RGB": {"guessedname": "re_RGB", "type": "Regex", "description": "Regex to parse rgb(0,0,0) formatted strings", "private": "", "guessedtype": "property"}, "re_hex3": {"guessedname": "re_hex3", "type": "Regex", "description": "Regex to parse #123 formatted strings", "private": "", "guessedtype": "property"}, "re_hex": {"guessedname": "re_hex", "type": "Regex", "description": "Regex to parse #123456 formatted strings", "private": "", "guessedtype": "property"}}, "description": "Add style management functionality to DOM."}, "YAHOO.util.DDTarget": {"name": "YAHOO.util.DDTarget", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the element that is a drop target"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DDTarget in addition to those in \nDragDrop: \nnone"}], "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DDTarget", "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DDTarget.js", "guessedtype": "function", "shortname": "DDTarget", "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks."}, "YAHOO.widget.ButtonGroup": {"name": "YAHOO.widget.ButtonGroup", "configs": {"disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the button group should be \ndisabled.  Disabling the button group will disable each button \nin the button group.  Disabled buttons are dimmed and will not \nrespond to user input or fire events."}, "checkedButton": {"default": "null", "type": "{<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>}", "description": "Reference for the button in the button group that \nis checked."}, "container": {"default": "null", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the button group's markup\nshould be rendered into.", "writeonce": ""}, "name": {"default": "null", "type": "String", "description": "String specifying the name for the button group.  \nThis name will be applied to each button in the button group."}, "value": {"default": "null", "type": "Object", "description": "Object specifying the value for the button group."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the button group."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the button group."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button group."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a set \nof configuration attributes used to create the button group."}], "description": "The ButtonGroup class creates a set of buttons that are mutually \nexclusive; checking one button in the set will uncheck all others in the \nbutton group."}], "namespace": "YAHOO.widget", "module": "button", "events": {"beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "beforeCheckedButtonChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCheckedButtonChange", "description": "Fires before the value for the configuration attribute 'checkedButton' changes. Return false to cancel the attribute change."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "beforeDisabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDisabledChange", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "beforeContainerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContainerChange", "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change."}, "checkedButtonChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "checkedButtonChange", "description": "Fires when the value for the configuration attribute 'checkedButton' changes."}, "containerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' changes."}, "nameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' changes."}, "beforeNameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNameChange", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}, "disabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' changes."}}, "guessedname": "ButtonGroup", "methods": {"getButton": {"return": {"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>", "description": ""}, "params": [{"type": "Number", "name": "p_nIndex", "description": " The index of the button to retrieve from the \nbutton group."}], "description": "Returns the button at the specified index.", "guessedname": "getButton", "guessedtype": "function"}, "_setDisabled": {"protected": "", "params": [{"type": "Boolean", "name": "p_bDisabled", "description": " Boolean indicating the value for\nthe button group's \"disabled\" attribute."}], "description": "Sets the value of the button groups's \n\"disabled\" attribute.", "guessedname": "_setDisabled", "guessedtype": "function"}, "getButtons": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of the buttons in the button group.", "guessedname": "getButtons", "guessedtype": "function"}, "destroy": {"description": "Removes the button group's element from its parent \nelement and removes all event handlers.", "guessedname": "destroy", "guessedtype": "function"}, "addButtons": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Array", "name": "p_aButtons", "description": " Array of <a href=\"YAHOO.widget.Button.html\">\nYAHOO.widget.Button</a> instances to be added \nto the button group."}, {"type": "Array", "name": "p_aButtons", "description": " Array of strings specifying the id \nattribute of the <code>&#60;input&#62;</code> or <code>&#60;span&#62;\n</code> elements to be used to create the buttons to be added to the \nbutton group."}, {"type": "Array", "name": "p_aButtons", "description": " Array of object references for the \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> elements \nto be used to create the buttons to be added to the button group."}, {"type": "Array", "name": "p_aButtons", "description": " Array of object literals, each containing\na set of <a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>  \nconfiguration attributes used to configure each button to be added \nto the button group."}], "description": "Adds the array of buttons to the button group.", "guessedname": "addButtons", "guessedtype": "function"}, "focus": {"params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the button \nto focus."}], "description": "Sets focus to the button at the specified index.", "guessedname": "focus", "guessedtype": "function"}, "addButton": {"return": {"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>", "description": ""}, "params": [{"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>", "name": "p_oButton", "description": " Object reference for the <a href=\"YAHOO.widget.Button.html\">\nYAHOO.widget.Button</a> instance to be added to the button group."}, {"type": "String", "name": "p_oButton", "description": " String specifying the id attribute of the \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> element \nto be used to create the button to be added to the button group."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"\nhttp://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#\nID-33759296\">HTMLElement</a>", "name": "p_oButton", "description": " Object reference for the \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> element \nto be used to create the button to be added to the button group."}, {"type": "Object", "name": "p_oButton", "description": " Object literal specifying a set of \n<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a> \nconfiguration attributes used to configure the button to be added to \nthe button group."}], "description": "Adds the button to the button group.", "guessedname": "addButton", "guessedtype": "function"}, "removeButton": {"params": [{"type": "Number", "name": "p_nIndex", "description": " Number specifying the index of the button \nto be removed from the button group."}], "description": "Removes the button at the specified index from the \nbutton group.", "guessedname": "removeButton", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the button group."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the button group."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of  \nconfiguration attributes used to create the button group."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a\nset of configuration attributes used to create the button group."}], "description": "The ButtonGroup class's initialization method.", "guessedname": "init", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "p_oAttributes", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button group."}], "description": "Initializes all of the configuration attributes used to  \ncreate the button group.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the button group.", "guessedname": "toString", "guessedtype": "function"}, "getCount": {"return": {"type": "Number", "description": ""}, "description": "Returns the number of buttons in the button group.", "guessedname": "getCount", "guessedtype": "function"}, "_onAppendTo": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the event that was fired."}], "description": "\"appendTo\" event handler for the button group.", "guessedname": "_onAppendTo", "guessedtype": "function"}, "_onButtonCheckedChange": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the event that was fired."}, {"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>", "name": "p_oButton", "description": " Object representing the button that fired the event."}], "description": "\"checkedChange\" event handler for each button in the \nbutton group.", "guessedname": "_onButtonCheckedChange", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keydown\" event handler for the button group.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "check": {"params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the button \nto check."}], "description": "Checks the button at the specified index.", "guessedname": "check", "guessedtype": "function"}, "_createGroupElement": {"protected": "", "return": {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>", "description": ""}, "description": "Creates the button group's element.", "guessedname": "_createGroupElement", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "buttongroup.js", "guessedtype": "function", "shortname": "ButtonGroup", "properties": {"CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied  \nto the button group's element.", "default": "\"buttongroup\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_buttons": {"description": "Array of buttons in the button group.", "default": "null", "protected": "", "guessedname": "_buttons", "guessedtype": "property", "type": "Array"}, "CLASS_NAME_PREFIX": {"description": "Prefix used for all class names applied to a ButtonGroup.", "default": "\"yui-\"", "guessedname": "CLASS_NAME_PREFIX", "guessedtype": "property", "type": "String", "final": ""}, "NODE_NAME": {"description": "The name of the tag to be used for the button \ngroup's element.", "default": "\"DIV\"", "guessedname": "NODE_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The ButtonGroup class creates a set of buttons that are mutually \nexclusive; checking one button in the set will uncheck all others in the \nbutton group."}, "YAHOO.util.ImageLoader.pngBgImgObj": {"name": "YAHOO.util.ImageLoader.pngBgImgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}, {"type": "Object", "name": "ailProps", "description": " The AlphaImageLoader properties to be set for the image\nValid properties are 'sizingMethod' and 'enabled'"}], "description": "PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by \"background-image\" in the element's style"}], "namespace": "YAHOO.util.ImageLoader", "module": "imageloader", "guessedname": "pngBgImgObj", "methods": {"_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nIf the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.ImageLoader.imgObj", "superclass": "YAHOO.util.ImageLoader.imgObj", "file": "ImageLoader.js", "guessedtype": "function", "shortname": "pngBgImgObj", "properties": {"props": {"type": "Object", "description": "AlphaImageLoader properties to be set for the image.\nValid properties are \"sizingMethod\" and \"enabled\".", "guessedname": "props", "guessedtype": "property"}}, "description": "PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by \"background-image\" in the element's style"}, "YAHOO.widget.MenuManager": {"name": "YAHOO.widget.MenuManager", "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuManager", "methods": {"getFocusedMenu": {"return": {"type": "YAHOO.widget.Menu", "description": ""}, "description": "Returns a reference to the menu that currently \nhas focus.", "guessedname": "getFocusedMenu", "guessedtype": "function"}, "getMenuItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the \n<code>&#60;li&#62;</code> element representing the menu item to\nbe retrieved."}], "description": "Returns a menu item with the specified id.", "guessedname": "getMenuItem", "guessedtype": "function"}, "onDOMEvent": {"params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "Generic, global event handler for all of a menu's \nDOM-based events.  This listens for events against the document \nobject.  If the target of a given event is a member of a menu or \nmenu item's DOM, the instance's corresponding Custom Event is fired.", "private": ""}, "getMenu": {"return": {"type": "YAHOO.widget.Menu", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the \n<code>&#60;div&#62;</code> element representing the menu to\nbe retrieved."}], "description": "Returns a menu with the specified id.", "guessedname": "getMenu", "guessedtype": "function"}, "onMenuVisibleConfigChange": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "Event handler for when the \"visible\" configuration  \nproperty of a Menu instance changes.", "private": ""}, "getMenuRootElement": {"params": [{"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>", "name": "p_oElement", "description": " Object \nspecifying an HTML element."}], "description": "Finds the root DIV node of a menu or the root LI node of \na menu item.", "private": ""}, "addMenu": {"params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the Menu  \ninstance to be added."}], "description": "Adds a menu to the collection of known menus.", "guessedname": "addMenu", "guessedtype": "function"}, "onMenuDestroy": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The menu that fired the event."}], "description": "\"destroy\" event handler for a menu.", "private": ""}, "onMenuBlur": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"blur\" event handler for a MenuItem instance.", "private": ""}, "getVisible": {"return": {"type": "Object", "description": ""}, "description": "Returns a collection of all visible menus registered\nwith the menu manger.", "guessedname": "getVisible", "guessedtype": "function"}, "getFocusedMenuItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Returns a reference to the menu item that currently \nhas focus.", "guessedname": "getFocusedMenuItem", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu manager.", "guessedname": "toString", "guessedtype": "function"}, "getMenuItemGroup": {"return": {"type": "Array", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the \n<code>&#60;ul&#62;</code> element representing the group of \nmenu items to be retrieved."}], "description": "Returns an array of menu item instances whose \ncorresponding <code>&#60;li&#62;</code> elements are child \nnodes of the <code>&#60;ul&#62;</code> element with the \nspecified id.", "guessedname": "getMenuItemGroup", "guessedtype": "function"}, "removeItem": {"params": [{"type": "MenuItem", "name": "p_oMenuItem", "description": " The MenuItem instance to be removed."}], "description": "Removes a MenuItem instance from the MenuManager's collection of MenuItems.", "private": ""}, "getMenus": {"return": {"type": "Object", "description": ""}, "description": "Returns a collection of all menus registered with the \nmenu manger.", "guessedname": "getMenus", "guessedtype": "function"}, "onItemDestroy": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"destroy\" event handler for a MenuItem instance.", "private": ""}, "onItemAdded": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"itemadded\" event handler for a Menu instance.", "private": ""}, "onMenuFocus": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"focus\" event handler for a MenuItem instance.", "private": ""}, "hideVisible": {"description": "Hides all visible, dynamically positioned menus \n(excluding instances of YAHOO.widget.MenuBar).", "guessedname": "hideVisible", "guessedtype": "function"}, "removeMenu": {"params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the Menu  \ninstance to be removed."}], "description": "Removes a menu from the collection of known menus.", "guessedname": "removeMenu", "guessedtype": "function"}}, "static": "", "file": "menumanager.js", "guessedtype": "function", "shortname": "MenuManager", "description": "Singleton that manages a collection of all menus and menu items.  Listens \nfor DOM events at the document level and dispatches the events to the \ncorresponding menu or menu item."}, "YAHOO.widget.Logger": {"name": "YAHOO.widget.Logger", "namespace": "YAHOO.widget", "module": "logger", "events": {"logResetEvent": {"description": "Fired when the Logger has been reset has been created.", "guessedname": "logResetEvent", "guessedtype": "property"}, "newLogEvent": {"params": [{"type": "String", "name": "sMsg", "description": "  Log message."}], "description": "Fired when a new log message has been created.", "guessedname": "newLogEvent", "guessedtype": "property"}, "sourceCreateEvent": {"params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Fired when a new source has been named.", "guessedname": "sourceCreateEvent", "guessedtype": "property"}, "categoryCreateEvent": {"params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Fired when a new category has been created.", "guessedname": "categoryCreateEvent", "guessedtype": "property"}}, "guessedname": "Logger", "methods": {"reset": {"description": "Resets internal stack and startTime, enables Logger, and fires logResetEvent.", "guessedname": "reset", "guessedtype": "function"}, "_isNewSource": {"return": {"type": "Boolean", "description": "Returns true if source is unknown, else returns false."}, "description": "Checks to see if a source already exists.", "private": "", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "guessedname": "_isNewSource", "guessedtype": "function"}, "getStack": {"return": {"type": "Object[]", "description": "Array of log message objects."}, "description": "Public accessor to internal stack of log message objects.", "guessedname": "getStack", "guessedtype": "function"}, "log": {"params": [{"type": "String", "name": "sMsg", "description": "  The log message."}, {"type": "String", "name": "sCategory", "description": "  Category of log message, or null."}, {"type": "String", "name": "sSource", "description": "  Source of LogWriter, or null if global."}], "description": "Saves a log message to the stack and fires newLogEvent. If the log message is\nassigned to an unknown category, creates a new category. If the log message is\nfrom an unknown source, creates a new source.  If browser console is enabled,\noutputs the log message to browser console.", "guessedname": "log", "guessedtype": "function"}, "_onWindowError": {"guessedname": "_onWindowError", "params": [{"type": "String", "name": "sMsg", "description": "  The error message."}, {"type": "String", "name": "sUrl", "description": "  URL of the error."}, {"type": "String", "name": "sLine", "description": "  Line number of the error."}], "description": "Handles logging of messages due to window error events.", "private": "", "guessedtype": "function"}, "_isNewCategory": {"return": {"type": "Boolean", "description": "Returns true if category is unknown, else returns false."}, "description": "Checks to see if a category has already been created.", "private": "", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "guessedname": "_isNewCategory", "guessedtype": "function"}, "handleWindowErrors": {"description": "Surpresses native JavaScript errors and outputs to console. By default,\nLogger does not handle JavaScript window error events.\nNB: Not all browsers support the window.onerror event.", "guessedname": "handleWindowErrors", "guessedtype": "function"}, "_printToBrowserConsole": {"guessedname": "_printToBrowserConsole", "params": [{"type": "Object", "name": "oEntry", "description": "  Log entry object."}], "description": "Outputs a log message to global console.log() function.", "private": "", "guessedtype": "function"}, "_createNewCategory": {"guessedname": "_createNewCategory", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Creates a new category of log messages and fires categoryCreateEvent.", "private": "", "guessedtype": "function"}, "_createNewSource": {"guessedname": "_createNewSource", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Creates a new source of log messages and fires sourceCreateEvent.", "private": "", "guessedtype": "function"}, "enableBrowserConsole": {"description": "Enables output to the browser's global console.log() function, which is used\nby the Firebug extension to Firefox as well as Safari.", "guessedname": "enableBrowserConsole", "guessedtype": "function"}, "disableBrowserConsole": {"description": "Disables output to the browser's global console.log() function, which is used\nby the Firebug extension to Firefox as well as Safari.", "guessedname": "disableBrowserConsole", "guessedtype": "function"}, "unhandleWindowErrors": {"description": "Unsurpresses native JavaScript errors. By default,\nLogger does not handle JavaScript window error events.\nNB: Not all browsers support the window.onerror event.", "guessedname": "unhandleWindowErrors", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "Internal date of when Logger singleton was initialized."}, "description": "Public accessor to internal start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "static": "", "file": "Logger.js", "guessedtype": "property", "shortname": "Logger", "properties": {"maxStackEntries": {"default": "2500", "type": "Number", "static": "", "description": "Upper limit on size of internal stack."}, "_lastTime": {"type": "Date", "static": "", "description": "Timestamp of last logged message.", "private": ""}, "_startTime": {"type": "Date", "static": "", "description": "Static timestamp of Logger initialization.", "private": ""}, "_browserConsoleEnabled": {"default": "false", "type": "Boolean", "static": "", "description": "Internal property to track whether output to browser console is enabled.", "private": ""}, "loggerEnabled": {"default": "true", "type": "Boolean", "static": "", "description": "True if Logger is enabled, false otherwise."}, "sources": {"default": "[\"global\"]", "type": "String[]", "static": "", "description": "Array of sources."}, "_stack": {"type": "Array", "static": "", "description": "Array to hold all log messages.", "private": ""}, "categories": {"default": "[\"info\",\"warn\",\"error\",\"time\",\"window\"]", "type": "String[]", "static": "", "description": "Array of categories."}}, "description": "The singleton Logger class provides core log management functionality. Saves\nlogs written through the global YAHOO.log function or written by a LogWriter\ninstance. Provides access to logs for reading by a LogReader instance or\nnative browser console such as the Firebug extension to Firefox or Safari's\nJavaScript console through integration with the console.log() method."}, "YAHOO.widget.Overlay": {"name": "YAHOO.widget.Overlay", "configs": {"iframe": {"default": "true for IE6 and below, false for all other browsers.", "type": "Boolean", "description": "Boolean indicating whether or not the Overlay should \nhave an IFRAME shim; used to prevent SELECT elements from \npoking through an Overlay instance in IE6.  When set to \"true\", \nthe iframe shim is created when the Overlay instance is intially\nmade visible."}, "constraintoviewport": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be prevented from being positioned \nout of the viewport."}, "height": {"default": "null", "type": "String", "description": "CSS height of the Overlay."}, "zIndex": {"default": "null", "type": "Number", "description": "CSS z-index of the Overlay."}, "width": {"default": "null", "type": "String", "description": "CSS width of the Overlay."}, "xy": {"default": "null", "type": "Number[]", "description": "An array with the absolute x and y positions of the Overlay"}, "preventcontextoverlap": {"default": "false", "type": "Boolean", "description": "Boolean indicating whether or not the Overlay should overlap its \ncontext element (defined using the \"context\" configuration property) when the \n\"constraintoviewport\" configuration property is set to \"true\"."}, "context": {"default": "null", "type": "Array", "description": "<p>\nThe array of context arguments for context-sensitive positioning. \n</p>\n<p>\nThe format of the array is: <code>[contextElementOrId, overlayCorner, contextCorner, arrayOfTriggerEvents (optional), xyOffset (optional)]</code>, the\nthe 5 array elements described in detail below:\n</p>\n<dl>\n<dt>contextElementOrId &#60;String|HTMLElement&#62;</dt>\n<dd>A reference to the context element to which the overlay should be aligned (or it's id).</dd>\n<dt>overlayCorner &#60;String&#62;</dt>\n<dd>The corner of the overlay which is to be used for alignment. This corner will be aligned to the \ncorner of the context element defined by the \"contextCorner\" entry which follows. Supported string values are: \n\"tr\" (top right), \"tl\" (top left), \"br\" (bottom right), or \"bl\" (bottom left).</dd>\n<dt>contextCorner &#60;String&#62;</dt>\n<dd>The corner of the context element which is to be used for alignment. Supported string values are the same ones listed for the \"overlayCorner\" entry above.</dd>\n<dt>arrayOfTriggerEvents (optional) &#60;Array[String|CustomEvent]&#62;</dt>\n<dd>\n<p>\nBy default, context alignment is a one time operation, aligning the Overlay to the context element when context configuration property is set, or when the <a href=\"#method_align\">align</a> \nmethod is invoked. However, you can use the optional \"arrayOfTriggerEvents\" entry to define the list of events which should force the overlay to re-align itself with the context element. \nThis is useful in situations where the layout of the document may change, resulting in the context element's position being modified.\n</p>\n<p>\nThe array can contain either event type strings for events the instance publishes (e.g. \"beforeShow\") or CustomEvent instances. Additionally the following\n3 static container event types are also currently supported : <code>\"windowResize\", \"windowScroll\", \"textResize\"</code> (defined in <a href=\"#property__TRIGGER_MAP\">_TRIGGER_MAP</a> private property).\n</p>\n</dd>\n<dt>xyOffset &#60;Number[]&#62;</dt>\n<dd>\nA 2 element Array specifying the X and Y pixel amounts by which the Overlay should be offset from the aligned corner. e.g. [5,0] offsets the Overlay 5 pixels to the left, <em>after</em> aligning the given context corners.\nNOTE: If using this property and no triggers need to be defined, the arrayOfTriggerEvents property should be set to null to maintain correct array positions for the arguments. \n</dd>\n</dl>\n<p>\nFor example, setting this property to <code>[\"img1\", \"tl\", \"bl\"]</code> will \nalign the Overlay's top left corner to the bottom left corner of the\ncontext element with id \"img1\".\n</p>\n<p>\nSetting this property to <code>[\"img1\", \"tl\", \"bl\", null, [0,5]</code> will \nalign the Overlay's top left corner to the bottom left corner of the\ncontext element with id \"img1\", and then offset it by 5 pixels on the Y axis (providing a 5 pixel gap between the bottom of the context element and top of the overlay).\n</p>\n<p>\nAdding the optional trigger values: <code>[\"img1\", \"tl\", \"bl\", [\"beforeShow\", \"windowResize\"], [0,5]]</code>,\nwill re-align the overlay position, whenever the \"beforeShow\" or \"windowResize\" events are fired.\n</p>"}, "autofillheight": {"default": "null", "type": "String", "description": "Standard module element which should auto fill out the height of the Overlay if the height config property is set.\nSupported values are \"header\", \"body\", \"footer\"."}, "y": {"default": "null", "type": "Number", "description": "The absolute y-coordinate position of the Overlay"}, "x": {"default": "null", "type": "Number", "description": "The absolute x-coordinate position of the Overlay"}, "fixedcenter": {"default": "false", "type": "Boolean | String", "description": "Determines whether or not the Overlay should be anchored \nto the center of the viewport.\n<p>This property can be set to:</p>\n<dl>\n<dt>true</dt>\n<dd>\nTo enable fixed center positioning\n<p>\nWhen enabled, the overlay will \nbe positioned in the center of viewport when initially displayed, and \nwill remain in the center of the viewport whenever the window is \nscrolled or resized.\n</p>\n<p>\nIf the overlay is too big for the viewport, \nit's top left corner will be aligned with the top left corner of the viewport.\n</p>\n</dd>\n<dt>false</dt>\n<dd>\nTo disable fixed center positioning.\n<p>In this case the overlay can still be \ncentered as a one-off operation, by invoking the <code>center()</code> method,\nhowever it will not remain centered when the window is scrolled/resized.\n</dd>\n<dt>\"contained\"<dt>\n<dd>To enable fixed center positioning, as with the <code>true</code> option.\n<p>However, unlike setting the property to <code>true</code>, \nwhen the property is set to <code>\"contained\"</code>, if the overlay is \ntoo big for the viewport, it will not get automatically centered when the \nuser scrolls or resizes the window (until the window is large enough to contain the \noverlay). This is useful in cases where the Overlay has both header and footer \nUI controls which the user may need to access.\n</p>\n</dd>\n</dl>"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Overlay <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Overlay. See configuration \ndocumentation for more details."}], "description": "Overlay is a Module that is absolutely positioned above the page flow. It \nhas convenience methods for positioning and sizing, as well as options for \ncontrolling zIndex and constraining the Overlay's position to the current \nvisible viewport. Overlay also contains a dynamicly generated IFRAME which \nis placed beneath it for Internet Explorer 6 and 5.x so that it will be \nproperly rendered above SELECT elements."}], "namespace": "YAHOO.widget", "module": "container", "events": {"YAHOO.widget.Overlay.windowScrollEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for \nwindow scroll", "guessedname": "windowScrollEvent", "guessedtype": "property"}, "moveEvent": {"params": [{"type": "Number", "name": "x", "description": " x coordinate"}, {"type": "Number", "name": "y", "description": " y coordinate"}], "description": "CustomEvent fired after the Overlay is moved.", "guessedname": "moveEvent", "guessedtype": "property"}, "YAHOO.widget.Overlay.windowResizeEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for\nwindow resize", "guessedname": "windowResizeEvent", "guessedtype": "property"}, "beforeMoveEvent": {"params": [{"type": "Number", "name": "x", "description": " x coordinate"}, {"type": "Number", "name": "y", "description": " y coordinate"}], "description": "CustomEvent fired before the Overlay is moved.", "guessedname": "beforeMoveEvent", "guessedtype": "property"}}, "guessedname": "Overlay", "methods": {"moveTo": {"params": [{"type": "Number", "name": "x", "description": " The Overlay's new x position"}, {"type": "Number", "name": "y", "description": " The Overlay's new y position"}], "description": "Moves the Overlay to the specified position. This function is  \nidentical to calling this.cfg.setProperty(\"xy\", [x,y]);", "guessedname": "moveTo", "guessedtype": "function"}, "stackIframe": {"description": "Sets the zindex of the iframe shim, if it exists, based on the zindex of\nthe Overlay element. The zindex of the iframe is set to be one less \nthan the Overlay element's zindex.\n<p>NOTE: This method will not bump up the zindex of the Overlay element\nto ensure that the iframe shim has a non-negative zindex.\nIf you require the iframe zindex to be 0 or higher, the zindex of \nthe Overlay element should be set to a value greater than 0, before \nthis method is called.\n</p>", "guessedname": "stackIframe", "guessedtype": "function"}, "showIframe": {"description": "Shows the iframe shim, if it has been enabled.", "guessedname": "showIframe", "guessedtype": "function"}, "configFixedCenter": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"fixedcenter\" property \nis changed.", "guessedname": "configFixedCenter", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowResizeHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM resize event"}], "description": "The DOM event handler used to fire the CustomEvent for window resize", "guessedname": "windowResizeHandler", "guessedtype": "function"}, "showMacGeckoScrollbars": {"description": "Adds a CSS class (\"show-scrollbars\") and removes a CSS class \n(\"hide-scrollbars\") to the Overlay to fix a bug in Gecko on Mac OS X \n(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)", "guessedname": "showMacGeckoScrollbars", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Overlay."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "_getConstrainedPos": {"return": {"type": "Number", "description": "The constrained coordinate value"}, "description": "Shared implementation method for getConstrainedX and getConstrainedY.\n<p>\nGiven a coordinate value, returns the calculated coordinate required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions, scroll values and preventoverlap \nsettings\n</p>", "protected": "", "params": [{"type": "String", "name": "pos", "description": " The coordinate which needs to be constrained, either \"x\" or \"y\""}, {"type": "Number", "name": "The", "description": " coordinate value which needs to be constrained"}], "guessedname": "_getConstrainedPos", "guessedtype": "function"}, "hideMacGeckoScrollbars": {"description": "Adds a CSS class (\"hide-scrollbars\") and removes a CSS class \n(\"show-scrollbars\") to the Overlay to fix a bug in Gecko on Mac OS X \n(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)", "guessedname": "hideMacGeckoScrollbars", "guessedtype": "function"}, "_setDomVisibility": {"protected": "", "params": [{"type": "boolean", "name": "visible", "description": " Whether to show or hide the Overlay's outer element"}], "description": "Internal implementation to set the visibility of the overlay in the DOM.", "guessedname": "_setDomVisibility", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Overlay which are fired  \nautomatically at appropriate times by the Overlay class.", "guessedname": "initEvents", "guessedtype": "function"}, "fitsInViewport": {"return": {"type": "", "description": "boolean true if the Overlay will fit, false if not"}, "description": "Determines if the Overlay (including the offset value defined by Overlay.VIEWPORT_OFFSET) \nwill fit entirely inside the viewport, in both dimensions - width and height.", "guessedname": "fitsInViewport", "guessedtype": "function"}, "bringToTop": {"description": "Places the Overlay on top of all other instances of \nYAHOO.widget.Overlay.", "guessedname": "bringToTop", "guessedtype": "function"}, "_processTriggers": {"protected": "", "params": [{"type": "Array[String|CustomEvent]", "name": "triggers", "description": " An array of either CustomEvents, event type strings \n(e.g. \"beforeShow\", \"windowScroll\") to/from which the provided function should be \nsubscribed/unsubscribed respectively."}, {"type": "String", "name": "mode", "description": " Either \"subscribe\" or \"unsubscribe\", specifying whether or not\nwe are subscribing or unsubscribing trigger listeners"}, {"type": "Function", "name": "fn", "description": " The function to be subscribed/unsubscribed to/from the trigger event.\nContext is always set to the overlay instance, and no additional object argument \nget passed to the subscribed function."}], "description": "Utility method that subscribes or unsubscribes the given \nfunction from the list of trigger events provided.", "guessedname": "_processTriggers", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Overlay <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Overlay. \nSee configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and  \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "configXY": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"xy\" property is changed.", "guessedname": "configXY", "guessedtype": "function"}, "_getPreciseHeight": {"return": {"type": "Float", "description": "The sub-pixel height if supported by the browser, else the rounded height."}, "description": "Returns the sub-pixel height of the el, using getBoundingClientRect, if available,\notherwise returns the offsetHeight", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": ""}], "guessedname": "_getPreciseHeight", "guessedtype": "function"}, "_autoFillOnHeightChange": {"protected": "", "params": [{"type": "String", "name": "type", "description": " The event type"}, {"type": "Array", "name": "args", "description": " The array of arguments passed to event subscribers"}, {"type": "HTMLElement", "name": "el", "description": " The header, body or footer element which is to be resized to fill\nout the containers height"}], "description": "The default custom event handler executed when the overlay's height is changed, \nif the autofillheight property has been set.", "guessedname": "_autoFillOnHeightChange", "guessedtype": "function"}, "fillHeight": {"params": [{"type": "HTMLElement", "name": "el", "description": " The element which should be resized to fill out the height\nof the container element."}], "description": "<p>\nSets the height on the provided header, body or footer element to \nfill out the height of the container. It determines the height of the \ncontainers content box, based on it's configured height value, and \nsets the height of the autofillheight element to fill out any \nspace remaining after the other standard module element heights \nhave been accounted for.\n</p>\n<p><strong>NOTE:</strong> This method is not designed to work if an explicit \nheight has not been set on the container, since for an \"auto\" height container, \nthe heights of the header/body/footer will drive the height of the container.</p>", "guessedname": "fillHeight", "guessedtype": "function"}, "syncPosition": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nPanel's position in the DOM. This is primarily used to update  \nposition information during drag & drop.", "guessedname": "syncPosition", "guessedtype": "function"}, "hideIframe": {"description": "Hides the iframe shim, if it has been enabled.", "guessedname": "hideIframe", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "getConstrainedXY": {"return": {"type": "Array", "description": "The constrained x and y coordinates at index 0 and 1 respectively;"}, "params": [{"type": "Number", "name": "x", "description": " The X coordinate value to be constrained"}, {"type": "Number", "name": "y", "description": " The Y coordinate value to be constrained"}], "description": "Given x, y coordinate values, returns the calculated coordinates required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.", "guessedname": "getConstrainedXY", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property\nis changed.", "guessedname": "configContext", "guessedtype": "function"}, "_preventOverlap": {"return": {"type": "Number", "description": "The new coordinate value which was set to prevent overlap"}, "description": "Helper method, used to position the Overlap to prevent overlap with the \ncontext element (used when preventcontextoverlap is enabled)", "protected": "", "params": [{"type": "String", "name": "pos", "description": " The coordinate to prevent overlap for, either \"x\" or \"y\"."}, {"type": "HTMLElement", "name": "contextEl", "description": " The context element"}, {"type": "Number", "name": "overlaySize", "description": " The related overlay dimension value (for \"x\", the width, for \"y\", the height)"}, {"type": "Number", "name": "viewportSize", "description": " The related viewport dimension value (for \"x\", the width, for \"y\", the height)"}, {"type": "Object", "name": "docScroll", "description": "  The related document scroll value (for \"x\", the scrollLeft, for \"y\", the scrollTop)"}], "guessedname": "_preventOverlap", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": " The resize DOM event"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "configConstrainToViewport": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for \nthe property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"constraintoviewport\" \nproperty is changed.", "guessedname": "configConstrainToViewport", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration\nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"visible\" property is \nchanged.  This method is responsible for firing showEvent\nand hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "_validateAutoFillHeight": {"return": {"type": "", "description": "true, if valid, false otherwise"}, "description": "autofillheight validator. Verifies that the autofill value is either null \nor one of the strings : \"body\", \"header\" or \"footer\".", "protected": "", "params": [{"type": "String", "name": "val", "description": ""}], "guessedname": "_validateAutoFillHeight", "guessedtype": "function"}, "_alignOnTrigger": {"protected": "", "params": [{"type": "String", "name": "type", "description": " The event type (not used by the default implementation)"}, {"type": "Any[]", "name": "args", "description": " The array of arguments for the trigger event (not used by the default implementation)"}], "description": "Custom Event handler for context alignment triggers. Invokes the align method", "guessedname": "_alignOnTrigger", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "destroy": {"description": "Removes the Overlay element from the DOM and sets all child \nelements to null.", "guessedname": "destroy", "guessedtype": "function"}, "forceContainerRedraw": {"description": "Can be used to force the container to repaint/redraw it's contents.\n<p>\nBy default applies and then removes a 1px bottom margin through the \napplication/removal of a \"yui-force-redraw\" class.\n</p>\n<p>\nIt is currently used by Overlay to force a repaint for webkit \nbrowsers, when centering.\n</p>", "guessedname": "forceContainerRedraw", "guessedtype": "function"}, "_primeXYFromDOM": {"protected": "", "description": "Set's the container's XY value from DOM if not already set.\nDiffers from syncPosition, in that the XY value is only sync'd with DOM if \nnot already set. The method also refire's the XY config property event, so any\nbeforeMove, Move event listeners are invoked.", "guessedname": "_primeXYFromDOM", "guessedtype": "function"}, "configAutoFillHeight": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"autofillheight\" property is changed.", "guessedname": "configAutoFillHeight", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowScrollHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM scroll event"}], "description": "The DOM event handler used to fire the CustomEvent for window scroll", "guessedname": "windowScrollHandler", "guessedtype": "function"}, "center": {"description": "Centers the container in the viewport.", "guessedname": "center", "guessedtype": "function"}, "_findTriggerCE": {"guessedname": "_findTriggerCE", "params": [{"type": "String|CustomEvent", "name": "t", "description": " Either a CustomEvent, or event type (e.g. \"windowScroll\") for which a \ncustom event instance needs to be looked up from the Overlay._TRIGGER_MAP."}], "description": "Helper method to locate the custom event instance for the event name string\npassed in. As a convenience measure, any custom events passed in are returned.", "private": "", "guessedtype": "function"}, "align": {"params": [{"type": "String", "name": "elementAlign", "description": "  The String representing the corner of \nthe Overlay that should be aligned to the context element"}, {"type": "String", "name": "contextAlign", "description": "  The corner of the context element \nthat the elementAlign corner should stick to."}, {"type": "Number[]", "name": "xyOffset", "description": " Optional. A 2 element array specifying the x and y pixel offsets which should be applied\nafter aligning the element and context corners. For example, passing in [5, -10] for this value, would offset the \nOverlay by 5 pixels along the X axis (horizontally) and -10 pixels along the Y axis (vertically) after aligning the specified corners."}], "description": "Aligns the Overlay to its context element using the specified corner \npoints (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, \nand BOTTOM_RIGHT.", "guessedname": "align", "guessedtype": "function"}, "syncIframe": {"description": "Syncronizes the size and position of iframe shim to that of its \ncorresponding Overlay instance.", "guessedname": "syncIframe", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"iframe\" property is changed.", "guessedname": "configIframe", "guessedtype": "function"}, "_getComputedHeight": {"return": {"type": "Number", "description": "The content box height of the given element, or null if it could not be determined."}, "description": "Determines the content box height of the given element (height of the element, without padding or borders) in pixels.", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element for which the content height needs to be determined"}], "guessedname": "_getComputedHeight", "guessedtype": "function"}, "configY": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"y\" property is changed.", "guessedname": "configY", "guessedtype": "function"}, "configX": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"x\" property is changed.", "guessedname": "configX", "guessedtype": "function"}, "getConstrainedY": {"return": {"type": "Number", "description": "The constrained y coordinate"}, "params": [{"type": "Number", "name": "y", "description": " The Y coordinate value to be constrained"}], "description": "Given y coordinate value, returns the calculated y coordinate required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.", "guessedname": "getConstrainedY", "guessedtype": "function"}, "getConstrainedX": {"return": {"type": "Number", "description": "The constrained x coordinate"}, "params": [{"type": "Number", "name": "x", "description": " The X coordinate value to be constrained"}], "description": "Given x coordinate value, returns the calculated x coordinate required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.", "guessedname": "getConstrainedX", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "doCenterOnDOMEvent": {"description": "Fixed center event handler used for centering on scroll/resize, but only if \nthe overlay is visible and, if \"fixedcenter\" is set to \"contained\", only if \nthe overlay fits within the viewport.", "guessedname": "doCenterOnDOMEvent", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler executed when the moveEvent is fired, if the \n\"constraintoviewport\" is set to true.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Module", "superclass": "YAHOO.widget.Module", "file": "Overlay.js", "guessedtype": "function", "shortname": "Overlay", "properties": {"DEFAULT_CONFIG": {"description": "Constant representing the Overlay's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Overlay.CSS_IFRAME": {"description": "Constant representing the default CSS class used for an Overlay iframe shim.", "static": "", "guessedname": "CSS_IFRAME", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.STD_MOD_RE": {"description": "Constant representing the names of the standard module elements\nused in the overlay.", "static": "", "guessedname": "STD_MOD_RE", "guessedtype": "property", "type": "RegExp", "final": ""}, "YAHOO.widget.Overlay.CSS_HIDDEN": {"description": "Constant representing the default hidden CSS class used for an Overlay. This class is \napplied to the overlay's outer DIV whenever it's hidden.", "static": "", "guessedname": "CSS_HIDDEN", "guessedtype": "property", "type": "String", "final": ""}, "CONTEXT_TRIGGERS": {"final": "", "type": "Array", "description": "<p>\nArray of default event types which will trigger\ncontext alignment for the Overlay class.\n</p>\n<p>The array is empty by default for Overlay,\nbut maybe populated in future releases, so classes extending\nOverlay which need to define their own set of CONTEXT_TRIGGERS\nshould concatenate their super class's prototype.CONTEXT_TRIGGERS \nvalue with their own array of values.\n</p>\n<p>\nE.g.:\n<code>CustomOverlay.prototype.CONTEXT_TRIGGERS = YAHOO.widget.Overlay.prototype.CONTEXT_TRIGGERS.concat([\"windowScroll\"]);</code>\n</p>", "guessedname": "CONTEXT_TRIGGERS", "guessedtype": "property"}, "YAHOO.widget.Overlay._TRIGGER_MAP": {"description": "Internal map of special event types, which are provided\nby the instance. It maps the event type to the custom event \ninstance. Contains entries for the \"windowScroll\", \"windowResize\" and\n\"textResize\" static container events.", "private": "", "static": "", "guessedname": "_TRIGGER_MAP", "guessedtype": "property", "type": "Object"}, "YAHOO.widget.Overlay.CSS_OVERLAY": {"description": "Constant representing the default CSS class used for an Overlay", "static": "", "guessedname": "CSS_OVERLAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay._initialized": {"guessedname": "_initialized", "type": "Boolean", "description": "A boolean that indicated whether the window resize and scroll events have \nalready been subscribed to.", "private": "", "guessedtype": "property"}, "YAHOO.widget.Overlay.BOTTOM_RIGHT": {"description": "Constant representing the bottom right corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "BOTTOM_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Overlay's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Overlay.VIEWPORT_OFFSET": {"description": "Number representing the minimum distance an Overlay instance should be \npositioned relative to the boundaries of the browser's viewport, in pixels.", "default": "10", "static": "", "guessedname": "VIEWPORT_OFFSET", "guessedtype": "property", "type": "Number", "final": ""}, "YAHOO.widget.Overlay.TOP_RIGHT": {"description": "Constant representing the top right corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "TOP_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.TOP_LEFT": {"description": "Constant representing the top left corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "TOP_LEFT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.IFRAME_SRC": {"description": "The URL that will be placed in the iframe", "default": "3", "static": "", "guessedname": "IFRAME_SRC", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_LEFT": {"description": "Constant representing the top bottom left corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "BOTTOM_LEFT", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Overlay is a Module that is absolutely positioned above the page flow. It \nhas convenience methods for positioning and sizing, as well as options for \ncontrolling zIndex and constraining the Overlay's position to the current \nvisible viewport. Overlay also contains a dynamicly generated IFRAME which \nis placed beneath it for Internet Explorer 6 and 5.x so that it will be \nproperly rendered above SELECT elements."}, "YAHOO.widget.EditorWindow": {"file": "editor.js", "description": "Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.\nThis is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.", "namespace": "YAHOO.widget", "module": "editor", "methods": {"setFooter": {"params": [{"type": "String/HTMLElement", "name": "str", "description": " The string or DOM reference to be used as the windows footer."}], "description": "Sets the footer for the window.", "guessedname": "setFooter", "guessedtype": "function"}, "setBody": {"params": [{"type": "String/HTMLElement", "name": "str", "description": " The string or DOM reference to be used as the windows body."}], "description": "Sets the body for the window.", "guessedname": "setBody", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the EditorWindow.", "guessedname": "toString", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String/HTMLElement", "name": "str", "description": " The string or DOM reference to be used as the windows header."}], "description": "Sets the header for the window.", "guessedname": "setHeader", "guessedtype": "function"}}, "param": "{String} name The name of the window.", "guessedname": "EditorWindow", "guessedtype": "function", "shortname": "EditorWindow", "properties": {"body": {"private": "", "description": "Holder for the body of the window, used in Editor.openWindow", "guessedname": "body", "guessedtype": "property"}, "header": {"private": "", "description": "Holder for the header of the window, used in Editor.openWindow", "guessedname": "header", "guessedtype": "property"}, "footer": {"private": "", "description": "Holder for the footer of the window, used in Editor.openWindow", "guessedname": "footer", "guessedtype": "property"}, "name": {"private": "", "description": "A unique name for the window", "guessedname": "name", "guessedtype": "property"}, "attrs": {"private": "", "description": "The window attributes", "guessedname": "attrs", "guessedtype": "property"}}, "name": "YAHOO.widget.EditorWindow"}, "YAHOO.widget.SWF": {"name": "YAHOO.widget.SWF", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "id", "description": " The id of the element, or the element itself that the SWF will be inserted into.  \nThe width and height of the SWF will be set to the width and height of this container element."}, {"type": "String", "name": "swfURL", "description": " The URL of the SWF to be embedded into the page."}, {"type": "Object", "name": "p_oAttributes", "description": " (optional) Configuration parameters for the Flash application and values for Flashvars\nto be passed to the SWF."}], "description": "Creates the SWF instance and keeps the configuration data"}], "namespace": "YAHOO.widget", "module": "swf", "guessedname": "SWF", "methods": {"eventHandler": {"guessedname": "eventHandler", "params": [{"type": "String", "name": "swfid", "description": "  the id of the SWF dispatching the event"}, {"type": "Object", "name": "event", "description": "  the event being transmitted."}], "description": "Handles an event coming from within the SWF and delegate it\nto a specific instance of SWF.", "private": "", "guessedtype": "function"}, "callSWF": {"params": [{"type": "String", "name": "func", "description": "  the name of the function to call"}, {"type": "Object", "name": "args", "description": "  the set of arguments to pass to the function."}], "description": "Calls a specific function exposed by the SWF's\nExternalInterface.", "guessedname": "callSWF", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the SWF instance."}, "description": "Public accessor to the unique name of the SWF instance.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "swf.js", "guessedtype": "function", "shortname": "SWF", "properties": {"_instances": {"guessedname": "_instances", "type": "Object", "description": "The static collection of all instances of the SWFs on the page.", "private": "", "guessedtype": "property"}, "_id": {"type": "String", "description": "The DOM id of this instance of the element. Automatically generated.", "guessedname": "_id", "guessedtype": "property"}}, "description": "Creates the SWF instance and keeps the configuration data"}, "YAHOO.widget.Paginator": {"name": "YAHOO.widget.Paginator", "configs": {"alwaysVisible": {"default": "true", "type": "boolean", "description": "Display pagination controls even when there is only one page.  Set\nto false to forgo rendering and/or hide the containers when there\nis only one page of data.  Note if you are using the rowsPerPage\ndropdown ui component, visibility will be maintained as long as the\nnumber of records exceeds the smallest page size."}, "updateOnChange": {"default": "false", "deprecated": "use changeRequest listener that calls setState", "type": "boolean", "description": "Update the UI immediately upon interaction.  If false, changeRequest\nsubscribers or other external code will need to explicitly set the\nnew values in the paginator to trigger repaint."}, "containerClass": {"default": "'yui-pg-container'", "type": "string", "description": "Class assigned to the element(s) containing pagination controls."}, "initialPage": {"default": "1", "type": "integer", "description": "Page to display on initial paint"}, "totalRecords": {"default": "0", "type": "integer", "description": "Total number of records to paginate through"}, "recordOffset": {"default": "0", "type": "integer", "description": "Zero based index of the record considered first on the current page.\nFor page based interactions, don't modify this attribute directly;\nuse setPage(n)."}, "rendered": {"type": "boolean", "description": "Indicator of whether the DOM nodes have been initially created", "final": ""}, "rowsPerPage": {"type": "integer", "description": "REQUIRED. Number of records constituting a &quot;page&quot;"}, "template": {"see": "Paginator.TEMPLATE_DEFAULT", "type": "string", "description": "Template used to render controls.  The string will be used as\ninnerHTML on all specified container nodes.  Bracketed keys\n(e.g. {pageLinks}) in the string will be replaced with an instance\nof the so named ui component."}, "id": {"type": "integer", "description": "Unique id assigned to this instance", "final": ""}, "containers": {"type": "{string|HTMLElement|Array(string|HTMLElement)}", "description": "REQUIRED. Node references or ids of nodes in which to render the\npagination controls."}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal to set instance and ui component\nconfiguration."}], "description": "Instantiate a Paginator, passing a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n<li>containers : <em>id | el | arr</em> (HTMLElement reference, its id, or an array of either)</li>\n</ul>"}], "namespace": "YAHOO.widget", "module": "paginator", "events": {"rendered": {"deprecated": "use render event", "description": "Event fired when the Paginator is initially rendered"}, "templateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' changes."}, "render": {"description": "Event fired when the Paginator is initially rendered"}, "initialPageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initialPageChange", "description": "Fires when the value for the configuration attribute 'initialPage' changes."}, "beforeContainerClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContainerClassChange", "description": "Fires before the value for the configuration attribute 'containerClass' changes. Return false to cancel the attribute change."}, "alwaysVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' changes."}, "beforeRenderedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRenderedChange", "description": "Fires before the value for the configuration attribute 'rendered' changes. Return false to cancel the attribute change."}, "beforeRecordOffsetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRecordOffsetChange", "description": "Fires before the value for the configuration attribute 'recordOffset' changes. Return false to cancel the attribute change."}, "beforeTemplateChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTemplateChange", "description": "Fires before the value for the configuration attribute 'template' changes. Return false to cancel the attribute change."}, "beforeTotalRecordsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTotalRecordsChange", "description": "Fires before the value for the configuration attribute 'totalRecords' changes. Return false to cancel the attribute change."}, "updateOnChangeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "updateOnChangeChange", "description": "Fires when the value for the configuration attribute 'updateOnChange' changes."}, "renderedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' changes."}, "destroy": {"description": "Event used to trigger cleanup of ui components"}, "beforeContainersChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContainersChange", "description": "Fires before the value for the configuration attribute 'containers' changes. Return false to cancel the attribute change."}, "changeRequest": {"description": "Event fired when a change in pagination values is requested,\neither by interacting with the various ui components or via the\nsetStartIndex(n) etc APIs.\nSubscribers will receive the proposed state as the first parameter.\nThe proposed state object will contain the following keys:\n<ul>\n<li>paginator - the Paginator instance</li>\n<li>page</li>\n<li>totalRecords</li>\n<li>recordOffset - index of the first record on the new page</li>\n<li>rowsPerPage</li>\n<li>records - array containing [start index, end index] for the records on the new page</li>\n<li>before - object literal with all these keys for the current state</li>\n</ul>"}, "pageChange": {"description": "Event fired when attribute changes have resulted in the calculated\ncurrent page changing."}, "beforeRowsPerPageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRowsPerPageChange", "description": "Fires before the value for the configuration attribute 'rowsPerPage' changes. Return false to cancel the attribute change."}, "rowsPerPageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "rowsPerPageChange", "description": "Fires when the value for the configuration attribute 'rowsPerPage' changes."}, "beforeDestroy": {"description": "Event that fires before the destroy event."}, "totalRecordsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "totalRecordsChange", "description": "Fires when the value for the configuration attribute 'totalRecords' changes."}, "recordOffsetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "recordOffsetChange", "description": "Fires when the value for the configuration attribute 'recordOffset' changes."}, "containersChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "containersChange", "description": "Fires when the value for the configuration attribute 'containers' changes."}, "containerClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "containerClassChange", "description": "Fires when the value for the configuration attribute 'containerClass' changes."}, "beforeInitialPageChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitialPageChange", "description": "Fires before the value for the configuration attribute 'initialPage' changes. Return false to cancel the attribute change."}, "beforeIdChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeIdChange", "description": "Fires before the value for the configuration attribute 'id' changes. Return false to cancel the attribute change."}, "beforeUpdateOnChangeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUpdateOnChangeChange", "description": "Fires before the value for the configuration attribute 'updateOnChange' changes. Return false to cancel the attribute change."}, "beforeAlwaysVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAlwaysVisibleChange", "description": "Fires before the value for the configuration attribute 'alwaysVisible' changes. Return false to cancel the attribute change."}, "idChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' changes."}}, "methods": {"render": {"chainable": "", "return": {"type": "", "description": "the Paginator instance"}, "description": "Render the pagination controls per the format attribute into the\nspecified container nodes.", "guessedname": "render", "guessedtype": "function"}, "getRowsPerPage": {"return": {"type": "number", "description": "the current setting of the rowsPerPage attribute"}, "description": "Get the number of rows per page.", "guessedname": "getRowsPerPage", "guessedtype": "function"}, "getTotalRecords": {"return": {"type": "number", "description": "the current setting of totalRecords attribute"}, "description": "Get the total number of records.", "guessedname": "getTotalRecords", "guessedtype": "function"}, "getPreviousPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number of the previous page, or null if the current page\nis the first page.", "guessedname": "getPreviousPage", "guessedtype": "function"}, "getTotalPages": {"return": {"type": "number", "description": ""}, "description": "Get the total number of pages in the data set according to the current\nrowsPerPage and totalRecords values.  If totalRecords is not set, or\nset to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns\nYAHOO.widget.Paginator.VALUE_UNLIMITED.", "guessedname": "getTotalPages", "guessedtype": "function"}, "setState": {"params": [{"type": "Object", "name": "state", "description": "  Object literal of attribute:value pairs to set"}], "description": "Convenience method to facilitate setting state attributes rowsPerPage,\ntotalRecords, recordOffset in batch.  Also supports calculating\nrecordOffset from state.page if state.recordOffset is not provided.\nFires only a single pageChange event, if appropriate.\nThis will not fire a changeRequest event.", "guessedname": "setState", "guessedtype": "function"}, "updateVisibility": {"description": "Hides the containers if there is only one page of data and attribute\nalwaysVisible is false.  Conversely, it displays the containers if either\nthere is more than one page worth of data or alwaysVisible is turned on.", "guessedname": "updateVisibility", "guessedtype": "function"}, "_selfSubscribe": {"protected": "", "description": "Subscribes to instance attribute change events to automate certain\nbehaviors.", "guessedname": "_selfSubscribe", "guessedtype": "function"}, "initEvents": {"private": "", "description": "Initialize this instance's CustomEvents.", "guessedname": "initEvents", "guessedtype": "function"}, "_firePageChange": {"protected": "", "params": [{"type": "Object", "name": "state", "description": "  the result of getState(oldState)"}], "description": "Fires a pageChange event in the form of a standard attribute change\nevent with additional properties prevState and newState.", "guessedname": "_firePageChange", "guessedtype": "function"}, "setStartIndex": {"params": [{"type": "number", "name": "offset", "description": "  the new record offset"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Move the record offset to a new starting index.  This will likely cause\nthe calculated current page to change.  You should probably use setPage.", "guessedname": "setStartIndex", "guessedtype": "function"}, "destroy": {"description": "Removes controls from the page and unhooks events.", "guessedname": "destroy", "guessedtype": "function"}, "getCurrentPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number corresponding to the current record offset.", "guessedname": "getCurrentPage", "guessedtype": "function"}, "getState": {"return": {"type": "object", "description": ""}, "params": [{"type": "object", "name": "changes", "description": "  OPTIONAL object literal with proposed values\nSupported change keys include:\n<ul>\n<li>rowsPerPage</li>\n<li>totalRecords</li>\n<li>recordOffset OR</li>\n<li>page</li>\n</ul>"}], "description": "Get an object literal describing the current state of the paginator.  If\nan object literal of proposed values is passed, the proposed state will\nbe returned as an object literal with the following keys:\n<ul>\n<li>paginator - instance of the Paginator</li>\n<li>page - number</li>\n<li>totalRecords - number</li>\n<li>recordOffset - number</li>\n<li>rowsPerPage - number</li>\n<li>records - [ start_index, end_index ]</li>\n<li>before - (OPTIONAL) { state object literal for current state }</li>\n</ul>", "guessedname": "getState", "guessedtype": "function"}, "hasPreviousPage": {"return": {"type": "boolean", "description": ""}, "description": "Is there a page before the current page?", "guessedname": "hasPreviousPage", "guessedtype": "function"}, "getStartIndex": {"return": {"type": "number", "description": "the index of the first record on the current page"}, "description": "Get the index of the first record on the current page", "guessedname": "getStartIndex", "guessedtype": "function"}, "setTotalRecords": {"params": [{"type": "number", "name": "total", "description": "  the new total number of records"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the total number of records.", "guessedname": "setTotalRecords", "guessedtype": "function"}, "_handleStateChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event"}], "description": "Fires the pageChange event when the state attributes have changed in\nsuch a way as to locate the current recordOffset on a new page.", "guessedname": "_handleStateChange", "guessedtype": "function"}, "hasPage": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "number", "name": "page", "description": "  the page in question"}], "description": "Does the requested page have any records?", "guessedname": "hasPage", "guessedtype": "function"}, "setRowsPerPage": {"params": [{"type": "number", "name": "rpp", "description": "  the new number of rows per page"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the\nchangeRequest event"}], "description": "Set the number of rows per page.", "guessedname": "setRowsPerPage", "guessedtype": "function"}, "setPage": {"params": [{"type": "number", "name": "newPage", "description": "  the new page number"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the\nchangeRequest event"}], "description": "Set the current page to the provided page number if possible.", "guessedname": "setPage", "guessedtype": "function"}, "hasNextPage": {"return": {"type": "boolean", "description": ""}, "description": "Are there records on the next page?", "guessedname": "hasNextPage", "guessedtype": "function"}, "initUIComponents": {"private": "", "description": "Initialize registered ui components onto this instance.", "guessedname": "initUIComponents", "guessedtype": "function"}, "_syncRecordOffset": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  totalRecordsChange event"}], "description": "Sets recordOffset to the starting index of the previous page when\ntotalRecords is reduced below the current recordOffset.", "guessedname": "_syncRecordOffset", "guessedtype": "function"}, "_renderTemplate": {"protected": "", "params": [{"type": "HTMLElement", "name": "container", "description": "  where to add the ui components"}, {"type": "String", "name": "template", "description": "  the template to use as a guide for rendering"}, {"type": "String", "name": "id_base", "description": "  id base for the container's ui components"}, {"type": "Boolean", "name": "hide", "description": "  leave the container hidden after assembly"}], "description": "Creates the individual ui components and renders them into a container.", "guessedname": "_renderTemplate", "guessedtype": "function"}, "Paginator.isNumeric": {"description": "Similar to YAHOO.lang.isNumber, but allows numeric strings.  This is\nis used for attribute validation in conjunction with getters that return\nnumbers.", "returns": "{Boolean} true if the input is coercable into a finite number", "static": "", "guessedname": "isNumeric", "guessedtype": "function", "params": [{"type": "Number|String", "name": "v", "description": "  value to be checked for number or numeric string"}]}, "initConfig": {"private": "", "description": "Initialize the Paginator's attributes (see YAHOO.util.Element class\nAttributeProvider).", "guessedname": "initConfig", "guessedtype": "function"}, "getContainerNodes": {"return": {"type": "Array", "description": "array of HTMLElement nodes"}, "description": "Get the configured container nodes", "guessedname": "getContainerNodes", "guessedtype": "function"}, "getPageRecords": {"return": {"type": "Array", "description": "[start_index, end_index]"}, "params": [{"type": "number", "name": "page", "description": "  (optional) The page (current page if not specified)"}], "description": "Get the start and end record indexes of the specified page.", "guessedname": "getPageRecords", "guessedtype": "function"}, "getNextPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number of the next page, or null if the current page is the\nlast page.", "guessedname": "getNextPage", "guessedtype": "function"}, "renderUIComponent": {"params": [{"type": "HTMLElement", "name": "marker", "description": "  the marker node to replace"}, {"type": "String", "name": "id_base", "description": "  string base the component's generated id"}], "description": "Replaces a marker node with a rendered UI component, determined by the\nyui-pg-ui-(UI component class name) in the marker's className. e.g.\nyui-pg-ui-PageLinks => new YAHOO.widget.Paginator.ui.PageLinks(this)", "guessedname": "renderUIComponent", "guessedtype": "function"}, "Paginator.toNumber": {"return": {"type": "", "description": "Number"}, "description": "Return a number or null from input", "static": "", "guessedname": "toNumber", "guessedtype": "function", "params": [{"type": "Number|String", "name": "n", "description": "  a number or numeric string"}]}}, "file": "Paginator.js", "shortname": "Paginator", "properties": {"_pageChanged": {"protected": "", "type": "boolean", "description": "Used by setState to indicate when a page change has occurred", "guessedname": "_pageChanged", "guessedtype": "property"}, "Paginator.TEMPLATE_DEFAULT": {"type": "string", "static": "", "description": "Default template used by Paginator instances.  Update this if you want\nall new Paginators to use a different default template.", "guessedname": "TEMPLATE_DEFAULT", "guessedtype": "property"}, "Paginator.TEMPLATE_ROWS_PER_PAGE": {"type": "string", "static": "", "description": "Common alternate pagination format, including page links, links for\nprevious, next, first and last pages as well as a rows-per-page\ndropdown.  Offered as a convenience.", "guessedname": "TEMPLATE_ROWS_PER_PAGE", "guessedtype": "property"}, "_batch": {"protected": "", "type": "boolean", "description": "Flag used to indicate multiple attributes are being updated via setState", "guessedname": "_batch", "guessedtype": "property"}, "_containers": {"guessedname": "_containers", "type": "Array(HTMLElement)", "description": "Array of nodes in which to render pagination controls.  This is set via\nthe &quot;containers&quot; attribute.", "private": "", "guessedtype": "property"}, "Paginator.id": {"description": "Incrementing index used to give instances unique ids.", "private": "", "static": "", "guessedname": "id", "guessedtype": "property", "type": "number"}, "_state": {"protected": "", "type": "Object", "description": "Temporary state cache used by setState to keep track of the previous\nstate for eventual pageChange event firing", "guessedname": "_state", "guessedtype": "property"}, "Paginator.ui": {"static": "", "description": "Storage object for UI Components", "guessedname": "ui", "guessedtype": "property"}, "Paginator.VALUE_UNLIMITED": {"description": "Used to identify unset, optional configurations, or used explicitly in\nthe case of totalRecords to indicate unlimited pagination.", "static": "", "guessedname": "VALUE_UNLIMITED", "guessedtype": "property", "type": "number", "final": ""}, "Paginator.ID_BASE": {"description": "Base of id strings used for ui components.", "private": "", "static": "", "guessedname": "ID_BASE", "guessedtype": "property", "type": "string"}}, "description": "Instantiate a Paginator, passing a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n<li>containers : <em>id | el | arr</em> (HTMLElement reference, its id, or an array of either)</li>\n</ul>"}, "YAHOO.util.AnimMgr": {"name": "YAHOO.util.AnimMgr", "namespace": "YAHOO.util", "module": "animation", "guessedname": "AnimMgr", "methods": {"run": {"description": "Called per Interval to handle each animation frame.", "guessedname": "run", "guessedtype": "function"}, "unRegister": {"guessedname": "unRegister", "params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}, {"type": "Int", "name": "index", "description": " The index of the Anim instance"}], "description": "removes an animation instance from the animation queue.\nAll animation instances must be registered in order to animate.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "object", "name": "tween", "description": " A specific Anim instance to stop (optional)\nIf no instance given, Manager stops thread and all animations."}], "description": "Stops the animation thread or a specific animation instance.", "guessedname": "stop", "guessedtype": "function"}, "start": {"description": "Starts the animation thread.\nOnly one thread can run at a time.", "guessedname": "start", "guessedtype": "function"}, "registerElement": {"params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}], "description": "Adds an animation instance to the animation queue.\nAll animation instances must be registered in order to animate.", "guessedname": "registerElement", "guessedtype": "function"}, "correctFrame": {"guessedname": "correctFrame", "params": [{"type": "Object", "name": "tween", "description": " The Anim instance being corrected."}], "description": "On the fly frame correction to keep animation on time.", "private": "", "guessedtype": "function"}}, "file": "AnimMgr.js", "guessedtype": "function", "shortname": "AnimMgr", "properties": {"queue": {"guessedname": "queue", "type": "Array", "description": "The current queue of registered animation objects.", "private": "", "guessedtype": "property"}, "tweenCount": {"guessedname": "tweenCount", "type": "Int", "description": "The number of active animations.", "private": "", "guessedtype": "property"}, "delay": {"type": "Int", "description": "Interval delay in milliseconds, defaults to fastest possible.", "guessedname": "delay", "guessedtype": "property"}, "fps": {"type": "Int", "description": "Base frame rate (frames per second). \nArbitrarily high for better x-browser calibration (slower browsers drop more frames).", "guessedname": "fps", "guessedtype": "property"}, "thread": {"guessedname": "thread", "type": "Int", "description": "Reference to the animation Interval.", "private": "", "guessedtype": "property"}}, "description": "Handles animation queueing and threading.\nUsed by Anim and subclasses."}, "YAHOO.util.ImageLoader.group": {"name": "YAHOO.util.ImageLoader.group", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "trigEl", "description": "\tThe HTML element id or reference to assign the trigger event to. Can be null for no trigger"}, {"type": "String", "name": "trigAct", "description": " The type of event to assign to trigEl. Can be null for no trigger"}, {"type": "Number", "name": "timeout", "description": "\tTimeout (time limit) length, in seconds. Can be undefined, or <= 0, for no time limit"}], "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}], "namespace": "YAHOO.util.ImageLoader", "module": "imageloader", "guessedname": "group", "methods": {"registerBgImage": {"return": {"type": "Object", "description": "bgImgObj that was registered, for modifying any attributes in the object"}, "params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Registers a background image with the group", "guessedname": "registerBgImage", "guessedtype": "function"}, "addCustomTrigger": {"params": [{"type": "Object", "name": "event", "description": " A YAHOO.util.CustomEvent object"}], "description": "Adds a custom event trigger to the group.", "guessedname": "addCustomTrigger", "guessedtype": "function"}, "addTrigger": {"params": [{"type": "String|HTMLElement", "name": "trigEl", "description": "  The HTML element id or reference to assign the trigger event to"}, {"type": "String", "name": "trigAct", "description": " The type of event to assign to trigEl"}], "description": "Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener", "guessedname": "addTrigger", "guessedtype": "function"}, "_getFetchTimeout": {"guessedname": "_getFetchTimeout", "return": {"type": "Function", "description": "group's fetch method"}, "description": "Returns the group's fetch method, with the proper closure, for use with setTimeout", "private": "", "guessedtype": "function"}, "registerSrcImage": {"return": {"type": "Object", "description": "srcImgObj that was registered, for modifying any attributes in the object"}, "params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}, {"type": "Int", "name": "width", "description": "\tpixel width of the image - defaults to image's natural size"}, {"type": "Int", "name": "height", "description": "\tpixel height of the image - defaults to image's natural size"}], "description": "Registers a src image with the group", "guessedname": "registerSrcImage", "guessedtype": "function"}, "registerPngBgImage": {"return": {"type": "Object", "description": "pngBgImgObj that was registered, for modifying any attributes in the object"}, "params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}, {"type": "Object", "name": "ailProps", "description": " The AlphaImageLoader properties to be set for the image\nValid properties are 'sizingMethod' and 'enabled'"}], "description": "Registers an alpha-channel-type png background image with the group", "guessedname": "registerPngBgImage", "guessedtype": "function"}, "_onloadTasks": {"private": "", "description": "Setup to do in the window's onload\nInitiates time limit for group; executes the fold check for the images", "guessedname": "_onloadTasks", "guessedtype": "function"}, "_foldCheck": {"private": "", "description": "Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately.", "guessedname": "_foldCheck", "guessedtype": "function"}, "fetch": {"description": "Displays the images in the group", "guessedname": "fetch", "guessedtype": "function"}, "_fetchByClass": {"private": "", "description": "Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching", "guessedname": "_fetchByClass", "guessedtype": "function"}}, "file": "ImageLoader.js", "guessedtype": "function", "shortname": "group", "requires": "YAHOO.util.Dom", "properties": {"name": {"type": "String", "description": "Name for the group. Only used to identify the group in logging statements", "guessedname": "name", "guessedtype": "property"}, "_classImageEls": {"guessedname": "_classImageEls", "type": "Array", "description": "HTML elements having the class name that is associated with this group\nElements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used", "private": "", "guessedtype": "property"}, "_imgObjs": {"guessedname": "_imgObjs", "type": "Object", "description": "Collection of images registered with this group", "private": "", "guessedtype": "property"}, "timeoutLen": {"type": "Number", "description": "Timeout (time limit) length, in seconds", "guessedname": "timeoutLen", "guessedtype": "property"}, "className": {"type": "String", "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"background:none !important;\"", "guessedname": "className", "guessedtype": "property"}, "_triggers": {"guessedname": "_triggers", "type": "Array", "description": "Collection of triggers for this group.\nKeeps track of each trigger's element, event, and event-listener-callback \"fetch\" function", "private": "", "guessedtype": "property"}, "_customTriggers": {"guessedname": "_customTriggers", "type": "Array", "description": "Collection of custom-event triggers for this group.\nKeeps track of each trigger's event object and event-listener-callback \"fetch\" function", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Object", "description": "Timeout object to keep a handle on the time limit", "private": "", "guessedtype": "property"}, "foldConditional": {"type": "Boolean", "description": "Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately", "guessedname": "foldConditional", "guessedtype": "property"}}, "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}, "YAHOO.util.XHRDataSource": {"name": "YAHOO.util.XHRDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "XHRDataSource class for accessing remote data via the YUI Connection Manager\nUtility"}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "XHRDataSource", "methods": {"_xhrFailure": {"guessedname": "_xhrFailure", "params": [{"type": "Object", "name": "oResponse", "description": "  HTTPXMLRequest object"}], "description": "Define Connection Manager failure handler", "private": "", "guessedtype": "function"}, "_xhrSuccess": {"guessedname": "_xhrSuccess", "params": [{"type": "Object", "name": "oResponse", "description": "  HTTPXMLRequest object"}], "description": "Define Connection Manager success handler", "private": "", "guessedtype": "function"}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overriding method passes query to Connection Manager. The returned\nresponse is then forwarded to the handleResponse function.", "guessedname": "makeConnection", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "DataSource.js", "guessedtype": "function", "shortname": "XHRDataSource", "properties": {"connTimeout": {"default": "0", "type": "Number", "description": "The connection timeout defines how many  milliseconds the XHR connection will\nwait for a server response. Any non-zero value will enable the Connection Manager's\nAuto-Abort feature.", "guessedname": "connTimeout", "guessedtype": "property"}, "connMethodPost": {"default": "false", "type": "Boolean", "description": "True if data is to be sent via POST. By default, data will be sent via GET.", "guessedname": "connMethodPost", "guessedtype": "property"}, "_xhrCallback": {"guessedname": "_xhrCallback", "param": "oResponse {Object} HTTPXMLRequest object", "description": "Define Connection Manager callback object", "private": "", "guessedtype": "property"}, "connXhrMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request/response management in the following manner:\n<dl>\n<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is returned\nbefore sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before sending the next\nrequest.</dd>\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most recently\nsent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>", "guessedname": "connXhrMode", "guessedtype": "property"}, "connMgr": {"default": "YAHOO.util.Connect", "type": "Object", "description": "Alias to YUI Connection Manager, to allow implementers to use a custom class.", "guessedname": "connMgr", "guessedtype": "property"}}, "description": "XHRDataSource class for accessing remote data via the YUI Connection Manager\nUtility"}, "YAHOO": {"name": "YAHOO", "description": "The YAHOO global namespace object.  If YAHOO is already defined, the\nexisting YAHOO object will not be overwritten so that defined\nnamespaces are preserved.", "namespace": "", "module": "yahoo", "guessedname": "YAHOO", "static": "", "file": "YAHOO.js", "guessedtype": "property", "shortname": "YAHOO", "methods": {"register": {"static": "", "params": [{"type": "String", "name": "name", "description": "    the name of the module (event, slider, etc)"}, {"type": "Function", "name": "mainClass", "description": " a reference to class in the module.  This\nclass will be tagged with the version info\nso that it will be possible to identify the\nversion that is in use when multiple versions\nhave loaded"}, {"type": "Object", "name": "data", "description": "      metadata object for the module.  Currently it\nis expected to contain a \"version\" property\nand a \"build\" property at minimum."}], "description": "Registers a module with the YAHOO object", "guessedname": "register", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYAHOO.namespace(\"property.package\");\nYAHOO.namespace(\"YAHOO.property.package\");\n</pre>\nEither of the above would create YAHOO.property, then\nYAHOO.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYAHOO.namespace(\"really.long.nested.namespace\");\n</pre>\nThis fails because \"long\" is a future reserved word in ECMAScript\nFor implementation code that uses YUI, do not create your components\nin the namespaces defined by YUI (\n<code>YAHOO.util</code>, \n<code>YAHOO.widget</code>, \n<code>YAHOO.lang</code>, \n<code>YAHOO.tool</code>, \n<code>YAHOO.example</code>, \n<code>YAHOO.env</code>) -- create your own namespace (e.g., 'companyname').", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "Object", "name": "overrides", "description": "  additional properties/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass if present."}], "description": "An alias for <a href=\"YAHOO.lang.html#extend\">YAHOO.lang.extend</a>", "guessedname": "extend", "guessedtype": "property"}, "augment": {"static": "", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*", "name": "arguments", "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver"}], "description": "An alias for <a href=\"YAHOO.lang.html#augment\">YAHOO.lang.augment</a>", "guessedname": "augment", "guessedtype": "property"}, "log": {"return": {"type": "Boolean", "description": "True if the log operation was successful."}, "description": "Uses YAHOO.widget.Logger to output a log message, if the widget is\navailable.", "static": "", "guessedname": "log", "guessedtype": "function", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}]}}}, "YAHOO.util.Event": {"name": "YAHOO.util.Event", "namespace": "YAHOO.util", "module": "event", "events": {"DOMReadyEvent": {"description": "Custom event the fires when the dom is initially usable", "guessedname": "DOMReadyEvent", "guessedtype": "property"}}, "guessedname": "Event", "methods": {"regCE": {"description": "Used by old versions of CustomEvent, restored for backwards\ncompatibility", "deprecated": "still here for backwards compatibility", "private": "", "static": "", "guessedname": "regCE", "guessedtype": "function"}, "_simpleRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "_simpleRemove", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_getScrollLeft": {"guessedname": "_getScrollLeft", "static": "", "description": "Returns scrollLeft", "private": "", "guessedtype": "function"}, "getTime": {"return": {"type": "Date", "description": "the time of the event"}, "description": "Returns the time of the event.  If the time is not included, the\nevent is modified using the current time.", "static": "", "guessedname": "getTime", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "addBlurListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Attaches a focusout event listener to the specified element for \nthe purpose of listening for the blur event on the element's \ndescendants.", "deprecated": "use YAHOO.util.Event.on and specify \"focusout\" as the event type.", "static": "", "guessedname": "addBlurListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}]}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "getTarget": {"return": {"type": "HTMLElement", "description": "the event's target"}, "description": "Returns the event's target element.  Safari sometimes provides\na text node, and this is automatically resolved to the text\nnode's parent so that it behaves like other browsers.", "static": "", "guessedname": "getTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}, {"type": "boolean", "name": "resolveTextNode", "description": " when set to true the target's\nparent will be returned if the target is a \ntext node.  @deprecated, the text node is\nnow resolved automatically"}]}, "_createDelegate": {"return": {"type": "Function", "description": "Function that will call the event listener \nspecified by the <code>YAHOO.util.Event.delegate</code> method."}, "description": "Creates a delegate function used to call event listeners specified \nvia the <code>YAHOO.util.Event.delegate</code> method.", "private": "", "static": "", "guessedname": "_createDelegate", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "        The method (event listener) to call."}, {"type": "Function|string", "name": "filter", "description": " Function or CSS selector used to \ndetermine for what element(s) the event listener should be called."}, {"type": "Object", "name": "obj", "description": "\tAn arbitrary object that will be \npassed as a parameter to the listener."}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the value of the \nobj parameter becomes the execution context\nof the listener. If an object, this object\nbecomes the execution context."}]}, "removeDelegate": {"return": {"type": "boolean", "description": "Returns true if the unbind was successful, false \notherwise."}, "description": "Removes a delegated event listener.", "static": "", "guessedname": "removeDelegate", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "container", "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."}, {"type": "String", "name": "type", "description": " The type of event to remove."}, {"type": "Function", "name": "fn", "description": " The method the event invokes.  If fn is\nundefined, then all event listeners for the type of event are \nremoved."}]}, "stopPropagation": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Stops event propagation", "guessedname": "stopPropagation", "guessedtype": "function"}, "getCharCode": {"return": {"type": "int", "description": "the event's charCode"}, "description": "Returns the charcode for an event", "static": "", "guessedname": "getCharCode", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "_getType": {"guessedname": "_getType", "params": [{"type": "String", "name": "sType", "description": "     The type to look up"}], "description": "Checks to see if the type requested is a special type \n(as defined by the _specialTypes hash), and (if so) returns \nthe special type name.", "private": "", "guessedtype": "function"}, "_simpleAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "guessedname": "_simpleAdd", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "getEl": {"description": "We cache elements bound by id because when the unload event \nfires, we can no longer use document.getElementById", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "getEl", "guessedtype": "function"}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "resolveTextNode": {"return": {"type": "HTMLElement", "description": "the normized node"}, "description": "In some cases, some browsers will return a text node inside\nthe actual element that was targeted.  This normalizes the\nreturn value for getTarget and getRelatedTarget.", "static": "", "guessedname": "resolveTextNode", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "node", "description": " node to resolve"}]}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Convenience method for stopPropagation + preventDefault", "guessedname": "stopEvent", "guessedtype": "function"}, "addFocusListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Attaches a focusin event listener to the specified element for \nthe purpose of listening for the focus event on the element's \ndescendants.", "deprecated": "use YAHOO.util.Event.on and specify \"focusin\" as the event type.", "static": "", "guessedname": "addFocusListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}]}, "getXY": {"return": {"type": "[x, y]", "description": "the pageX and pageY properties of the event"}, "description": "Returns the pageX and pageY properties as an indexed array.", "static": "", "guessedname": "getXY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."}, {"type": "String", "name": "sType", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}]}, "_createMouseDelegate": {"return": {"type": "Function", "description": "Function that will call the event listener \nspecified by either the <code>YAHOO.util.Event.addListener</code> \nor <code>YAHOO.util.Event.on</code> method."}, "description": "Creates a delegate function used to call mouseover and mouseleave \nevent listeners specified via the \n<code>YAHOO.util.Event.addListener</code> \nor <code>YAHOO.util.Event.on</code> method.", "private": "", "static": "", "guessedname": "_createMouseDelegate", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "        The method (event listener) to call"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the listener"}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the value of the \nobj parameter becomes the execution context\nof the listener. If an object, this object\nbecomes the execution context."}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "onBlur": {"description": "YAHOO.util.Event.onBlur is an alias for addBlurListener", "deprecated": "use YAHOO.util.Event.on and specify \"focusout\" as the event type.", "see": "addBlurListener", "static": "", "guessedname": "onBlur", "guessedtype": "property"}, "_getScrollTop": {"guessedname": "_getScrollTop", "static": "", "description": "Returns scrollTop", "private": "", "guessedtype": "function"}, "onContentReady": {"static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "overrideContext", "description": " If set to true, fn will execute\nin the context of obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>", "guessedname": "onContentReady", "guessedtype": "function"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "onAvailable": {"static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "overrideContext", "description": " If set to true, fn will execute\nin the context of obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>", "guessedname": "onAvailable", "guessedtype": "function"}, "onFocus": {"description": "YAHOO.util.Event.onFocus is an alias for addFocusListener", "deprecated": "use YAHOO.util.Event.on and specify \"focusin\" as the event type.", "see": "addFocusListener", "static": "", "guessedname": "onFocus", "guessedtype": "property"}, "clearCache": {"description": "Clears the element cache", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "clearCache", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes an event listener", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."}, {"type": "String", "name": "sType", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "removeBlurListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes a focusout event listener to the specified element for \nthe purpose of listening for the blur event on the element's \ndescendants.", "deprecated": "use YAHOO.util.Event.removeListener and specify \"focusout\" as the event type.", "static": "", "guessedname": "removeBlurListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "onDOMReady": {"static": "", "params": [{"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "overrideContext", "description": " If set to true, fn will execute\nin the context of obj, if set to an object it\nwill execute in the context of that object"}], "description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a CustomEvent, so the signature is:</p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;</p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:</p>\n<p>\"DOMReady\", [], obj</p>"}, "on": {"see": "addListener", "static": "", "description": "YAHOO.util.Event.on is an alias for addListener", "guessedname": "on", "guessedtype": "property"}, "_getScroll": {"guessedname": "_getScroll", "static": "", "description": "Returns the scrollTop and scrollLeft.  Used to calculate the \npageX and pageY in Internet Explorer", "private": "", "guessedtype": "function"}, "getListeners": {"return": {"type": "Object", "description": "the listener. Contains the following fields:\n&nbsp;&nbsp;type:   (string)   the type of event\n&nbsp;&nbsp;fn:     (function) the callback supplied to addListener\n&nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener\n&nbsp;&nbsp;adjust: (boolean|object)  whether or not to adjust the default context\n&nbsp;&nbsp;scope: (boolean)  the derived context based on the adjust parameter\n&nbsp;&nbsp;index:  (int)      its position in the Event util listener cache"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "sType", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "boundEl", "description": " the element the listener is attached to"}]}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "sType", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "_addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "private": "", "static": "", "guessedname": "_addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."}, {"type": "String", "name": "sType", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "preventDefault": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Prevents the default behavior of the event", "guessedname": "preventDefault", "guessedtype": "function"}, "_getCacheIndex": {"guessedname": "_getCacheIndex", "static": "", "description": "Locating the saved event handler data by function ref", "private": "", "guessedtype": "function"}, "_ready": {"guessedname": "_ready", "static": "", "description": "Fires the DOMReady event listeners the first time the document is\nusable.", "private": "", "guessedtype": "function"}, "delegate": {"return": {"type": "Boolean", "description": "Returns true if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends a delegated event listener.  Delegated event listeners \nreceive three arguments by default: the DOM event, the element  \nspecified by the filtering function or CSS selector, and the \ncontainer element (the element to which the event listener is \nbound).  (Note: Using the delegate method requires the event-delegate \nmodule.  Using CSS selectors as the filtering criteria for delegated \nevent listeners requires inclusion of the Selector Utility.)", "static": "", "guessedname": "delegate", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "container", "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."}, {"type": "String", "name": "type", "description": "     The type of event listener to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Function|string", "name": "filter", "description": " Function or CSS selector used to \ndetermine for what element(s) the event listener should be called. \nWhen a function is specified, the function should return an \nHTML element.  Using a CSS Selector requires the inclusion of the \nCSS Selector Utility."}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the listener"}, {"type": "Boolean|object", "name": "overrideContext", "description": "  If true, the value of the obj parameter becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}]}, "getPageY": {"return": {"type": "int", "description": "the event's pageY"}, "description": "Returns the event's pageY", "static": "", "guessedname": "getPageY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getPageX": {"return": {"type": "int", "description": "the event's pageX"}, "description": "Returns the event's pageX", "static": "", "guessedname": "getPageX", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "removeFocusListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes a focusin event listener to the specified element for \nthe purpose of listening for the focus event on the element's \ndescendants.", "deprecated": "use YAHOO.util.Event.removeListener and specify \"focusin\" as the event type.", "static": "", "guessedname": "removeFocusListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "getRelatedTarget": {"return": {"type": "HTMLElement", "description": "the event's relatedTarget"}, "description": "Returns the event's related target", "static": "", "guessedname": "getRelatedTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}}, "static": "", "file": "Event.js", "guessedtype": "function", "shortname": "Event", "properties": {"isSafari": {"description": "Safari detection", "deprecated": "use YAHOO.env.ua.webkit", "private": "", "static": "", "guessedname": "isSafari", "guessedtype": "property"}, "CAPTURE": {"description": "The original capture parameter passed into addListener", "static": "", "guessedname": "CAPTURE", "guessedtype": "property", "type": "int", "final": ""}, "WFN": {"description": "Function wrapped for context correction and cleanup, int constant", "static": "", "guessedname": "WFN", "guessedtype": "property", "type": "int", "final": ""}, "throwErrors": {"default": "false", "type": "boolean", "description": "Errors thrown by subscribers of custom events are caught\nand the error message is written to the debug console.  If\nthis property is set to true, it will also re-throw the\nerror.", "guessedname": "throwErrors", "guessedtype": "property"}, "FN": {"description": "Function to execute, int constant", "static": "", "guessedname": "FN", "guessedtype": "property", "type": "int", "final": ""}, "DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 500@amp;40 ms, so it will poll\nfor 20 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "listeners": {"description": "Cache of wrapped listeners", "private": "", "static": "", "guessedname": "listeners", "guessedtype": "property", "type": "array"}, "_specialTypes": {"guessedname": "_specialTypes", "static": "", "description": "Map of special event types", "private": "", "guessedtype": "property"}, "unloadListeners": {"description": "User-defined unload function that will be fired before all events\nare detached", "private": "", "static": "", "guessedname": "unloadListeners", "guessedtype": "property", "type": "array"}, "OVERRIDE": {"description": "The original context parameter passed into addListener", "static": "", "guessedname": "OVERRIDE", "guessedtype": "property", "type": "int", "final": ""}, "EL": {"description": "Element to bind, int constant", "static": "", "guessedname": "EL", "guessedtype": "property", "type": "int", "final": ""}, "OBJ": {"description": "Object passed in by the user that will be returned as a \nparameter to the callback, int constant.  Specific to\nunload listeners", "static": "", "guessedname": "UNLOAD_OBJ", "guessedtype": "property", "type": "int", "final": ""}, "elCache\nDOM element cache": {"deprecated": "Elements are not cached due to issues that arise when\nelements are removed and re-added", "static": "", "guessedname": "elCache", "private": "", "guessedtype": "property"}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "webkit": {"description": "webkit version", "deprecated": "use YAHOO.env.ua.webkit", "private": "", "static": "", "guessedname": "webkit", "guessedtype": "property", "type": "string"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "webkitKeymap": {"description": "Normalized keycodes for webkit/safari", "private": "", "static": "", "guessedname": "webkitKeymap", "guessedtype": "property", "type": "{int: int}", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "counter": {"guessedname": "counter", "static": "", "description": "Counter for auto id generation", "private": "", "guessedtype": "property"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "ADJ_SCOPE": {"description": "Adjusted context, either the element we are registering the event\non or the custom object passed in by the listener, int constant", "static": "", "guessedname": "ADJ_SCOPE", "guessedtype": "property", "type": "int", "final": ""}, "onAvailStack": {"guessedname": "onAvailStack", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}, "isIE": {"description": "IE detection", "deprecated": "use YAHOO.env.ua.ie", "private": "", "static": "", "guessedname": "isIE", "guessedtype": "property"}, "retryCount": {"guessedname": "retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "TYPE": {"description": "Type of event, int constant", "static": "", "guessedname": "TYPE", "guessedtype": "property", "type": "int", "final": ""}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "YAHOO.util.Dom": {"name": "YAHOO.util.Dom", "namespace": "YAHOO.util", "module": "dom", "guessedname": "Dom", "methods": {"getElementsBy": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}, {"type": "Function", "name": "apply", "description": " (optional) A function to apply to each element when found"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "overrides", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Returns an array of HTMLElements that pass the test applied by supplied boolean method.\nFor optimized performance, include a tag and/or root node when possible.\nNote: This method operates against a live collection, so modifying the \ncollection in the callback (removing/appending nodes, etc.) will have\nside effects.  Instead you should iterate the returned nodes array,\nas you would with the native \"getElementsByTagName\" method.", "guessedname": "getElementsBy", "guessedtype": "function"}, "getAttribute": {"return": {"type": "String", "description": "The current value of the attribute."}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to get."}], "description": "Provides a normalized attribute interface.", "guessedname": "getAttribute", "guessedtype": "function"}, "generateId": {"return": {"type": "String | Array", "description": "The generated ID, or array of generated IDs (or original ID if already present on an element)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An optional element array of elements to add an ID to (no ID is added if one is already present)."}, {"type": "String", "name": "prefix", "description": " (optional) an optional prefix to use (defaults to \"yui-gen\")."}], "description": "Returns an ID and applies it to the element \"el\", if provided.", "guessedname": "generateId", "guessedtype": "function"}, "getDocumentWidth": {"return": {"type": "Int", "description": "The width of the actual document (which includes the body and its margin)."}, "description": "Returns the width of the document.", "guessedname": "getDocumentWidth", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property to be set."}, {"type": "String", "name": "val", "description": " The value to apply to the given property."}], "description": "Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "Number | Array", "description": "The X position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements"}], "description": "Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "Number | Array", "description": "The Y position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements"}], "description": "Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "getChildren": {"return": {"type": "Array", "description": "A static array of HTMLElements"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns an array of HTMLElement childNodes.", "guessedname": "getChildren", "guessedtype": "function"}, "getFirstChild": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the first HTMLElement child.", "guessedname": "getFirstChild", "guessedtype": "function"}, "getClientRegion": {"return": {"type": "Region", "description": "A Region object representing the viewport which accounts for document scroll"}, "description": "Creates a Region based on the viewport relative to the document.", "guessedname": "getClientRegion", "guessedtype": "function"}, "getLastChildBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns the last HTMLElement child that passes the test method.", "guessedname": "getLastChildBy", "guessedtype": "function"}, "getAncestorBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}], "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.\nFor performance reasons, IDs are not accepted and argument validation omitted.", "guessedname": "getAncestorBy", "guessedtype": "function"}, "insertBefore": {"return": {"type": "HTMLElement", "description": "The node that was inserted (or null if insert fails)"}, "params": [{"type": "String | HTMLElement", "name": "newNode", "description": " The node to be inserted"}, {"type": "String | HTMLElement", "name": "referenceNode", "description": " The node to insert the new node before"}], "description": "Inserts the new node as the previous sibling of the reference node", "guessedname": "insertBefore", "guessedtype": "function"}, "getElementBy": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}], "description": "Returns the first HTMLElement that passes the test applied by the supplied boolean method.", "guessedname": "getElementBy", "guessedtype": "function"}, "getPreviousSiblingBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the previous sibling that is an HTMLElement. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "getPreviousSiblingBy", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "An array of elements that have the given class name"}, "params": [{"type": "String", "name": "className", "description": " The class name to match against"}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point.\nThis element is not included in the className scan."}, {"type": "Function", "name": "apply", "description": " (optional) A function to apply to each element when found"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "overrides", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Returns an array of HTMLElements with the given class.\nFor optimized performance, include a tag and/or root node when possible.\nNote: This method operates against a live collection, so modifying the \ncollection in the callback (removing/appending nodes, etc.) will have\nside effects.  Instead you should iterate the returned nodes array,\nas you would with the native \"getElementsByTagName\" method.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"return": {"type": "Boolean | Array", "description": "A pass/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "getNextSibling": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the next sibling that is an HTMLElement", "guessedname": "getNextSibling", "guessedtype": "function"}, "getDocumentHeight": {"return": {"type": "Int", "description": "The height of the actual document (which includes the body and its margin)."}, "description": "Returns the height of the document.", "guessedname": "getDocumentHeight", "guessedtype": "function"}, "getLastChild": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the last HTMLElement child.", "guessedname": "getLastChild", "guessedtype": "function"}, "getClientHeight": {"deprecated": "Now using getViewportHeight.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The height of the viewable area of the page."}, "description": "Returns the height of the client (viewport).", "guessedname": "getClientHeight", "guessedtype": "function"}, "inDocument": {"return": {"type": "Boolean", "description": "Whether or not the element is present in the current document"}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The element to search for"}, {"type": "Object", "name": "doc", "description": " An optional document to search, defaults to element's owner document"}], "description": "Determines whether an HTMLElement is present in the current document.", "guessedname": "inDocument", "guessedtype": "function"}, "insertAfter": {"return": {"type": "HTMLElement", "description": "The node that was inserted (or null if insert fails)"}, "params": [{"type": "String | HTMLElement", "name": "newNode", "description": " The node to be inserted"}, {"type": "String | HTMLElement", "name": "referenceNode", "description": " The node to insert the new node after"}], "description": "Inserts the new node as the next sibling of the reference node", "guessedname": "insertAfter", "guessedtype": "function"}, "getViewportHeight": {"return": {"type": "Int", "description": "The height of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current height of the viewport.", "guessedname": "getViewportHeight", "guessedtype": "function"}, "addClass": {"return": {"type": "Boolean | Array", "description": "A pass/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to add the class to"}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements.", "guessedname": "addClass", "guessedtype": "function"}, "getAncestorByClassName": {"return": {"type": "Object", "description": "HTMLElement"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}, {"type": "String", "name": "className", "description": ""}], "description": "Returns the nearest ancestor with the given className.", "guessedname": "getAncestorByClassName", "guessedtype": "function"}, "getViewportWidth": {"return": {"type": "Int", "description": "The width of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current width of the viewport.", "guessedname": "getViewportWidth", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement | Array", "description": "A DOM reference to an HTML element or an array of HTMLElements."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and/or HTMLElements."}], "description": "Returns an HTMLElement reference.", "guessedname": "get", "guessedtype": "function"}, "removeClass": {"return": {"type": "Boolean | Array", "description": "A pass/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements.", "guessedname": "removeClass", "guessedtype": "function"}, "getStyle": {"return": {"type": "String | Array", "description": "The current value of the style property for the element(s)."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property whose value is returned."}], "description": "Normalizes currentStyle and ComputedStyle.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements"}, {"type": "Array", "name": "pos", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "getPreviousSibling": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the previous sibling that is an HTMLElement", "guessedname": "getPreviousSibling", "guessedtype": "function"}, "getDocumentScrollTop": {"return": {"type": "Int", "description": "The amount that the document is scrolled to the top"}, "params": [{"type": "HTMLDocument", "name": "document", "description": " (optional) The document to get the scroll value of"}], "description": "Returns the top scroll value of the document", "guessedname": "getDocumentScrollTop", "guessedtype": "function"}, "setX": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."}, {"type": "Int", "name": "x", "description": " The value to use as the X coordinate for the element(s)."}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "setY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."}, {"type": "Int", "name": "x", "description": " To use as the Y coordinate for the element(s)."}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM\nreference, or an Array of IDs and/or HTMLElements"}], "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "getFirstChildBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns the first HTMLElement child that passes the test method.", "guessedname": "getFirstChildBy", "guessedtype": "function"}, "getClientWidth": {"deprecated": "Now using getViewportWidth.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The width of the viewable area of the page."}, "description": "Returns the width of the client (viewport).", "guessedname": "getClientWidth", "guessedtype": "function"}, "getNextSiblingBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the next HTMLElement sibling that passes the boolean method. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "getNextSiblingBy", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region | Array", "description": "A Region or array of Region instances containing \"top, left, bottom, right\" member data."}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."}], "description": "Returns the region position of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).", "guessedname": "getRegion", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String | HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to set."}, {"type": "String", "name": "val", "description": " The value of the attribute."}], "description": "Provides a normalized attribute interface.", "guessedname": "setAttribute", "guessedtype": "function"}, "batch": {"return": {"type": "Any | Array", "description": "The return value(s) from the supplied method"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An element or array of elements to apply the method to"}, {"type": "Function", "name": "method", "description": " The method to apply to the element(s)"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "overrides", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Runs the supplied method against each item in the Collection/Array.\nThe method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).", "guessedname": "batch", "guessedtype": "function"}, "getChildrenBy": {"return": {"type": "Array", "description": "A static array of HTMLElements"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to start from"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns an array of HTMLElement childNodes that pass the test method.", "guessedname": "getChildrenBy", "guessedtype": "function"}, "isAncestor": {"return": {"type": "Boolean", "description": "Whether or not the haystack is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "haystack", "description": " The possible ancestor"}, {"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "isAncestor", "guessedtype": "function"}, "getDocumentScrollLeft": {"return": {"type": "Int", "description": "The amount that the document is scrolled to the left"}, "params": [{"type": "HTMLDocument", "name": "document", "description": " (optional) The document to get the scroll value of"}], "description": "Returns the left scroll value of the document", "guessedname": "getDocumentScrollLeft", "guessedtype": "function"}, "getAncestorByTagName": {"return": {"type": "Object", "description": "HTMLElement"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}, {"type": "String", "name": "tagName", "description": ""}], "description": "Returns the nearest ancestor with the given tagName.", "guessedname": "getAncestorByTagName", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to test"}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className.", "guessedname": "hasClass", "guessedtype": "function"}}, "file": "Dom.js", "guessedtype": "property", "shortname": "Dom", "requires": "yahoo, event", "description": "Provides helper methods for DOM elements."}, "YAHOO.widget.TVFadeOut": {"name": "YAHOO.widget.TVFadeOut", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "Function", "name": "callback", "description": "  function to invoke when the animation is finished"}], "description": "A 1/2 second fade out animation."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVFadeOut", "methods": {"onComplete": {"description": "Clean up and invoke callback", "guessedname": "onComplete", "guessedtype": "function"}, "animate": {"description": "Performs the animation", "guessedname": "animate", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "the string representation of the instance"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}}, "file": "TVFadeOut.js", "guessedtype": "function", "shortname": "TVFadeOut", "properties": {"el": {"type": "HTMLElement", "description": "The element to animate", "guessedname": "el", "guessedtype": "property"}, "callback": {"type": "function", "description": "the callback to invoke when the animation is complete", "guessedname": "callback", "guessedtype": "property"}}, "description": "A 1/2 second fade out animation."}, "YAHOO.widget.RadioCellEditor": {"name": "YAHOO.widget.RadioCellEditor", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal of configs."}], "description": "The RadioCellEditor class provides functionality for inline editing\nDataTable cell data with radio buttons."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "RadioCellEditor", "methods": {"renderForm": {"description": "Render a form with input(s) type=radio.", "guessedname": "renderForm", "guessedtype": "function"}, "handleDisabledBtns": {"description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them.", "guessedname": "handleDisabledBtns", "guessedtype": "function"}, "getInputValue": {"description": "Retrieves input value from RadioCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in RadioCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets RadioCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "CellEditor.js", "guessedtype": "function", "shortname": "RadioCellEditor", "properties": {"radioOptions": {"type": "String[] | Object[]", "description": "Array of radio values. Can either be a simple array (e.g., [\"yes\",\"no\",\"maybe\"])\nor a an array of objects (e.g., [{label:\"yes\", value:1}, {label:\"no\", value:-1},\n{label:\"maybe\", value:0}]).", "guessedname": "radioOptions", "guessedtype": "property"}, "radios": {"type": "HTMLElement[]", "description": "Reference to radio elements.", "guessedname": "radios", "guessedtype": "property"}}, "description": "The RadioCellEditor class provides functionality for inline editing\nDataTable cell data with radio buttons."}, "YAHOO.widget.Paginator.ui.LastPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link HTMLElement node", "private": "", "guessedtype": "property"}, "na": {"guessedname": "na", "type": "HTMLElement", "description": "Empty place holder node for when the last page link is inappropriate to\ndisplay in any form (unlimited paging).", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.LastPageLink", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the last page."}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"beforeLastPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLastPageLinkLabelChange", "description": "Fires before the value for the configuration attribute 'lastPageLinkLabel' changes. Return false to cancel the attribute change."}, "lastPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "lastPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkClass' changes."}, "beforeLastPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLastPageLinkClassChange", "description": "Fires before the value for the configuration attribute 'lastPageLinkClass' changes. Return false to cancel the attribute change."}, "lastPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "lastPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' changes."}}, "guessedname": "LastPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "paginator", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event (ignored)"}], "description": "Swap the link, span, and na nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "LastPageLink.js", "guessedtype": "function", "shortname": "LastPageLink", "configs": {"lastPageLinkClass": {"default": "'yui-pg-last'", "description": "CSS class assigned to the link/span"}, "lastPageLinkLabel": {"default": "'last &gt;&gt;'", "description": "Used as innerHTML for the last page link/span."}}, "description": "ui Component to generate the link to jump to the last page."}, "YAHOO.widget.Chart": {"name": "YAHOO.widget.Chart", "configs": {"altText": {"type": "String", "description": "The alternative text to provide for screen readers and other assistive technology."}, "version": {"type": "String", "description": "Minimum required version for the SWF file. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "swfURL": {"type": "String", "description": "Absolute or relative URL to the SWF displayed by the Chart. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "expressInstall": {"type": "String", "description": "URL pointing to a SWF file that handles Flash Player's express\ninstall feature. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "request": {"type": "String", "description": "Request to be sent to the Chart's DataSource."}, "legendLabelFunction": {"type": "String", "description": "The string representation of a globally-accessible function\nthat may be called by the SWF to format the labels of a Chart's legend."}, "wmode": {"type": "String", "description": "Sets the window mode of the Flash Player control. May be\n\"window\", \"opaque\", or \"transparent\". Only available in the constructor\nbecause it may not be set after Flash Player has been embedded in the page."}, "dataTipFunction": {"type": "String", "description": "The string representation of a globally-accessible function\nthat may be called by the SWF to generate the datatip text for a Chart's item."}, "dataSource": {"type": "DataSource", "description": "The DataSource instance to display in the Chart."}, "backgroundColor": {"type": "String", "description": "The background color of the SWF. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."}, "series": {"type": "Array", "description": "Defines the series to be displayed by the Chart."}, "polling": {"type": "Number", "description": "A numeric value indicating the number of milliseconds between\npolling requests to the DataSource."}, "categoryNames": {"type": "Array", "description": "Defines the names of the categories to be displayed in the Chart.."}}, "constructors": [{"params": [{"type": "String", "name": "type", "description": "  The char type. May be \"line\", \"column\", \"bar\", or \"pie\""}, {"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "Chart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "properties": {"_dataTipFunction": {"guessedname": "_dataTipFunction", "type": "String", "description": "Stores a reference to the dataTipFunction created by\nYAHOO.widget.Chart.createProxyFunction()", "private": "", "guessedtype": "property"}, "_seriesFunctions": {"guessedname": "_seriesFunctions", "type": "Array", "description": "Stores references to series function values created by\nYAHOO.widget.Chart.createProxyFunction()", "private": "", "guessedtype": "property"}, "_request": {"private": "", "description": "Storage for the request attribute.", "guessedname": "_request", "guessedtype": "property"}, "_attributes": {"guessedname": "_attributes", "type": "Object", "description": "The initializing attributes are stored here until the SWF is ready.", "private": "", "guessedtype": "property"}, "_pollingInterval": {"guessedname": "_pollingInterval", "type": "Number", "description": "The time, in ms, between requests for data.", "private": "", "guessedtype": "property"}, "_type": {"guessedname": "_type", "type": "String", "description": "The type of this chart instance.", "private": "", "guessedtype": "property"}, "_legendLabelFunction": {"guessedname": "_legendLabelFunction", "type": "String", "description": "Stores a reference to the legendLabelFunction created by\nYAHOO.widget.Chart.createProxyFunction()", "private": "", "guessedtype": "property"}, "_id": {"guessedname": "_id", "type": "String", "description": "The id of this instance.", "private": "", "guessedtype": "property"}, "_initialized": {"guessedname": "_initialized", "type": "Boolean", "description": "Indicates whether the SWF has been initialized and is ready\nto communicate with JavaScript", "private": "", "guessedtype": "property"}, "_containerID": {"guessedname": "_containerID", "type": "String", "description": "The ID of the containing DIV.", "private": "", "guessedtype": "property"}, "_swfEmbed": {"guessedname": "_swfEmbed", "type": "swf", "description": "The javascript wrapper for the swf object", "private": "", "guessedtype": "property"}, "_seriesDefs": {"private": "", "description": "Storage for the series attribute.", "guessedname": "_seriesDefs", "guessedtype": "property"}, "_dataSource": {"private": "", "description": "Storage for the dataSource attribute.", "guessedname": "_dataSource", "guessedtype": "property"}, "Chart.SWFURL": {"description": "Storage for the dataTipFunction attribute.", "default": "\"assets/charts.swf\"", "private": "", "static": "", "guessedname": "SWFURL", "guessedtype": "property", "final": ""}, "proxyFunctionCount": {"guessedname": "proxyFunctionCount", "static": "", "description": "The number of proxy functions that have been created.", "private": "", "guessedtype": "property"}, "_swfURL": {"guessedname": "_swfURL", "type": "String", "description": "The URL of the SWF file.", "private": "", "guessedtype": "property"}, "_pollingID": {"guessedname": "_pollingID", "type": "Number", "description": "The id returned from the DataSource's setInterval function.", "private": "", "guessedtype": "property"}, "_swf": {"private": "", "description": "A reference to the embedded SWF file.", "guessedname": "_swf", "guessedtype": "property"}}, "guessedname": "Chart", "methods": {"_loadHandler": {"private": "", "description": "Called when the SWF is ready for communication. Sets the type, initializes\nthe styles, and sets the DataSource.", "guessedname": "_loadHandler", "guessedtype": "function"}, "_getDataSource": {"private": "", "description": "Getter for the dataSource attribute.", "guessedname": "_getDataSource", "guessedtype": "function"}, "refreshData": {"description": "Sends (or resends) the request to the DataSource.", "guessedname": "refreshData", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_setLegendLabelFunction": {"private": "", "description": "Setter for the legendLabelFunction attribute.", "guessedname": "_setLegendLabelFunction", "guessedtype": "function"}, "_setPolling": {"private": "", "description": "Setter for the polling attribute.", "guessedname": "_setPolling", "guessedtype": "function"}, "_getSeriesDefs": {"private": "", "description": "Getter for the series attribute.", "guessedname": "_getSeriesDefs", "guessedtype": "function"}, "_setCategoryNames": {"private": "", "description": "Setter for the categoryNames attribute.", "guessedname": "_setCategoryNames", "guessedtype": "function"}, "setStyles": {"params": [{"type": "Object", "name": "styles", "description": "  Initializer for all Chart styles."}], "description": "Resets all styles on the Chart instance.", "guessedname": "setStyles", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the Chart instance."}, "description": "Public accessor to the unique name of the Chart instance.", "guessedname": "toString", "guessedtype": "function"}, "_eventHandler": {"private": "", "description": "Handles swfReady event from SWF.", "guessedname": "_eventHandler", "guessedtype": "function"}, "_getSWFURL": {"private": "", "description": "Getter for swfURL attribute.", "guessedname": "_getSWFURL", "guessedtype": "function"}, "_getRequest": {"private": "", "description": "Getter for the request attribute.", "guessedname": "_getRequest", "guessedtype": "function"}, "_setAltText": {"private": "", "description": "Setter for altText attribute.", "guessedname": "_setAltText", "guessedtype": "function"}, "_setDataTipFunction": {"private": "", "description": "Setter for the dataTipFunction attribute.", "guessedname": "_setDataTipFunction", "guessedtype": "function"}, "_setSeriesDefs": {"private": "", "description": "Setter for the series attribute.", "guessedname": "_setSeriesDefs", "guessedtype": "function"}, "_setRequest": {"private": "", "description": "Setter for the request attribute.", "guessedname": "_setRequest", "guessedtype": "function"}, "YAHOO.widget.Chart.getFunctionReference": {"guessedname": "getFunctionReference", "static": "", "description": "Uses YAHOO.widget.Chart.createProxyFunction to return string\nreference to a function.", "private": "", "guessedtype": "function"}, "_loadDataHandler": {"private": "", "description": "Called when the DataSource receives new data. The series definitions are used\nto build a data provider for the SWF chart.", "guessedname": "_loadDataHandler", "guessedtype": "function"}, "_getAltText": {"private": "", "description": "Getter for altText attribute.", "guessedname": "_getAltText", "guessedtype": "function"}, "setSeriesStyles": {"params": [{"type": "Array", "name": "styles", "description": "  Initializer for all Chart series styles."}], "description": "Sets the styles on all series in the Chart.", "guessedname": "setSeriesStyles", "guessedtype": "function"}, "YAHOO.widget.Chart.createProxyFunction": {"guessedname": "createProxyFunction", "static": "", "description": "Creates a globally accessible function that wraps a function reference.\nReturns the proxy function's name as a string for use by the SWF through\nExternalInterface.", "private": "", "guessedtype": "function"}, "_getPolling": {"private": "", "description": "Getter for the polling attribute.", "guessedname": "_getPolling", "guessedtype": "function"}, "_getCategoryNames": {"private": "", "description": "Getter for the categoryNames attribute.", "guessedname": "_getCategoryNames", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String", "name": "name", "description": "  Name of the Chart style value to change."}, {"type": "Object", "name": "value", "description": "  New value to pass to the Chart style."}], "description": "Sets a single style value on the Chart instance.", "guessedname": "setStyle", "guessedtype": "function"}, "_setDataSource": {"private": "", "description": "Setter for the dataSource attribute.", "guessedname": "_setDataSource", "guessedtype": "function"}, "YAHOO.widget.Chart.removeProxyFunction": {"guessedname": "removeProxyFunction", "static": "", "description": "Removes a function created with createProxyFunction()", "private": "", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "Chart.js", "guessedtype": "function", "shortname": "Chart", "events": {"beforeDataSourceChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataSourceChange", "description": "Fires before the value for the configuration attribute 'dataSource' changes. Return false to cancel the attribute change."}, "beforeSeriesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSeriesChange", "description": "Fires before the value for the configuration attribute 'series' changes. Return false to cancel the attribute change."}, "altTextChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "altTextChange", "description": "Fires when the value for the configuration attribute 'altText' changes."}, "beforeSwfURLChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSwfURLChange", "description": "Fires before the value for the configuration attribute 'swfURL' changes. Return false to cancel the attribute change."}, "beforeBackgroundColorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBackgroundColorChange", "description": "Fires before the value for the configuration attribute 'backgroundColor' changes. Return false to cancel the attribute change."}, "itemDoubleClickEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user double-clicks an item renderer in the chart with the mouse."}, "contentReady": {"description": "Fires when the SWF is initialized and communication is possible."}, "itemDragStartEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user presses the mouse down on an item to initiate a drag action."}, "dataSourceChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' changes."}, "itemMouseOverEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user moves the mouse over the bounds of an item renderer in the chart."}, "beforeCategoryNamesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCategoryNamesChange", "description": "Fires before the value for the configuration attribute 'categoryNames' changes. Return false to cancel the attribute change."}, "expressInstallChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "expressInstallChange", "description": "Fires when the value for the configuration attribute 'expressInstall' changes."}, "beforeExpressInstallChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeExpressInstallChange", "description": "Fires before the value for the configuration attribute 'expressInstall' changes. Return false to cancel the attribute change."}, "categoryNamesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "categoryNamesChange", "description": "Fires when the value for the configuration attribute 'categoryNames' changes."}, "itemClickEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user clicks an item renderer in the chart with the mouse."}, "itemDragEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user moves the mouse during a drag action."}, "pollingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pollingChange", "description": "Fires when the value for the configuration attribute 'polling' changes."}, "dataTipFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataTipFunctionChange", "description": "Fires when the value for the configuration attribute 'dataTipFunction' changes."}, "swfURLChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "swfURLChange", "description": "Fires when the value for the configuration attribute 'swfURL' changes."}, "legendLabelFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "legendLabelFunctionChange", "description": "Fires when the value for the configuration attribute 'legendLabelFunction' changes."}, "beforeWmodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeWmodeChange", "description": "Fires before the value for the configuration attribute 'wmode' changes. Return false to cancel the attribute change."}, "beforePollingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePollingChange", "description": "Fires before the value for the configuration attribute 'polling' changes. Return false to cancel the attribute change."}, "requestChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "requestChange", "description": "Fires when the value for the configuration attribute 'request' changes."}, "wmodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "wmodeChange", "description": "Fires when the value for the configuration attribute 'wmode' changes."}, "itemDragEndEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user releases the mouse during a drag action."}, "beforeVersionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeVersionChange", "description": "Fires before the value for the configuration attribute 'version' changes. Return false to cancel the attribute change."}, "beforeRequestChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRequestChange", "description": "Fires before the value for the configuration attribute 'request' changes. Return false to cancel the attribute change."}, "backgroundColorChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "backgroundColorChange", "description": "Fires when the value for the configuration attribute 'backgroundColor' changes."}, "seriesChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "seriesChange", "description": "Fires when the value for the configuration attribute 'series' changes."}, "beforeLegendLabelFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLegendLabelFunctionChange", "description": "Fires before the value for the configuration attribute 'legendLabelFunction' changes. Return false to cancel the attribute change."}, "beforeDataTipFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataTipFunctionChange", "description": "Fires before the value for the configuration attribute 'dataTipFunction' changes. Return false to cancel the attribute change."}, "versionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "versionChange", "description": "Fires when the value for the configuration attribute 'version' changes."}, "beforeAltTextChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeAltTextChange", "description": "Fires before the value for the configuration attribute 'altText' changes. Return false to cancel the attribute change."}, "itemMouseOutEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user moves the mouse out of the bounds of an item renderer in the chart."}}, "description": "Chart class for the YUI Charts widget."}, "YAHOO.util.ColumnDD": {"name": "YAHOO.util.ColumnDD", "constructors": [{"params": [{"type": "YAHOO.widget.DataTable", "name": "oDataTable", "description": "  DataTable instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "HTMLElement", "name": "elTh", "description": "  TH element reference."}, {"type": "HTMLElement", "name": "elTarget", "description": "  Drag target element."}], "description": "ColumnDD subclasses DragDrop to support rearrangeable Columns."}], "namespace": "YAHOO.util", "module": "datatable", "guessedname": "ColumnDD", "extends": "YAHOO.util.DDProxy", "superclass": "YAHOO.util.DDProxy", "file": "ColumnSet.js", "guessedtype": "function", "shortname": "ColumnDD", "description": "ColumnDD subclasses DragDrop to support rearrangeable Columns."}, "YAHOO.widget.RootNode": {"name": "YAHOO.widget.RootNode", "constructors": [{"params": [{"type": "YAHOO.widget.TreeView", "name": "oTree", "description": "  The tree instance this node belongs to"}], "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "RootNode", "methods": {"getNodeCount": {"return": {"type": "int", "description": "number of nodes in the tree"}, "description": "Count of nodes in tree.  \nIt overrides Nodes.getNodeCount because the root node should not be counted.", "guessedname": "getNodeCount", "guessedtype": "function"}, "getNodeDefinition": {"return": {"type": "Object | false", "description": "definition of the tree or false if any child node is defined as dynamic"}, "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nSince the RootNode is automatically created by treeView, \nits own definition is excluded from the returned node definition\nwhich only contains its children.", "guessedname": "getNodeDefinition", "guessedtype": "function"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "RootNode.js", "guessedtype": "function", "shortname": "RootNode", "properties": {"_type": {"description": "The node type", "default": "\"RootNode\"", "private": "", "guessedname": "_type", "guessedtype": "property", "type": "string"}}, "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node."}, "YAHOO.tool.TestNode": {"name": "YAHOO.tool.TestNode", "constructors": [{"params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}], "namespace": "YAHOO.tool", "module": "yuitest", "methods": {"appendChild": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.", "guessedname": "appendChild", "guessedtype": "function"}}, "private": "", "file": "TestRunner.js", "shortname": "TestNode", "properties": {"testObject": {"type": "Variant", "description": "The TestSuite, TestCase, or test function represented by this node.", "guessedname": "testObject", "guessedtype": "property"}, "parent": {"type": "TestNode", "description": "Pointer to this node's parent.", "guessedname": "parent", "guessedtype": "property"}, "results": {"type": "object", "description": "Test results for this test object."}, "firstChild": {"type": "TestNode", "description": "Pointer to this node's first child."}, "next": {"type": "TestNode", "description": "Pointer to this node's next sibling.", "guessedname": "next", "guessedtype": "property"}, "lastChild": {"type": "TestNode", "description": "Pointer to this node's last child.", "guessedname": "lastChild", "guessedtype": "property"}}, "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}, "YAHOO.widget.ProfilerViewer": {"name": "YAHOO.widget.ProfilerViewer", "configs": {"tableHeight": {"default": "\"15em\"", "type": "string", "description": "The height of the DataTable.  The table will scroll\nvertically if the content overflows the specified\nheight."}, "swfUrl": {"default": "\"http://yui.yahooapis.com/2.5.0/build/charts/assets/charts.swf\"", "type": "string", "description": "The path to the YUI Charts swf file; must be a full URI\nor a path relative to the page being profiled. Changes at runtime\nnot supported; pass this value in at instantiation."}, "sortedBy": {"default": "{key:\"total\", dir:\"yui-dt-desc\"}", "type": "string", "description": "The default column key to sort by.  Valid keys are: fn, calls,\navg, min, max, total.  Valid dir values are: \nYAHOO.widget.DataTable.CLASS_ASC and\nYAHOO.widget.DataTable.CLASS_DESC (or their\nstring equivalents)."}, "filter": {"default": "null", "type": "function", "description": "A filter function to use in selecting functions that will\nappear in the ProfilerViewer report.  The function is passed\na function report object and should return a boolean indicating\nwhether that function should be included in the ProfilerViewer\ndisplay.  The argument is structured as follows:\n{\nfn: <str function name>,\ncalls : <n number of calls>,\navg : <n average call duration>,\nmax: <n duration of longest call>,\nmin: <n duration of shortest call>,\ntotal: <n total time of all calls>\npoints : <array time in ms of each call>\n}\nFor example, you would use the follwing filter function to \nreturn only functions that have been called at least once:\nfunction(o) {\nreturn (o.calls > 0);\n}"}, "visible": {"default": "false", "type": "boolean", "description": "The default visibility setting for the viewer canvas. If true,\nthe viewer will load all necessary files and render itself\nimmediately upon instantiation; otherwise, the viewer will\nload only minimal resources until the user toggles visibility\nvia the UI."}, "base": {"default": "\"\"", "type": "string", "description": "The YUI Loader base path from which to pull YUI files needed\nin the rendering of the ProfilerViewer canvas.  Passed directly\nto YUI Loader.  Leave blank to draw files from\nyui.yahooapis.com."}, "maxChartFunctions": {"default": "6", "type": "int", "description": "The maximum number of functions to profile in the chart. The\ngreater the number of functions, the greater the height of the\nchart canvas.\nheight."}, "chartStyle": {"default": "See JS source for default definitions.", "type": "obj", "description": "The style object that defines the chart's visual presentation.\nConforms to the style attribute passed to the Charts Control\nconstructor.  See Charts Control User's Guide for more information\non how to format this object."}, "showChart": {"default": "true", "type": "boolean", "description": "The default visibility setting for the chart."}, "chartSeriesDefinitions": {"default": "See JS source for full default definitions.", "type": "obj", "description": "The series definition information to use when charting\nspecific fields on the chart.  displayName, xField,\nand style members are used to construct the series\ndefinition; the \"group\" member is the array of fields\nthat should be charted when the table is sorted by a\ngiven field."}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el(optional)", "description": " The html \nelement into which the ProfileViewer should be rendered. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the ProfilerViewer's \ninitial attributes.  Ignored if first arg is an attributes object."}], "description": "A widget to view YUI Profiler output."}], "namespace": "YAHOO.widget", "module": "profilerviewer", "events": {"beforeChartSeriesDefinitionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeChartSeriesDefinitionsChange", "description": "Fires before the value for the configuration attribute 'chartSeriesDefinitions' changes. Return false to cancel the attribute change."}, "beforeVisibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeVisibleChange", "description": "Fires before the value for the configuration attribute 'visible' changes. Return false to cancel the attribute change."}, "swfUrlChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "swfUrlChange", "description": "Fires when the value for the configuration attribute 'swfUrl' changes."}, "beforeFilterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFilterChange", "description": "Fires before the value for the configuration attribute 'filter' changes. Return false to cancel the attribute change."}, "showChartChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "showChartChange", "description": "Fires when the value for the configuration attribute 'showChart' changes."}, "sortedByChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "sortedByChange", "description": "Fires when the value for the configuration attribute 'sortedBy' changes."}, "chartSeriesDefinitionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "chartSeriesDefinitionsChange", "description": "Fires when the value for the configuration attribute 'chartSeriesDefinitions' changes."}, "beforeShowChartChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeShowChartChange", "description": "Fires before the value for the configuration attribute 'showChart' changes. Return false to cancel the attribute change."}, "beforeTableHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTableHeightChange", "description": "Fires before the value for the configuration attribute 'tableHeight' changes. Return false to cancel the attribute change."}, "maxChartFunctionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "maxChartFunctionsChange", "description": "Fires when the value for the configuration attribute 'maxChartFunctions' changes."}, "tableHeightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "tableHeightChange", "description": "Fires when the value for the configuration attribute 'tableHeight' changes."}, "beforeSortedByChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSortedByChange", "description": "Fires before the value for the configuration attribute 'sortedBy' changes. Return false to cancel the attribute change."}, "visibleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' changes."}, "beforeSwfUrlChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSwfUrlChange", "description": "Fires before the value for the configuration attribute 'swfUrl' changes. Return false to cancel the attribute change."}, "beforeBaseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeBaseChange", "description": "Fires before the value for the configuration attribute 'base' changes. Return false to cancel the attribute change."}, "baseChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "baseChange", "description": "Fires when the value for the configuration attribute 'base' changes."}, "chartStyleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "chartStyleChange", "description": "Fires when the value for the configuration attribute 'chartStyle' changes."}, "beforeMaxChartFunctionsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMaxChartFunctionsChange", "description": "Fires before the value for the configuration attribute 'maxChartFunctions' changes. Return false to cancel the attribute change."}, "filterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "filterChange", "description": "Fires when the value for the configuration attribute 'filter' changes."}, "beforeChartStyleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeChartStyleChange", "description": "Fires before the value for the configuration attribute 'chartStyle' changes. Return false to cancel the attribute change."}, "renderEvent": {"description": "Fired when the viewer canvas first renders. No arguments are passed\nwith this event."}, "refreshDataEvent": {"description": "Fired when a data refresh is requested. No arguments are passed\nwith this event."}}, "guessedname": "ProfilerViewer", "methods": {"getDataTable": {"public": "", "return": {"type": "", "description": "YAHOO.widget.DataTable"}, "description": "Returns the element containing the console's DataTable\ninstance.", "guessedname": "getDataTable", "guessedtype": "function"}, "show": {"guessedname": "_show", "return": {"type": "", "description": "void"}, "description": "Shows the viewer canvas.", "private": "", "guessedtype": "function"}, "refreshData": {"public": "", "return": {"type": "", "description": "void"}, "description": "Refreshes the data displayed in the ProfilerViewer. When called,\nthis will invoke a refresh of the DataTable and (if displayed)\nthe Chart.", "guessedname": "refreshData", "guessedtype": "function"}, "_initViewerDOM": {"private": "", "description": "Set up the DOM structure for the ProfilerViewer canvas,\nincluding the holder for the DataTable.", "guessedname": "_initViewerDOM", "guessedtype": "function"}, "_drawChartLegend": {"private": "", "description": "Set up the Chart's legend", "guessedname": "_drawChartLegend", "guessedtype": "function"}, "_dataTableRenderHandler": {"private": "", "description": "Proxy the render event in DataTable into the ProfilerViewer\nattribute.", "guessedname": "_dataTableRenderHandler", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "setAttributeConfigs TabView specific properties.", "private": "", "guessedtype": "function"}, "getHeadEl": {"public": "", "return": {"type": "", "description": "HTMLElement"}, "description": "Returns the element containing the console's header.", "guessedname": "getHeadEl", "guessedtype": "function"}, "getChartEl": {"public": "", "return": {"type": "", "description": "HTMLElement"}, "description": "Returns the element containing the console's chart.", "guessedname": "getChartEl", "guessedtype": "function"}, "_createButton": {"private": "", "description": "Create anchor elements for use as buttons. Args: label\nis text to appear on the face of the button, parentEl\nis the el to which the anchor will be attached, position\nis true for inserting as the first node and false for\ninserting as the last node of the parentEl.", "guessedname": "_createButton", "guessedtype": "function"}, "_refreshDataTable": {"private": "", "description": "Refresh DataTable, getting new data from Profiler.", "guessedname": "_refreshDataTable", "guessedtype": "function"}, "_sortedByChange": {"private": "", "description": "Proxy the sort event in DataTable into the ProfilerViewer\nattribute.", "guessedname": "_sortedByChange", "guessedtype": "function"}, "_initDataTable": {"private": "", "description": "Set up the DataTable.", "guessedname": "_initDataTable", "guessedtype": "function"}, "_toggleVisible": {"guessedname": "_toggleVisible", "return": {"type": "", "description": "void"}, "description": "Toggles visibility of the viewer canvas.", "private": "", "guessedtype": "function"}, "getBodyEl": {"public": "", "return": {"type": "", "description": "HTMLElement"}, "description": "Returns the element containing the console's body, including\nthe chart and the datatable..", "guessedname": "getBodyEl", "guessedtype": "function"}, "hide": {"guessedname": "_hide", "return": {"type": "", "description": "void"}, "description": "Hides the viewer canvas.", "private": "", "guessedtype": "function"}, "_initChart": {"private": "", "description": "Set up the Chart.", "guessedname": "_initChart", "guessedtype": "function"}, "_getChartData": {"private": "", "description": "Get data for the Chart from DataTable recordset", "guessedname": "_getChartData", "guessedtype": "function"}, "toString": {"guessedname": "toString", "return": {"type": "", "description": "String"}, "description": "Provides a readable name for the ProfilerViewer instance.", "private": "", "guessedtype": "function"}, "_sizeChartCanvas": {"private": "", "description": "Resize the chart's canvas if based on number of records\nreturned from the chart's datasource.", "guessedname": "_sizeChartCanvas", "guessedtype": "function"}, "getTableEl": {"public": "", "return": {"type": "", "description": "HTMLElement"}, "description": "Returns the element containing the console's dataTable.", "guessedname": "getTableEl", "guessedtype": "function"}, "_thClickHandler": {"private": "", "description": "Event handler for clicks on the DataTable's sortable column\nheads.", "guessedname": "_thClickHandler", "guessedtype": "function"}, "_initLauncherDOM": {"private": "", "description": "Set up the DOM structure for the ProfilerViewer launcher.", "guessedname": "_initLauncherDOM", "guessedtype": "function"}, "_arraySum": {"private": "", "description": "Utility function for array sums.", "guessedname": "_arraySum", "guessedtype": "function"}, "_createProfilerViewerElement": {"guessedname": "_createProfilerViewerElement", "return": {"type": "", "description": "HTMLElement"}, "description": "If no element is passed in, create it as the first element\nin the document.", "private": "", "guessedtype": "function"}, "_getSeriesDef": {"private": "", "description": "Build series definition based on current configuration attributes.", "guessedname": "_getSeriesDef", "guessedtype": "function"}, "_initChartDOM": {"private": "", "description": "Set up the DOM structure for the ProfilerViewer canvas.", "guessedname": "_initChartDOM", "guessedtype": "function"}, "_setBusyState": {"private": "", "description": "Set's console busy state.", "guessedname": "_setBusyState", "guessedtype": "function"}, "_refreshChart": {"private": "", "description": "Refresh chart, getting new data from table.", "guessedname": "_refreshChart", "guessedtype": "function"}, "_render": {"guessedname": "_render", "return": {"type": "", "description": "void"}, "description": "Render the viewer canvas", "private": "", "guessedtype": "function"}, "_getProfilerData": {"private": "", "description": "Retrieves data from Profiler, filtering and sorting as needed\nbased on current widget state.  Adds calculated percentage\ncolumn and function name to data returned by Profiler.", "guessedname": "_getProfilerData", "guessedtype": "function"}, "getChart": {"public": "", "return": {"type": "", "description": "YAHOO.widget.BarChart"}, "description": "Returns the element containing the console's Chart instance.", "guessedname": "getChart", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "profilerviewer.js", "guessedtype": "function", "shortname": "ProfilerViewer", "properties": {"CLASS_CHART": {"description": "Classname for element containing the chart.", "default": "\"yui-pv-chart\"", "static": "", "guessedname": "CLASS_CHART", "guessedtype": "property", "type": "string", "public": ""}, "CLASS_BUSY": {"description": "Classname for busy indicator in the dashboard.", "default": "\"yui-pv-busy\"", "static": "", "guessedname": "CLASS_BUSY", "guessedtype": "property", "type": "string", "public": ""}, "timeAxisLabelFunction": {"description": "Function used to format numbers in milliseconds\nfor chart; must be publicly accessible, per Charts spec.", "private": "", "static": "", "guessedname": "timeAxisLabelFunction", "guessedtype": "function", "type": "function"}, "CLASS_CHART_LEGEND": {"description": "Classname for element containing the chart's legend.", "default": "\"yui-pv-chartlegend\"", "static": "", "guessedname": "CLASS_CHART_LEGEND", "guessedtype": "property", "type": "string", "public": ""}, "CLASS_REFRESH": {"description": "Classname for the \"refresh data\" button.", "default": "\"yui-pv-refresh\"", "static": "", "guessedname": "CLASS_REFRESH", "guessedtype": "property", "type": "string", "public": ""}, "CLASS_CHART_CONTAINER": {"description": "Classname for element containing the chart and chart\nlegend elements.", "default": "\"yui-pv-chartcontainer\"", "static": "", "guessedname": "CLASS_CHART_CONTAINER", "guessedtype": "property", "type": "string", "public": ""}, "percentAxisLabelFunction": {"description": "Function used to format percent numbers for chart; must\nbe publicly accessible, per Charts spec.", "private": "", "static": "", "guessedname": "percentAxisLabelFunction", "guessedtype": "function", "type": "function"}, "CLASS_DASHBOARD": {"description": "Classname for ProfilerViewer button dashboard.", "default": "\"yui-pv-dashboard\"", "static": "", "guessedname": "CLASS_DASHBOARD", "guessedtype": "property", "type": "string", "public": ""}, "STRINGS": {"description": "Strings used in the UI.", "default": "English language strings for UI.", "object": "", "static": "", "guessedname": "STRINGS", "guessedtype": "property", "public": ""}, "CLASS": {"description": "Classname for ProfilerViewer containing element.", "default": "\"yui-pv\"", "static": "", "guessedname": "CLASS", "guessedtype": "property", "type": "string", "public": ""}, "CLASS_TABLE": {"description": "Classname for element containing the datatable.", "default": "\"yui-pv-table\"", "static": "", "guessedname": "CLASS_TABLE", "guessedtype": "property", "type": "string", "public": ""}}, "description": "A widget to view YUI Profiler output."}, "YAHOO.util.DD": {"name": "YAHOO.util.DD", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop items"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DD: \nscroll"}], "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag."}], "namespace": "YAHOO.util", "module": "dragdrop", "events": {"startDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown."}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fired from inside DragDropMgr when the drag operation is finished."}, "dragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs every mousemove event while dragging."}, "dragOverEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires every mousemove event while over a drag and drop object."}, "dragOutEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when a dragged object is no longer over an object that had the onDragEnter fire."}, "b4EndDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the endDragEvent. Returning false will cancel."}, "b4StartDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the startDragEvent, returning false will cancel the startDrag Event."}, "b4DragOutEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragOutEvent"}, "endDragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires on the mouseup event after a drag has been initiated (startDrag fired)."}, "b4DragOverEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragOverEvent."}, "dragEnterEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Occurs when the dragged object first interacts with another targettable drag and drop object."}, "b4DragDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragDropEvent"}, "b4DragEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires before the dragEvent."}, "dragDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when the dragged objects is dropped on another."}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Provides access to the mousedown event. The mousedown does not always result in a drag operation."}, "invalidDropEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Fires when the dragged objects is dropped in a location that contains no drop targets."}, "b4MouseDownEvent": {"type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.", "description": "Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag."}}, "guessedname": "DD", "methods": {"setDragElPos": {"params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the mousedown or drag event"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the mousedown or drag event"}], "description": "Sets the drag element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.", "guessedname": "setDragElPos", "guessedtype": "function"}, "alignElWithMouse": {"params": [{"type": "HTMLElement", "name": "el", "description": " the element to move"}, {"type": "int", "name": "iPageX", "description": " the X coordinate of the mousedown or drag event"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the mousedown or drag event"}], "description": "Sets the element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.", "guessedname": "alignElWithMouse", "guessedtype": "function"}, "autoOffset": {"params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the click"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the click"}], "description": "Sets the pointer offset to the distance between the linked element's top \nleft corner and the location the element was clicked", "guessedname": "autoOffset", "guessedtype": "function"}, "autoScroll": {"guessedname": "autoScroll", "params": [{"type": "int", "name": "x", "description": " the drag element's x position"}, {"type": "int", "name": "y", "description": " the drag element's y position"}, {"type": "int", "name": "h", "description": " the height of the drag element"}, {"type": "int", "name": "w", "description": " the width of the drag element"}], "description": "Auto-scroll the window if the dragged object has been moved beyond the \nvisible window boundary.", "private": "", "guessedtype": "function"}, "setDelta": {"params": [{"type": "int", "name": "iDeltaX", "description": " the distance from the left"}, {"type": "int", "name": "iDeltaY", "description": " the distance from the top"}], "description": "Sets the pointer offset.  You can call this directly to force the \noffset to be in a particular location (e.g., pass in 0,0 to set it \nto the center of the object, as done in YAHOO.widget.Slider)", "guessedname": "setDelta", "guessedtype": "function"}, "cachePosition": {"params": [{"type": "", "name": "iPageX", "description": " the current x position (optional, this just makes it so we\ndon't have to look it up again)"}, {"type": "", "name": "iPageY", "description": " the current y position (optional, this just makes it so we\ndon't have to look it up again)"}], "description": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.", "guessedname": "cachePosition", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DD.js", "guessedtype": "function", "shortname": "DD", "properties": {"scroll": {"type": "boolean", "description": "When set to true, the utility automatically tries to scroll the browser\nwindow when a drag and drop element is dragged near the viewport boundary.\nDefaults to true.", "guessedname": "scroll", "guessedtype": "property"}}, "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag."}, "YAHOO.widget.Paginator.ui.NextPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.NextPageLink", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the next page."}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"beforeNextPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNextPageLinkLabelChange", "description": "Fires before the value for the configuration attribute 'nextPageLinkLabel' changes. Return false to cancel the attribute change."}, "beforeNextPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNextPageLinkClassChange", "description": "Fires before the value for the configuration attribute 'nextPageLinkClass' changes. Return false to cancel the attribute change."}, "nextPageLinkClassChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nextPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkClass' changes."}, "nextPageLinkLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nextPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' changes."}}, "guessedname": "NextPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "NextPageLink.js", "guessedtype": "function", "shortname": "NextPageLink", "configs": {"nextPageLinkLabel": {"default": "'next &gt;'", "description": "Used as innerHTML for the next page link/span."}, "nextPageLinkClass": {"default": "'yui-pg-next'", "description": "CSS class assigned to the link/span"}}, "description": "ui Component to generate the link to jump to the next page."}, "YAHOO.widget.Calendar_Core": {"name": "YAHOO.widget.Calendar_Core", "deprecated": "The old Calendar_Core class is no longer necessary.", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "Calendar_Core", "extends": "YAHOO.widget.Calendar", "superclass": "YAHOO.widget.Calendar", "file": "Calendar.js", "guessedtype": "property", "shortname": "Calendar_Core"}, "YAHOO.widget.Button": {"name": "YAHOO.widget.Button", "configs": {"replaceLabel": {"default": "false", "type": "Boolean", "description": "Boolean indicating whether or not the text of the \nbutton's <code>&#60;label&#62;</code> element should be used as\nthe source for the button's label configuration attribute and \nremoved from the DOM."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the button should be disabled.  \n(Disabled buttons are dimmed and will not respond to user input \nor fire events.  Does not apply to button's of type \"link.\")"}, "href": {"type": "String", "description": "String specifying the href for the button.  Applies\nonly to buttons of type \"link.\""}, "checked": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the button is checked. \nApplies only to buttons of type \"radio\" and \"checkbox.\""}, "title": {"default": "null", "type": "String", "description": "String specifying the title for the button."}, "menu": {"default": "null", "type": "<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a>|<a \nhref=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>|<a \nhref=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-58190037\">HTMLElement</a>|String|Array", "description": "Object specifying the menu for the button.  \nThe value can be one of the following:\n<ul>\n<li>Object specifying a rendered <a href=\"YAHOO.widget.Menu.html\">\nYAHOO.widget.Menu</a> instance.</li>\n<li>Object specifying a rendered <a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay</a> instance.</li>\n<li>String specifying the id attribute of the <code>&#60;div&#62;\n</code> element used to create the menu.  By default the menu \nwill be created as an instance of \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>.  \nIf the <a href=\"YAHOO.widget.Menu.html#CSS_CLASS_NAME\">\ndefault CSS class name for YAHOO.widget.Menu</a> is applied to \nthe <code>&#60;div&#62;</code> element, it will be created as an\ninstance of <a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu\n</a>.</li><li>String specifying the id attribute of the \n<code>&#60;select&#62;</code> element used to create the menu.\n</li><li>Object specifying the <code>&#60;div&#62;</code> element\nused to create the menu.</li>\n<li>Object specifying the <code>&#60;select&#62;</code> element\nused to create the menu.</li>\n<li>Array of object literals, each representing a set of \n<a href=\"YAHOO.widget.MenuItem.html\">YAHOO.widget.MenuItem</a> \nconfiguration attributes.</li>\n<li>Array of strings representing the text labels for each menu \nitem in the menu.</li>\n</ul>", "writeonce": ""}, "label": {"default": "null", "type": "String", "description": "String specifying the button's text label \nor innerHTML."}, "srcelement": {"default": "null", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String", "description": "Object reference to the HTML element (either \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code>) \nused to create the button.", "writeonce": ""}, "onclick": {"default": "null", "type": "Object", "description": "Object literal representing the code to be executed  \nwhen the button is clicked.  Format:<br> <code> {<br> \n<strong>fn:</strong> Function,   &#47;&#47; The handler to call \nwhen the event fires.<br> <strong>obj:</strong> Object, \n&#47;&#47; An object to pass back to the handler.<br> \n<strong>scope:</strong> Object &#47;&#47;  The object to use \nfor the scope of the handler.<br> } </code>"}, "type": {"default": "\"push\"", "type": "String", "description": "String specifying the button's type.  Possible \nvalues are: \"push,\" \"link,\" \"submit,\" \"reset,\" \"checkbox,\" \n\"radio,\" \"menu,\" and \"split.\"", "writeonce": ""}, "container": {"default": "null", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the button's markup should be \nrendered into.", "writeonce": ""}, "menuclassname": {"default": "\"yui-button-menu\"", "type": "String", "description": "String representing the CSS class name to be \napplied to the root element of the button's menu.", "writeonce": ""}, "menumaxheight": {"default": "0", "type": "Number", "description": "Number defining the maximum height (in pixels) for a menu's \nbody element (<code>&#60;div class=\"bd\"&#60;</code>).  Once a menu's body \nexceeds this height, the contents of the body are scrolled to maintain \nthis value.  This value cannot be set lower than the value of the \n\"minscrollheight\" configuration property."}, "target": {"type": "String", "description": "String specifying the target for the button.  \nApplies only to buttons of type \"link.\""}, "name": {"default": "null", "type": "String", "description": "String specifying the name for the button."}, "menuminscrollheight": {"default": "90", "type": "Number", "description": "Number defining the minimum threshold for the \"menumaxheight\" \nconfiguration attribute.  When set this attribute is automatically applied \nto all submenus."}, "value": {"default": "null", "type": "Object", "description": "Object specifying the value for the button."}, "lazyloadmenu": {"default": "true", "type": "Boolean", "description": "Boolean indicating the value to set for the \n<a href=\"YAHOO.widget.Menu.html#lazyLoad\">\"lazyload\"</a>\nconfiguration property of the button's menu.  Setting \n\"lazyloadmenu\" to <code>true </code> will defer rendering of \nthe button's menu until the first time it is made visible.  \nIf \"lazyloadmenu\" is set to <code>false</code>, the button's \nmenu will be rendered immediately if the button is in the \ndocument, or in response to the button's \"appendTo\" event if \nthe button is not yet in the document.  In either case, the \nmenu is rendered into the button's parent HTML element.  \n<em>This attribute does not apply if a \n<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a> or \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a> \ninstance is passed as the value of the button's \"menu\" \nconfiguration attribute. <a href=\"YAHOO.widget.Menu.html\">\nYAHOO.widget.Menu</a> or <a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay</a> instances should be rendered before \nbeing set as the value for the \"menu\" configuration \nattribute.</em>", "writeonce": ""}, "tabindex": {"default": "null", "type": "Number", "description": "Number specifying the tabindex for the button."}, "focusmenu": {"default": "true", "type": "Boolean", "description": "Boolean indicating whether or not the button's menu \nshould be focused when it is made visible."}, "menualignment": {"default": "[\"tl\", \"bl\"]", "type": "Array", "description": "Array defining how the Button's Menu is aligned to the Button.  \nThe default value of [\"tl\", \"bl\"] aligns the Menu's top left corner to the Button's \nbottom left corner."}, "selectedMenuItem": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object representing the item in the button's menu \nthat is currently selected."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,\n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to \nbe used to create the button."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"http://www.w3.org\n/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-34812697\">\nHTMLButtonElement</a>|<a href=\"\nhttp://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#\nID-33759296\">HTMLElement</a>", "name": "p_oElement", "description": " Object reference for the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>, \n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to be \nused to create the button."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of   \nconfiguration attributes used to create the button."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a set  \nof configuration attributes used to create the button."}], "description": "The Button class creates a rich, graphical button."}], "namespace": "YAHOO.widget", "module": "button", "events": {"beforeTitleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTitleChange", "description": "Fires before the value for the configuration attribute 'title' changes. Return false to cancel the attribute change."}, "focus": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item receives focus.  Passes back a  \nsingle object representing the original DOM event object passed back by \nthe event utility (YAHOO.util.Event) when the event was fired.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> \nfor more information on listening for this event."}, "beforeMenuclassnameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMenuclassnameChange", "description": "Fires before the value for the configuration attribute 'menuclassname' changes. Return false to cancel the attribute change."}, "beforeDisabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDisabledChange", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "beforeNameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNameChange", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}, "beforeMenuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMenuChange", "description": "Fires before the value for the configuration attribute 'menu' changes. Return false to cancel the attribute change."}, "menuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "menuChange", "description": "Fires when the value for the configuration attribute 'menu' changes."}, "beforeHrefChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeHrefChange", "description": "Fires before the value for the configuration attribute 'href' changes. Return false to cancel the attribute change."}, "option": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user invokes the button's option.  Passes \nback a single object representing the original DOM event (either \n\"mousedown\" or \"keydown\") that caused the \"option\" event to fire.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> \nfor more information on listening for this event."}, "onclickChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "onclickChange", "description": "Fires when the value for the configuration attribute 'onclick' changes."}, "menumaxheightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "menumaxheightChange", "description": "Fires when the value for the configuration attribute 'menumaxheight' changes."}, "hrefChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "hrefChange", "description": "Fires when the value for the configuration attribute 'href' changes."}, "menuminscrollheightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "menuminscrollheightChange", "description": "Fires when the value for the configuration attribute 'menuminscrollheight' changes."}, "beforeReplaceLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeReplaceLabelChange", "description": "Fires before the value for the configuration attribute 'replaceLabel' changes. Return false to cancel the attribute change."}, "containerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' changes."}, "blur": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item loses the input focus.  Passes back  \na single object representing the original DOM event object passed back by \nthe event utility (YAHOO.util.Event) when the event was fired.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for  \nmore information on listening for this event."}, "beforeMenuminscrollheightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMenuminscrollheightChange", "description": "Fires before the value for the configuration attribute 'menuminscrollheight' changes. Return false to cancel the attribute change."}, "typeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' changes."}, "beforeLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLabelChange", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}, "beforeTypeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTypeChange", "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change."}, "targetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' changes."}, "tabindexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "tabindexChange", "description": "Fires when the value for the configuration attribute 'tabindex' changes."}, "beforeSelectedMenuItemChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSelectedMenuItemChange", "description": "Fires before the value for the configuration attribute 'selectedMenuItem' changes. Return false to cancel the attribute change."}, "beforeOnclickChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeOnclickChange", "description": "Fires before the value for the configuration attribute 'onclick' changes. Return false to cancel the attribute change."}, "replaceLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "replaceLabelChange", "description": "Fires when the value for the configuration attribute 'replaceLabel' changes."}, "beforeMenualignmentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMenualignmentChange", "description": "Fires before the value for the configuration attribute 'menualignment' changes. Return false to cancel the attribute change."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "beforeContainerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeContainerChange", "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change."}, "labelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' changes."}, "focusmenuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "focusmenuChange", "description": "Fires when the value for the configuration attribute 'focusmenu' changes."}, "nameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' changes."}, "beforeTargetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTargetChange", "description": "Fires before the value for the configuration attribute 'target' changes. Return false to cancel the attribute change."}, "disabledChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "lazyloadmenuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "lazyloadmenuChange", "description": "Fires when the value for the configuration attribute 'lazyloadmenu' changes."}, "beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "beforeTabindexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTabindexChange", "description": "Fires before the value for the configuration attribute 'tabindex' changes. Return false to cancel the attribute change."}, "beforeSrcelementChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSrcelementChange", "description": "Fires before the value for the configuration attribute 'srcelement' changes. Return false to cancel the attribute change."}, "menuclassnameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "menuclassnameChange", "description": "Fires when the value for the configuration attribute 'menuclassname' changes."}, "beforeMenumaxheightChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMenumaxheightChange", "description": "Fires before the value for the configuration attribute 'menumaxheight' changes. Return false to cancel the attribute change."}, "beforeFocusmenuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFocusmenuChange", "description": "Fires before the value for the configuration attribute 'focusmenu' changes. Return false to cancel the attribute change."}, "srcelementChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "srcelementChange", "description": "Fires when the value for the configuration attribute 'srcelement' changes."}, "selectedMenuItemChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "selectedMenuItemChange", "description": "Fires when the value for the configuration attribute 'selectedMenuItem' changes."}, "beforeLazyloadmenuChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLazyloadmenuChange", "description": "Fires before the value for the configuration attribute 'lazyloadmenu' changes. Return false to cancel the attribute change."}, "menualignmentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "menualignmentChange", "description": "Fires when the value for the configuration attribute 'menualignment' changes."}, "titleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' changes."}, "checkedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "checkedChange", "description": "Fires when the value for the configuration attribute 'checked' changes."}, "beforeCheckedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeCheckedChange", "description": "Fires before the value for the configuration attribute 'checked' changes. Return false to cancel the attribute change."}}, "methods": {"_showMenu": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object \npassed back by the event utility (YAHOO.util.Event) that triggered \nthe display of the menu."}], "description": "Shows the button's menu.", "guessedname": "_showMenu", "guessedtype": "function"}, "submitForm": {"protected": "", "return": {"type": "Boolean", "description": ""}, "description": "Submits the form to which the button belongs.  Returns  \ntrue if the form was submitted successfully, false if the submission \nwas cancelled.", "guessedname": "submitForm", "guessedtype": "function"}, "createInputElement": {"return": {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-6043025\">HTMLInputElement</a>", "description": ""}, "params": [{"type": "String", "name": "p_sType", "description": " String specifying the type of \n<code>&#60;input&#62;</code> element to create."}, {"type": "String", "name": "p_sName", "description": " String specifying the name of \n<code>&#60;input&#62;</code> element to create."}, {"type": "String", "name": "p_sValue", "description": " String specifying the value of \n<code>&#60;input&#62;</code> element to create."}, {"type": "String", "name": "p_bChecked", "description": " Boolean specifying if the  \n<code>&#60;input&#62;</code> element is to be checked."}], "description": "Creates an <code>&#60;input&#62;</code> element of the \nspecified type.", "private": ""}, "createButtonElement": {"return": {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>", "description": ""}, "params": [{"type": "String", "name": "p_sType", "description": " String indicating the type of element \nto create."}], "description": "Creates the button's HTML elements.", "guessedname": "createButtonElement", "guessedtype": "function"}, "_isActivationKey": {"return": {"type": "Boolean", "description": ""}, "description": "Determines if the specified keycode is one that toggles  \nthe button's \"active\" state.", "protected": "", "params": [{"type": "Number", "name": "p_nKeyCode", "description": " Number representing the keycode to \nbe evaluated."}], "guessedname": "_isActivationKey", "guessedtype": "function"}, "hasFocus": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the button \nhas focus.", "guessedname": "hasFocus", "guessedtype": "function"}, "getForm": {"return": {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-\n20000929/level-one-html.html#ID-40002357\">HTMLFormElement</a>", "description": ""}, "description": "Returns a reference to the button's parent form.", "guessedname": "getForm", "guessedtype": "function"}, "_onFormReset": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event \nobject passed back by the event utility (YAHOO.util.Event)."}], "description": "\"reset\" event handler for the button's form.", "guessedname": "_onFormReset", "guessedtype": "function"}, "_addListenersToForm": {"protected": "", "description": "Adds event handlers to the button's form.", "guessedname": "_addListenersToForm", "guessedtype": "function"}, "_onMouseUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseup\" event handler for the button.", "guessedname": "_onMouseUp", "guessedtype": "function"}, "_onOption": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"option\" event handler for the button.", "guessedname": "_onOption", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "p_oAttributes", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button."}], "description": "Initializes all of the configuration attributes used to  \ncreate the button.", "guessedname": "initAttributes", "guessedtype": "function"}, "_setTabIndex": {"protected": "", "params": [{"type": "Number", "name": "p_nTabIndex", "description": " Number indicating the value for the \nbutton's \"tabindex\" attribute."}], "description": "Sets the value of the button's \"tabindex\" attribute.", "guessedname": "_setTabIndex", "guessedtype": "function"}, "_onSelectedMenuItemChange": {"params": [{"type": "Event", "name": "event", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"selectedMenuItemChange\" event handler for the Button's\n\"selectedMenuItem\" attribute.", "guessedname": "_onSelectedMenuItemChange", "guessedtype": "function"}, "_onDocumentKeyUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keyup\" event handler for the document.", "guessedname": "_onDocumentKeyUp", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"click\" event handler for the button.", "guessedname": "_onClick", "guessedtype": "function"}, "removeStateCSSClasses": {"description": "Removes state-specific CSS classes to the button's root \nDOM element.", "guessedname": "removeStateCSSClasses", "guessedtype": "function"}, "YAHOO.widget.Button.onFormKeyPress": {"params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}], "description": "\"keypress\" event handler for the button's form.", "guessedname": "onFormKeyPress", "guessedtype": "function"}, "YAHOO.widget.Button.addHiddenFieldsToForm": {"params": [{"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-40002357\">HTMLFormElement</a>", "name": "p_oForm", "description": " Object reference \nfor the form to search."}], "description": "Searches the specified form and adds hidden fields for  \ninstances of YAHOO.widget.Button that are of type \"radio,\" \"checkbox,\" \n\"menu,\" and \"split.\"", "guessedname": "addHiddenFieldsToForm", "guessedtype": "function"}, "getHiddenFields": {"return": {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|Array", "description": ""}, "description": "Returns an <code>&#60;input&#62;</code> element or \narray of form elements used to represent the button when its parent \nform is submitted.", "guessedname": "getHiddenFields", "guessedtype": "function"}, "YAHOO.widget.Button.getButton": {"return": {"type": "YAHOO.widget.Button", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the root node of the \nHTML element representing the button to be retrieved."}], "description": "Returns a button with the specified id.", "guessedname": "getButton", "guessedtype": "function"}, "_setDisabled": {"protected": "", "params": [{"type": "Boolean", "name": "p_bDisabled", "description": " Boolean indicating the value for \nthe button's \"disabled\" attribute."}], "description": "Sets the value of the button's \"disabled\" attribute.", "guessedname": "_setDisabled", "guessedtype": "function"}, "getMenu": {"return": {"type": "<a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay</a>|<a \nhref=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a>", "description": ""}, "description": "Returns a reference to the button's menu.", "guessedname": "getMenu", "guessedtype": "function"}, "_setChecked": {"protected": "", "params": [{"type": "Boolean", "name": "p_bChecked", "description": " Boolean indicating the value for  \nthe button's \"checked\" attribute."}], "description": "Sets the value of the button's \"target\" attribute.", "guessedname": "_setChecked", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,\n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to \nbe used to create the button."}, {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"http://\nwww.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html\n#ID-34812697\">HTMLButtonElement</a>|<a href=\"http://www.w3.org/TR\n/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-33759296\">\nHTMLElement</a>", "name": "p_oElement", "description": " Object reference for the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>, \n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to be \nused to create the button."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a \nset of configuration attributes used to create the button."}], "description": "The Button class's initialization method.", "guessedname": "init", "guessedtype": "function"}, "_setTitle": {"protected": "", "params": [{"type": "String", "name": "p_nTabIndex", "description": " Number indicating the value for \nthe button's \"title\" attribute."}], "description": "Sets the value of the button's \"title\" attribute.", "guessedname": "_setTitle", "guessedtype": "function"}, "_setHref": {"protected": "", "params": [{"type": "String", "name": "p_sHref", "description": " String indicating the value for the button's \n\"href\" attribute."}], "description": "Sets the value of the button's \"href\" attribute.", "guessedname": "_setHref", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the button.", "guessedname": "toString", "guessedtype": "function"}, "_onMouseDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mousedown\" event handler for the button.", "guessedname": "_onMouseDown", "guessedtype": "function"}, "destroy": {"description": "Removes the button's element from its parent element and \nremoves all event handlers.", "guessedname": "destroy", "guessedtype": "function"}, "_onMenuHide": {"guessedname": "_onMenuHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}], "description": "\"hide\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "_setMenu": {"protected": "", "params": [{"type": "Object", "name": "p_oMenu", "description": " Object indicating the value for the button's \n\"menu\" attribute."}], "description": "Sets the value of the button's \"menu\" attribute.", "guessedname": "_setMenu", "guessedtype": "function"}, "_onKeyUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keyup\" event handler for the button.", "guessedname": "_onKeyUp", "guessedtype": "function"}, "_onLabelClick": {"params": [{"type": "Event", "name": "event", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"click\" event handler for the Button's\n<code>&#60;label&#62;</code> element.", "guessedname": "_onLabelClick", "guessedtype": "function"}, "_isSplitButtonOptionKey": {"return": {"type": "Boolean", "description": ""}, "description": "Determines if the specified keycode is one that toggles  \nthe display of the split button's menu.", "protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "guessedname": "_isSplitButtonOptionKey", "guessedtype": "function"}, "_onAppendTo": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"appendTo\" event handler for the button.", "guessedname": "_onAppendTo", "guessedtype": "function"}, "_onDblClick": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"dblclick\" event handler for the button.", "guessedname": "_onDblClick", "guessedtype": "function"}, "_onFormSubmit": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event \nobject passed back by the event utility (YAHOO.util.Event)."}], "description": "\"submit\" event handler for the button's form.", "guessedname": "_onFormSubmit", "guessedtype": "function"}, "_onFocus": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"focus\" event handler for the button.", "guessedname": "_onFocus", "guessedtype": "function"}, "_setOnClick": {"protected": "", "params": [{"type": "Object", "name": "p_oObject", "description": " Object indicating the value for the button's \n\"onclick\" attribute."}], "description": "Sets the value of the button's \"onclick\" attribute.", "guessedname": "_setOnClick", "guessedtype": "function"}, "blur": {"description": "Causes the button to lose focus and fires the button's\n\"blur\" event.", "guessedname": "blur", "guessedtype": "function"}, "_onMenuShow": {"guessedname": "_onMenuShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}], "description": "\"show\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "setAttributesFromSrcElement": {"params": [{"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"http://www.w3.org/\nTR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-\n48250443\">HTMLAnchorElement</a>", "name": "p_oElement", "description": " Object reference to the HTML \nelement (either <code>&#60;input&#62;</code> or <code>&#60;span&#62;\n</code>) used to create the button."}, {"type": "Object", "name": "p_oAttributes", "description": " Object reference for the collection of \nconfiguration attributes used to create the button."}], "description": "Gets the values for all the attributes of the source element \n(either <code>&#60;input&#62;</code> or <code>&#60;a&#62;</code>) that \nmap to Button configuration attributes and sets them into a collection \nthat is passed to the Button constructor.", "private": ""}, "focus": {"description": "Causes the button to receive the focus and fires the \nbutton's \"focus\" event.", "guessedname": "focus", "guessedtype": "function"}, "setFormElementProperties": {"description": "Gets the value of the attributes from the form element  \nand sets them into the collection of configuration attributes used to \nconfigure the button.", "private": ""}, "_hideMenu": {"protected": "", "description": "Hides the button's menu.", "guessedname": "_hideMenu", "guessedtype": "function"}, "_setLabel": {"protected": "", "params": [{"type": "String", "name": "p_sLabel", "description": " String indicating the value for the button's \n\"label\" attribute."}], "description": "Sets the value of the button's \"label\" attribute.", "guessedname": "_setLabel", "guessedtype": "function"}, "_setType": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String indicating the value for the button's \n\"type\" attribute."}], "description": "Sets the value of the button's \"type\" attribute.", "guessedname": "_setType", "guessedtype": "function"}, "_onMenuRender": {"guessedname": "_onMenuRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the  \nevent thatwas fired."}], "description": "\"render\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "_onDocumentMouseDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mousedown\" event handler for the document.", "guessedname": "_onDocumentMouseDown", "guessedtype": "function"}, "isActive": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the button \nis active.", "guessedname": "isActive", "guessedtype": "function"}, "_onMouseMove": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mousemove\" event handler for the button.", "guessedname": "_onMouseMove", "guessedtype": "function"}, "_onMenuKeyDown": {"guessedname": "_onMenuKeyDown", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"keydown\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "createHiddenFields": {"return": {"type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|Array", "description": ""}, "description": "Creates the button's hidden form field and appends it \nto its parent form.", "guessedname": "createHiddenFields", "guessedtype": "function"}, "addStateCSSClasses": {"description": "Appends state-specific CSS classes to the button's root \nDOM element.", "guessedname": "addStateCSSClasses", "guessedtype": "function"}, "_onMenuClick": {"guessedname": "_onMenuClick", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"click\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseover\" event handler for the button.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseout\" event handler for the button.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "initConfig": {"params": [{"type": "Object", "name": "Object", "description": " representing the button's set of \nconfiguration attributes."}], "description": "Initializes the set of configuration attributes that are \nused to instantiate the button.", "private": ""}, "_setTarget": {"protected": "", "params": [{"type": "String", "name": "p_sTarget", "description": " String indicating the value for the button's \n\"target\" attribute."}], "description": "Sets the value of the button's \"target\" attribute.", "guessedname": "_setTarget", "guessedtype": "function"}, "removeHiddenFields": {"description": "Removes the button's hidden form field(s) from its \nparent form.", "guessedname": "removeHiddenFields", "guessedtype": "function"}, "_onDocumentMouseUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseup\" event handler for the button.", "guessedname": "_onDocumentMouseUp", "guessedtype": "function"}, "setAttributeFromDOMAttribute": {"params": [{"type": "String", "name": "p_sAttribute", "description": " String representing the name of the \nattribute to retrieve from the DOM element."}], "description": "Gets the value of the specified DOM attribute and sets it \ninto the collection of configuration attributes used to configure \nthe button.", "private": ""}, "_onKeyDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keydown\" event handler for the button.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "_onBlur": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"blur\" event handler for the button.", "guessedname": "_onBlur", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "button.js", "shortname": "Button", "properties": {"CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to  \nthe button's root element.", "default": "\"button\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_menu": {"description": "Object reference to the button's menu.", "default": "null", "protected": "", "guessedname": "_menu", "guessedtype": "property", "type": "{<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>|\n<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a>}"}, "CLASS_NAME_PREFIX": {"description": "Prefix used for all class names applied to a Button.", "default": "\"yui-\"", "guessedname": "CLASS_NAME_PREFIX", "guessedtype": "property", "type": "String", "final": ""}, "_hiddenFields": {"description": "Object reference to the <code>&#60;input&#62;</code>  \nelement, or array of HTML form elements used to represent the button\nwhen its parent form is submitted.", "default": "null", "protected": "", "guessedname": "_hiddenFields", "guessedtype": "property", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|Array"}, "_nOptionRegionX": {"description": "Number representing the X coordinate of the leftmost edge of the Button's \noption region.  Applies only to Buttons of type \"split\".", "default": "0", "protected": "", "guessedname": "_nOptionRegionX", "guessedtype": "property", "type": "Number"}, "_onclickAttributeValue": {"description": "Object reference to the button's current value for the \n\"onclick\" configuration attribute.", "default": "null", "protected": "", "guessedname": "_onclickAttributeValue", "guessedtype": "property", "type": "Object"}, "NODE_NAME": {"description": "The name of the node to be used for the button's \nroot element.", "default": "\"SPAN\"", "guessedname": "NODE_NAME", "guessedtype": "property", "type": "String", "final": ""}, "CHECK_ACTIVATION_KEYS": {"description": "Array of numbers representing keys that (when pressed) \ntoggle the button's \"checked\" attribute.", "default": "[32]", "guessedname": "CHECK_ACTIVATION_KEYS", "guessedtype": "property", "type": "Array", "final": ""}, "_activationButtonPressed": {"description": "Boolean indicating if the mouse button that toggles \nthe button's \"active\" state has been pressed.", "default": "false", "protected": "", "guessedname": "_activationButtonPressed", "guessedtype": "property", "type": "Boolean"}, "_button": {"description": "Object reference to the button's internal \n<code>&#60;a&#62;</code> or <code>&#60;button&#62;</code> element.", "default": "null", "protected": "", "guessedname": "_button", "guessedtype": "property", "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-48250443\">HTMLAnchorElement</a>|<a href=\"\nhttp://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html\n#ID-34812697\">HTMLButtonElement</a>"}, "_hasMouseEventHandlers": {"description": "Boolean indicating if the button's \"mouseout,\" \n\"mousedown,\" and \"mouseup\" event handlers are assigned", "default": "false", "protected": "", "guessedname": "_hasMouseEventHandlers", "guessedtype": "property", "type": "Boolean"}, "ACTIVATION_KEYS": {"description": "Array of numbers representing keys that (when presed) \ntoggle the button's \"active\" state.", "default": "[13, 32]", "guessedname": "ACTIVATION_KEYS", "guessedtype": "property", "type": "Array", "final": ""}, "_hasKeyEventHandlers": {"description": "Boolean indicating if the button's \"blur\", \"keydown\" and \n\"keyup\" event handlers are assigned", "default": "false", "protected": "", "guessedname": "_hasKeyEventHandlers", "guessedtype": "property", "type": "Boolean"}, "_activationKeyPressed": {"description": "Boolean indicating if the key(s) that toggle the button's \n\"active\" state have been pressed.", "default": "false", "protected": "", "guessedname": "_activationKeyPressed", "guessedtype": "property", "type": "Boolean"}, "OPTION_AREA_WIDTH": {"description": "Width (in pixels) of the area of a split button that  \nwhen pressed will display a menu.", "default": "20", "guessedname": "OPTION_AREA_WIDTH", "guessedtype": "property", "type": "Number", "final": ""}}, "description": "The Button class creates a rich, graphical button."}, "YAHOO.widget.AutoComplete": {"name": "YAHOO.widget.AutoComplete", "constructors": [{"params": [{"type": "HTMLElement", "name": "elInput", "description": "  DOM element reference of an input field."}, {"type": "String", "name": "elInput", "description": "  String ID of an input field."}, {"type": "HTMLElement", "name": "elContainer", "description": "  DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  String ID of an existing DIV."}, {"type": "YAHOO.widget.DataSource", "name": "oDataSource", "description": "  DataSource instance."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up/down arrow keys and/or mouse to pick a selection</li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation</li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc</li>\n</ul>"}], "namespace": "YAHOO.widget", "module": "autocomplete", "events": {"dataErrorEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object", "name": "oResponse", "description": "  The response object, if available."}], "description": "Fired when the AutoComplete instance does not receive query results from the\nDataSource due to an error.", "guessedname": "dataErrorEvent", "guessedtype": "property"}, "dataReturnEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Results array."}], "description": "Fired when the AutoComplete instance receives query results from the data\nsource.", "guessedname": "dataReturnEvent", "guessedtype": "property"}, "containerExpandEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is expanded.", "guessedname": "containerExpandEvent", "guessedtype": "property"}, "itemArrowToEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed to."}], "description": "Fired when result item has been arrowed to.", "guessedname": "itemArrowToEvent", "guessedtype": "property"}, "itemArrowFromEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed from."}], "description": "Fired when result item has been arrowed away from.", "guessedname": "itemArrowFromEvent", "guessedtype": "property"}, "containerPopulateEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is populated.", "guessedname": "containerPopulateEvent", "guessedtype": "property"}, "textboxFocusEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field receives focus.", "guessedname": "textboxFocusEvent", "guessedtype": "property"}, "typeAheadEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "String", "name": "sPrefill", "description": "  The prefill string."}], "description": "Fired when the input field has been prefilled by the type-ahead\nfeature.", "guessedname": "typeAheadEvent", "guessedtype": "property"}, "itemSelectEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The selected &lt;li&gt; element item."}, {"type": "Object", "name": "oData", "description": "  The data returned for the item, either as an object,\nor mapped from the schema into an array."}], "description": "Fired when an item is selected via mouse click, ENTER key, or TAB key.", "guessedname": "itemSelectEvent", "guessedtype": "property"}, "dataRequestEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object", "name": "oRequest", "description": "  The request."}], "description": "Fired when the AutoComplete instance makes a request to the DataSource.", "guessedname": "dataRequestEvent", "guessedtype": "property"}, "itemMouseOverEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt element item moused to."}], "description": "Fired when result item has been moused over.", "guessedname": "itemMouseOverEvent", "guessedtype": "property"}, "_sLastTextboxValue": {"guessedname": "_sLastTextboxValue", "type": "String", "description": "Internal tracker to last known textbox value, used to determine whether or not\nto trigger a query via interval for certain IME users.", "private": "", "guessedtype": "property"}, "unmatchedItemSelectEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sSelection", "description": "  The selected string."}], "description": "Fired when a user selection does not match any of the displayed result items.", "guessedname": "unmatchedItemSelectEvent", "guessedtype": "property"}, "selectionEnforceEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sClearedValue", "description": "  The cleared value (including delimiters if applicable)."}], "description": "Fired if forceSelection is enabled and the user's input has been cleared\nbecause it did not match one of the returned query results.", "guessedname": "selectionEnforceEvent", "guessedtype": "property"}, "textboxKeyEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "Number", "name": "nKeycode", "description": "  The keycode number."}], "description": "Fired when the input field receives key input.", "guessedname": "textboxKeyEvent", "guessedtype": "property"}, "textboxBlurEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field loses focus.", "guessedname": "textboxBlurEvent", "guessedtype": "property"}, "containerCollapseEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is collapsed.", "guessedname": "containerCollapseEvent", "guessedtype": "property"}, "textboxChangeEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field value has changed when it loses focus.", "guessedname": "textboxChangeEvent", "guessedtype": "property"}, "itemMouseOutEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item moused from."}], "description": "Fired when result item has been moused out.", "guessedname": "itemMouseOutEvent", "guessedtype": "property"}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"guessedname": "_onTextboxKeyPress", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keypress event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keypress events.", "private": "", "guessedtype": "function"}, "_selectText": {"guessedname": "_selectText", "params": [{"type": "HTMLElement", "name": "elTextbox", "description": "  Text input box element in which to select text."}, {"type": "Number", "name": "nStart", "description": "  Starting index of text string to select."}, {"type": "Number", "name": "nEnd", "description": "  Ending index of text selection."}], "description": "Selects text in the input field.", "private": "", "guessedtype": "function"}, "snapContainer": {"description": "Snaps container to bottom-left corner of input element", "guessedname": "snapContainer", "guessedtype": "function"}, "_clearInterval": {"guessedname": "_clearInterval", "params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Cancels text input detection by intervals.", "private": "", "guessedtype": "function"}, "_populateListItem": {"guessedname": "_populateListItem", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The LI element."}, {"type": "Object", "name": "oResult", "description": "  The result object."}, {"type": "String", "name": "sCurQuery", "description": "  The query string."}], "description": "Populates the given &lt;li&gt; element with return value from formatResult().", "private": "", "guessedtype": "function"}, "_onTextboxBlur": {"guessedname": "_onTextboxBlur", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box losing focus.", "private": "", "guessedtype": "function"}, "_typeAhead": {"guessedname": "_typeAhead", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The &lt;li&gt; element item whose data populates the input field."}, {"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Updates in the text input box with the first query result as the user types,\nselecting the substring that the user has not typed.", "private": "", "guessedtype": "function"}, "getListItems": {"deprecated": "Use getListEl().childNodes.", "guessedname": "getListItems", "guessedtype": "function"}, "_toggleHighlight": {"guessedname": "_toggleHighlight", "params": [{"type": "HTMLElement", "name": "elNewListItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the highlight on or off for an item in the container, and also cleans\nup highlighting of any previous item.", "private": "", "guessedtype": "function"}, "_togglePrehighlight": {"guessedname": "_togglePrehighlight", "params": [{"type": "HTMLElement", "name": "elNewListItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the pre-highlight on or off for an item in the container, and also cleans\nup pre-highlighting of any previous item.", "private": "", "guessedtype": "function"}, "_onTextboxFocus": {"guessedname": "_onTextboxFocus", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box receiving focus.", "private": "", "guessedtype": "function"}, "enableIntervalDetection": {"description": "Enables interval detection for a less performant but brute force mechanism to\ndetect input values at an interval set by queryInterval and send queries if\ninput value has changed. Needed to support right-click+paste or shift+insert\nedge cases. Please note that intervals are cleared at the end of each interaction,\nso enableIntervalDetection must be called for each new interaction. The\nrecommended approach is to call it in response to textboxFocusEvent.", "guessedname": "enableIntervalDetection", "guessedtype": "property"}, "expandContainer": {"description": "Expands container.", "guessedname": "expandContainer", "guessedtype": "function"}, "getListItemIndex": {"return": {"type": "Number", "description": "Index."}, "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  Reference to &lt;LI&gt; element."}], "description": "Public accessor to the index of the associated with a given &lt;li&gt; result.", "guessedname": "getListItemIndex", "guessedtype": "function"}, "_isIgnoreKey": {"return": {"type": "Boolean", "description": "True if key should be ignored, false otherwise."}, "description": "Whether or not key is functional or should be ignored. Note that the right\narrow key is NOT an ignored key since it triggers queries for certain intl\ncharsets.", "private": "", "params": [{"type": "Number", "name": "nKeycode", "description": "  Code of key pressed."}], "guessedname": "_isIgnoreKey", "guessedtype": "function"}, "_initContainerHelperEls": {"private": "", "description": "Initializes the results container helpers if they are enabled and do\nnot exist", "guessedname": "_initContainerHelperEls", "guessedtype": "function"}, "_onInterval": {"private": "", "description": "Enables query triggers based on text input detection by intervals (rather\nthan by key events).", "guessedname": "_onInterval", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "sBody", "description": "  HTML markup for results container body."}], "description": "Sets HTML markup for the results container body. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-bd\".", "guessedname": "setBody", "guessedtype": "function"}, "filterResults": {"return": {"type": "Object", "description": "Filtered response object."}, "params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oFullResponse", "description": "  Full response object."}, {"type": "Object", "name": "oParsedResponse", "description": "  Parsed response object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object."}], "description": "Executed by DataSource (within DataSource scope via doBeforeCallback()) to\nfilter results through a simple client-side matching algorithm.", "guessedname": "filterResults", "guessedtype": "function"}, "getListEl": {"return": {"type": "HTMLElement[]", "description": "Reference to &lt;ul&gt; element within the results container."}, "description": "Public accessor to the &lt;ul&gt; element that displays query results within the results container.", "guessedname": "getListEl", "guessedtype": "function"}, "_onTextboxKeyUp": {"guessedname": "_onTextboxKeyUp", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keyup event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keyup events to trigger queries.", "private": "", "guessedtype": "function"}, "_updateValue": {"guessedname": "_updateValue", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The &lt;li&gt; element item with which to update the value."}], "description": "Updates the text input box value with selected query result. If a delimiter\nhas been defined, then the value gets appended with the delimiter.", "private": "", "guessedtype": "function"}, "_populateList": {"guessedname": "_populateList", "params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Populates the array of &lt;li&gt; elements in the container with query\nresults.", "private": "", "guessedtype": "function"}, "_focus": {"private": "", "description": "Focuses input field.", "guessedname": "_focus", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": "Return true to continue expanding container, false to cancel the expand."}, "params": [{"type": "HTMLElement", "name": "elTextbox", "description": "  The text input box."}, {"type": "HTMLElement", "name": "elContainer", "description": "  The container element."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "   An array of query results."}], "description": "Overridable method called before container expands allows implementers to access data\nand DOM elements.", "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_moveSelection": {"guessedname": "_moveSelection", "params": [{"type": "Number", "name": "nKeyCode", "description": "  Code of key pressed."}], "description": "Triggered by up and down arrow keys, changes the current highlighted\n&lt;li&gt; element item. Scrolls container if necessary.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the AutoComplete instance."}, "description": "Public accessor to the unique name of the AutoComplete instance.", "guessedname": "toString", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": "Return true to continue loading data, false to cancel."}, "params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Overridable method called before container is loaded with result data.", "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire AutoComplete instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myAutoComplete = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "AutoComplete._cloneObject": {"description": "Clones object literal or array of object literals.", "private": "", "static": "", "guessedname": "_cloneObject", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": "  Object."}]}, "doBeforeSendQuery": {"deprecated": "Use generateRequest.", "guessedname": "doBeforeSendQuery", "guessedtype": "function"}, "getListItemData": {"return": {"type": "Object", "description": "Result data."}, "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  Reference to &lt;LI&gt; element."}], "description": "Public accessor to the result data associated with a given &lt;li&gt; result.", "guessedname": "getListItemData", "guessedtype": "function"}, "generateRequest": {"return": {"type": "MIXED", "description": "Request"}, "params": [{"type": "String", "name": "sQuery", "description": "  Query string"}], "description": "A function that converts an AutoComplete query into a request value which is then\npassed to the DataSource's sendRequest method in order to retrieve data for \nthe query. By default, returns a String with the syntax: \"query={query}\"\nImplementers can customize this method for custom request syntaxes.", "guessedname": "generateRequest", "guessedtype": "function"}, "_initListEl": {"private": "", "description": "Clears out contents of container body and creates up to\nYAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an\n&lt;ul&gt; element.", "guessedname": "_initListEl", "guessedtype": "function"}, "_onContainerClick": {"guessedname": "_onContainerClick", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container click events.", "private": "", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "sFooter", "description": "  HTML markup for results container footer."}], "description": "Sets HTML markup for the results container footer. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-ft\".", "guessedname": "setFooter", "guessedtype": "function"}, "_selectItem": {"guessedname": "_selectItem", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The selected &lt;li&gt; element item."}], "description": "Selects a result item from the container", "private": "", "guessedtype": "function"}, "_onWindowUnload": {"guessedname": "_onWindowUnload", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The unload event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles window unload event.", "private": "", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Handles response for display. This is the callback function method passed to\nYAHOO.util.DataSourceBase#sendRequest so results from the DataSource are\nreturned to the AutoComplete instance.", "guessedname": "handleResponse", "guessedtype": "function"}, "_enableIntervalDetection": {"private": "", "description": "Enables interval detection for IME support.", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "sendQuery": {"params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "guessedname": "sendQuery", "guessedtype": "function"}, "getContainerEl": {"return": {"type": "HTMLELement", "description": "DOM reference to container element."}, "description": "Returns DOM reference to container element.", "guessedname": "getContainerEl", "guessedtype": "function"}, "_toggleContainerHelpers": {"guessedname": "_toggleContainerHelpers", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container is expanded, false if collapsed"}], "description": "Syncs results container with its helpers.", "private": "", "guessedtype": "function"}, "_extractQuery": {"return": {"type": "Object", "description": "Object literal containing properties \"query\" and \"previous\"."}, "description": "Extracts rightmost query from delimited string.", "private": "", "params": [{"type": "String", "name": "sQuery", "description": "  String to parse"}], "guessedname": "_extractQuery", "guessedtype": "function"}, "_jumpSelection": {"private": "", "description": "If an item is highlighted in the container, the right arrow key jumps to the\nend of the textbox and selects the highlighted item, otherwise the container\nis closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "_onContainerScroll": {"guessedname": "_onContainerScroll", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The scroll event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container scroll events.", "private": "", "guessedtype": "function"}, "clearList": {"description": "Clears entire list of suggestions.", "guessedname": "clearList", "guessedtype": "function"}, "_clearSelection": {"private": "", "description": "When forceSelection is true and the user attempts\nleave the text input box without selecting an item from the query results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "__initProps": {"private": "", "description": "Updates and validates latest public config properties.", "guessedname": "_initProps", "guessedtype": "function"}, "isContainerOpen": {"return": {"type": "Boolean", "description": "Returns true if container is in an expanded state, false otherwise."}, "description": "Returns true if container is in an expanded state, false otherwise.", "guessedname": "isContainerOpen", "guessedtype": "function"}, "preparseRawResponse": {"return": {"type": "Object", "description": "oParsedResponse or null."}, "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Executed by DataSource (within DataSource scope via doBeforeParseData()) to\nhandle responseStripAfter cleanup.", "guessedname": "preparseRawResponse", "guessedtype": "function"}, "_toggleContainer": {"guessedname": "_toggleContainer", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container should be expanded, false if container should be collapsed"}], "description": "Animates expansion or collapse of the container.", "private": "", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": "HTML markup of formatted result data."}, "params": [{"type": "Object", "name": "oResultData", "description": "  Result data object."}, {"type": "String", "name": "sQuery", "description": "  The corresponding query string."}, {"type": "HTMLElement", "name": "sResultMatch", "description": "  The current query string."}], "description": "Overridable method that returns HTML markup for one result to be populated\nas innerHTML of an &lt;LI&gt; element.", "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"guessedname": "_textMatchesOption", "return": {"type": "HTMLElement", "description": "Matching list item element if user-input text matches\na result, null otherwise."}, "description": "Whether or not user-typed value in the text input box matches any of the\nquery results.", "private": "", "guessedtype": "function"}, "collapseContainer": {"description": "Collapses container.", "guessedname": "collapseContainer", "guessedtype": "function"}, "_onContainerMouseout": {"guessedname": "_onContainerMouseout", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseout events.", "private": "", "guessedtype": "function"}, "getSubsetMatches": {"return": {"type": "Object", "description": "oParsedResponse or null."}, "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Handles subset matching for when queryMatchSubset is enabled.", "guessedname": "getSubsetMatches", "guessedtype": "function"}, "_sendQuery": {"guessedname": "_sendQuery", "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "private": "", "guessedtype": "function"}, "_onTextboxKeyDown": {"guessedname": "_onTextboxKeyDown", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keydown event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keydown events of functional keys, mainly for UI behavior.", "private": "", "guessedtype": "function"}, "isFocused": {"return": {"type": "Boolean", "description": "Returns true if widget instance is currently active."}, "description": "Returns true if widget instance is currently active.", "guessedname": "isFocused", "guessedtype": "function"}, "_doBeforeExpandContainer": {"return": {"type": "Boolean", "description": "Return true to continue expanding container, false to cancel the expand."}, "description": "Called before container expands, by default snaps container to the\nbottom-left corner of the input element, then calls public overrideable method.", "private": "", "params": [{"type": "HTMLElement", "name": "elTextbox", "description": "  The text input box."}, {"type": "HTMLElement", "name": "elContainer", "description": "  The container element."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "   An array of query results."}], "guessedname": "_doBeforeExpandContainer", "guessedtype": "function"}, "getListItemMatch": {"return": {"type": "String", "description": "Matching string."}, "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  Reference to &lt;LI&gt; element."}], "description": "Public accessor to the matching string associated with a given &lt;li&gt; result.", "guessedname": "getListItemMatch", "guessedtype": "function"}, "_initContainerEl": {"private": "", "description": "Initializes the results container once at object creation", "guessedname": "_initContainerEl", "guessedtype": "function"}, "getInputEl": {"return": {"type": "HTMLELement", "description": "DOM reference to input element."}, "description": "Returns DOM reference to input element.", "guessedname": "getInputEl", "guessedtype": "function"}, "_onContainerMouseover": {"guessedname": "_onContainerMouseover", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseover events.", "private": "", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "sHeader", "description": "  HTML markup for results container header."}], "description": "Sets HTML markup for the results container header. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-hd\".", "guessedname": "setHeader", "guessedtype": "function"}, "_onContainerResize": {"guessedname": "_onContainerResize", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The resize event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container resize events.", "private": "", "guessedtype": "function"}}, "file": "AutoComplete.js", "guessedtype": "function", "shortname": "AutoComplete", "properties": {"queryQuestionMark": {"default": "true", "type": "Boolean", "description": "For XHR DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe \"query\" param/value pair. To prevent this behavior, implementers should\nset this value to false. To more fully customize the query syntax, implementers\nshould override the generateRequest() method.", "guessedname": "queryQuestionMark", "guessedtype": "property"}, "forceSelection": {"default": "false", "type": "Boolean", "description": "Whether or not to force the user's selection to match one of the query\nresults. Enabling this feature essentially transforms the input field into a\n&lt;select&gt; field. This feature is not recommended with delimiter character(s)\ndefined.", "guessedname": "forceSelection", "guessedtype": "property"}, "_elIFrame": {"guessedname": "_elIFrame", "type": "HTMLElement", "description": "Reference to iframe element within container element.", "private": "", "guessedtype": "property"}, "animHoriz": {"default": "false", "type": "Boolean", "description": "Whether or not to animate the expansion/collapse of the results container in the\nhorizontal direction.", "guessedname": "animHoriz", "guessedtype": "property"}, "useShadow": {"default": "false", "type": "Boolean", "description": "Whether or not the results container should have a shadow.", "guessedname": "useShadow", "guessedtype": "property"}, "queryMatchSubset": {"default": "false", "type": "Boolean", "description": "Enables query subset matching. When the DataSource's cache is enabled and queryMatchSubset is\ntrue, substrings of queries will return matching cached results. For\ninstance, if the first query is for \"abc\" susequent queries that start with\n\"abc\", like \"abcd\", will be queried against the cache, and not the live data\nsource. Recommended only for DataSources that return comprehensive results\nfor queries with very few characters.", "guessedname": "queryMatchSubset", "guessedtype": "property"}, "useIFrame": {"default": "false", "type": "Boolean", "description": "Whether or not to use an iFrame to layer over Windows form elements in\nIE. Set to true only when the results container will be on top of a\n&lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,\n5.5 < IE < 7).", "guessedname": "useIFrame", "guessedtype": "property"}, "typeAheadDelay": {"default": "0.5", "type": "Number", "description": "If typeAhead is true, number of seconds to delay before updating input with\ntypeAhead value. In order to prevent certain race conditions, this value must\nalways be greater than the queryDelay.", "guessedname": "typeAheadDelay", "guessedtype": "property"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "Container DOM element.", "private": "", "guessedtype": "property"}, "_nDelayID": {"guessedname": "_nDelayID", "type": "Number", "description": "Delay timeout ID.", "private": "", "guessedtype": "property"}, "_oAnim": {"guessedname": "_oAnim", "type": "Boolean", "description": "Animation instance for container expand/collapse.", "private": "", "guessedtype": "property"}, "_elFooter": {"guessedname": "_elFooter", "type": "HTMLElement", "description": "Reference to footer element within content element.", "private": "", "guessedtype": "property"}, "_queryInterval": {"guessedname": "_queryInterval", "type": "Object", "description": "For users typing via certain IMEs, queries must be triggered by intervals,\nsince key events yet supported across all browsers for all IMEs.", "private": "", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of AutoComplete instance.", "private": "", "guessedtype": "property"}, "_elShadow": {"guessedname": "_elShadow", "type": "HTMLElement", "description": "Reference to shadow element within container element.", "private": "", "guessedtype": "property"}, "applyLocalFilter": {"default": "true for local arrays and json, otherwise false", "type": "Boolean", "description": "By default, results from local DataSources will pass through the filterResults\nmethod to apply a client-side matching algorithm.", "guessedname": "applyLocalFilter", "guessedtype": "property"}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "When applyLocalFilter is true, the local filtering algorthim can have case sensitivity\nenabled.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "_nKeyCode": {"guessedname": "_nKeyCode", "type": "Number", "description": "Key code of the last key pressed in textbox.", "private": "", "guessedtype": "property"}, "_sInitInputValue": {"guessedname": "_sInitInputValue", "type": "String", "description": "Stores initial input value used to determine if textboxChangeEvent should be fired.", "private": "", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "If autohighlight is enabled, whether or not the input field should be automatically updated\nwith the first query result as the user types, auto-selecting the substring portion\nof the first result that the user has not yet typed.", "guessedname": "typeAhead", "guessedtype": "property"}, "_nDisplayedItems": {"guessedname": "_nDisplayedItems", "type": "Number", "description": "Number of &lt;li&gt; elements currently displayed in results container.", "private": "", "guessedtype": "property"}, "_sCurQuery": {"guessedname": "_sCurQuery", "type": "String", "description": "Current query string", "private": "", "guessedtype": "property"}, "delimChar": {"type": "String | String[]", "description": "Query delimiter. A single character separator for multiple delimited\nselections. Multiple delimiter characteres may be defined as an array of\nstrings. A null value or empty string indicates that query results cannot\nbe delimited. This feature is not recommended if you need forceSelection to\nbe true.", "guessedname": "delimChar", "guessedtype": "property"}, "_elContent": {"guessedname": "_elContent", "type": "HTMLElement", "description": "Reference to content element within container element.", "private": "", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Enabling this feature prevents the toggling of the container to a collapsed state.\nSetting to true does not automatically trigger the opening of the container.\nImplementers are advised to pre-load the container with an explicit \"sendQuery()\" call.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "highlightClassName": {"default": "\"yui-ac-highlight\"", "type": "String", "description": "Class name of a highlighted item within results container.", "guessedname": "highlightClassName", "guessedtype": "property"}, "queryInterval": {"default": "500", "type": "Number", "description": "When IME usage is detected or interval detection is explicitly enabled,\nAutoComplete will detect the input value at the given interval and send a\nquery if the value has changed.", "guessedname": "queryInterval", "guessedtype": "property"}, "resultTypeList": {"default": "true", "type": "Boolean", "description": "For backward compatibility to pre-2.6.0 formatResults() signatures, setting\nresultsTypeList to true will take each object literal result returned by\nDataSource and flatten into an array.", "guessedname": "resultTypeList", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "Number of characters that must be entered before querying for results. A negative value\neffectively turns off the widget. A value of 0 allows queries of null or empty string\nvalues.", "guessedname": "minQueryLength", "guessedtype": "property"}, "_bOverContainer": {"guessedname": "_bOverContainer", "type": "Boolean", "description": "Whether or not the mouse is currently over the results\ncontainer. This is necessary in order to prevent clicks on container items\nfrom being text input field blur events.", "private": "", "guessedtype": "property"}, "_bFocused": {"guessedname": "_bFocused", "type": "Boolean", "description": "Whether or not the widget instance is currently active. If query results come back\nbut the user has already moved on, do not proceed with auto complete behavior.", "private": "", "guessedtype": "property"}, "_nTypeAheadDelayID": {"guessedname": "_nTypeAheadDelayID", "type": "Number", "description": "TypeAhead delay timeout ID.", "private": "", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "When applyLocalFilter is true, results can  be locally filtered to return\nmatching strings that \"contain\" the query string rather than simply \"start with\"\nthe query string.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "suppressInputUpdate": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be updated with selections.", "guessedname": "suppressInputUpdate", "guessedtype": "property"}, "_elCurPrehighlightItem": {"guessedname": "_elCurPrehighlightItem", "type": "HTMLElement", "description": "Pointer to the currently pre-highlighted &lt;li&gt; element in the container.", "private": "", "guessedtype": "property"}, "dataSource": {"type": "YAHOO.widget.DataSource", "description": "The DataSource object that encapsulates the data used for auto completion.\nThis object should be an inherited object from YAHOO.widget.DataSource.", "guessedname": "dataSource", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Whether or not the first item in results container should be automatically highlighted\non expand.", "guessedname": "autoHighlight", "guessedtype": "property"}, "allowBrowserAutocomplete": {"default": "true", "type": "Boolean", "description": "Whether or not to allow browsers to cache user-typed input in the input\nfield. Disabling this feature will prevent the widget from setting the\nautocomplete=\"off\" on the input field. When autocomplete=\"off\"\nand users click the back button after form submission, user-typed input can\nbe prefilled by the browser from its cache. This caching of user input may\nnot be desired for sensitive data, such as credit card numbers, in which\ncase, implementers should consider setting allowBrowserAutocomplete to false.", "guessedname": "allowBrowserAutocomplete", "guessedtype": "property"}, "animVert": {"default": "true", "type": "Boolean", "description": "Whether or not to animate the expansion/collapse of the results container in the\nvertical direction.", "guessedname": "animVert", "guessedtype": "property"}, "autoSnapContainer": {"default": "true", "type": "Boolean", "description": "If true, before each time the container expands, the container element will be\npositioned to snap to the bottom-left corner of the input element. If\nautoSnapContainer is set to false, this positioning will not be done.", "guessedname": "autoSnapContainer", "guessedtype": "property"}, "_nIndex": {"description": "Internal class variable to index multiple AutoComplete instances.", "default": "0", "private": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "_elCurListItem": {"guessedname": "_elCurListItem", "type": "HTMLElement", "description": "Pointer to the currently highlighted &lt;li&gt; element in the container.", "private": "", "guessedtype": "property"}, "_bContainerOpen": {"guessedname": "_bContainerOpen", "type": "Boolean", "description": "Whether or not the results container is currently open.", "private": "", "guessedtype": "property"}, "animSpeed": {"default": "0.3", "type": "Number", "description": "Speed of container expand/collapse animation, in seconds..", "guessedname": "animSpeed", "guessedtype": "property"}, "_elHeader": {"guessedname": "_elHeader", "type": "HTMLElement", "description": "Reference to header element within content element.", "private": "", "guessedtype": "property"}, "_elList": {"guessedname": "_elList", "type": "HTMLElement", "description": "Internal reference to &lt;ul&gt; elements that contains query results within the\nresults container.", "private": "", "guessedtype": "property"}, "_iFrameSrc": {"guessedname": "_iFrameSrc", "type": "String", "description": "Src to iFrame used when useIFrame = true. Supports implementations over SSL\nas well.", "private": "", "guessedtype": "property"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "Maximum number of results to display in results container.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "_bItemSelected": {"guessedname": "_bItemSelected", "type": "Boolean", "description": "Whether or not an item has been selected since the container was populated\nwith results. Reset to false by _populateList, and set to true when item is\nselected.", "private": "", "guessedtype": "property"}, "_sPastSelections": {"description": "Selections from previous queries (for saving delimited queries).", "default": "\"\"", "private": "", "guessedname": "_sPastSelections", "guessedtype": "property", "type": "String"}, "prehighlightClassName": {"type": "String", "description": "Class name of a pre-highlighted item within results container.", "guessedname": "prehighlightClassName", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "Number of seconds to delay before submitting a query request.  If a query\nrequest is received before a previous one has completed its delay, the\nprevious request is cancelled and the new request is set to the delay. If \ntypeAhead is also enabled, this value must always be less than the typeAheadDelay\nin order to avoid certain race conditions.", "guessedname": "queryDelay", "guessedtype": "property"}, "_elTextbox": {"guessedname": "_elTextbox", "type": "HTMLElement", "description": "Text input field DOM element.", "private": "", "guessedtype": "property"}, "_elBody": {"guessedname": "_elBody", "type": "HTMLElement", "description": "Reference to body element within content element.", "private": "", "guessedtype": "property"}}, "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up/down arrow keys and/or mouse to pick a selection</li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation</li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc</li>\n</ul>"}, "YAHOO.util.Dom.IEStyle": {"name": "YAHOO.util.Dom.IEStyle", "namespace": "YAHOO.util.Dom", "module": "dom", "guessedname": "Y", "methods": {"getBorderWidth": {"return": {"type": "String", "description": "The elements border width"}, "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "property", "description": " The property to check"}], "description": "Try to determine the width of an elements border", "guessedname": "getBorderWidth", "guessedtype": "function"}, "get": {"returns": "{String} The computed style", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "property", "description": " The property to check"}], "description": "Method used by DOM to get style information for IE", "guessedname": "get", "guessedtype": "function"}, "getColor": {"return": {"type": "String", "description": "The value"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The element to check"}, {"type": "String", "name": "att", "description": " The attribute to check"}], "description": "Get the color of an element", "guessedname": "getColor", "guessedtype": "function"}, "getMargin": {"return": {"type": "String", "description": "The margin value"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The element to check"}, {"type": "String", "name": "att", "description": " The attribute to check"}], "description": "Get the margin value from a style property", "guessedname": "getMargin", "guessedtype": "function"}, "getBorderColor": {"return": {"type": "String", "description": "The value"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The element to check"}, {"type": "String", "name": "att", "description": " The attribute to check"}], "description": "Get the bordercolor of an element", "guessedname": "getBorderColor", "guessedtype": "function"}, "getOffset": {"return": {"type": "String", "description": "The offset"}, "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "prop", "description": " The property to check."}], "description": "Determine the offset of an element", "guessedname": "getOffset", "guessedtype": "function"}, "getPixel": {"return": {"type": "String", "description": "The pixel value"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The element to check"}, {"type": "String", "name": "att", "description": " The attribute to check"}], "description": "Get the pixel value from a style property", "guessedname": "getPixel", "guessedtype": "function"}, "getVisibility": {"return": {"type": "String", "description": "The value"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The element to check"}, {"type": "String", "name": "att", "description": " The attribute to check"}], "description": "Get the visibility of an element", "guessedname": "getVisibility", "guessedtype": "function"}}, "file": "IEStyle.js", "guessedtype": "property", "shortname": "IEStyle", "description": "Internal methods used to add style management functionality to DOM."}, "YAHOO.tool.TestCase": {"name": "YAHOO.tool.TestCase", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestCase", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "description": "Resumes a paused test and runs the given function.", "guessedname": "resume", "guessedtype": "function"}}, "file": "TestCase.js", "guessedtype": "function", "shortname": "TestCase", "description": "Test case containing various tests to run."}, "YAHOO.util.ObjectAssert": {"name": "YAHOO.util.ObjectAssert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ObjectAssert", "methods": {"hasProperty": {"description": "Asserts that an object has a property with the given name.", "param": "{String} propertyName The name of the property to test.", "static": "", "guessedname": "hasProperty", "guessedtype": "function", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "propertiesAreEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " An object with the expected properties."}, {"type": "Object", "name": "actual", "description": " An object with the actual properties."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that all properties in the object exist in another object.", "guessedname": "propertiesAreEqual", "guessedtype": "function"}}, "static": "", "file": "ObjectAssert.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "YAHOO.util.UnexpectedValue": {"name": "YAHOO.util.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of AssertionError that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "UnexpectedValue is subclass of AssertionError that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "YAHOO.widget.ToolbarButtonAdvanced": {"name": "YAHOO.widget.ToolbarButtonAdvanced", "constructors": [{"params": [{"type": "String/HTMLElement", "name": "el", "description": " The element to turn into a button."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>"}], "namespace": "YAHOO.widget", "module": "editor", "methods": {"checkValue": {"params": [{"type": "String", "name": "value", "description": " The value of the option that we want to mark as selected"}], "description": "Select an option by value", "guessedname": "checkValue", "guessedtype": "function"}}, "file": "toolbar-button.js", "shortname": "ToolbarButtonAdvanced", "requires": "yahoo, dom, element, event, container_core, menu, button\nProvides a toolbar button based on the button and menu widgets.", "properties": {"buttonType": {"private": "", "description": "Tells if the Button is a Rich Button or a Simple Button", "guessedname": "buttonType", "guessedtype": "property"}}, "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>"}, "YAHOO.util.AssertionError": {"name": "YAHOO.util.AssertionError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "AssertionError is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "AssertionError", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "Error", "superclass": "Error", "file": "Assert.js", "guessedtype": "function", "shortname": "AssertionError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "AssertionError is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "YAHOO.tool.TestReporter": {"name": "YAHOO.tool.TestReporter", "constructors": [{"params": [{"type": "String", "name": "url", "description": " The URL to submit the results to."}, {"type": "Function", "name": "format", "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is YAHOO.tool.TestFormat.XML."}], "description": "An object capable of sending test results to a server."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestReporter", "methods": {"report": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Object", "name": "results", "description": " The results object created by TestRunner."}], "description": "Sends the report to the server.", "guessedname": "report", "guessedtype": "function"}, "destroy": {"return": {"type": "Void", "description": ""}, "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.", "guessedname": "destroy", "guessedtype": "function"}, "_convertToISOString": {"return": {"type": "String", "description": "An ISO-formatted date string"}, "description": "Convert a date into ISO format.\nFrom Douglas Crockford's json2.js", "private": "", "params": [{"type": "Date", "name": "date", "description": " The date to convert."}], "guessedname": "_convertToISOString", "guessedtype": "function"}, "addField": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the field."}, {"type": "Variant", "name": "value", "description": " The value of the field."}], "description": "Adds a field to the form that submits the results.", "guessedname": "addField", "guessedtype": "function"}}, "file": "TestReporter.js", "guessedtype": "function", "shortname": "TestReporter", "properties": {"url": {"type": "String", "description": "The URL to submit the data to."}, "_form": {"type": "HTMLFormElement", "description": "The form element used to submit the results.", "private": ""}, "_fields": {"type": "Object", "description": "Extra fields to submit with the request.", "private": ""}, "_iframe": {"type": "HTMLIFrameElement", "description": "Iframe used as a target for form submission.", "private": ""}, "format": {"type": "Function", "description": "The formatting function to call when submitting the data."}}, "description": "An object capable of sending test results to a server."}, "LogReader": {"name": "LogReader", "constructors": [{"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  (optional) DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  (optional) String ID of an existing DIV."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger."}], "namespace": "", "module": "logger", "methods": {"getLastTime": {"return": {"type": "Date", "description": "Timestamp of the last log."}, "description": "Gets timestamp of the last log.", "guessedname": "getLastTime", "guessedtype": "function"}, "_onReset": {"guessedname": "_onReset", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's resetEvent.", "private": "", "guessedtype": "function"}, "render": {"description": "Adds the UI to the DOM, attaches event listeners, and bootstraps initial\nUI state.", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Shows UI of LogReader. Logging functionality is not disrupted.", "guessedname": "show", "guessedtype": "function"}, "setTitle": {"params": [{"type": "String", "name": "sTitle", "description": "  New title."}], "description": "Updates title to given string.", "guessedname": "setTitle", "guessedtype": "function"}, "_init": {"protected": "", "params": [{"type": "String|HTMLElement", "name": "container", "description": "  (optional) the render target"}, {"type": "Object", "name": "config", "description": "  (optional) instance configuration"}], "description": "Initializes the instance's message buffer, start time, etc", "guessedname": "_init", "guessedtype": "function"}, "getCategories": {"return": {"type": "String[]", "description": "Array of enabled categories."}, "description": "Returns array of enabled categories.", "guessedname": "getCategories", "guessedtype": "function"}, "_createSourceCheckbox": {"guessedname": "_createSourceCheckbox", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Creates a checkbox in the LogReader footer element to filter by source.", "private": "", "guessedtype": "function"}, "_onClickClearBtn": {"guessedname": "_onClickClearBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles click events on the clear button.", "private": "", "guessedtype": "function"}, "_initCategories": {"private": "", "description": "Initializes category filters.", "guessedname": "_initCategories", "guessedtype": "function"}, "pause": {"description": "Pauses output of log messages. While paused, log messages are not lost, but\nget saved to a buffer and then output upon resume of LogReader.", "guessedname": "pause", "guessedtype": "function"}, "hide": {"description": "Hides UI of LogReader. Logging functionality is not disrupted.", "guessedname": "hide", "guessedtype": "function"}, "_printToConsole": {"guessedname": "_printToConsole", "params": [{"type": "Object[]", "name": "aEntries", "description": "  Array of LogMsg objects to output to console."}], "description": "Cycles through an array of log messages, and outputs each one to the console\nif its category has not been filtered out.", "private": "", "guessedtype": "function"}, "_initHeaderEl": {"private": "", "description": "Initializes the header element.", "guessedname": "_initHeaderEl", "guessedtype": "function"}, "_initDragDrop": {"private": "", "description": "Initializes Drag and Drop on the header element.", "guessedname": "_initDragDrop", "guessedtype": "function"}, "_printBuffer": {"private": "", "description": "Sends buffer of log messages to output and clears buffer.", "guessedname": "_printBuffer", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the LogReader instance."}, "description": "Public accessor to the unique name of the LogReader instance.", "guessedname": "toString", "guessedtype": "function"}, "showSource": {"params": [{"type": "String", "name": "Source", "description": " name."}], "description": "Shows log messages associated with given source.", "guessedname": "showSource", "guessedtype": "function"}, "destroy": {"description": "Removes the UI from the DOM entirely and detaches all event listeners.\nImplementers should note that Logger will still accumulate messages.", "guessedname": "destroy", "guessedtype": "function"}, "showCategory": {"params": [{"type": "String", "name": "Category", "description": " name."}], "description": "Shows log messages associated with given category.", "guessedname": "showCategory", "guessedtype": "function"}, "_onClickCollapseBtn": {"guessedname": "_onClickCollapseBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance"}], "description": "Handles click events on the collapse button.", "private": "", "guessedtype": "function"}, "_onCategoryCreate": {"guessedname": "_onCategoryCreate", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's categoryCreateEvent.", "private": "", "guessedtype": "function"}, "collapse": {"description": "Collapses UI of LogReader. Logging functionality is not disrupted.", "guessedname": "collapse", "guessedtype": "function"}, "resume": {"description": "Resumes output of log messages, including outputting any log messages that\nhave been saved to buffer while paused.", "guessedname": "resume", "guessedtype": "function"}, "_onSourceCreate": {"guessedname": "_onSourceCreate", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's sourceCreateEvent.", "private": "", "guessedtype": "function"}, "_onClickPauseBtn": {"guessedname": "_onClickPauseBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles click events on the pause button.", "private": "", "guessedtype": "function"}, "_initFooterEl": {"private": "", "description": "Initializes the footer element.", "guessedname": "_initFooterEl", "guessedtype": "function"}, "_onNewLog": {"guessedname": "_onNewLog", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's newLogEvent.", "private": "", "guessedtype": "function"}, "html2Text": {"guessedname": "html2Text", "params": [{"type": "String", "name": "sHtml", "description": "  String to convert."}], "description": "Converts input chars \"<\", \">\", and \"&\" to HTML entities.", "private": "", "guessedtype": "function"}, "_filterLogs": {"private": "", "description": "Reprints all log messages in the stack through filters.", "guessedname": "_filterLogs", "guessedtype": "function"}, "_onCheckCategory": {"guessedname": "_onCheckCategory", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles check events on the category filter checkboxes.", "private": "", "guessedtype": "function"}, "_onCheckSource": {"guessedname": "_onCheckSource", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles check events on the category filter checkboxes.", "private": "", "guessedtype": "function"}, "expand": {"description": "Expands UI of LogReader. Logging functionality is not disrupted.", "guessedname": "expand", "guessedtype": "function"}, "getSources": {"return": {"type": "Array", "description": "Array of enabled sources."}, "description": "Returns array of enabled sources.", "guessedname": "getSources", "guessedtype": "function"}, "_initSources": {"private": "", "description": "Initializes source filters.", "guessedname": "_initSources", "guessedtype": "function"}, "hideCategory": {"params": [{"type": "String", "name": "Category", "description": " name."}], "description": "Hides log messages associated with given category.", "guessedname": "hideCategory", "guessedtype": "function"}, "_createCategoryCheckbox": {"guessedname": "_createCategoryCheckbox", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Creates the UI for a category filter in the LogReader footer element.", "private": "", "guessedtype": "function"}, "_initConsoleEl": {"private": "", "description": "Initializes the console element.", "guessedname": "_initConsoleEl", "guessedtype": "function"}, "_initContainerEl": {"private": "", "description": "Initializes the primary container element.", "guessedname": "_initContainerEl", "guessedtype": "function"}, "clearConsole": {"description": "Does not delete any log messages, but clears all printed log messages from\nthe console. Log messages will be printed out again if user re-filters. The\nstatic method YAHOO.widget.Logger.reset() should be called in order to\nactually delete log messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "hideSource": {"params": [{"type": "String", "name": "Source", "description": " name."}], "description": "Hides log messages associated with given source.", "guessedname": "hideSource", "guessedtype": "function"}, "getCheckbox": {"return": {"type": "Array", "description": "Array of all filter checkboxes."}, "params": [{"type": "String", "name": "Category", "description": " or source name."}], "description": "Returns related checkbox element for given filter (i.e., category or source).", "guessedname": "getCheckbox", "guessedtype": "function"}}, "file": "LogReader.js", "shortname": "LogReader", "properties": {"right": {"type": "String", "description": "Public member to access CSS right position of the LogReader container.", "guessedname": "right", "guessedtype": "property"}, "entryFormat": {"default": "null", "type": "String", "description": "Custom output format for log messages.  Defaults to null, which falls\nback to verboseOutput param deciding between LogReader.VERBOSE_TEMPLATE\nand LogReader.BASIC_TEMPLATE.  Use bracketed place holders to mark where\nmessage info should go.  Available place holder names include:\n<ul>\n<li>category</li>\n<li>label</li>\n<li>sourceAndDetail</li>\n<li>message</li>\n<li>localTime</li>\n<li>elapsedTime</li>\n<li>totalTime</li>\n</ul>", "guessedname": "entryFormat", "guessedtype": "property"}, "height": {"type": "String", "description": "Public member to access CSS height of the LogReader container.", "guessedname": "height", "guessedtype": "property"}, "newestOnTop": {"type": "Boolean", "description": "Whether or not newest message is printed on top.", "guessedname": "newestOnTop", "guessedtype": "property"}, "_elCollapse": {"guessedname": "_elCollapse", "type": "HTMLElement", "description": "LogReader collapse element.", "private": "", "guessedtype": "property"}, "_elCategoryFilters": {"guessedname": "_elCategoryFilters", "type": "HTMLElement", "description": "Container element for LogReader category filter checkboxes.", "private": "", "guessedtype": "property"}, "_memberName": {"description": "Internal class member to index multiple LogReader instances.", "default": "0", "private": "", "static": "", "guessedname": "_index", "guessedtype": "property", "type": "Number"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of LogReader instance.", "private": "", "guessedtype": "property"}, "isCollapsed": {"default": "false", "type": "Boolean", "description": "True when LogReader is in a collapsed state, false otherwise.", "guessedname": "isCollapsed", "guessedtype": "property"}, "_btnCollapse": {"guessedname": "_btnCollapse", "type": "HTMLElement", "description": "LogReader collapse button element.", "private": "", "guessedtype": "property"}, "logReaderEnabled": {"default": "true", "type": "Boolean", "description": "Whether or not LogReader is enabled to output log messages.", "guessedname": "logReaderEnabled", "guessedtype": "property"}, "_filterCheckboxes": {"guessedname": "_filterCheckboxes", "type": "Object", "description": "Hash of filters and their related checkbox elements.", "private": "", "guessedtype": "property"}, "thresholdMax": {"default": "500", "type": "Number", "description": "Maximum number of messages a LogReader console will display.", "guessedname": "thresholdMax", "guessedtype": "property"}, "_buffer": {"guessedname": "_buffer", "type": "Object[]", "description": "Buffer of log message objects for batch output.", "private": "", "guessedtype": "property"}, "bottom": {"type": "String", "description": "Public member to access CSS bottom position of the LogReader container.", "guessedname": "bottom", "guessedtype": "property"}, "_elBtns": {"guessedname": "_elBtns", "type": "HTMLElement", "description": "LogReader buttons container element.", "private": "", "guessedtype": "property"}, "_lastTime": {"guessedname": "_lastTime", "type": "Date", "description": "Date of last output log message.", "private": "", "guessedtype": "property"}, "top": {"type": "String", "description": "Public member to access CSS top position of the LogReader container.", "guessedname": "top", "guessedtype": "property"}, "_btnPause": {"guessedname": "_btnPause", "type": "HTMLElement", "description": "LogReader pause button element.", "private": "", "guessedtype": "property"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "LogReader container element.", "private": "", "guessedtype": "property"}, "width": {"type": "String", "description": "Public member to access CSS width of the LogReader container.", "guessedname": "width", "guessedtype": "property"}, "VERBOSE_TEMPLATE": {"default": "\"&lt;p>&lt;span class='{category}'>{label}&lt;/span>{totalTime}ms (+{elapsedTime}) {localTime}:&lt;/p>&lt;p>{sourceAndDetail}&lt;/p>&lt;p>{message}&lt;/p>\"", "static": "", "description": "Template used for innerHTML of verbose entry output.", "guessedname": "VERBOSE_TEMPLATE", "guessedtype": "property"}, "fontSize": {"type": "String", "description": "Public member to access CSS font size of the LogReader container.", "guessedname": "fontSize", "guessedtype": "property"}, "footerEnabled": {"default": "true", "type": "Boolean", "description": "Whether or not the footer UI is enabled for the LogReader.", "guessedname": "footerEnabled", "guessedtype": "property"}, "verboseOutput": {"default": "true", "type": "Boolean", "description": "Whether or not output is verbose (more readable). Setting to true will make\noutput more compact (less readable).", "guessedname": "verboseOutput", "guessedtype": "property"}, "_sourceFilters": {"guessedname": "_sourceFilters", "type": "String[]", "description": "Array of filters for log message sources.", "private": "", "guessedtype": "property"}, "_elHd": {"guessedname": "_elHd", "type": "HTMLElement", "description": "LogReader header element.", "private": "", "guessedtype": "property"}, "_categoryFilters": {"guessedname": "_categoryFilters", "type": "String[]", "description": "Array of filters for log message categories.", "private": "", "guessedtype": "property"}, "_consoleMsgCount": {"description": "Number of log messages output to console.", "default": "0", "private": "", "guessedname": "_consoleMsgCount", "guessedtype": "property", "type": "Number"}, "_elSourceFilters": {"guessedname": "_elSourceFilters", "type": "HTMLElement", "description": "Container element for LogReader source filter checkboxes.", "private": "", "guessedtype": "property"}, "thresholdMin": {"default": "100", "type": "Number", "description": "When a LogReader console reaches its thresholdMax, it will clear out messages\nand print out the latest thresholdMin number of messages.", "guessedname": "thresholdMin", "guessedtype": "property"}, "_title": {"guessedname": "_title", "type": "HTMLElement", "description": "LogReader title header element.", "private": "", "guessedtype": "property"}, "_elDefaultContainer": {"type": "HTMLElement", "description": "A class member shared by all LogReaders if a container needs to be\ncreated during instantiation. Will be null if a container element never needs to\nbe created on the fly, such as when the implementer passes in their own element.", "private": ""}, "autoRender": {"default": "true", "type": "{Boolean}", "description": "Render the LogReader immediately upon instantiation.  If set to false,\nyou must call myLogReader.render() to generate the UI."}, "_elFt": {"guessedname": "_elFt", "type": "HTMLElement", "description": "LogReader footer element.", "private": "", "guessedtype": "property"}, "outputBuffer": {"default": "100", "type": "Number", "description": "Output timeout buffer in milliseconds.", "guessedname": "outputBuffer", "guessedtype": "property"}, "_elConsole": {"guessedname": "_elConsole", "type": "HTMLElement", "description": "LogReader console element.", "private": "", "guessedtype": "property"}, "draggable": {"default": "true", "type": "Boolean", "description": "Enables draggable LogReader if DragDrop Utility is present.", "guessedname": "draggable", "guessedtype": "property"}, "ENTRY_TEMPLATE": {"description": "Node template for the log entries", "default": "<code>pre</code> element with class yui-log-entry", "static": "", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "function", "type": "{HTMLElement}"}, "isPaused": {"default": "false", "type": "Boolean", "description": "True when LogReader is in a paused state, false otherwise.", "guessedname": "isPaused", "guessedtype": "property"}, "_btnClear": {"guessedname": "_btnClear", "type": "HTMLElement", "description": "Clear button element.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Number", "description": "Batched output timeout ID.", "private": "", "guessedtype": "property"}, "BASIC_TEMPLATE": {"default": "\"&lt;p>&lt;span class='{category}'>{label}&lt;/span>{totalTime}ms (+{elapsedTime}) {localTime}: {sourceAndDetail}: {message}&lt;/p>\"", "static": "", "description": "Template used for innerHTML of compact entry output.", "guessedname": "BASIC_TEMPLATE", "guessedtype": "property"}, "left": {"type": "String", "description": "Public member to access CSS left position of the LogReader container.", "guessedname": "left", "guessedtype": "property"}}, "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger."}, "YAHOO.widget.MenuNode": {"name": "YAHOO.widget.MenuNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node.\nProviding a string is the same as providing an object with a single property named label.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions.\nAll attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"}], "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "MenuNode", "extends": "YAHOO.widget.TextNode", "superclass": "YAHOO.widget.TextNode", "file": "MenuNode.js", "guessedtype": "function", "shortname": "MenuNode", "properties": {"_type": {"default": "\"MenuNode\"", "guessedname": "_type", "description": "The node type", "private": "", "guessedtype": "property"}}, "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time."}, "YAHOO.widget.Record": {"name": "YAHOO.widget.Record", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of key/value pairs."}], "description": "The Record class defines a DataTable record."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "Record", "methods": {"getCount": {"return": {"type": "", "description": "Number"}, "description": "Returns unique count assigned at instantiation.", "guessedname": "getCount", "guessedtype": "function"}, "getData": {"return": {"type": "", "description": "Object"}, "params": [{"type": "String", "name": "sField", "description": "  (Optional) The field from which to retrieve data value."}], "description": "Returns data for the Record for a field if given, or the entire object\nliteral otherwise.", "guessedname": "getData", "guessedtype": "function"}, "getId": {"return": {"type": "", "description": "String"}, "description": "Returns unique ID assigned at instantiation.", "guessedname": "getId", "guessedtype": "function"}, "setData": {"params": [{"type": "String", "name": "sKey", "description": "  The key of the new value."}, {"type": "MIXED", "name": "oData", "description": "  The new value."}], "description": "Sets given data at the given key. Use the RecordSet method updateRecordValue to trigger\nevents.", "guessedname": "setData", "guessedtype": "function"}}, "file": "RecordSet.js", "guessedtype": "function", "shortname": "Record", "properties": {"_sId": {"guessedname": "_sId", "type": "String", "description": "Immutable unique ID assigned at instantiation. Remains constant while a\nRecord's position index can change from sorting.", "private": "", "guessedtype": "property"}, "_nCount": {"guessedname": "_nCount", "type": "Number", "description": "Immutable unique count assigned at instantiation. Remains constant while a\nRecord's position index can change from sorting.", "private": "", "guessedtype": "property"}, "_oData": {"guessedname": "_oData", "type": "Object", "description": "Holds data for the Record in an object literal.", "private": "", "guessedtype": "property"}, "Record._nCount": {"guessedname": "_nCount", "type": "Number", "description": "Internal class variable to give unique IDs to Record instances.", "private": "", "guessedtype": "property"}}, "description": "The Record class defines a DataTable record."}, "YAHOO.widget.TabView": {"name": "YAHOO.widget.TabView", "configs": {"tabs": {"type": "Array", "description": "The Tabs belonging to the TabView instance."}, "activeIndex": {"type": "Int", "description": "The index of the tab currently active."}, "activeTab": {"type": "YAHOO.widget.Tab", "description": "The tab currently active."}, "orientation": {"default": "\"top\"", "type": "String", "description": "How the Tabs should be oriented relative to the TabView."}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el(optional)", "description": " The html \nelement that represents the TabView, or the attribute object to use. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the tabView's \ninitial attributes.  Ignored if first arg is attributes object."}], "description": "A widget to control tabbed views."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"tabsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "tabsChange", "description": "Fires when the value for the configuration attribute 'tabs' changes."}, "orientationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "orientationChange", "description": "Fires when the value for the configuration attribute 'orientation' changes."}, "beforeOrientationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeOrientationChange", "description": "Fires before the value for the configuration attribute 'orientation' changes. Return false to cancel the attribute change."}, "activeIndexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "activeIndexChange", "description": "Fires when the value for the configuration attribute 'activeIndex' changes."}, "beforeActiveTabChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeActiveTabChange", "description": "Fires before the value for the configuration attribute 'activeTab' changes. Return false to cancel the attribute change."}, "beforeActiveIndexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeActiveIndexChange", "description": "Fires before the value for the configuration attribute 'activeIndex' changes. Return false to cancel the attribute change."}, "activeTabChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "activeTabChange", "description": "Fires when the value for the configuration attribute 'activeTab' changes."}, "beforeTabsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTabsChange", "description": "Fires before the value for the configuration attribute 'tabs' changes. Return false to cancel the attribute change."}}, "guessedname": "TabView", "methods": {"getTabIndex": {"return": {"type": "", "description": "int"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " The tab whose index will be returned."}], "description": "Returns the index of given tab.", "guessedname": "getTabIndex", "guessedtype": "function"}, "removeTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "item", "description": " The Tab instance to be removed."}], "description": "Removes the specified Tab from the TabView.", "guessedname": "removeTab", "guessedtype": "function"}, "contentTransition": {"description": "The transiton to use when switching between tabs.", "guessedname": "contentTransition", "guessedtype": "function"}, "_initTabs": {"guessedname": "_initTabs", "return": {"type": "", "description": "void"}, "description": "Creates Tab instances from a collection of HTMLElements.", "private": "", "guessedtype": "function"}, "deselectTab": {"params": [{"type": "Int", "name": "index", "description": " The tab index to deselect"}], "description": "Removes selected state from the given tab if it is the activeTab", "guessedname": "deselectTab", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "setAttributeConfigs TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the TabView instance.", "guessedname": "toString", "guessedtype": "function"}, "DOMEventHandler": {"return": {"type": "", "description": "void"}, "params": [{"type": "event", "name": "e", "description": " The Dom event that is being handled."}], "description": "Routes childNode events.", "guessedname": "DOMEventHandler", "guessedtype": "function"}, "addTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " A Tab instance to add."}, {"type": "Integer", "name": "index", "description": " The position to add the tab."}], "description": "Adds a Tab to the TabView instance.  \nIf no index is specified, the tab is added to the end of the tab list.", "guessedname": "addTab", "guessedtype": "function"}, "selectTab": {"params": [{"type": "Int", "name": "index", "description": " The tab index to be made active"}], "description": "Makes the tab at the given index the active tab", "guessedname": "selectTab", "guessedtype": "function"}, "getTab": {"return": {"type": "", "description": "YAHOO.widget.Tab"}, "params": [{"type": "Integer", "name": "index", "description": " The position of the Tab."}], "description": "Returns the Tab instance at the specified index.", "guessedname": "getTab", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "TabView.js", "guessedtype": "function", "shortname": "TabView", "properties": {"CLASSNAME": {"default": "\"navset\"", "description": "The className to add when building from scratch.", "guessedname": "CLASSNAME", "guessedtype": "property"}, "TAB_PARENT_CLASSNAME": {"default": "\"nav\"", "description": "The className of the HTMLElement containing the TabView's tab elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the tab container are treated as Tabs when building\nfrom existing markup.", "guessedname": "TAB_PARENT_CLASSNAME", "guessedtype": "property"}, "CONTENT_PARENT_CLASSNAME": {"default": "\"nav-content\"", "description": "The className of the HTMLElement containing the TabView's label elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the content container are treated as content elements when\nbuilding from existing markup.", "guessedname": "CONTENT_PARENT_CLASSNAME", "guessedtype": "property"}, "_tabParent": {"guessedname": "_tabParent", "type": "HTMLElement", "description": "The container of the tabView's label elements.", "private": "", "guessedtype": "property"}, "_contentParent": {"guessedname": "_contentParent", "type": "HTMLElement", "description": "The container of the tabView's content elements.", "private": "", "guessedtype": "property"}}, "description": "A widget to control tabbed views."}, "YAHOO.widget.CalendarNavigator": {"name": "YAHOO.widget.CalendarNavigator", "constructors": [{"params": [{"type": "Calendar|CalendarGroup", "name": "cal", "description": " The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached."}], "description": "The CalendarNavigator is used along with a Calendar/CalendarGroup to \nprovide a Month/Year popup navigation control, allowing the user to navigate \nto a specific month/year in the Calendar/CalendarGroup without having to \nscroll through months sequentially"}], "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "CalendarNavigator", "methods": {"_getMonthFromUI": {"protected": "", "return": {"type": "Number", "description": "The month index, or 0 if a UI element for the month\nis not found"}, "description": "Returns the month value (index), from the month UI element", "guessedname": "_getMonthFromUI", "guessedtype": "function"}, "createNav": {"description": "Creates the navigator's containing HTMLElement, it's contents, and appends \nthe containg element to the Calendar/CalendarGroup's container.", "guessedname": "createNav", "guessedtype": "function"}, "_update": {"protected": "", "params": [{"type": "", "name": "cal", "description": " The Calendar instance to update"}], "description": "Updates the Calendar rendered state, based on the state of the CalendarNavigator", "guessedname": "_update", "guessedtype": "function"}, "_handleDirectionKeys": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture up/down/pgup/pgdown\non the Navigator's year control (yearEl).", "guessedname": "_handleDirectionKeys", "guessedtype": "function"}, "render": {"description": "Renders the HTML for the navigator, adding it to the \ndocument and attaches event listeners if it has not \nalready been rendered.", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Displays the navigator and mask, updating the input controls to reflect the \ncurrently set month and year. The show method will invoke the render method\nif the navigator has not been renderered already, allowing for lazy rendering\nof the control.\nThe show method will fire the Calendar/CalendarGroup's beforeShowNav and showNav events", "guessedname": "show", "guessedtype": "function"}, "erase": {"description": "Removes all renderered HTML elements for the Navigator from\nthe DOM, purges event listeners and clears (nulls) any property\nreferences to HTML references", "guessedname": "erase", "guessedtype": "function"}, "_handleShiftTabKey": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture Shift-Tab \non the first control (firstCtrl) in the Navigator.", "guessedname": "_handleShiftTabKey", "guessedtype": "function"}, "cancel": {"description": "Hides the navigator and mask, without updating the Calendar/CalendarGroup's state", "guessedname": "cancel", "guessedtype": "function"}, "applyKeyListeners": {"description": "Attaches DOM listeners for keyboard support. \nTab/Shift-Tab looping, Enter Key Submit on Year element,\nUp/Down/PgUp/PgDown year increment on Year element\n<p>\nNOTE: MacOSX Safari 2.x doesn't let you tab to buttons and \nMacOSX Gecko does not let you tab to buttons or select controls,\nso for these browsers, Tab/Shift-Tab looping is limited to the \nelements which can be reached using the tab key.\n</p>", "guessedname": "applyKeyListeners", "guessedtype": "function"}, "setError": {"params": [{"type": "String", "name": "msg", "description": " The error message to display"}], "description": "Displays an error message in the Navigator's error panel", "guessedname": "setError", "guessedtype": "function"}, "hideMask": {"description": "Hides the navigator's mask element", "guessedname": "hideMask", "guessedtype": "function"}, "_updateMonthUI": {"protected": "", "description": "Updates the Navigator's month UI, based on the month value set on the Navigator object", "guessedname": "_updateMonthUI", "guessedtype": "function"}, "hide": {"description": "Hides the navigator and mask\nThe show method will fire the Calendar/CalendarGroup's beforeHideNav event and hideNav events", "guessedname": "hide", "guessedtype": "function"}, "submit": {"description": "Updates the Calendar/CalendarGroup's pagedate with the currently set month and year if valid.\n<p>\nIf the currently set month/year is invalid, a validation error will be displayed and the \nCalendar/CalendarGroup's pagedate will not be updated.\n</p>", "guessedname": "submit", "guessedtype": "function"}, "renderNavContents": {"return": {"type": "Array", "description": "A reference to the buffer passed in."}, "description": "Renders the contents of the navigator", "param": "{Array} html The HTML buffer to append the HTML to.", "params": [{"type": "Array", "name": "html", "description": " The HTML buffer to append the HTML to."}], "guessedname": "renderNavContents", "guessedtype": "function"}, "init": {"params": [{"type": "Calendar", "name": "cal", "description": " The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached"}], "description": "Init lifecycle method called as part of construction", "guessedname": "init", "guessedtype": "function"}, "setYearError": {"description": "Displays the validation error UI for the year control", "guessedname": "setYearError", "guessedtype": "function"}, "_getYearFromUI": {"protected": "", "return": {"type": "Number", "description": "The year value set in the UI, if valid. null is returned if \nthe UI does not contain a valid year value."}, "description": "Returns the year value, from the Navitator's year UI element", "guessedname": "_getYearFromUI", "guessedtype": "function"}, "_syncMask": {"protected": "", "description": "Used to set the width/height of the mask in pixels to match the Calendar Container.\nCurrently only used for IE6 or IE in quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).\n<p>\nThe method is also registered as an HTMLElement resize listener on the Calendars container element.\n</p>", "guessedname": "_syncMask", "guessedtype": "function"}, "getYear": {"return": {"type": "Number", "description": "The Navigator's current year value"}, "description": "Returns the current year set on the navigator\nNote: This may not be the year set in the UI, if \nthe UI contains an invalid value.", "guessedname": "getYear", "guessedtype": "function"}, "destroy": {"description": "Destroys the Navigator object and any HTML references", "guessedname": "destroy", "guessedtype": "function"}, "getMonth": {"return": {"type": "Number", "description": "The Navigator's current month index"}, "description": "Returns the current month set on the navigator\nNote: This may not be the month set in the UI, if \nthe UI contains an invalid value.", "guessedname": "getMonth", "guessedtype": "function"}, "showMask": {"description": "Displays the navigator's mask element", "guessedname": "showMask", "guessedtype": "function"}, "renderButton": {"return": {"type": "String", "description": "The HTML created for the Button UI"}, "description": "Renders the submit/cancel buttons for the navigator", "guessedname": "renderButtons", "guessedtype": "function"}, "clearErrors": {"description": "Clears all validation and error messages in the UI", "guessedname": "clearErrors", "guessedtype": "function"}, "applyListeners": {"description": "Attaches DOM event listeners to the rendered elements\n<p>\nThe method will call applyKeyListeners, to setup keyboard specific \nlisteners\n</p>", "guessedname": "applyListeners", "guessedtype": "function"}, "purgeListeners": {"description": "Removes/purges DOM event listeners from the rendered elements", "guessedname": "purgeListeners", "guessedtype": "function"}, "clearYearError": {"description": "Removes the validation error UI for the year control", "guessedname": "clearYearError", "guessedtype": "function"}, "clearError": {"description": "Clears the navigator's error message and hides the error panel", "guessedname": "clearError", "guessedtype": "function"}, "validate": {"return": {"type": "Boolean", "description": "true, if the current UI state contains valid values, false if not"}, "description": "Validates the current state of the UI controls", "guessedname": "validate", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "nMonth", "description": " The month index, from 0 (Jan) through 11 (Dec)."}], "description": "Sets the current month on the Navigator, and updates the UI", "guessedname": "setMonth", "guessedtype": "function"}, "_setFirstLastElements": {"protected": "", "description": "Sets up references to the first and last focusable element in the Navigator's UI\nin terms of tab order (Naviagator's firstEl and lastEl properties). The references\nare used to control modality by looping around from the first to the last control\nand visa versa for tab/shift-tab navigation.\n<p>\nSee <a href=\"#applyKeyListeners\">applyKeyListeners</a>\n</p>", "guessedname": "_setFirstLastElements", "guessedtype": "function"}, "_show": {"protected": "", "description": "Protected implementation to handle how UI elements are \nhidden/shown.", "guessedname": "_show", "guessedtype": "function"}, "setInitialFocus": {"description": "Sets the initial focus, based on the configured value", "guessedname": "setInitialFocus", "guessedtype": "function"}, "_handleEnterKey": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture Enter \non the Navigator's year control (yearEl)", "guessedname": "_handleEnterKey", "guessedtype": "function"}, "__getCfg": {"return": {"type": "", "description": "The value of the configuration property"}, "description": "Retrieve Navigator configuration values from \nthe parent Calendar/CalendarGroup's config value.\n<p>\nIf it has not been set in the user provided configuration, the method will \nreturn the default value of the configuration property, as set in DEFAULT_CONFIG\n</p>", "private": "", "params": [{"type": "String", "name": "Case", "description": " sensitive property name."}, {"type": "Boolean", "name": "true,", "description": " if the property is a string property, false if not."}], "guessedname": "__getCfg", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "nYear", "description": " The full year value to set the Navigator to."}], "description": "Sets the current year on the Navigator, and updates the UI. If the \nprovided year is invalid, it will not be set.", "guessedname": "setYear", "guessedtype": "function"}, "_handleTabKey": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture Tab \non the last control (lastCtrl) in the Navigator.", "guessedname": "_handleTabKey", "guessedtype": "function"}, "createMask": {"description": "Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups\ncontainer.", "guessedname": "createMask", "guessedtype": "function"}, "purgeKeyListeners": {"description": "Removes/purges DOM listeners for keyboard support", "guessedname": "purgeKeyListeners", "guessedtype": "function"}, "renderYear": {"return": {"type": "Array", "description": "A reference to the buffer passed in."}, "params": [{"type": "Array", "name": "html", "description": " The HTML buffer to append the HTML to."}], "description": "Renders the year label and control for the navigator", "guessedname": "renderYear", "guessedtype": "function"}, "_updateYearUI": {"protected": "", "description": "Updates the Navigator's year UI, based on the year value set on the Navigator object", "guessedname": "_updateYearUI", "guessedtype": "function"}}, "file": "CalendarNavigator.js", "guessedtype": "function", "shortname": "CalendarNavigator", "properties": {"_DEFAULT_CFG": {"description": "Object literal containing the default configuration values for the CalendarNavigator", "deprecated": "Made public. See the public DEFAULT_CONFIG property", "protected": "", "static": "", "guessedname": "_DEFAULT_CFG", "guessedtype": "property", "type": "Object"}, "YAHOO.widget.CalendarNavigator.YR_PATTERN": {"type": "RegExp", "static": "", "description": "Regular expression used to validate the year input", "guessedname": "YR_PATTERN", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.UPDATE_DELAY": {"type": "Number", "static": "", "description": "Artificial delay (in ms) between the time the Navigator is hidden\nand the Calendar/CalendarGroup state is updated. Allows the user\nthe see the Calendar/CalendarGroup page changing. If set to 0\nthe Calendar/CalendarGroup page will be updated instantly", "guessedname": "UPDATE_DELAY", "guessedtype": "property"}, "lastCtrl": {"type": "HTMLElement", "description": "Reference to the last focusable control in the navigator (by default cancelEl)", "guessedname": "lastCtrl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.MONTH_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the month control.", "static": "", "guessedname": "MONTH_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "errorEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to display validation errors", "guessedname": "errorEl", "guessedtype": "property"}, "submitEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to update the Calendar/Calendar group\nwith the month/year values", "guessedname": "submitEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT": {"type": "String", "static": "", "description": "Class applied to default controls", "guessedname": "DEFAULT", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.ID_SUFFIX": {"description": "The suffix added to the Calendar/CalendarGroup's ID, to generate\na unique ID for the Navigator and it's bounding box.", "static": "", "guessedname": "ID_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE": {"type": "String", "static": "", "description": "Class applied to the Calendar/CalendarGroup's bounding box to indicate\nthe Navigator is currently visible", "guessedname": "NAV_VISIBLE", "guessedtype": "property"}, "id": {"type": "String", "description": "The unique ID for this CalendarNavigator instance", "guessedname": "id", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YEAR_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the year control.", "static": "", "guessedname": "YEAR_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "firstCtrl": {"type": "HTMLElement", "description": "Reference to the first focusable control in the navigator (by default monthEl)", "guessedname": "firstCtrl", "guessedtype": "property"}, "__isIEQuirks": {"private": "", "description": "Private flag, to identify IE Quirks", "guessedname": "ie", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.TRIM": {"type": "RegExp", "static": "", "description": "Regular expression used to trim strings", "guessedname": "TRIM", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.MONTH": {"type": "String", "static": "", "description": "Class applied to the month label/control bounding box", "guessedname": "MONTH", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YR_MINOR_INC": {"type": "Number", "static": "", "description": "The amount by which to increment the current year value,\nwhen the arrow up/down key is pressed on the year control", "guessedname": "YR_MINOR_INC", "guessedtype": "property"}, "yearEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to input the year", "guessedname": "yearEl", "guessedtype": "property"}, "navEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to render the navigator's bounding box", "guessedname": "navEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.MASK": {"type": "String", "static": "", "description": "Class applied to the Navigator mask's bounding box", "guessedname": "MASK", "guessedtype": "property"}, "monthEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to input the month", "guessedname": "monthEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YR_MAJOR_INC": {"type": "Number", "static": "", "description": "The amount by which to increment the current year value,\nwhen the page up/down key is pressed on the year control", "guessedname": "YR_MAJOR_INC", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES": {"type": "Object", "static": "", "description": "YAHOO.widget.CalendarNavigator.CLASSES contains constants\nfor the class values applied to the CalendarNaviatgator's \nDOM elements", "guessedname": "CLASSES", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.ERROR": {"type": "String", "static": "", "description": "Class applied to the validation error area's bounding box", "guessedname": "ERROR", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.NAV": {"type": "String", "static": "", "description": "Class applied to the Calendar Navigator's bounding box", "guessedname": "NAV", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS": {"type": "String", "static": "", "description": "Class applied to the submit/cancel button's bounding box", "guessedname": "BUTTONS", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.INVALID": {"type": "String", "static": "", "description": "Class applied to controls with invalid data (e.g. a year input field with invalid an year)", "guessedname": "INVALID", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.ERROR_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the error bounding box.", "static": "", "guessedname": "ERROR_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarNavigator.CLASSES.BUTTON": {"type": "String", "static": "", "description": "Class applied to buttons wrapping element", "guessedname": "BUTTON", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL": {"type": "String", "static": "", "description": "Class applied to the year input control", "guessedname": "YEAR_CTRL", "guessedtype": "property"}, "_year": {"protected": "", "type": "Number", "description": "Internal state property for the current year displayed in the navigator", "guessedname": "_year", "guessedtype": "property"}, "maskEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to render the navigator's mask", "guessedname": "maskEl", "guessedtype": "property"}, "DEFAULT_CONFIG": {"type": "Object", "static": "", "description": "Object literal containing the default configuration values for the CalendarNavigator\nThe configuration object is expected to follow the format below, with the properties being\ncase sensitive.\n<dl>\n<dt>strings</dt>\n<dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI\n<dl>\n<dt>month</dt><dd><em>String</em> : The string to use for the month label. Defaults to \"Month\".</dd>\n<dt>year</dt><dd><em>String</em> : The string to use for the year label. Defaults to \"Year\".</dd>\n<dt>submit</dt><dd><em>String</em> : The string to use for the submit button label. Defaults to \"Okay\".</dd>\n<dt>cancel</dt><dd><em>String</em> : The string to use for the cancel button label. Defaults to \"Cancel\".</dd>\n<dt>invalidYear</dt><dd><em>String</em> : The string to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>\n</dl>\n</dd>\n<dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>\n<dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>\n</dl>", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.YEAR": {"type": "String", "static": "", "description": "Class applied to the year label/control bounding box", "guessedname": "YEAR", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the \"Cancel\" button.", "static": "", "guessedname": "CANCEL_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "__isMac": {"private": "", "description": "Private flag, to identify MacOS", "guessedname": "__isMac", "guessedtype": "property"}, "_doc": {"protected": "", "type": "HTMLDocument", "description": "The document containing the Calendar/Calendar group instance", "guessedname": "_doc", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL": {"type": "String", "static": "", "description": "Class applied to the month input control", "guessedname": "MONTH_CTRL", "guessedtype": "property"}, "_month": {"protected": "", "type": "Number", "description": "Internal state property for the current month index displayed in the navigator", "guessedname": "_month", "guessedtype": "property"}, "__rendered": {"guessedname": "__rendered", "type": "Boolean", "description": "Private internal state property which indicates whether or not the \nNavigator has been rendered.", "private": "", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS": {"type": "Number", "static": "", "description": "The number of digits to which the year input control is to be limited.", "guessedname": "YR_MAX_DIGITS", "guessedtype": "property"}, "cal": {"type": "{Calendar|CalendarGroup}", "description": "The Calendar/CalendarGroup instance to which the navigator belongs", "guessedname": "cal", "guessedtype": "property"}, "cancelEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to hide the navigator without updating the \nCalendar/Calendar group", "guessedname": "cancelEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the \"Submit\" button.", "static": "", "guessedname": "SUBMIT_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The CalendarNavigator is used along with a Calendar/CalendarGroup to \nprovide a Month/Year popup navigation control, allowing the user to navigate \nto a specific month/year in the Calendar/CalendarGroup without having to \nscroll through months sequentially"}, "YAHOO.util.Selector": {"name": "YAHOO.util.Selector", "namespace": "YAHOO.util", "module": "selector", "guessedname": "Selector", "methods": {"test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "static": "", "guessedname": "test", "guessedtype": "function", "params": [{"type": "HTMLElement | String", "name": "node", "description": " An id or node reference to the HTMLElement being tested."}, {"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}]}, "filter": {"return": {"type": "array", "description": "An array of nodes from the supplied array that match the given selector."}, "description": "Filters a set of nodes based on a given CSS selector.", "static": "", "guessedname": "filter", "guessedtype": "function", "params": [{"type": "array", "name": "nodes", "description": " A set of nodes/ids to filter."}, {"type": "string", "name": "selector", "description": " The selector used to test each node."}]}, "_tokenize": {"description": "Break selector into token units per simple selector.\nCombinator is attached to left-hand selector.", "guessedname": "_tokenize", "guessedtype": "function"}, "query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement | String", "name": "root", "description": " optional An id or HTMLElement to start the query from. Defaults to Selector.document."}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}}, "static": "", "file": "Selector.js", "guessedtype": "property", "shortname": "Selector", "properties": {"attrAliases": {"type": "object", "description": "Mapping of attributes to aliases, normally to work around HTMLAttributes\nthat conflict with JS reserved words.", "guessedname": "attrAliases", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "document": {"default": "window.document", "type": "object", "description": "Default document for use queries", "guessedname": "document", "guessedtype": "property"}, "shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "pseudos": {"type": "object", "description": "List of pseudo-classes and corresponding boolean functions. \nThese functions are called with the current node, and any value that was parsed with the pseudo regex.", "guessedname": "pseudos", "guessedtype": "property"}}, "description": "Provides helper methods for collecting and filtering DOM elements."}, "YAHOO.widget.Paginator.ui.YourComponent": {"properties": {"button": {"guessedname": "button", "type": "HTMLElement", "description": "Describe the node that will be stored in this property", "private": "", "guessedtype": "property"}}, "name": "YAHOO.widget.Paginator.ui.YourComponent", "for": "YAHOO.widget.Paginator", "innerClasses": ["YAHOO.widget.Paginator"], "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "Describe the ui Component"}], "namespace": "YAHOO.widget.Paginator.ui", "module": "paginator", "events": {"beforeMyAttrChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMyAttrChange", "description": "Fires before the value for the configuration attribute 'myAttr' changes. Return false to cancel the attribute change."}, "myAttrChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "myAttrChange", "description": "Fires when the value for the configuration attribute 'myAttr' changes."}}, "guessedname": "YourComponent", "methods": {"initListeners": {"description": "Subscribe to the Paginator's events that will affect this component's ui", "guessedname": "initListeners", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}, "initUI": {"guessedname": "_initUI", "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Initialize the DOM nodes managed by this component", "private": "", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Make any necessary changes to the component nodes", "guessedname": "update", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Paginator", "name": "p", "description": "  Paginator instance to decorate"}], "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.", "guessedname": "init", "guessedtype": "function"}, "onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for a DOM event from a managed element.  Pass new value to\nPaginator.setStartIndex(..), .setPage(..) etc to fire off changeRequest\nevents.  DO NOT modify the managed element's state here.  That should\nhappen in response to the Paginator's recordOffsetChange event (et al)", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Remove the generated DOM structure", "guessedname": "destroy", "guessedtype": "function"}, "bindUI": {"private": "", "description": "Attach DOM event listeners to the nodes managed by this component", "guessedname": "_bindUI", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  the calling change event"}], "description": "Make more substantial changes in a separate method if necessary", "guessedname": "rebuild", "guessedtype": "function"}}, "file": "UIComponentTemplate.js", "guessedtype": "function", "shortname": "YourComponent", "configs": {"myAttr": {"default": "'foo'", "description": "Describe your attribute"}}, "description": "Describe the ui Component"}, "YAHOO.util.History": {"name": "YAHOO.util.History", "constructors": [{"description": "The History class provides the ability to use the back/forward navigation\nbuttons in a DHTML application. It also allows a DHTML application to\nbe bookmarked in a specific state."}], "namespace": "YAHOO.util", "module": "history", "events": {"onLoadEvent": {"see": "onReady", "description": "Fired when the Browser History Manager is ready. If you subscribe to\nthis event after the Browser History Manager has been initialized,\nit will not fire. Therefore, it is recommended to use the onReady\nmethod instead.", "guessedname": "onLoadEvent", "guessedtype": "property"}}, "guessedname": "History", "methods": {"getCurrentState": {"return": {"type": "string", "description": "The current state of the specified module."}, "description": "Returns the current state of the specified module.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}], "guessedname": "getCurrentState", "guessedtype": "function", "public": ""}, "_updateIFrame": {"return": {"type": "boolean", "description": "true if successful. false otherwise."}, "description": "Update the IFrame with our new state.", "private": ""}, "_handleFQStateChange": {"params": [{"type": "string", "name": "fqstate", "description": " Fully qualified state"}], "description": "Sets the new currentState attribute of all modules depending on the new\nfully qualified state. Also notifies the modules which current state has\nchanged.", "private": ""}, "onReady": {"see": "onLoadEvent", "params": [{"type": "function", "name": "fn", "description": " what to execute when the Browser History Manager is ready."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as a parameter to fn."}, {"type": "boolean|object", "name": "overrideContext", "description": " If true, the obj passed in becomes fn's execution scope."}], "description": "Executes the supplied callback when the Browser History Manager is\nready. This will execute immediately if called after the Browser\nHistory Manager onLoad event has fired.", "guessedname": "onReady", "guessedtype": "function"}, "navigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Call this method when you want to store a new entry in the browser's history.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}, {"type": "string", "name": "state", "description": " String representing the new state of the specified module."}], "guessedname": "navigate", "guessedtype": "function", "public": ""}, "_initialize": {"description": "Finish up the initialization of the Browser History Manager.", "private": ""}, "register": {"params": [{"type": "string", "name": "module", "description": " Non-empty string uniquely identifying the\nmodule you wish to register."}, {"type": "string", "name": "initialState", "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."}, {"type": "function", "name": "onStateChange", "description": " Callback called when the\nstate of the specified module has changed."}, {"type": "object", "name": "obj", "description": " An arbitrary object that will be passed as a\nparameter to the handler."}, {"type": "boolean", "name": "overrideContext", "description": " If true, the obj passed in becomes the\nexecution scope of the listener."}], "description": "Registers a new module.", "guessedname": "register", "guessedtype": "function"}, "_checkIframeLoaded": {"description": "Periodically checks whether our internal IFrame is ready to be used.", "private": ""}, "getBookmarkedState": {"return": {"type": "string", "description": "The bookmarked state of the specified module."}, "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}], "guessedname": "getBookmarkedState", "guessedtype": "function", "public": ""}, "initialize": {"public": "", "params": [{"type": "string|HTML Element", "name": "stateField", "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."}, {"type": "string|HTML Element", "name": "histFrame", "description": " IFrame used to store\nthe history (only required on Internet Explorer)"}], "description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.", "guessedname": "initialize", "guessedtype": "function"}, "_storeStates": {"description": "Stores all the registered modules' initial state and current state.\nOn Safari, we also store all the fully qualified states visited by\nthe application within a single browser session. The storage takes\nplace in the form field specified during initialization.", "private": ""}, "getQueryStringParameter": {"return": {"type": "string", "description": "The value of the specified parameter, or null."}, "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.", "params": [{"type": "string", "name": "paramName", "description": " Name of the parameter we want to look up."}, {"type": "string", "name": "queryString", "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."}], "guessedname": "getQueryStringParameter", "guessedtype": "function", "public": ""}, "_getHash": {"return": {"type": "string", "description": "The hash portion of the document's location"}, "description": "location.hash is a bit buggy on Opera. I have seen instances where\nnavigating the history using the back/forward buttons, and hence\nchanging the URL, would not change location.hash. That's ok, the\nimplementation of an equivalent is trivial.", "private": ""}, "multiNavigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Call this method when you want to store a new entry in the browser's history.", "params": [{"type": "object", "name": "states", "description": " Associative array of module-state pairs to set simultaneously."}], "guessedname": "multiNavigate", "guessedtype": "function", "public": ""}}, "file": "history.js", "guessedtype": "function", "shortname": "History", "properties": {"_histFrame": {"description": "Our hidden IFrame used to store the browsing history.", "default": "null", "private": "", "guessedname": "_histFrame", "guessedtype": "property", "type": "HTMLIFrameElement"}, "_initialized": {"description": "Flag used to tell whether YAHOO.util.History.initialize has been called.", "default": "false", "private": "", "guessedname": "_initialized", "guessedtype": "property", "type": "boolean"}, "_stateField": {"description": "INPUT field (with type=\"hidden\" or type=\"text\") or TEXTAREA.\nThis field keeps the value of the initial state, current state\nthe list of all states across pages within a single browser session.", "default": "null", "private": "", "guessedname": "_stateField", "guessedtype": "property", "type": "HTMLInputElement|HTMLTextAreaElement"}, "_modules": {"description": "List of registered modules.", "default": "[]", "private": "", "guessedname": "_modules", "guessedtype": "property", "type": "array"}, "_fqstates": {"description": "List of fully qualified states. This is used only by Safari.", "default": "[]", "private": "", "guessedname": "_fqstates", "guessedtype": "property", "type": "array"}}, "description": "The History class provides the ability to use the back/forward navigation\nbuttons in a DHTML application. It also allows a DHTML application to\nbe bookmarked in a specific state."}, "YAHOO.widget.DateNode": {"name": "YAHOO.widget.DateNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node.\nProviding a string is the same as providing an object with a single property named label.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private nor functions.\nAll attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"}], "description": "A Date-specific implementation that differs from TextNode in that it uses \nYAHOO.widget.Calendar as an in-line editor, if available\nIf Calendar is not available, it behaves as a plain TextNode."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "DateNode", "methods": {"getEditorValue": {"return": {"type": "string", "description": "date entered"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Returns the value from the input element.\nOverrides Node.getEditorValue.", "guessedname": "getEditorValue", "guessedtype": "function"}, "fillEditorContainer": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "If YAHOO.widget.Calendar is available, it will pop up a Calendar to enter a new date.  Otherwise, it falls back to a plain &lt;input&gt;  textbox", "guessedname": "fillEditorContainer", "guessedtype": "function"}, "displayEditedValue": {"params": [{"type": "string", "name": "value", "description": "  date to be displayed and stored in the node"}, {"type": "YAHOO.widget.TreeView.editorData", "name": "editorData", "description": "   a shortcut to the static object holding editing information"}], "description": "Finally displays the newly entered date in the tree.\nOverrides Node.displayEditedValue.", "guessedname": "displayEditedValue", "guessedtype": "function"}, "getNodeDefinition": {"return": {"type": "Object | false", "description": "definition of the node or false if this node or any descendant is defined as dynamic"}, "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.", "guessedname": "getNodeDefinition", "guessedtype": "function"}}, "extends": "YAHOO.widget.TextNode", "superclass": "YAHOO.widget.TextNode", "file": "DateNode.js", "guessedtype": "function", "shortname": "DateNode", "properties": {"_type": {"description": "The node type", "default": "\"DateNode\"", "private": "", "guessedname": "_type", "guessedtype": "property", "type": "string"}, "calendarConfig": {"description": "Configuration object for the Calendar editor, if used.\nSee <a href=\"http://developer.yahoo.com/yui/calendar/#internationalization\">http://developer.yahoo.com/yui/calendar/#internationalization</a>", "guessedname": "calendarConfig", "guessedtype": "property"}}, "description": "A Date-specific implementation that differs from TextNode in that it uses \nYAHOO.widget.Calendar as an in-line editor, if available\nIf Calendar is not available, it behaves as a plain TextNode."}, "YAHOO.widget.BarSeries": {"name": "YAHOO.widget.BarSeries", "constructors": [{"description": "BarSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "BarSeries", "uses": ["YAHOO.widget.CartesianSeries"], "file": "Series.js", "guessedtype": "function", "shortname": "BarSeries", "description": "BarSeries class for the YUI Charts widget."}, "YAHOO.tool.TestLogger": {"name": "YAHOO.tool.TestLogger", "constructors": [{"params": [{"type": "HTMLElement", "name": "element", "description": " (Optional) The element to create the logger in."}, {"type": "Object", "name": "config", "description": " (Optional) Configuration options for the logger."}], "description": "Displays test execution progress and results, providing filters based on\ndifferent key events."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestLogger", "methods": {"_handleTestRunnerEvent": {"return": {"type": "Void", "description": ""}, "description": "Handles all TestRunner events, outputting appropriate data into the console.", "private": "", "params": [{"type": "Object", "name": "data", "description": " The event data object."}], "guessedname": "_handleTestRunnerEvent", "guessedtype": "function"}, "formatMsg": {"return": {"type": "String", "description": "HTML-formatted message for output to console."}, "description": "Formats message string to HTML for output to console.", "private": "", "params": [{"type": "Object", "name": "oLogMsg", "description": "  Log message object."}], "guessedname": "formatMsg", "guessedtype": "function"}, "clearTestRunner": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Clears the reference to the TestRunner from previous operations. This \nunsubscribes all events and removes the object reference.", "guessedname": "clearTestRunner", "guessedtype": "function"}, "setTestRunner": {"return": {"type": "Void", "description": ""}, "description": "Sets the source test runner that the logger should monitor.", "static": "", "guessedname": "setTestRunner", "guessedtype": "function", "params": [{"type": "YAHOO.tool.TestRunner", "name": "testRunner", "description": " The TestRunner to observe."}]}}, "file": "TestLogger.js", "guessedtype": "function", "shortname": "TestLogger", "description": "Displays test execution progress and results, providing filters based on\ndifferent key events."}, "YAHOO.util.StorageEvent": {"name": "YAHOO.util.StorageEvent", "constructors": [{"params": [{"type": "Object", "name": "storageArea", "description": "  Required. The Storage object that was affected."}, {"type": "String", "name": "key", "description": "  Required. The key being changed; DOMString in HTML 5 spec."}, {"type": "String", "name": "oldValue", "description": "  Required. The old value of the key being changed; DOMString in HTML 5 spec."}, {"type": "String", "name": "newValue", "description": "  Required. The new value of the key being changed; DOMString in HTML 5 spec."}, {"type": "String", "name": "type", "description": "  Required. The storage event type."}], "description": "The StorageEvent class manages the storage events by emulating the HTML 5 implementation."}], "namespace": "YAHOO.util", "module": "Storage", "guessedname": "StorageEvent", "file": "StorageEvent.js", "guessedtype": "function", "shortname": "StorageEvent", "properties": {"key": {"description": "The 'key' attribute represents the key being changed.", "readonly": "", "static": "", "guessedname": "key", "guessedtype": "property", "type": "{String}"}, "url": {"description": "The 'url' attribute represents the address of the document whose key changed.", "readonly": "", "static": "", "guessedname": "url", "guessedtype": "property", "type": "{String}"}, "source": {"description": "The 'source' attribute represents the WindowProxy object of the browsing context of the document whose key changed.", "readonly": "", "static": "", "guessedname": "source", "guessedtype": "property", "type": "{Object}"}, "storageArea": {"description": "The 'storageArea' attribute represents the Storage object that was affected.", "readonly": "", "static": "", "guessedname": "storageArea", "guessedtype": "property", "type": "{Object}"}, "oldValue": {"description": "The 'oldValue' attribute represents the old value of the key being changed.", "readonly": "", "static": "", "guessedname": "oldValue", "guessedtype": "property", "type": "{String}"}, "type": {"description": "The 'type' attribute represents the Storage event type.", "readonly": "", "static": "", "guessedname": "type", "guessedtype": "property", "type": "{Object}"}, "newValue": {"description": "The 'newValue' attribute represents the new value of the key being changed.", "readonly": "", "static": "", "guessedname": "newValue", "guessedtype": "property", "type": "{String}"}}, "description": "The StorageEvent class manages the storage events by emulating the HTML 5 implementation."}, "YAHOO.tool.TestManager": {"name": "YAHOO.tool.TestManager", "namespace": "YAHOO.tool", "module": "yuitest", "events": {"testmanagerbegin": {"static": "", "description": "Fires when the test manager starts running all test pages"}, "testmanagercomplete": {"static": "", "params": [{"type": " pages_passed: int, pages_failed: int, tests_passed: int\ntests_failed: int, passed: string[], failed: string[],\npage_results: {} ", "name": "obj", "description": ""}], "description": "Fires when the test manager finishes running all test pages.  External\ntest runners should subscribe to this event in order to get the\naggregated test results."}, "testpagecomplete": {"static": "", "params": [{"type": "page: string, results: object", "name": "obj", "description": "  the name of the\npage that was loaded, and the test suite results"}], "description": "Fires when a test page is complete"}, "testpagebegin": {"static": "", "params": [{"type": "string", "name": "curPage", "description": "  the page being loaded"}], "description": "Fires when loading a test page"}}, "guessedname": "TestManager", "methods": {"load": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Signals that a test page has been loaded. This should be called from\nwithin the test page itself to notify the TestManager that it is ready.", "guessedname": "load", "guessedtype": "function"}, "_run": {"return": {"type": "Void", "description": ""}, "description": "Loads the next test page into the iframe.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function"}, "stop": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Stops the execution of tests.", "guessedname": "stop", "guessedtype": "function"}, "setPages": {"return": {"type": "Void", "description": ""}, "description": "Sets the pages to be loaded.", "static": "", "guessedname": "setPages", "guessedtype": "function", "params": [{"type": "String[]", "name": "pages", "description": " An array of URLs to load."}]}, "start": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Begins the process of running the tests.", "guessedname": "start", "guessedtype": "function"}, "_processResults": {"return": {"type": "Void", "description": ""}, "description": "Processes the results of a test page run, outputting log messages\nfor failed tests.", "private": "", "static": "", "guessedname": "_processResults", "guessedtype": "function"}, "_handleTestRunnerComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles TestRunner.COMPLETE_EVENT, storing the results and beginning\nthe loop again.", "private": "", "static": "", "guessedname": "_handleTestRunnerComplete", "guessedtype": "function", "params": [{"type": "Object", "name": "data", "description": " Data about the event."}]}}, "static": "", "file": "TestManager.js", "guessedtype": "property", "shortname": "TestManager", "properties": {"_pages": {"type": "String[]", "static": "", "description": "Array of pages to load.", "private": ""}, "TEST_MANAGER_COMPLETE_EVENT": {"static": "", "type": "string", "description": "Constant for the testmanagercomplete custom event", "final": ""}, "_timeoutId": {"type": "int", "static": "", "description": "The timeout ID for the next iteration through the tests.", "private": ""}, "_logger": {"description": "The logger used to output results from the various tests.", "private": "", "static": "", "guessedname": "_logger", "guessedtype": "property", "type": "YAHOO.tool.TestLogger"}, "TEST_PAGE_BEGIN_EVENT": {"static": "", "type": "string", "description": "Constant for the testpagebegin custom event", "final": ""}, "TEST_PAGE_COMPLETE_EVENT": {"static": "", "type": "string", "description": "Constant for the testpagecomplete custom event", "final": ""}, "_curPage": {"type": "String", "static": "", "description": "The URL of the page currently being executed.", "private": ""}, "_results": {"description": "Aggregated results", "private": "", "static": "", "guessedname": "_results", "guessedtype": "property", "type": "Object"}, "TEST_MANAGER_BEGIN_EVENT": {"static": "", "type": "string", "description": "Constant for the testmanagerbegin custom event", "final": ""}, "_frame": {"type": "Window", "static": "", "description": "The frame used to load and run tests.", "private": ""}}, "description": "Runs pages containing test suite definitions."}, "YAHOO.util.Point": {"name": "YAHOO.util.Point", "constructors": [{"params": [{"type": "Int", "name": "x", "description": " The X position of the point"}, {"type": "Int", "name": "y", "description": " The Y position of the point"}], "description": "A point is a region that is special in that it represents a single point on \nthe grid."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Point", "extends": "YAHOO.util.Region", "superclass": "YAHOO.util.Region", "file": "Region.js", "guessedtype": "function", "shortname": "Point", "description": "A point is a region that is special in that it represents a single point on \nthe grid."}, "YAHOO.widget.Tooltip": {"name": "YAHOO.widget.Tooltip", "configs": {"container": {"default": "document.body", "type": "HTMLElement/String", "description": "Specifies the container element that the Tooltip's markup \nshould be rendered into."}, "width": {"default": "null", "type": "String", "description": "String representing the width of the Tooltip.  <em>Please note:\n</em> As of version 2.3 if either no value or a value of \"auto\" \nis specified, and the Toolip's \"container\" configuration property\nis set to something other than <code>document.body</code> or \nits \"context\" element resides outside the immediately visible \nportion of the document, the width of the Tooltip will be \ncalculated based on the offsetWidth of its root HTML and set just \nbefore it is made visible.  The original value will be \nrestored when the Tooltip is hidden. This ensures the Tooltip is \nrendered at a usable width.  For more information see \nYUILibrary bug #1685496 and YUILibrary \nbug #1735423."}, "text": {"default": "null", "type": "String", "description": "Specifies the Tooltip's text."}, "showdelay": {"default": "200", "type": "Number", "description": "The number of milliseconds to wait before showing a Tooltip \non mouseover."}, "disabled": {"default": "false", "type": "Boolean", "description": "Specifies whether or not the tooltip is disabled. Disabled tooltips\nwill not be displayed. If the tooltip is driven by the title attribute\nof the context element, the title attribute will still be removed for \ndisabled tooltips, to prevent default tooltip behavior."}, "preventoverlap": {"default": "true", "type": "Boolean", "description": "Specifies whether the Tooltip should be kept from overlapping \nits context element."}, "context": {"default": "null", "type": "HTMLElement[]/String[]", "description": "Specifies the element or elements that the Tooltip should be \nanchored to on mouseover."}, "autodismissdelay": {"default": "5000", "type": "Number", "description": "The number of milliseconds to wait before automatically \ndismissing a Tooltip after the mouse has been resting on the \ncontext element."}, "xyoffset": {"default": "[0, 25]", "type": "Array", "description": "Specifies the XY offset from the mouse position, where the tooltip should be displayed, specified\nas a 2 element array (e.g. [10, 20]);"}, "hidedelay": {"default": "250", "type": "Number", "description": "The number of milliseconds to wait before hiding a Tooltip \nafter mouseout."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Tooltip <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Overlay. See configuration \ndocumentation for more details."}], "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, \ndisplaying when the user mouses over a particular element, and \ndisappearing on mouse out."}], "namespace": "YAHOO.widget", "module": "container", "events": {"contextMouseOverEvent": {"params": [{"type": "HTMLElement", "name": "context", "description": " The context element which the user just moused over"}, {"type": "DOMEvent", "name": "e", "description": " The DOM event object, associated with the mouse over"}], "description": "CustomEvent fired when user mouses over a context element. Returning false from\na subscriber to this event will prevent the tooltip from being displayed for\nthe current context element.", "guessedname": "contextMouseOverEvent", "guessedtype": "property"}, "contextTriggerEvent": {"params": [{"type": "HTMLElement", "name": "context", "description": " The context element for which the tooltip is triggered"}], "description": "CustomEvent fired just before the tooltip is displayed for the current context.\n<p>\nYou can subscribe to this event if you need to set up the text for the \ntooltip based on the context element for which it is about to be displayed.\n</p>\n<p>This event differs from the beforeShow event in following respects:</p>\n<ol>\n<li>\nWhen moving from one context element to another, if the tooltip is not\nhidden (the <code>hidedelay</code> is not reached), the beforeShow and Show events will not\nbe fired when the tooltip is displayed for the new context since it is already visible.\nHowever the contextTrigger event is always fired before displaying the tooltip for\na new context.\n</li>\n<li>\nThe trigger event provides access to the context element, allowing you to \nset the text of the tooltip based on context element for which the tooltip is\ntriggered.\n</li>\n</ol>\n<p>\nIt is not possible to prevent the tooltip from being displayed\nusing this event. You can use the contextMouseOverEvent if you need to prevent\nthe tooltip from being displayed.\n</p>", "guessedname": "contextTriggerEvent", "guessedtype": "property"}, "contextMouseOutEvent": {"params": [{"type": "HTMLElement", "name": "context", "description": " The context element which the user just moused out of"}, {"type": "DOMEvent", "name": "e", "description": " The DOM event object, associated with the mouse out"}], "description": "CustomEvent fired when the user mouses out of a context element.", "guessedname": "contextMouseOutEvent", "guessedtype": "property"}}, "guessedname": "Tooltip", "methods": {"onContextMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "Object", "name": "obj", "description": " The object argument"}], "description": "The default event handler fired when the user mouses over the \ncontext element.", "guessedname": "onContextMouseOver", "guessedtype": "function"}, "onRender": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"render\" event handler for the Tooltip.", "guessedname": "onRender", "guessedtype": "function"}, "doShow": {"return": {"type": "Number", "description": "The process ID of the timeout function associated \nwith doShow"}, "params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "HTMLElement", "name": "context", "description": " The current context element"}], "description": "Processes the showing of the Tooltip by setting the timeout delay \nand offset of the Tooltip.", "guessedname": "doShow", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Tooltip", "guessedname": "initEvents", "guessedtype": "function"}, "_removeEventListeners": {"protected": "", "description": "Removes all of the DOM event handlers from the HTML\nelement(s) that trigger the display of the tooltip.", "guessedname": "_removeEventListeners", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers,\nthis will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property \nis changed.", "guessedname": "configContext", "guessedtype": "function"}, "doHide": {"description": "Sets the timeout for the auto-dismiss delay, which by default is 5 \nseconds, meaning that a tooltip will automatically dismiss itself \nafter 5 seconds of being displayed.", "guessedname": "doHide", "guessedtype": "function"}, "onContextMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "Object", "name": "obj", "description": " The object argument"}], "description": "The default event handler fired when the user mouses out of \nthe context element.", "guessedname": "onContextMouseOut", "guessedtype": "function"}, "forceUnderlayRedraw": {"description": "Forces the underlay element to be repainted, through the application/removal\nof a yui-force-redraw class to the underlay element.", "guessedname": "forceUnderlayRedraw", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers,\nthis will usually equal the owner."}], "description": "The default event handler fired when the \"container\" property \nis changed.", "guessedname": "configContainer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Tooltip <em>OR</em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Tooltip. \nSee configuration documentation for more details."}], "description": "The Tooltip initialization method. This method is automatically \ncalled by the constructor. A Tooltip is automatically rendered by \nthe init method, and it also is set to be invisible by default, \nand constrained to viewport by default as well.", "guessedname": "init", "guessedtype": "function"}, "onContextMouseMove": {"params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "Object", "name": "obj", "description": " The object argument"}], "description": "The default event handler fired when the user moves the mouse while \nover the context element.", "guessedname": "onContextMouseMove", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"text\" property is changed.", "guessedname": "configText", "guessedtype": "function"}, "preventOverlay": {"params": [{"type": "Number", "name": "pageX", "description": " The x coordinate position of the mouse pointer"}, {"type": "Number", "name": "pageY", "description": " The y coordinate position of the mouse pointer"}], "description": "Fired when the Tooltip is moved, this event handler is used to \nprevent the Tooltip from overlapping with its context element.", "guessedname": "preventOverlap", "guessedtype": "function"}, "destroy": {"description": "Removes the Tooltip element from the DOM and sets all child \nelements to null.", "guessedname": "destroy", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Tooltip"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be \nchanged using the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Tooltip.js", "guessedtype": "function", "shortname": "Tooltip", "properties": {"showProcId": {"type": "int", "description": "The unique process ID associated with the thread responsible \nfor showing the Tooltip.", "guessedname": "showProcId", "guessedtype": "property"}, "YAHOO.widget.Tooltip.CSS_TOOLTIP": {"description": "Constant representing the Tooltip CSS class", "static": "", "guessedname": "CSS_TOOLTIP", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Tooltip's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the Tooltip's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, \ndisplaying when the user mouses over a particular element, and \ndisappearing on mouse out."}}, "version": "2.8.2r1", "namespaces": ["YAHOO.widget", "YAHOO.util", "YAHOO.util.Dom", "YAHOO.util.ImageLoader", "YAHOO.lang", "YAHOO.widget.Paginator.ui", "YAHOO.tool", "YAHOO.tool.TestCase", "YAHOO.tool.TestFormat"]}