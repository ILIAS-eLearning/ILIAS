<?php declare(strict_types=1);
/* Copyright (c) 1998-2017 ILIAS open source, Extended GPL, see docs/LICENSE */

/**
 * Class ilChatroomXMLWriter
 */
class ilChatroomXMLWriter extends ilXmlWriter
{
    protected ilObjChatroom $chat;
    protected ilChatroom $room;

    public function __construct(ilObjChatroom $chat)
    {
        $this->chat = $chat;

        $this->room = ilChatroom::byObjectId($this->chat->getId());
        if (!$this->room) {
            $this->room = new ilChatroom();
            $this->room->setSetting('object_id', $this->chat->getId());
        }

        parent::__construct();
    }

    public function start() : void
    {
        $this->xmlStartTag('Chatroom', null);

        $this->xmlElement('ObjId', null, (string) $this->chat->getId());
        $this->xmlElement('RoomId', null, (string) $this->room->getRoomId());
        $this->xmlElement('Title', null, $this->chat->getTitle());
        $this->xmlElement('Description', null, $this->chat->getDescription());
        $this->xmlElement('OnlineStatus', null, (string) ((int) $this->room->getSetting('online_status')));
        $this->xmlElement('AllowAnonymousAccess', null, (string) ((int) $this->room->getSetting('allow_anonymous')));
        $this->xmlElement('AllowCustomUsernames', null, (string) ((int) $this->room->getSetting('allow_custom_usernames')));
        $this->xmlElement('EnableHistory', null, (string) ((int) $this->room->getSetting('enable_history')));
        $this->xmlElement('RestrictHistory', null, (string) ((int) $this->room->getSetting('restrict_history')));
        $this->xmlElement('PrivateRoomsEnabled', null, (string) ((int) $this->room->getSetting('private_rooms_enabled')));
        $this->xmlElement('DisplayPastMessages', null, (string) ((int) $this->room->getSetting('display_past_msgs')));
        $this->xmlElement('AutoGeneratedUsernameSchema', null, (string) $this->room->getSetting('autogen_usernames'));

        if ($this->room->getRoomId() > 0) {
            $this->exportData();
        }

        $this->xmlEndTag('Chatroom');
    }

    private function exportData() : void
    {
        $privateRooms = $this->room->getPrivateRooms();
        if (count($privateRooms) > 0) {
            $this->xmlStartTag('SubRooms', null);
            foreach ($privateRooms as $privateRoom) {
                $this->xmlStartTag('SubRoom', null);
                $this->xmlElement('SubRoomId', null, (string) ((int) $privateRoom['proom_id']));
                $this->xmlElement('Title', null, (string) $privateRoom['title']);
                $this->xmlElement('Owner', null, (string) ((int) $privateRoom['owner']));
                $this->xmlElement('Closed', null, (string) ((int) $privateRoom['closed']));
                $this->xmlElement('Public', null, (string) ((int) $privateRoom['is_public']));
                $this->xmlElement('CreatedTimestamp', null, (string) ((int) $privateRoom['created']));

                foreach ($this->room->getPrivilegedUsersForPrivateRoom((int) $privateRoom['proom_id']) as $usrId) {
                    $this->xmlElement('PrivilegedUserId', null, (string) $usrId);
                }

                $this->xmlEndTag('SubRoom');
            }
            $this->xmlEndTag('SubRooms');
        }

        $history = $this->room->getHistory(null, null, null, null, false);
        if (count($history) > 0) {
            $this->xmlStartTag('Messages', null);
            foreach ($history as $entry) {
                $this->xmlStartTag('Message', null);
                $this->xmlElement('SubRoomId', null, (string) ((int) $entry['sub_room']));
                $this->xmlElement('Body', null, json_encode($entry['message'], JSON_THROW_ON_ERROR));
                $this->xmlElement('CreatedTimestamp', null, (string) ((int) $entry['timestamp']));
                $this->xmlEndTag('Message');
            }
            $this->xmlEndTag('Messages');
        }
    }

    public function getXML() : string
    {
        // Replace ascii code 11 characters because of problems with xml sax parser
        return str_replace('&#11;', '', $this->xmlDumpMem(false));
    }
}
